
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000500f0  0800615c  0800615c  0000715c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805624c  0805624c  00058014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0805624c  0805624c  0005724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08056254  08056254  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08056254  08056254  00057254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08056258  08056258  00057258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0805625c  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000014  08056270  00058014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08056270  000582c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011de8  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c64  00000000  00000000  00069e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0006ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  0006dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197fe  00000000  00000000  0006e92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0d  00000000  00000000  0008812d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ca1d  00000000  00000000  0009cb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139557  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  0013959c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000345  00000000  00000000  0013dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013dff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006144 	.word	0x08006144

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08006144 	.word	0x08006144

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
  MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 8000506:	f001 f8bb 	bl	8001680 <MCP2515_Reset>
  HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 fd20 	bl	8001f50 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  RXF1reg.RXF1SIDH = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800054c:	2308      	movs	r3, #8
 800054e:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	77fb      	strb	r3, [r7, #31]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	76fb      	strb	r3, [r7, #27]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8000584:	2300      	movs	r3, #0
 8000586:	74fb      	strb	r3, [r7, #19]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 800058c:	2308      	movs	r3, #8
 800058e:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000598:	f001 f804 	bl	80015a4 <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
  {
    return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e065      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80005ac:	f001 f81c 	bl	80015e8 <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
  {
    return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e05b      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f001 f8e5 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f001 f8df 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f8d8 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f001 f8d1 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f001 f8ca 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f001 f8c3 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f001 f8bc 	bl	8001798 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f001 f8b5 	bl	8001798 <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f001 f83e 	bl	80016b0 <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f001 f883 	bl	8001748 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f001 f87f 	bl	8001748 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f001 f87b 	bl	8001748 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f001 f877 	bl	8001748 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f001 f873 	bl	8001748 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000662:	f000 ffef 	bl	8001644 <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
    return false;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <CANSPI_Initialize+0x178>
  
  return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000694:	2200      	movs	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000698:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800069a:	2200      	movs	r2, #0
 800069c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <CANSPI_Transmit+0x120>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80006a4:	f001 f8f4 	bl	8001890 <MCP2515_ReadStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ae:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 80006b0:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 fffa 	bl	80016b0 <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 80006c0:	202d      	movs	r0, #45	@ 0x2d
 80006c2:	f000 fff5 	bl	80016b0 <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006ca:	2030      	movs	r0, #48	@ 0x30
 80006cc:	f000 fff0 	bl	80016b0 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f000 ffeb 	bl	80016b0 <MCP2515_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f000 ffe6 	bl	80016b0 <MCP2515_ReadByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d115      	bne.n	8000722 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6858      	ldr	r0, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4a28      	ldr	r2, [pc, #160]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000700:	4619      	mov	r1, r3
 8000702:	f000 f928 	bl	8000956 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1a      	ldrb	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3309      	adds	r3, #9
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000710:	2040      	movs	r0, #64	@ 0x40
 8000712:	f001 f86f 	bl	80017f4 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000716:	2081      	movs	r0, #129	@ 0x81
 8000718:	f001 f89c 	bl	8001854 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e038      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <CANSPI_Transmit+0x124>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800073a:	4619      	mov	r1, r3
 800073c:	f000 f90b 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a1a      	ldrb	r2, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3309      	adds	r3, #9
 8000748:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800074a:	2042      	movs	r0, #66	@ 0x42
 800074c:	f001 f852 	bl	80017f4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000750:	2082      	movs	r0, #130	@ 0x82
 8000752:	f001 f87f 	bl	8001854 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e01b      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <CANSPI_Transmit+0x124>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d114      	bne.n	8000794 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000774:	4619      	mov	r1, r3
 8000776:	f000 f8ee 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1a      	ldrb	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3309      	adds	r3, #9
 8000782:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000784:	2044      	movs	r0, #68	@ 0x44
 8000786:	f001 f835 	bl	80017f4 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800078a:	2084      	movs	r0, #132	@ 0x84
 800078c:	f001 f862 	bl	8001854 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000034 	.word	0x20000034
 80007a4:	20000030 	.word	0x20000030

080007a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80007b4:	f001 f88c 	bl	80018d0 <MCP2515_GetRxStatus>
 80007b8:	4603      	mov	r3, r0
 80007ba:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d066      	beq.n	8000896 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b40      	cmp	r3, #64	@ 0x40
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7b3b      	ldrb	r3, [r7, #12]
 80007dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	220d      	movs	r2, #13
 80007fa:	4619      	mov	r1, r3
 80007fc:	2090      	movs	r0, #144	@ 0x90
 80007fe:	f000 ff7d 	bl	80016fc <MCP2515_ReadRxSequence>
 8000802:	e00c      	b.n	800081e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b80      	cmp	r3, #128	@ 0x80
 800080e:	d106      	bne.n	800081e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	220d      	movs	r2, #13
 8000816:	4619      	mov	r1, r3
 8000818:	2094      	movs	r0, #148	@ 0x94
 800081a:	f000 ff6f 	bl	80016fc <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800081e:	7b3b      	ldrb	r3, [r7, #12]
 8000820:	f003 0318 	and.w	r3, r3, #24
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b10      	cmp	r3, #16
 8000828:	d10c      	bne.n	8000844 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2202      	movs	r2, #2
 800082e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000830:	7cb8      	ldrb	r0, [r7, #18]
 8000832:	7cf9      	ldrb	r1, [r7, #19]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	f000 f832 	bl	80008a0 <convertReg2ExtendedCANid>
 800083c:	4602      	mov	r2, r0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	e00b      	b.n	800085c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800084a:	7c3b      	ldrb	r3, [r7, #16]
 800084c:	7c7a      	ldrb	r2, [r7, #17]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f863 	bl	800091c <convertReg2StandardCANid>
 8000856:	4602      	mov	r2, r0
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800085c:	7d3a      	ldrb	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000862:	7d7a      	ldrb	r2, [r7, #21]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000868:	7dba      	ldrb	r2, [r7, #22]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000874:	7e3a      	ldrb	r2, [r7, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800087a:	7e7a      	ldrb	r2, [r7, #25]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000880:	7eba      	ldrb	r2, [r7, #26]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000886:	7efa      	ldrb	r2, [r7, #27]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800088c:	7f3a      	ldrb	r2, [r7, #28]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000896:	7ffb      	ldrb	r3, [r7, #31]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	717b      	strb	r3, [r7, #5]
 80008ba:	4613      	mov	r3, r2
 80008bc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4413      	add	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4413      	add	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4413      	add	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4413      	add	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000910:	697b      	ldr	r3, [r7, #20]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc90      	pop	{r4, r7}
 800091a:	4770      	bx	lr

0800091c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000948:	68fb      	ldr	r3, [r7, #12]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	460b      	mov	r3, r1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d12e      	bne.n	80009cc <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f023 031f 	bic.w	r3, r3, #31
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	4413      	add	r3, r2
 80009a8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	3308      	adds	r3, #8
 80009ae:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	f023 0314 	bic.w	r3, r3, #20
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80009ca:	e013      	b.n	80009f4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a04:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	2400      	movs	r4, #0
 8000a08:	9405      	str	r4, [sp, #20]
 8000a0a:	9406      	str	r4, [sp, #24]
 8000a0c:	9407      	str	r4, [sp, #28]
 8000a0e:	9408      	str	r4, [sp, #32]
 8000a10:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	9400      	str	r4, [sp, #0]
 8000a14:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <MX_GPIO_Init+0x16c>)
 8000a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a18:	f042 0204 	orr.w	r2, r2, #4
 8000a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a20:	f002 0204 	and.w	r2, r2, #4
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a28:	9401      	str	r4, [sp, #4]
 8000a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a34:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	9402      	str	r4, [sp, #8]
 8000a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a40:	f042 0201 	orr.w	r2, r2, #1
 8000a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a48:	f002 0201 	and.w	r2, r2, #1
 8000a4c:	9202      	str	r2, [sp, #8]
 8000a4e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	9403      	str	r4, [sp, #12]
 8000a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a54:	f042 0202 	orr.w	r2, r2, #2
 8000a58:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a5c:	f002 0202 	and.w	r2, r2, #2
 8000a60:	9203      	str	r2, [sp, #12]
 8000a62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a64:	9404      	str	r4, [sp, #16]
 8000a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a68:	f042 0208 	orr.w	r2, r2, #8
 8000a6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	9304      	str	r3, [sp, #16]
 8000a76:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 8000a78:	4f3d      	ldr	r7, [pc, #244]	@ (8000b70 <MX_GPIO_Init+0x170>)
 8000a7a:	4622      	mov	r2, r4
 8000a7c:	f240 3181 	movw	r1, #897	@ 0x381
 8000a80:	4638      	mov	r0, r7
 8000a82:	f002 fdb3 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	210e      	movs	r1, #14
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	f002 fdae 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a90:	4e38      	ldr	r6, [pc, #224]	@ (8000b74 <MX_GPIO_Init+0x174>)
 8000a92:	4622      	mov	r2, r4
 8000a94:	2120      	movs	r1, #32
 8000a96:	4630      	mov	r0, r6
 8000a98:	f002 fda8 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	f002 fda2 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin PCHG_RLY_CTRL_Pin AIR_P_CTRL_Pin AIR_N_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin;
 8000aa8:	f240 3381 	movw	r3, #897	@ 0x381
 8000aac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2501      	movs	r5, #1
 8000ab0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	a905      	add	r1, sp, #20
 8000ab8:	4638      	mov	r0, r7
 8000aba:	f002 fbfb 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000abe:	f04f 0902 	mov.w	r9, #2
 8000ac2:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	f04f 0803 	mov.w	r8, #3
 8000ace:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	a905      	add	r1, sp, #20
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f002 fbed 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8000ada:	f04f 0a0c 	mov.w	sl, #12
 8000ade:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	a905      	add	r1, sp, #20
 8000aea:	4638      	mov	r0, r7
 8000aec:	f002 fbe2 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af0:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	a905      	add	r1, sp, #20
 8000b04:	4630      	mov	r0, r6
 8000b06:	f002 fbd5 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	a905      	add	r1, sp, #20
 8000b16:	4630      	mov	r0, r6
 8000b18:	f002 fbcc 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTD_BTN_Pin PB5 */
  GPIO_InitStruct.Pin = RTD_BTN_Pin|GPIO_PIN_5;
 8000b1c:	2324      	movs	r3, #36	@ 0x24
 8000b1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	a905      	add	r1, sp, #20
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_GPIO_Init+0x178>)
 8000b28:	f002 fbc4 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_BTN_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_BTN_Pin;
 8000b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PRECHARGE_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b36:	a905      	add	r1, sp, #20
 8000b38:	4630      	mov	r0, r6
 8000b3a:	f002 fbbb 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8000b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	a905      	add	r1, sp, #20
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f002 fbb0 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	a905      	add	r1, sp, #20
 8000b5e:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <MX_GPIO_Init+0x17c>)
 8000b60:	f002 fba8 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	b00a      	add	sp, #40	@ 0x28
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <MX_DMA_Init>:
{
 8000b80:	b510      	push	{r4, lr}
 8000b82:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b84:	2400      	movs	r4, #0
 8000b86:	9400      	str	r4, [sp, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_DMA_Init+0x54>)
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b8c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b94:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000b98:	9200      	str	r2, [sp, #0]
 8000b9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9c:	9401      	str	r4, [sp, #4]
 8000b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ba0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	f001 ffd6 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f001 ffef 	bl	8002b9e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	2038      	movs	r0, #56	@ 0x38
 8000bc6:	f001 ffce 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bca:	2038      	movs	r0, #56	@ 0x38
 8000bcc:	f001 ffe7 	bl	8002b9e <HAL_NVIC_EnableIRQ>
}
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <updateRpm>:
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <updateRpm+0x20>)
 8000bda:	7ad3      	ldrb	r3, [r2, #11]
			| (rxMessage.frame.data3 << 8));
 8000bdc:	7b12      	ldrb	r2, [r2, #12]
 8000bde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bee:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <updateRpm+0x24>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	20000048 	.word	0x20000048

08000c00 <updateBMSDiagnostics>:
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <updateBMSDiagnostics+0x4c>)
 8000c02:	7a93      	ldrb	r3, [r2, #10]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	7a51      	ldrb	r1, [r2, #9]
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	ee07 3a90 	vmov	s15, r3
	float pack_current = pack_current_raw * 0.1f;
 8000c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c14:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000c50 <updateBMSDiagnostics+0x50>
 8000c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
	uint16_t pack_voltage_raw = (rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 8000c1c:	7b11      	ldrb	r1, [r2, #12]
 8000c1e:	7ad3      	ldrb	r3, [r2, #11]
 8000c20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000c24:	ee07 3a10 	vmov	s14, r3
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c2c:	ee27 7a26 	vmul.f32	s14, s14, s13
	bool is_ready = (rxMessage.frame.data6) & 0x01;
 8000c30:	7bd2      	ldrb	r2, [r2, #15]
 8000c32:	f002 0201 	and.w	r2, r2, #1
	bms_diagnostics.inverterActive = is_ready ? 1 : 0;
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <updateBMSDiagnostics+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
	bms_diagnostics.packCurrent    = (int)pack_current;
 8000c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]
	bms_diagnostics.packVoltage    = (int)pack_voltage;
 8000c42:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000c46:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8000c4a:	4770      	bx	lr
 8000c4c:	200000ac 	.word	0x200000ac
 8000c50:	3dcccccd 	.word	0x3dcccccd
 8000c54:	20000050 	.word	0x20000050

08000c58 <updateInverterVolts>:
	int16_t inverter_dc_volts_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <updateInverterVolts+0x28>)
 8000c5a:	7a93      	ldrb	r3, [r2, #10]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	7a52      	ldrb	r2, [r2, #9]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	ee07 3a90 	vmov	s15, r3
	float inverter_dc_volts = inverter_dc_volts_raw * 0.1f;
 8000c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000c84 <updateInverterVolts+0x2c>
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
	inverter_diagnostics.inverterDCVolts    = (int)inverter_dc_volts;
 8000c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <updateInverterVolts+0x30>)
 8000c7a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000c7e:	4770      	bx	lr
 8000c80:	200000ac 	.word	0x200000ac
 8000c84:	3dcccccd 	.word	0x3dcccccd
 8000c88:	20000048 	.word	0x20000048

08000c8c <readFromCAN>:
void readFromCAN() {
 8000c8c:	b508      	push	{r3, lr}
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <readFromCAN+0x30>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c94:	d009      	beq.n	8000caa <readFromCAN+0x1e>
	if (rxMessage.frame.id == INVERTER_VOLTAGE_READ_ID) {
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <readFromCAN+0x30>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2ba7      	cmp	r3, #167	@ 0xa7
 8000c9c:	d008      	beq.n	8000cb0 <readFromCAN+0x24>
	if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <readFromCAN+0x30>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 6fd6 	cmp.w	r3, #1712	@ 0x6b0
 8000ca6:	d006      	beq.n	8000cb6 <readFromCAN+0x2a>
}
 8000ca8:	bd08      	pop	{r3, pc}
		updateRpm();
 8000caa:	f7ff ff95 	bl	8000bd8 <updateRpm>
 8000cae:	e7f2      	b.n	8000c96 <readFromCAN+0xa>
		updateInverterVolts();
 8000cb0:	f7ff ffd2 	bl	8000c58 <updateInverterVolts>
 8000cb4:	e7f3      	b.n	8000c9e <readFromCAN+0x12>
		updateBMSDiagnostics();
 8000cb6:	f7ff ffa3 	bl	8000c00 <updateBMSDiagnostics>
}
 8000cba:	e7f5      	b.n	8000ca8 <readFromCAN+0x1c>
 8000cbc:	200000ac 	.word	0x200000ac

08000cc0 <HAL_ADC_ConvCpltCallback>:
	apps1Value = ADC_Reads[APPS1_RANK-1];
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000cc6:	600a      	str	r2, [r1, #0]
	apps2Value = ADC_Reads[APPS2_RANK-1];
 8000cc8:	4906      	ldr	r1, [pc, #24]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000cca:	600a      	str	r2, [r1, #0]
	bseValue   = ADC_Reads[BSE_RANK-1];
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000cd0:	601a      	str	r2, [r3, #0]
	dma_read_complete = 1;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000007c 	.word	0x2000007c
 8000ce0:	200000a8 	.word	0x200000a8
 8000ce4:	200000a4 	.word	0x200000a4
 8000ce8:	200000a0 	.word	0x200000a0
 8000cec:	20000002 	.word	0x20000002

08000cf0 <calculateTorqueRequest>:
 	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <calculateTorqueRequest+0x84>)
 8000cf2:	ed93 7a00 	vldr	s14, [r3]
 8000cf6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000cfa:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8000d78 <calculateTorqueRequest+0x88>
 8000cfe:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000d02:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000d7c <calculateTorqueRequest+0x8c>
 8000d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <calculateTorqueRequest+0x90>)
 8000d0c:	ed93 7a00 	vldr	s14, [r3]
 8000d10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d14:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000d18:	ee87 6a26 	vdiv.f32	s12, s14, s13
 	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 8000d1c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000d20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 	if(appsValue >= 0){
 8000d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d30:	db0b      	blt.n	8000d4a <calculateTorqueRequest+0x5a>
 		requestedTorque = ((float)(MAX_TORQUE-MIN_TORQUE)) * appsValue + MIN_TORQUE;
 8000d32:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000d84 <calculateTorqueRequest+0x94>
 8000d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000d88 <calculateTorqueRequest+0x98>
 8000d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <calculateTorqueRequest+0x9c>)
 8000d44:	edc3 7a00 	vstr	s15, [r3]
 8000d48:	4770      	bx	lr
 		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <calculateTorqueRequest+0xa0>)
 8000d4c:	ed93 7a00 	vldr	s14, [r3]
 8000d50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d54:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000d94 <calculateTorqueRequest+0xa4>
 8000d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000d5c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d64:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000d88 <calculateTorqueRequest+0x98>
 8000d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <calculateTorqueRequest+0x9c>)
 8000d6e:	edc3 7a00 	vstr	s15, [r3]
 }
 8000d72:	4770      	bx	lr
 8000d74:	200000a8 	.word	0x200000a8
 8000d78:	44228000 	.word	0x44228000
 8000d7c:	45576000 	.word	0x45576000
 8000d80:	200000a4 	.word	0x200000a4
 8000d84:	42d80000 	.word	0x42d80000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	200000a0 	.word	0x200000a0
 8000d94:	457ff000 	.word	0x457ff000

08000d98 <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000d98:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000d9a:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <checkAPPSPlausibility+0x98>)
 8000d9c:	ed93 7a00 	vldr	s14, [r3]
 8000da0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000da4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000e34 <checkAPPSPlausibility+0x9c>
 8000da8:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000dac:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8000e38 <checkAPPSPlausibility+0xa0>
 8000db0:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000db4:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8000e3c <checkAPPSPlausibility+0xa4>
 8000db8:	ee67 7a86 	vmul.f32	s15, s15, s12
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <checkAPPSPlausibility+0xa8>)
 8000dbe:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000dc2:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <checkAPPSPlausibility+0xac>)
 8000dc4:	ed93 7a00 	vldr	s14, [r3]
 8000dc8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000dcc:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000dd0:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8000dd4:	ee26 7a86 	vmul.f32	s14, s13, s12
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <checkAPPSPlausibility+0xb0>)
 8000dda:	ed83 7a00 	vstr	s14, [r3]
	float paininmyass = fabsf(apps1_as_percent - apps2_as_percent);
 8000dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
	if (fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000de2:	eef0 7ae7 	vabs.f32	s15, s15
 8000de6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df2:	dc06      	bgt.n	8000e02 <checkAPPSPlausibility+0x6a>
	else if (!apps_plausible
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <checkAPPSPlausibility+0xb4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b173      	cbz	r3, 8000e18 <checkAPPSPlausibility+0x80>
		apps_plausible = 1; // true
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <checkAPPSPlausibility+0xb4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	801a      	strh	r2, [r3, #0]
}
 8000e00:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8000e02:	f001 f899 	bl	8001f38 <HAL_GetTick>
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <checkAPPSPlausibility+0xb8>)
 8000e08:	6018      	str	r0, [r3, #0]
		apps_plausible = 0; // false
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <checkAPPSPlausibility+0xb4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <checkAPPSPlausibility+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e7f3      	b.n	8000e00 <checkAPPSPlausibility+0x68>
			&& (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000e18:	f001 f88e 	bl	8001f38 <HAL_GetTick>
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <checkAPPSPlausibility+0xb8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1ac0      	subs	r0, r0, r3
 8000e22:	2863      	cmp	r0, #99	@ 0x63
 8000e24:	d8e9      	bhi.n	8000dfa <checkAPPSPlausibility+0x62>
		requestedTorque = 0;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <checkAPPSPlausibility+0xbc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e7e8      	b.n	8000e00 <checkAPPSPlausibility+0x68>
 8000e2e:	bf00      	nop
 8000e30:	200000a8 	.word	0x200000a8
 8000e34:	44228000 	.word	0x44228000
 8000e38:	45576000 	.word	0x45576000
 8000e3c:	42c80000 	.word	0x42c80000
 8000e40:	20000078 	.word	0x20000078
 8000e44:	200000a4 	.word	0x200000a4
 8000e48:	20000074 	.word	0x20000074
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	2000008c 	.word	0x2000008c
 8000e54:	2000009c 	.word	0x2000009c

08000e58 <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <checkCrossCheck+0xac>)
 8000e5a:	ed93 7a00 	vldr	s14, [r3]
 8000e5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
					/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000e62:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000f08 <checkCrossCheck+0xb0>
 8000e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6a:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000f0c <checkCrossCheck+0xb4>
 8000e6e:	ee67 7a86 	vmul.f32	s15, s15, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000e72:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <checkCrossCheck+0xb8>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <checkCrossCheck+0xbc>)
 8000e7a:	ed93 7a00 	vldr	s14, [r3]
 8000e7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000e82:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8000f18 <checkCrossCheck+0xc0>
 8000e86:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000e8a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8000f1c <checkCrossCheck+0xc4>
 8000e8e:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e92:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e96:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <checkCrossCheck+0xc8>)
 8000e98:	ed93 7a00 	vldr	s14, [r3]
 8000e9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000ea0:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000ea4:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ea8:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8000eb8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	dd0b      	ble.n	8000ede <checkCrossCheck+0x86>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <checkCrossCheck+0xac>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000ece:	d906      	bls.n	8000ede <checkCrossCheck+0x86>
		cross_check_plausible = 0;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <checkCrossCheck+0xcc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <checkCrossCheck+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4770      	bx	lr
	else if (!cross_check_plausible
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <checkCrossCheck+0xcc>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b953      	cbnz	r3, 8000efa <checkCrossCheck+0xa2>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 8000ee4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	dd03      	ble.n	8000efa <checkCrossCheck+0xa2>
		requestedTorque = 0;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <checkCrossCheck+0xd0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4770      	bx	lr
		cross_check_plausible = 1;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <checkCrossCheck+0xcc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	801a      	strh	r2, [r3, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	457ff000 	.word	0x457ff000
 8000f0c:	42c80000 	.word	0x42c80000
 8000f10:	20000070 	.word	0x20000070
 8000f14:	200000a8 	.word	0x200000a8
 8000f18:	44228000 	.word	0x44228000
 8000f1c:	45576000 	.word	0x45576000
 8000f20:	200000a4 	.word	0x200000a4
 8000f24:	20000000 	.word	0x20000000
 8000f28:	2000009c 	.word	0x2000009c

08000f2c <sendTorqueCommand>:
void sendTorqueCommand(void) {
 8000f2c:	b510      	push	{r4, lr}
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <sendTorqueCommand+0x5c>)
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f40:	ee17 2a90 	vmov	r2, s15
	char msg1 = (torqueValue >> 8) & 0xFF;
 8000f44:	f3c2 2007 	ubfx	r0, r2, #8, #8
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	7019      	strb	r1, [r3, #0]
	txMessage.frame.id = 0x0C0;
 8000f4e:	24c0      	movs	r4, #192	@ 0xc0
 8000f50:	605c      	str	r4, [r3, #4]
	txMessage.frame.dlc = 8;
 8000f52:	f04f 0c08 	mov.w	ip, #8
 8000f56:	f883 c008 	strb.w	ip, [r3, #8]
	txMessage.frame.data0 = msg0;
 8000f5a:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1 = msg1;
 8000f5c:	7298      	strb	r0, [r3, #10]
	txMessage.frame.data2 = 0;
 8000f5e:	2200      	movs	r2, #0
 8000f60:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 8000f62:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 1;
 8000f64:	7359      	strb	r1, [r3, #13]
	if(beginTorqueRequests){
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <sendTorqueCommand+0x64>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b143      	cbz	r3, 8000f7e <sendTorqueCommand+0x52>
		txMessage.frame.data5 = 0;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f6e:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = 0;
 8000f70:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73c3      	strb	r3, [r0, #15]
	txMessage.frame.data7 = 0;
 8000f76:	7403      	strb	r3, [r0, #16]
	CANSPI_Transmit(&txMessage);
 8000f78:	f7ff fb82 	bl	8000680 <CANSPI_Transmit>
}
 8000f7c:	bd10      	pop	{r4, pc}
		txMessage.frame.data5 = 1;
 8000f7e:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	739a      	strb	r2, [r3, #14]
 8000f84:	e7f4      	b.n	8000f70 <sendTorqueCommand+0x44>
 8000f86:	bf00      	nop
 8000f88:	2000009c 	.word	0x2000009c
 8000f8c:	200000c0 	.word	0x200000c0
 8000f90:	20000090 	.word	0x20000090

08000f94 <checkReadyToDrive>:
void checkReadyToDrive(void) {
 8000f94:	b510      	push	{r4, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port, RTD_BTN_Pin);
 8000f96:	2104      	movs	r1, #4
 8000f98:	481a      	ldr	r0, [pc, #104]	@ (8001004 <checkReadyToDrive+0x70>)
 8000f9a:	f002 fb0f 	bl	80035bc <HAL_GPIO_ReadPin>
 8000f9e:	4604      	mov	r4, r0
	cpockandballs = HAL_GetTick() -millis_RTD;
 8000fa0:	f000 ffca 	bl	8001f38 <HAL_GetTick>
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <checkReadyToDrive+0x74>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1ac0      	subs	r0, r0, r3
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <checkReadyToDrive+0x78>)
 8000fac:	6018      	str	r0, [r3, #0]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8000fae:	2c01      	cmp	r4, #1
 8000fb0:	d00c      	beq.n	8000fcc <checkReadyToDrive+0x38>
	else if (pinState == GPIO_PIN_RESET || bseValue < BRAKE_ACTIVATED_ADC_VAL || !bms_diagnostics.inverterActive ){
 8000fb2:	b13c      	cbz	r4, 8000fc4 <checkReadyToDrive+0x30>
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <checkReadyToDrive+0x7c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000fbc:	d302      	bcc.n	8000fc4 <checkReadyToDrive+0x30>
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <checkReadyToDrive+0x80>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	b9c3      	cbnz	r3, 8000ff6 <checkReadyToDrive+0x62>
		rtdState = false;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <checkReadyToDrive+0x84>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
}
 8000fca:	bd10      	pop	{r4, pc}
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <checkReadyToDrive+0x7c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000fd4:	d9ed      	bls.n	8000fb2 <checkReadyToDrive+0x1e>
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <checkReadyToDrive+0x80>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0e9      	beq.n	8000fb2 <checkReadyToDrive+0x1e>
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <checkReadyToDrive+0x84>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1e5      	bne.n	8000fb2 <checkReadyToDrive+0x1e>
		rtdState = true;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <checkReadyToDrive+0x84>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
		millis_RTD = HAL_GetTick();
 8000fec:	f000 ffa4 	bl	8001f38 <HAL_GetTick>
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <checkReadyToDrive+0x74>)
 8000ff2:	6018      	str	r0, [r3, #0]
 8000ff4:	e7e9      	b.n	8000fca <checkReadyToDrive+0x36>
	else if(cpockandballs >= RTD_BUTTON_PRESS_MILLIS){
 8000ff6:	2863      	cmp	r0, #99	@ 0x63
 8000ff8:	d9e7      	bls.n	8000fca <checkReadyToDrive+0x36>
		readyToDrive = true;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <checkReadyToDrive+0x88>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	e7e3      	b.n	8000fca <checkReadyToDrive+0x36>
 8001002:	bf00      	nop
 8001004:	40020400 	.word	0x40020400
 8001008:	20000064 	.word	0x20000064
 800100c:	20000068 	.word	0x20000068
 8001010:	200000a0 	.word	0x200000a0
 8001014:	20000050 	.word	0x20000050
 8001018:	2000006c 	.word	0x2000006c
 800101c:	2000006d 	.word	0x2000006d

08001020 <prechargeSequence>:
uint8_t prechargeSequence(void){
 8001020:	b538      	push	{r3, r4, r5, lr}
	uint32_t startPrechargeTime = HAL_GetTick();
 8001022:	f000 ff89 	bl	8001f38 <HAL_GetTick>
 8001026:	4604      	mov	r4, r0
	  HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_SET); //steps 1 and 2
 8001028:	4d21      	ldr	r5, [pc, #132]	@ (80010b0 <prechargeSequence+0x90>)
 800102a:	2201      	movs	r2, #1
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	4628      	mov	r0, r5
 8001030:	f002 fadc 	bl	80035ec <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 ff8b 	bl	8001f50 <HAL_Delay>
	  HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_SET); //steps 1 and 2
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001040:	4628      	mov	r0, r5
 8001042:	f002 fad3 	bl	80035ec <HAL_GPIO_WritePin>
	  while (HAL_GetTick() - startPrechargeTime < PRECHARGE_TIMEOUT_MS) { //loop for 4
 8001046:	e006      	b.n	8001056 <prechargeSequence+0x36>
		  if (bms_diagnostics.packVoltage - inverter_diagnostics.inverterDCVolts > PRECHARGE_VOLTAGE_DIFF) {
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <prechargeSequence+0x94>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a1a      	ldr	r2, [pc, #104]	@ (80010b8 <prechargeSequence+0x98>)
 800104e:	6852      	ldr	r2, [r2, #4]
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	2b0a      	cmp	r3, #10
 8001054:	dc1a      	bgt.n	800108c <prechargeSequence+0x6c>
	  while (HAL_GetTick() - startPrechargeTime < PRECHARGE_TIMEOUT_MS) { //loop for 4
 8001056:	f000 ff6f 	bl	8001f38 <HAL_GetTick>
 800105a:	1b00      	subs	r0, r0, r4
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <prechargeSequence+0x9c>)
 800105e:	4298      	cmp	r0, r3
 8001060:	d807      	bhi.n	8001072 <prechargeSequence+0x52>
		  if (CANSPI_Receive(&rxMessage)) {
 8001062:	4817      	ldr	r0, [pc, #92]	@ (80010c0 <prechargeSequence+0xa0>)
 8001064:	f7ff fba0 	bl	80007a8 <CANSPI_Receive>
 8001068:	2800      	cmp	r0, #0
 800106a:	d0ed      	beq.n	8001048 <prechargeSequence+0x28>
			  readFromCAN();
 800106c:	f7ff fe0e 	bl	8000c8c <readFromCAN>
 8001070:	e7ea      	b.n	8001048 <prechargeSequence+0x28>
	  HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET);
 8001072:	4c0f      	ldr	r4, [pc, #60]	@ (80010b0 <prechargeSequence+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	4620      	mov	r0, r4
 800107a:	f002 fab7 	bl	80035ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001084:	4620      	mov	r0, r4
 8001086:	f002 fab1 	bl	80035ec <HAL_GPIO_WritePin>
	  while (1) {
 800108a:	e7fe      	b.n	800108a <prechargeSequence+0x6a>
			  HAL_GPIO_WritePin(AIR_P_CTRL_GPIO_Port, AIR_P_CTRL_Pin, GPIO_PIN_SET); //step 4
 800108c:	4c08      	ldr	r4, [pc, #32]	@ (80010b0 <prechargeSequence+0x90>)
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001094:	4620      	mov	r0, r4
 8001096:	f002 faa9 	bl	80035ec <HAL_GPIO_WritePin>
			  HAL_Delay(5);
 800109a:	2005      	movs	r0, #5
 800109c:	f000 ff58 	bl	8001f50 <HAL_Delay>
			  HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	4620      	mov	r0, r4
 80010a6:	f002 faa1 	bl	80035ec <HAL_GPIO_WritePin>
}
 80010aa:	2001      	movs	r0, #1
 80010ac:	bd38      	pop	{r3, r4, r5, pc}
 80010ae:	bf00      	nop
 80010b0:	40020800 	.word	0x40020800
 80010b4:	20000050 	.word	0x20000050
 80010b8:	20000048 	.word	0x20000048
 80010bc:	000493df 	.word	0x000493df
 80010c0:	200000ac 	.word	0x200000ac

080010c4 <sendPrechargeRequest>:
void sendPrechargeRequest(void){
 80010c4:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_BTN_GPIO_Port, PRECHARGE_BTN_Pin);
 80010c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ca:	4812      	ldr	r0, [pc, #72]	@ (8001114 <sendPrechargeRequest+0x50>)
 80010cc:	f002 fa76 	bl	80035bc <HAL_GPIO_ReadPin>
		if(pinState == GPIO_PIN_SET && !prechargeState){
 80010d0:	2801      	cmp	r0, #1
 80010d2:	d004      	beq.n	80010de <sendPrechargeRequest+0x1a>
		else if (pinState == GPIO_PIN_RESET){
 80010d4:	b978      	cbnz	r0, 80010f6 <sendPrechargeRequest+0x32>
			prechargeState = false;
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <sendPrechargeRequest+0x54>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bd08      	pop	{r3, pc}
		if(pinState == GPIO_PIN_SET && !prechargeState){
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <sendPrechargeRequest+0x54>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f6      	bne.n	80010d4 <sendPrechargeRequest+0x10>
			prechargeState = true;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <sendPrechargeRequest+0x54>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			millis_precharge = HAL_GetTick();
 80010ec:	f000 ff24 	bl	8001f38 <HAL_GetTick>
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <sendPrechargeRequest+0x58>)
 80010f2:	6018      	str	r0, [r3, #0]
 80010f4:	e7f2      	b.n	80010dc <sendPrechargeRequest+0x18>
		else if(HAL_GetTick()-millis_precharge >= PRECHARGE_BUTTON_PRESS_MILLIS){
 80010f6:	f000 ff1f 	bl	8001f38 <HAL_GetTick>
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <sendPrechargeRequest+0x58>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1ac0      	subs	r0, r0, r3
 8001100:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001104:	d3ea      	bcc.n	80010dc <sendPrechargeRequest+0x18>
			prechargeSequence();
 8001106:	f7ff ff8b 	bl	8001020 <prechargeSequence>
			prechargeFinished = true;
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <sendPrechargeRequest+0x5c>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
}
 8001110:	e7e4      	b.n	80010dc <sendPrechargeRequest+0x18>
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000
 8001118:	20000061 	.word	0x20000061
 800111c:	2000005c 	.word	0x2000005c
 8001120:	20000060 	.word	0x20000060

08001124 <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8001124:	6802      	ldr	r2, [r0, #0]
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <HAL_I2S_TxCpltCallback+0x50>)
 8001128:	429a      	cmp	r2, r3
 800112a:	d000      	beq.n	800112e <HAL_I2S_TxCpltCallback+0xa>
 800112c:	4770      	bx	lr
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_I2S_TxCpltCallback+0x54>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1fa      	bne.n	800112c <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_I2S_TxCpltCallback+0x58>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <HAL_I2S_TxCpltCallback+0x5c>)
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	4293      	cmp	r3, r2
 8001140:	d214      	bcs.n	800116c <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001142:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 8001144:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8001146:	f247 5130 	movw	r1, #30000	@ 0x7530
 800114a:	428a      	cmp	r2, r1
 800114c:	d80b      	bhi.n	8001166 <HAL_I2S_TxCpltCallback+0x42>
 800114e:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 8001150:	490c      	ldr	r1, [pc, #48]	@ (8001184 <HAL_I2S_TxCpltCallback+0x60>)
 8001152:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 8001154:	18d4      	adds	r4, r2, r3
 8001156:	4809      	ldr	r0, [pc, #36]	@ (800117c <HAL_I2S_TxCpltCallback+0x58>)
 8001158:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 800115a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800115e:	480a      	ldr	r0, [pc, #40]	@ (8001188 <HAL_I2S_TxCpltCallback+0x64>)
 8001160:	f002 fb9e 	bl	80038a0 <HAL_I2S_Transmit_DMA>
}
 8001164:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8001166:	f247 5230 	movw	r2, #30000	@ 0x7530
 800116a:	e7f1      	b.n	8001150 <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 800116c:	4b02      	ldr	r3, [pc, #8]	@ (8001178 <HAL_I2S_TxCpltCallback+0x54>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	4770      	bx	lr
 8001174:	40003800 	.word	0x40003800
 8001178:	20000039 	.word	0x20000039
 800117c:	20000044 	.word	0x20000044
 8001180:	2000003c 	.word	0x2000003c
 8001184:	20000040 	.word	0x20000040
 8001188:	200001d4 	.word	0x200001d4

0800118c <PlayStartupSoundOnce>:
void PlayStartupSoundOnce(void) {
 800118c:	b508      	push	{r3, lr}
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 800118e:	4909      	ldr	r1, [pc, #36]	@ (80011b4 <PlayStartupSoundOnce+0x28>)
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <PlayStartupSoundOnce+0x2c>)
 8001192:	6019      	str	r1, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <PlayStartupSoundOnce+0x30>)
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <PlayStartupSoundOnce+0x34>)
 8001198:	601a      	str	r2, [r3, #0]
	wavPos = 0;
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <PlayStartupSoundOnce+0x38>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <PlayStartupSoundOnce+0x3c>)
 80011a2:	7002      	strb	r2, [r0, #0]
	wavPos += thisChunk;
 80011a4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <PlayStartupSoundOnce+0x40>)
 80011ac:	f002 fb78 	bl	80038a0 <HAL_I2S_Transmit_DMA>
}
 80011b0:	bd08      	pop	{r3, pc}
 80011b2:	bf00      	nop
 80011b4:	08006188 	.word	0x08006188
 80011b8:	20000040 	.word	0x20000040
 80011bc:	2000003c 	.word	0x2000003c
 80011c0:	00028056 	.word	0x00028056
 80011c4:	20000044 	.word	0x20000044
 80011c8:	20000039 	.word	0x20000039
 80011cc:	200001d4 	.word	0x200001d4

080011d0 <lookForRTD>:
void lookForRTD(void) {
 80011d0:	b538      	push	{r3, r4, r5, lr}
	if (rtdoverride == 1) {
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <lookForRTD+0x80>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d114      	bne.n	8001204 <lookForRTD+0x34>
		beginTorqueRequests = true;
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <lookForRTD+0x84>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
		PlayStartupSoundOnce();
 80011e0:	f7ff ffd4 	bl	800118c <PlayStartupSoundOnce>
}
 80011e4:	bd38      	pop	{r3, r4, r5, pc}
			readFromCAN();
 80011e6:	f7ff fd51 	bl	8000c8c <readFromCAN>
 80011ea:	e014      	b.n	8001216 <lookForRTD+0x46>
			sendPrechargeRequest();
 80011ec:	f7ff ff6a 	bl	80010c4 <sendPrechargeRequest>
		while(!prechargeFinished){
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <lookForRTD+0x88>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f9      	beq.n	80011ec <lookForRTD+0x1c>
		uint8_t prevReadyToDrive = readyToDrive;
 80011f8:	4c18      	ldr	r4, [pc, #96]	@ (800125c <lookForRTD+0x8c>)
 80011fa:	7825      	ldrb	r5, [r4, #0]
		checkReadyToDrive();
 80011fc:	f7ff feca 	bl	8000f94 <checkReadyToDrive>
		if (readyToDrive) {
 8001200:	7823      	ldrb	r3, [r4, #0]
 8001202:	b9cb      	cbnz	r3, 8001238 <lookForRTD+0x68>
	while(!readyToDrive) {
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <lookForRTD+0x8c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1eb      	bne.n	80011e4 <lookForRTD+0x14>
		if (CANSPI_Receive(&rxMessage)) {
 800120c:	4814      	ldr	r0, [pc, #80]	@ (8001260 <lookForRTD+0x90>)
 800120e:	f7ff facb 	bl	80007a8 <CANSPI_Receive>
 8001212:	2800      	cmp	r0, #0
 8001214:	d1e7      	bne.n	80011e6 <lookForRTD+0x16>
		if(dma_read_complete){
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <lookForRTD+0x94>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0e8      	beq.n	80011f0 <lookForRTD+0x20>
			HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 800121e:	2203      	movs	r2, #3
 8001220:	4911      	ldr	r1, [pc, #68]	@ (8001268 <lookForRTD+0x98>)
 8001222:	4812      	ldr	r0, [pc, #72]	@ (800126c <lookForRTD+0x9c>)
 8001224:	f001 f80c 	bl	8002240 <HAL_ADC_Start_DMA>
			dma_read_complete = 0;
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <lookForRTD+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
			millis_since_dma_read = HAL_GetTick();
 800122e:	f000 fe83 	bl	8001f38 <HAL_GetTick>
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <lookForRTD+0xa0>)
 8001234:	6018      	str	r0, [r3, #0]
 8001236:	e7db      	b.n	80011f0 <lookForRTD+0x20>
			if(!prevReadyToDrive){
 8001238:	b11d      	cbz	r5, 8001242 <lookForRTD+0x72>
				beginTorqueRequests = false;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <lookForRTD+0x84>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e7e0      	b.n	8001204 <lookForRTD+0x34>
				beginTorqueRequests = true;
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <lookForRTD+0x84>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
				PlayStartupSoundOnce();
 8001248:	f7ff ffa0 	bl	800118c <PlayStartupSoundOnce>
 800124c:	e7da      	b.n	8001204 <lookForRTD+0x34>
 800124e:	bf00      	nop
 8001250:	20000038 	.word	0x20000038
 8001254:	20000090 	.word	0x20000090
 8001258:	20000060 	.word	0x20000060
 800125c:	2000006d 	.word	0x2000006d
 8001260:	200000ac 	.word	0x200000ac
 8001264:	20000002 	.word	0x20000002
 8001268:	2000007c 	.word	0x2000007c
 800126c:	2000027c 	.word	0x2000027c
 8001270:	20000088 	.word	0x20000088

08001274 <checkShutdown>:
void checkShutdown(){
 8001274:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 8001276:	2104      	movs	r1, #4
 8001278:	4807      	ldr	r0, [pc, #28]	@ (8001298 <checkShutdown+0x24>)
 800127a:	f002 f99f 	bl	80035bc <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_RESET) {
 800127e:	b100      	cbz	r0, 8001282 <checkShutdown+0xe>
}
 8001280:	bd08      	pop	{r3, pc}
		requestedTorque = 0;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <checkShutdown+0x28>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 8001288:	f7ff fe50 	bl	8000f2c <sendTorqueCommand>
		readyToDrive = false;
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <checkShutdown+0x2c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
		lookForRTD();
 8001292:	f7ff ff9d 	bl	80011d0 <lookForRTD>
}
 8001296:	e7f3      	b.n	8001280 <checkShutdown+0xc>
 8001298:	40020c00 	.word	0x40020c00
 800129c:	2000009c 	.word	0x2000009c
 80012a0:	2000006d 	.word	0x2000006d

080012a4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012a6:	e7fe      	b.n	80012a6 <Error_Handler+0x2>

080012a8 <MX_ADC1_Init>:
{
 80012a8:	b500      	push	{lr}
 80012aa:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80012b6:	4821      	ldr	r0, [pc, #132]	@ (800133c <MX_ADC1_Init+0x94>)
 80012b8:	4a21      	ldr	r2, [pc, #132]	@ (8001340 <MX_ADC1_Init+0x98>)
 80012ba:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012c0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012c4:	2201      	movs	r2, #1
 80012c6:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c8:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ca:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012d2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80012d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012d8:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012da:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012dc:	2203      	movs	r2, #3
 80012de:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e0:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012e4:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e6:	f000 fe57 	bl	8001f98 <HAL_ADC_Init>
 80012ea:	b9f0      	cbnz	r0, 800132a <MX_ADC1_Init+0x82>
  sConfig.Channel = ADC_CHANNEL_14;
 80012ec:	230e      	movs	r3, #14
 80012ee:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012f4:	2303      	movs	r3, #3
 80012f6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f8:	4669      	mov	r1, sp
 80012fa:	4810      	ldr	r0, [pc, #64]	@ (800133c <MX_ADC1_Init+0x94>)
 80012fc:	f001 f8ae 	bl	800245c <HAL_ADC_ConfigChannel>
 8001300:	b9a8      	cbnz	r0, 800132e <MX_ADC1_Init+0x86>
  sConfig.Channel = ADC_CHANNEL_15;
 8001302:	230f      	movs	r3, #15
 8001304:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8001306:	2303      	movs	r3, #3
 8001308:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	4669      	mov	r1, sp
 800130c:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_ADC1_Init+0x94>)
 800130e:	f001 f8a5 	bl	800245c <HAL_ADC_ConfigChannel>
 8001312:	b970      	cbnz	r0, 8001332 <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_1;
 8001314:	2301      	movs	r3, #1
 8001316:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8001318:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	4669      	mov	r1, sp
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_ADC1_Init+0x94>)
 800131e:	f001 f89d 	bl	800245c <HAL_ADC_ConfigChannel>
 8001322:	b940      	cbnz	r0, 8001336 <MX_ADC1_Init+0x8e>
}
 8001324:	b005      	add	sp, #20
 8001326:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800132a:	f7ff ffbb 	bl	80012a4 <Error_Handler>
    Error_Handler();
 800132e:	f7ff ffb9 	bl	80012a4 <Error_Handler>
    Error_Handler();
 8001332:	f7ff ffb7 	bl	80012a4 <Error_Handler>
    Error_Handler();
 8001336:	f7ff ffb5 	bl	80012a4 <Error_Handler>
 800133a:	bf00      	nop
 800133c:	2000027c 	.word	0x2000027c
 8001340:	40012000 	.word	0x40012000

08001344 <MX_TIM3_Init>:
{
 8001344:	b500      	push	{lr}
 8001346:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001348:	2300      	movs	r3, #0
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	9303      	str	r3, [sp, #12]
 800134e:	9304      	str	r3, [sp, #16]
 8001350:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001356:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <MX_TIM3_Init+0x64>)
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <MX_TIM3_Init+0x68>)
 800135a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 800135c:	2204      	movs	r2, #4
 800135e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 10001;
 8001362:	f242 7211 	movw	r2, #10001	@ 0x2711
 8001366:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136c:	f004 fa82 	bl	8005874 <HAL_TIM_Base_Init>
 8001370:	b998      	cbnz	r0, 800139a <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001378:	a902      	add	r1, sp, #8
 800137a:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <MX_TIM3_Init+0x64>)
 800137c:	f004 fc14 	bl	8005ba8 <HAL_TIM_ConfigClockSource>
 8001380:	b968      	cbnz	r0, 800139e <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001382:	2320      	movs	r3, #32
 8001384:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138a:	4669      	mov	r1, sp
 800138c:	4806      	ldr	r0, [pc, #24]	@ (80013a8 <MX_TIM3_Init+0x64>)
 800138e:	f004 fe2b 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	b930      	cbnz	r0, 80013a2 <MX_TIM3_Init+0x5e>
}
 8001394:	b007      	add	sp, #28
 8001396:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800139a:	f7ff ff83 	bl	80012a4 <Error_Handler>
    Error_Handler();
 800139e:	f7ff ff81 	bl	80012a4 <Error_Handler>
    Error_Handler();
 80013a2:	f7ff ff7f 	bl	80012a4 <Error_Handler>
 80013a6:	bf00      	nop
 80013a8:	200000d4 	.word	0x200000d4
 80013ac:	40000400 	.word	0x40000400

080013b0 <MX_SPI3_Init>:
{
 80013b0:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_SPI3_Init+0x38>)
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <MX_SPI3_Init+0x3c>)
 80013b6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013b8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013bc:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	2300      	movs	r3, #0
 80013c0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c2:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c4:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013cc:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013ce:	2210      	movs	r2, #16
 80013d0:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d2:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d4:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80013d8:	230a      	movs	r3, #10
 80013da:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013dc:	f003 fc6a 	bl	8004cb4 <HAL_SPI_Init>
 80013e0:	b900      	cbnz	r0, 80013e4 <MX_SPI3_Init+0x34>
}
 80013e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013e4:	f7ff ff5e 	bl	80012a4 <Error_Handler>
 80013e8:	2000011c 	.word	0x2000011c
 80013ec:	40003c00 	.word	0x40003c00

080013f0 <MX_I2S2_Init>:
{
 80013f0:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <MX_I2S2_Init+0x30>)
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_I2S2_Init+0x34>)
 80013f6:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80013f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fc:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80013fe:	2300      	movs	r3, #0
 8001400:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001402:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001404:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001406:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800140a:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800140c:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800140e:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001410:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001412:	f002 f905 	bl	8003620 <HAL_I2S_Init>
 8001416:	b900      	cbnz	r0, 800141a <MX_I2S2_Init+0x2a>
}
 8001418:	bd08      	pop	{r3, pc}
    Error_Handler();
 800141a:	f7ff ff43 	bl	80012a4 <Error_Handler>
 800141e:	bf00      	nop
 8001420:	200001d4 	.word	0x200001d4
 8001424:	40003800 	.word	0x40003800

08001428 <SystemClock_Config>:
{
 8001428:	b500      	push	{lr}
 800142a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142c:	2230      	movs	r2, #48	@ 0x30
 800142e:	2100      	movs	r1, #0
 8001430:	a808      	add	r0, sp, #32
 8001432:	f004 fe5b 	bl	80060ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001436:	2300      	movs	r3, #0
 8001438:	9303      	str	r3, [sp, #12]
 800143a:	9304      	str	r3, [sp, #16]
 800143c:	9305      	str	r3, [sp, #20]
 800143e:	9306      	str	r3, [sp, #24]
 8001440:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	4a1f      	ldr	r2, [pc, #124]	@ (80014c4 <SystemClock_Config+0x9c>)
 8001446:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001448:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800144c:	6411      	str	r1, [r2, #64]	@ 0x40
 800144e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001450:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001454:	9201      	str	r2, [sp, #4]
 8001456:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	491b      	ldr	r1, [pc, #108]	@ (80014c8 <SystemClock_Config+0xa0>)
 800145c:	680a      	ldr	r2, [r1, #0]
 800145e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001466:	600a      	str	r2, [r1, #0]
 8001468:	680a      	ldr	r2, [r1, #0]
 800146a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001472:	2202      	movs	r2, #2
 8001474:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001476:	2101      	movs	r1, #1
 8001478:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147a:	2110      	movs	r1, #16
 800147c:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001480:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001482:	2308      	movs	r3, #8
 8001484:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001486:	2354      	movs	r3, #84	@ 0x54
 8001488:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800148a:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800148c:	2307      	movs	r3, #7
 800148e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	a808      	add	r0, sp, #32
 8001492:	f002 fe5d 	bl	8004150 <HAL_RCC_OscConfig>
 8001496:	b980      	cbnz	r0, 80014ba <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2102      	movs	r1, #2
 800149e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a8:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014aa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ac:	a803      	add	r0, sp, #12
 80014ae:	f003 f8c7 	bl	8004640 <HAL_RCC_ClockConfig>
 80014b2:	b920      	cbnz	r0, 80014be <SystemClock_Config+0x96>
}
 80014b4:	b015      	add	sp, #84	@ 0x54
 80014b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014ba:	f7ff fef3 	bl	80012a4 <Error_Handler>
    Error_Handler();
 80014be:	f7ff fef1 	bl	80012a4 <Error_Handler>
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <main>:
{
 80014cc:	b508      	push	{r3, lr}
  HAL_Init();
 80014ce:	f000 fccd 	bl	8001e6c <HAL_Init>
  SystemClock_Config();
 80014d2:	f7ff ffa9 	bl	8001428 <SystemClock_Config>
  MX_GPIO_Init();
 80014d6:	f7ff fa93 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 80014da:	f7ff fb51 	bl	8000b80 <MX_DMA_Init>
  MX_ADC1_Init();
 80014de:	f7ff fee3 	bl	80012a8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80014e2:	f7ff ff2f 	bl	8001344 <MX_TIM3_Init>
  MX_SPI3_Init();
 80014e6:	f7ff ff63 	bl	80013b0 <MX_SPI3_Init>
  MX_I2S2_Init();
 80014ea:	f7ff ff81 	bl	80013f0 <MX_I2S2_Init>
	HAL_TIM_Base_Start(&htim3);
 80014ee:	4821      	ldr	r0, [pc, #132]	@ (8001574 <main+0xa8>)
 80014f0:	f004 fa10 	bl	8005914 <HAL_TIM_Base_Start>
	if (CANSPI_Initialize() != true) {
 80014f4:	f7ff f804 	bl	8000500 <CANSPI_Initialize>
 80014f8:	b908      	cbnz	r0, 80014fe <main+0x32>
		Error_Handler();
 80014fa:	f7ff fed3 	bl	80012a4 <Error_Handler>
	inverter_diagnostics.motorRpm   = 1;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <main+0xac>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
	lookForRTD();
 8001504:	f7ff fe64 	bl	80011d0 <lookForRTD>
 8001508:	e011      	b.n	800152e <main+0x62>
			readFromCAN();
 800150a:	f7ff fbbf 	bl	8000c8c <readFromCAN>
 800150e:	e013      	b.n	8001538 <main+0x6c>
			HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8001510:	2203      	movs	r2, #3
 8001512:	491a      	ldr	r1, [pc, #104]	@ (800157c <main+0xb0>)
 8001514:	481a      	ldr	r0, [pc, #104]	@ (8001580 <main+0xb4>)
 8001516:	f000 fe93 	bl	8002240 <HAL_ADC_Start_DMA>
			dma_read_complete = 0;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <main+0xb8>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
			millis_since_dma_read = HAL_GetTick();
 8001520:	f000 fd0a 	bl	8001f38 <HAL_GetTick>
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <main+0xbc>)
 8001526:	6018      	str	r0, [r3, #0]
 8001528:	e00a      	b.n	8001540 <main+0x74>
		if (readyToDrive || rtdoverride == 1) sendTorqueCommand();
 800152a:	f7ff fcff 	bl	8000f2c <sendTorqueCommand>
		if (CANSPI_Receive(&rxMessage)) {
 800152e:	4817      	ldr	r0, [pc, #92]	@ (800158c <main+0xc0>)
 8001530:	f7ff f93a 	bl	80007a8 <CANSPI_Receive>
 8001534:	2800      	cmp	r0, #0
 8001536:	d1e8      	bne.n	800150a <main+0x3e>
		if(dma_read_complete){
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <main+0xb8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e7      	bne.n	8001510 <main+0x44>
		updateBMSDiagnostics();
 8001540:	f7ff fb5e 	bl	8000c00 <updateBMSDiagnostics>
		calculateTorqueRequest();
 8001544:	f7ff fbd4 	bl	8000cf0 <calculateTorqueRequest>
		checkAPPSPlausibility();
 8001548:	f7ff fc26 	bl	8000d98 <checkAPPSPlausibility>
		checkCrossCheck();
 800154c:	f7ff fc84 	bl	8000e58 <checkCrossCheck>
		checkShutdown();  // If pin is high, torque->0, block
 8001550:	f7ff fe90 	bl	8001274 <checkShutdown>
		finalTorqueRequest   = requestedTorque;
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <main+0xc4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <main+0xc8>)
 800155a:	6013      	str	r3, [r2, #0]
		lastRequestedTorque  = requestedTorque;
 800155c:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <main+0xcc>)
 800155e:	6013      	str	r3, [r2, #0]
		if (readyToDrive || rtdoverride == 1) sendTorqueCommand();
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <main+0xd0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e0      	bne.n	800152a <main+0x5e>
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <main+0xd4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d1de      	bne.n	800152e <main+0x62>
 8001570:	e7db      	b.n	800152a <main+0x5e>
 8001572:	bf00      	nop
 8001574:	200000d4 	.word	0x200000d4
 8001578:	20000048 	.word	0x20000048
 800157c:	2000007c 	.word	0x2000007c
 8001580:	2000027c 	.word	0x2000027c
 8001584:	20000002 	.word	0x20000002
 8001588:	20000088 	.word	0x20000088
 800158c:	200000ac 	.word	0x200000ac
 8001590:	2000009c 	.word	0x2000009c
 8001594:	20000094 	.word	0x20000094
 8001598:	20000098 	.word	0x20000098
 800159c:	2000006d 	.word	0x2000006d
 80015a0:	20000038 	.word	0x20000038

080015a4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <MCP2515_Initialize+0x3c>)
 80015b2:	f002 f81b 	bl	80035ec <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80015b6:	230a      	movs	r3, #10
 80015b8:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80015ba:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <MCP2515_Initialize+0x40>)
 80015bc:	f004 f809 	bl	80055d2 <HAL_SPI_GetState>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <MCP2515_Initialize+0x26>
      return true;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e006      	b.n	80015d8 <MCP2515_Initialize+0x34>
    
    loop--;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f1      	bne.n	80015ba <MCP2515_Initialize+0x16>
      
  return false;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40020000 	.word	0x40020000
 80015e4:	2000011c 	.word	0x2000011c

080015e8 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80015ee:	2180      	movs	r1, #128	@ 0x80
 80015f0:	200f      	movs	r0, #15
 80015f2:	f000 f8a9 	bl	8001748 <MCP2515_WriteByte>
  HAL_Delay(100);
 80015f6:	2064      	movs	r0, #100	@ 0x64
 80015f8:	f000 fcaa 	bl	8001f50 <HAL_Delay>
  uint8_t loop = 10;
 80015fc:	230a      	movs	r3, #10
 80015fe:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f8a0 	bl	8001748 <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001608:	200e      	movs	r0, #14
 800160a:	f000 f851 	bl	80016b0 <MCP2515_ReadByte>
 800160e:	4603      	mov	r3, r0
 8001610:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 8001612:	2030      	movs	r0, #48	@ 0x30
 8001614:	f000 f84c 	bl	80016b0 <MCP2515_ReadByte>
 8001618:	4603      	mov	r3, r0
 800161a:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001622:	2b80      	cmp	r3, #128	@ 0x80
 8001624:	d101      	bne.n	800162a <MCP2515_SetConfigMode+0x42>
      return true;
 8001626:	2301      	movs	r3, #1
 8001628:	e008      	b.n	800163c <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	3b01      	subs	r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001630:	2064      	movs	r0, #100	@ 0x64
 8001632:	f000 fc8d 	bl	8001f50 <HAL_Delay>

  } while(loop > 0);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	e7e1      	b.n	8001600 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800164a:	2100      	movs	r1, #0
 800164c:	200f      	movs	r0, #15
 800164e:	f000 f87b 	bl	8001748 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8001652:	230a      	movs	r3, #10
 8001654:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001656:	200e      	movs	r0, #14
 8001658:	f000 f82a 	bl	80016b0 <MCP2515_ReadByte>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <MCP2515_SetNormalMode+0x26>
      return true;
 8001666:	2301      	movs	r3, #1
 8001668:	e006      	b.n	8001678 <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3b01      	subs	r3, #1
 800166e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ef      	bne.n	8001656 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <MCP2515_Reset+0x2c>)
 800168c:	f001 ffae 	bl	80035ec <HAL_GPIO_WritePin>
 8001690:	2001      	movs	r0, #1
 8001692:	f000 fc5d 	bl	8001f50 <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 8001696:	20c0      	movs	r0, #192	@ 0xc0
 8001698:	f000 f93a 	bl	8001910 <SPI_Tx>

  MCP2515_CS_HIGH();
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a2:	4802      	ldr	r0, [pc, #8]	@ (80016ac <MCP2515_Reset+0x2c>)
 80016a4:	f001 ffa2 	bl	80035ec <HAL_GPIO_WritePin>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40020000 	.word	0x40020000

080016b0 <MCP2515_ReadByte>:



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016c0:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <MCP2515_ReadByte+0x48>)
 80016c2:	f001 ff93 	bl	80035ec <HAL_GPIO_WritePin>
 80016c6:	2001      	movs	r0, #1
 80016c8:	f000 fc42 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f91f 	bl	8001910 <SPI_Tx>
  SPI_Tx(address);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f91b 	bl	8001910 <SPI_Tx>
  retVal = SPI_Rx();
 80016da:	f000 f93f 	bl	800195c <SPI_Rx>
 80016de:	4603      	mov	r3, r0
 80016e0:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <MCP2515_ReadByte+0x48>)
 80016ea:	f001 ff7f 	bl	80035ec <HAL_GPIO_WritePin>
  
  return retVal;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40020000 	.word	0x40020000

080016fc <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001712:	480c      	ldr	r0, [pc, #48]	@ (8001744 <MCP2515_ReadRxSequence+0x48>)
 8001714:	f001 ff6a 	bl	80035ec <HAL_GPIO_WritePin>
 8001718:	2001      	movs	r0, #1
 800171a:	f000 fc19 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(instruction);        
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f8f5 	bl	8001910 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	4619      	mov	r1, r3
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f000 f926 	bl	800197c <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001736:	4803      	ldr	r0, [pc, #12]	@ (8001744 <MCP2515_ReadRxSequence+0x48>)
 8001738:	f001 ff58 	bl	80035ec <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40020000 	.word	0x40020000

08001748 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175e:	480d      	ldr	r0, [pc, #52]	@ (8001794 <MCP2515_WriteByte+0x4c>)
 8001760:	f001 ff44 	bl	80035ec <HAL_GPIO_WritePin>
 8001764:	2001      	movs	r0, #1
 8001766:	f000 fbf3 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 800176a:	2002      	movs	r0, #2
 800176c:	f000 f8d0 	bl	8001910 <SPI_Tx>
  SPI_Tx(address);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f8cc 	bl	8001910 <SPI_Tx>
  SPI_Tx(data);  
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f8c8 	bl	8001910 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001786:	4803      	ldr	r0, [pc, #12]	@ (8001794 <MCP2515_WriteByte+0x4c>)
 8001788:	f001 ff30 	bl	80035ec <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40020000 	.word	0x40020000

08001798 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	603a      	str	r2, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	460b      	mov	r3, r1
 80017a6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ae:	4810      	ldr	r0, [pc, #64]	@ (80017f0 <MCP2515_WriteByteSequence+0x58>)
 80017b0:	f001 ff1c 	bl	80035ec <HAL_GPIO_WritePin>
 80017b4:	2001      	movs	r0, #1
 80017b6:	f000 fbcb 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f000 f8a8 	bl	8001910 <SPI_Tx>
  SPI_Tx(startAddress);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f8a4 	bl	8001910 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80017c8:	79ba      	ldrb	r2, [r7, #6]
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f000 f8ac 	bl	8001934 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e2:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <MCP2515_WriteByteSequence+0x58>)
 80017e4:	f001 ff02 	bl	80035ec <HAL_GPIO_WritePin>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020000 	.word	0x40020000

080017f4 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	4613      	mov	r3, r2
 8001804:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800180c:	4810      	ldr	r0, [pc, #64]	@ (8001850 <MCP2515_LoadTxSequence+0x5c>)
 800180e:	f001 feed 	bl	80035ec <HAL_GPIO_WritePin>
 8001812:	2001      	movs	r0, #1
 8001814:	f000 fb9c 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f878 	bl	8001910 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001820:	2104      	movs	r1, #4
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f000 f886 	bl	8001934 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f870 	bl	8001910 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f87d 	bl	8001934 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <MCP2515_LoadTxSequence+0x5c>)
 8001842:	f001 fed3 	bl	80035ec <HAL_GPIO_WritePin>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020000 	.word	0x40020000

08001854 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <MCP2515_RequestToSend+0x38>)
 8001866:	f001 fec1 	bl	80035ec <HAL_GPIO_WritePin>
 800186a:	2001      	movs	r0, #1
 800186c:	f000 fb70 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f84c 	bl	8001910 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <MCP2515_RequestToSend+0x38>)
 8001880:	f001 feb4 	bl	80035ec <HAL_GPIO_WritePin>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40020000 	.word	0x40020000

08001890 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189c:	480b      	ldr	r0, [pc, #44]	@ (80018cc <MCP2515_ReadStatus+0x3c>)
 800189e:	f001 fea5 	bl	80035ec <HAL_GPIO_WritePin>
 80018a2:	2001      	movs	r0, #1
 80018a4:	f000 fb54 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80018a8:	20a0      	movs	r0, #160	@ 0xa0
 80018aa:	f000 f831 	bl	8001910 <SPI_Tx>
  retVal = SPI_Rx();
 80018ae:	f000 f855 	bl	800195c <SPI_Rx>
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018bc:	4803      	ldr	r0, [pc, #12]	@ (80018cc <MCP2515_ReadStatus+0x3c>)
 80018be:	f001 fe95 	bl	80035ec <HAL_GPIO_WritePin>
  
  return retVal;
 80018c2:	79fb      	ldrb	r3, [r7, #7]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40020000 	.word	0x40020000

080018d0 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <MCP2515_GetRxStatus+0x3c>)
 80018de:	f001 fe85 	bl	80035ec <HAL_GPIO_WritePin>
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 fb34 	bl	8001f50 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80018e8:	20b0      	movs	r0, #176	@ 0xb0
 80018ea:	f000 f811 	bl	8001910 <SPI_Tx>
  retVal = SPI_Rx();
 80018ee:	f000 f835 	bl	800195c <SPI_Rx>
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <MCP2515_GetRxStatus+0x3c>)
 80018fe:	f001 fe75 	bl	80035ec <HAL_GPIO_WritePin>
  
  return retVal;
 8001902:	79fb      	ldrb	r3, [r7, #7]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40020000 	.word	0x40020000

08001910 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800191a:	1df9      	adds	r1, r7, #7
 800191c:	230a      	movs	r3, #10
 800191e:	2201      	movs	r2, #1
 8001920:	4803      	ldr	r0, [pc, #12]	@ (8001930 <SPI_Tx+0x20>)
 8001922:	f003 fa50 	bl	8004dc6 <HAL_SPI_Transmit>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000011c 	.word	0x2000011c

08001934 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	b29a      	uxth	r2, r3
 8001944:	230a      	movs	r3, #10
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4803      	ldr	r0, [pc, #12]	@ (8001958 <SPI_TxBuffer+0x24>)
 800194a:	f003 fa3c 	bl	8004dc6 <HAL_SPI_Transmit>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000011c 	.word	0x2000011c

0800195c <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001962:	1df9      	adds	r1, r7, #7
 8001964:	230a      	movs	r3, #10
 8001966:	2201      	movs	r2, #1
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <SPI_Rx+0x1c>)
 800196a:	f003 fb70 	bl	800504e <HAL_SPI_Receive>
  return retVal;
 800196e:	79fb      	ldrb	r3, [r7, #7]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000011c 	.word	0x2000011c

0800197c <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	b29a      	uxth	r2, r3
 800198c:	230a      	movs	r3, #10
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <SPI_RxBuffer+0x24>)
 8001992:	f003 fb5c 	bl	800504e <HAL_SPI_Receive>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000011c 	.word	0x2000011c

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e2:	2007      	movs	r0, #7
 80019e4:	f001 f8b4 	bl	8002b50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a40      	ldr	r2, [pc, #256]	@ (8001b14 <HAL_ADC_MspInit+0x120>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d179      	bne.n	8001b0a <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b3c      	ldr	r3, [pc, #240]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a37      	ldr	r2, [pc, #220]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b31      	ldr	r3, [pc, #196]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <HAL_ADC_MspInit+0x124>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4827      	ldr	r0, [pc, #156]	@ (8001b1c <HAL_ADC_MspInit+0x128>)
 8001a7e:	f001 fc19 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a82:	2330      	movs	r3, #48	@ 0x30
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4822      	ldr	r0, [pc, #136]	@ (8001b20 <HAL_ADC_MspInit+0x12c>)
 8001a96:	f001 fc0d 	bl	80032b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a9a:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001a9c:	4a22      	ldr	r2, [pc, #136]	@ (8001b28 <HAL_ADC_MspInit+0x134>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001ab4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001abc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ac0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001ac4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ac8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001ad2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ad6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ade:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001ae0:	f001 f878 	bl	8002bd4 <HAL_DMA_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001aea:	f7ff fbdb 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a0c      	ldr	r2, [pc, #48]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001af2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <HAL_ADC_MspInit+0x130>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2012      	movs	r0, #18
 8001b00:	f001 f831 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b04:	2012      	movs	r0, #18
 8001b06:	f001 f84a 	bl	8002b9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	@ 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40012000 	.word	0x40012000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020800 	.word	0x40020800
 8001b24:	2000021c 	.word	0x2000021c
 8001b28:	40026410 	.word	0x40026410

08001b2c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	@ 0x38
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3d      	ldr	r2, [pc, #244]	@ (8001c50 <HAL_I2S_MspInit+0x124>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d174      	bne.n	8001c48 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b62:	23c0      	movs	r3, #192	@ 0xc0
 8001b64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 ff52 	bl	8004a18 <HAL_RCCEx_PeriphCLKConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001b7a:	f7ff fb93 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <HAL_I2S_MspInit+0x128>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a33      	ldr	r2, [pc, #204]	@ (8001c54 <HAL_I2S_MspInit+0x128>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <HAL_I2S_MspInit+0x128>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <HAL_I2S_MspInit+0x128>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c54 <HAL_I2S_MspInit+0x128>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <HAL_I2S_MspInit+0x128>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001bb6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4821      	ldr	r0, [pc, #132]	@ (8001c58 <HAL_I2S_MspInit+0x12c>)
 8001bd4:	f001 fb6e 	bl	80032b4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001bda:	4a21      	ldr	r2, [pc, #132]	@ (8001c60 <HAL_I2S_MspInit+0x134>)
 8001bdc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bfe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c06:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001c2c:	480b      	ldr	r0, [pc, #44]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c2e:	f000 ffd1 	bl	8002bd4 <HAL_DMA_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001c38:	f7ff fb34 	bl	80012a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c42:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <HAL_I2S_MspInit+0x130>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001c48:	bf00      	nop
 8001c4a:	3738      	adds	r7, #56	@ 0x38
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40003800 	.word	0x40003800
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	20000174 	.word	0x20000174
 8001c60:	40026070 	.word	0x40026070

08001c64 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a19      	ldr	r2, [pc, #100]	@ (8001ce8 <HAL_SPI_MspInit+0x84>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12c      	bne.n	8001ce0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <HAL_SPI_MspInit+0x88>)
 8001c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_SPI_MspInit+0x88>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	@ (8001cec <HAL_SPI_MspInit+0x88>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_SPI_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cbe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <HAL_SPI_MspInit+0x8c>)
 8001cdc:	f001 faea 	bl	80032b4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	@ 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40003c00 	.word	0x40003c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800

08001cf4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0e      	ldr	r2, [pc, #56]	@ (8001d3c <HAL_TIM_Base_MspInit+0x48>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d115      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <HAL_TIM_Base_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d40 <HAL_TIM_Base_MspInit+0x4c>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_TIM_Base_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	201d      	movs	r0, #29
 8001d28:	f000 ff1d 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d2c:	201d      	movs	r0, #29
 8001d2e:	f000 ff36 	bl	8002b9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40023800 	.word	0x40023800

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 f8b9 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <DMA1_Stream4_IRQHandler+0x10>)
 8001daa:	f001 f819 	bl	8002de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000174 	.word	0x20000174

08001db8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <ADC_IRQHandler+0x10>)
 8001dbe:	f000 f92e 	bl	800201e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000027c 	.word	0x2000027c

08001dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <TIM3_IRQHandler+0x10>)
 8001dd2:	f003 fdf9 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000d4 	.word	0x200000d4

08001de0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <DMA2_Stream0_IRQHandler+0x10>)
 8001de6:	f000 fffb 	bl	8002de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000021c 	.word	0x2000021c

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e1c:	f7ff ffea 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	@ (8001e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	@ (8001e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f004 f959 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff fb3f 	bl	80014cc <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001e5c:	0805625c 	.word	0x0805625c
  ldr r2, =_sbss
 8001e60:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001e64:	200002c8 	.word	0x200002c8

08001e68 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <DMA1_Stream0_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 fe5b 	bl	8002b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f808 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fd80 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fe73 	bl	8002bba <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 fe3b 	bl	8002b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000010 	.word	0x20000010
 8001f34:	200002c4 	.word	0x200002c4

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200002c4 	.word	0x200002c4

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000010 	.word	0x20000010

08001f98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e033      	b.n	8002016 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fd1c 	bl	80019f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d118      	bne.n	8002008 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fde:	f023 0302 	bic.w	r3, r3, #2
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fb58 	bl	80026a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
 8002006:	e001      	b.n	800200c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d049      	beq.n	80020e8 <HAL_ADC_IRQHandler+0xca>
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d046      	beq.n	80020e8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d12b      	bne.n	80020d8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	d127      	bne.n	80020d8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d119      	bne.n	80020d8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0220 	bic.w	r2, r2, #32
 80020b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe fdf1 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0212 	mvn.w	r2, #18
 80020e6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d057      	beq.n	80021ae <HAL_ADC_IRQHandler+0x190>
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d054      	beq.n	80021ae <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d139      	bne.n	800219e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002130:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002142:	2b00      	cmp	r3, #0
 8002144:	d12b      	bne.n	800219e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d124      	bne.n	800219e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11d      	bne.n	800219e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002178:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fbfc 	bl	800299c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 020c 	mvn.w	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021bc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x1d6>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d014      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10d      	bne.n	80021f4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f925 	bl	8002434 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f06f 0201 	mvn.w	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002202:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_ADC_IRQHandler+0x218>
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0220 	mvn.w	r2, #32
 8002224:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f90e 	bl	8002448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0220 	mvn.w	r2, #32
 8002234:	601a      	str	r2, [r3, #0]
  }
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_ADC_Start_DMA+0x1e>
 800225a:	2302      	movs	r3, #2
 800225c:	e0ce      	b.n	80023fc <HAL_ADC_Start_DMA+0x1bc>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d018      	beq.n	80022a6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002284:	4b5f      	ldr	r3, [pc, #380]	@ (8002404 <HAL_ADC_Start_DMA+0x1c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5f      	ldr	r2, [pc, #380]	@ (8002408 <HAL_ADC_Start_DMA+0x1c8>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0c9a      	lsrs	r2, r3, #18
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002298:	e002      	b.n	80022a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3b01      	subs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b4:	d107      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 8086 	bne.w	80023e2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002300:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002314:	d106      	bne.n	8002324 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f023 0206 	bic.w	r2, r3, #6
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
 8002322:	e002      	b.n	800232a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002332:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_ADC_Start_DMA+0x1cc>)
 8002334:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	4a35      	ldr	r2, [pc, #212]	@ (8002410 <HAL_ADC_Start_DMA+0x1d0>)
 800233c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	4a34      	ldr	r2, [pc, #208]	@ (8002414 <HAL_ADC_Start_DMA+0x1d4>)
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	4a33      	ldr	r2, [pc, #204]	@ (8002418 <HAL_ADC_Start_DMA+0x1d8>)
 800234c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002356:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002366:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002376:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	334c      	adds	r3, #76	@ 0x4c
 8002382:	4619      	mov	r1, r3
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f000 fcd2 	bl	8002d30 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10f      	bne.n	80023b8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d129      	bne.n	80023fa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	e020      	b.n	80023fa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_ADC_Start_DMA+0x1dc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11b      	bne.n	80023fa <HAL_ADC_Start_DMA+0x1ba>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d114      	bne.n	80023fa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	e00b      	b.n	80023fa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f043 0210 	orr.w	r2, r3, #16
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000008 	.word	0x20000008
 8002408:	431bde83 	.word	0x431bde83
 800240c:	40012300 	.word	0x40012300
 8002410:	08002899 	.word	0x08002899
 8002414:	08002953 	.word	0x08002953
 8002418:	0800296f 	.word	0x0800296f
 800241c:	40012000 	.word	0x40012000

08002420 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c>
 8002474:	2302      	movs	r3, #2
 8002476:	e105      	b.n	8002684 <HAL_ADC_ConfigChannel+0x228>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b09      	cmp	r3, #9
 8002486:	d925      	bls.n	80024d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68d9      	ldr	r1, [r3, #12]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	2207      	movs	r2, #7
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43da      	mvns	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	400a      	ands	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68d9      	ldr	r1, [r3, #12]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4403      	add	r3, r0
 80024c6:	3b1e      	subs	r3, #30
 80024c8:	409a      	lsls	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e022      	b.n	800251a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	2207      	movs	r2, #7
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	4603      	mov	r3, r0
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4403      	add	r3, r0
 8002510:	409a      	lsls	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d824      	bhi.n	800256c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b05      	subs	r3, #5
 8002534:	221f      	movs	r2, #31
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b05      	subs	r3, #5
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	635a      	str	r2, [r3, #52]	@ 0x34
 800256a:	e04c      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d824      	bhi.n	80025be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b23      	subs	r3, #35	@ 0x23
 8002586:	221f      	movs	r2, #31
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43da      	mvns	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	400a      	ands	r2, r1
 8002594:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b23      	subs	r3, #35	@ 0x23
 80025b0:	fa00 f203 	lsl.w	r2, r0, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80025bc:	e023      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	@ 0x41
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b41      	subs	r3, #65	@ 0x41
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002606:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <HAL_ADC_ConfigChannel+0x234>)
 8002608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	@ (8002694 <HAL_ADC_ConfigChannel+0x238>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d109      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d105      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_ADC_ConfigChannel+0x238>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d123      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d003      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x1e6>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b11      	cmp	r3, #17
 8002640:	d11b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b10      	cmp	r3, #16
 8002654:	d111      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_ADC_ConfigChannel+0x23c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a10      	ldr	r2, [pc, #64]	@ (800269c <HAL_ADC_ConfigChannel+0x240>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9a      	lsrs	r2, r3, #18
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800266c:	e002      	b.n	8002674 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3b01      	subs	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000
 8002698:	20000008 	.word	0x20000008
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a8:	4b79      	ldr	r3, [pc, #484]	@ (8002890 <ADC_Init+0x1f0>)
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	021a      	lsls	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002732:	4a58      	ldr	r2, [pc, #352]	@ (8002894 <ADC_Init+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e00f      	b.n	800279e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800279c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0202 	bic.w	r2, r2, #2
 80027ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7e1b      	ldrb	r3, [r3, #24]
 80027b8:	005a      	lsls	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	3b01      	subs	r3, #1
 80027f8:	035a      	lsls	r2, r3, #13
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	e007      	b.n	8002814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002812:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	3b01      	subs	r3, #1
 8002830:	051a      	lsls	r2, r3, #20
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002856:	025a      	lsls	r2, r3, #9
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800286e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	029a      	lsls	r2, r3, #10
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40012300 	.word	0x40012300
 8002894:	0f000001 	.word	0x0f000001

08002898 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d13c      	bne.n	800292c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d12b      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d127      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d119      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0220 	bic.w	r2, r2, #32
 80028fe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7fe f9cb 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800292a:	e00e      	b.n	800294a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff fd85 	bl	8002448 <HAL_ADC_ErrorCallback>
}
 800293e:	e004      	b.n	800294a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fd5d 	bl	8002420 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2240      	movs	r2, #64	@ 0x40
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fd5a 	bl	8002448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4907      	ldr	r1, [pc, #28]	@ (8002a4c <__NVIC_EnableIRQ+0x38>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	@ (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	@ (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	@ 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b1c:	d301      	bcc.n	8002b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b22:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <SysTick_Config+0x40>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f7ff ff8e 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <SysTick_Config+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3a:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <SysTick_Config+0x40>)
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000e010 	.word	0xe000e010

08002b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff29 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff3e 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff8e 	bl	8002aa4 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5d 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff31 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffa2 	bl	8002b0c <SysTick_Config>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff f9aa 	bl	8001f38 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e099      	b.n	8002d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c10:	e00f      	b.n	8002c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c12:	f7ff f991 	bl	8001f38 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d908      	bls.n	8002c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e078      	b.n	8002d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e8      	bne.n	8002c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <HAL_DMA_Init+0x158>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	4313      	orrs	r3, r2
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0307 	bic.w	r3, r3, #7
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d117      	bne.n	8002cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa6f 	bl	80031bc <DMA_CheckFifoParam>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2240      	movs	r2, #64	@ 0x40
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e016      	b.n	8002d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa26 	bl	8003150 <DMA_CalcBaseAndBitshift>
 8002d04:	4603      	mov	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	223f      	movs	r2, #63	@ 0x3f
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	f010803f 	.word	0xf010803f

08002d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Start_IT+0x26>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e040      	b.n	8002dd8 <HAL_DMA_Start_IT+0xa8>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d12f      	bne.n	8002dca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f9b8 	bl	80030f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	223f      	movs	r2, #63	@ 0x3f
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0216 	orr.w	r2, r2, #22
 8002d9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e005      	b.n	8002dd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dec:	4b8e      	ldr	r3, [pc, #568]	@ (8003028 <HAL_DMA_IRQHandler+0x248>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a8e      	ldr	r2, [pc, #568]	@ (800302c <HAL_DMA_IRQHandler+0x24c>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01a      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	2208      	movs	r2, #8
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	2201      	movs	r2, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d012      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	2201      	movs	r2, #1
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	f043 0202 	orr.w	r2, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	2204      	movs	r2, #4
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d012      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb0:	f043 0204 	orr.w	r2, r3, #4
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d043      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03c      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	2210      	movs	r2, #16
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d018      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d024      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
 8002f0e:	e01f      	b.n	8002f50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
 8002f20:	e016      	b.n	8002f50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0208 	bic.w	r2, r2, #8
 8002f3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	2220      	movs	r2, #32
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 808f 	beq.w	8003080 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8087 	beq.w	8003080 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	2220      	movs	r2, #32
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d136      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0216 	bic.w	r2, r2, #22
 8002f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <HAL_DMA_IRQHandler+0x1da>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0208 	bic.w	r2, r2, #8
 8002fc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	223f      	movs	r2, #63	@ 0x3f
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d07e      	beq.n	80030ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
        }
        return;
 8002ff6:	e079      	b.n	80030ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01d      	beq.n	8003042 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	2b00      	cmp	r3, #0
 800301a:	d031      	beq.n	8003080 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e02c      	b.n	8003080 <HAL_DMA_IRQHandler+0x2a0>
 8003026:	bf00      	nop
 8003028:	20000008 	.word	0x20000008
 800302c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d023      	beq.n	8003080 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
 8003040:	e01e      	b.n	8003080 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10f      	bne.n	8003070 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0210 	bic.w	r2, r2, #16
 800305e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	2b00      	cmp	r3, #0
 8003086:	d032      	beq.n	80030ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d022      	beq.n	80030da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2205      	movs	r2, #5
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d307      	bcc.n	80030c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f2      	bne.n	80030ac <HAL_DMA_IRQHandler+0x2cc>
 80030c6:	e000      	b.n	80030ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4798      	blx	r3
 80030ea:	e000      	b.n	80030ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80030ec:	bf00      	nop
    }
  }
}
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003110:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b40      	cmp	r3, #64	@ 0x40
 8003120:	d108      	bne.n	8003134 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003132:	e007      	b.n	8003144 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3b10      	subs	r3, #16
 8003160:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800316a:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <DMA_CalcBaseAndBitshift+0x68>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d909      	bls.n	8003192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	1d1a      	adds	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003190:	e007      	b.n	80031a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	aaaaaaab 	.word	0xaaaaaaab
 80031b8:	08056244 	.word	0x08056244

080031bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11f      	bne.n	8003216 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d856      	bhi.n	800328a <DMA_CheckFifoParam+0xce>
 80031dc:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <DMA_CheckFifoParam+0x28>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003207 	.word	0x08003207
 80031ec:	080031f5 	.word	0x080031f5
 80031f0:	0800328b 	.word	0x0800328b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d046      	beq.n	800328e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003204:	e043      	b.n	800328e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800320e:	d140      	bne.n	8003292 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003214:	e03d      	b.n	8003292 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	d121      	bne.n	8003264 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d837      	bhi.n	8003296 <DMA_CheckFifoParam+0xda>
 8003226:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <DMA_CheckFifoParam+0x70>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	0800323d 	.word	0x0800323d
 8003230:	08003243 	.word	0x08003243
 8003234:	0800323d 	.word	0x0800323d
 8003238:	08003255 	.word	0x08003255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e030      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d025      	beq.n	800329a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003252:	e022      	b.n	800329a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800325c:	d11f      	bne.n	800329e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003262:	e01c      	b.n	800329e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d903      	bls.n	8003272 <DMA_CheckFifoParam+0xb6>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d003      	beq.n	8003278 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003270:	e018      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      break;
 8003276:	e015      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00e      	beq.n	80032a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      break;
 8003288:	e00b      	b.n	80032a2 <DMA_CheckFifoParam+0xe6>
      break;
 800328a:	bf00      	nop
 800328c:	e00a      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
 8003290:	e008      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003292:	bf00      	nop
 8003294:	e006      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <DMA_CheckFifoParam+0xe8>
      break;
 80032a2:	bf00      	nop
    }
  } 
  
  return status; 
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e159      	b.n	8003584 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	f040 8148 	bne.w	800357e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003302:	2b02      	cmp	r3, #2
 8003304:	d130      	bne.n	8003368 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800333c:	2201      	movs	r2, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 0201 	and.w	r2, r3, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d017      	beq.n	80033a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d123      	bne.n	80033f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	08da      	lsrs	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3208      	adds	r2, #8
 80033f2:	69b9      	ldr	r1, [r7, #24]
 80033f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a2 	beq.w	800357e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b57      	ldr	r3, [pc, #348]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	4a56      	ldr	r2, [pc, #344]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 8003444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003448:	6453      	str	r3, [r2, #68]	@ 0x44
 800344a:	4b54      	ldr	r3, [pc, #336]	@ (800359c <HAL_GPIO_Init+0x2e8>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003456:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	3302      	adds	r3, #2
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	220f      	movs	r2, #15
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a49      	ldr	r2, [pc, #292]	@ (80035a4 <HAL_GPIO_Init+0x2f0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d019      	beq.n	80034b6 <HAL_GPIO_Init+0x202>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a48      	ldr	r2, [pc, #288]	@ (80035a8 <HAL_GPIO_Init+0x2f4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x1fe>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_GPIO_Init+0x2f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x1fa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a46      	ldr	r2, [pc, #280]	@ (80035b0 <HAL_GPIO_Init+0x2fc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x1f6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a45      	ldr	r2, [pc, #276]	@ (80035b4 <HAL_GPIO_Init+0x300>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x1f2>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e008      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034aa:	2303      	movs	r3, #3
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x204>
 80034b6:	2300      	movs	r3, #0
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f002 0203 	and.w	r2, r2, #3
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c8:	4935      	ldr	r1, [pc, #212]	@ (80035a0 <HAL_GPIO_Init+0x2ec>)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fa:	4a2f      	ldr	r2, [pc, #188]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003524:	4a24      	ldr	r2, [pc, #144]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352a:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003578:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <HAL_GPIO_Init+0x304>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	f67f aea2 	bls.w	80032d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	40020400 	.word	0x40020400
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003608:	e003      	b.n	8003612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e128      	b.n	8003884 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a90      	ldr	r2, [pc, #576]	@ (800388c <HAL_I2S_Init+0x26c>)
 800364a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fe fa6d 	bl	8001b2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003668:	f023 030f 	bic.w	r3, r3, #15
 800366c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2202      	movs	r2, #2
 8003674:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d060      	beq.n	8003740 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003686:	2310      	movs	r3, #16
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e001      	b.n	8003690 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b20      	cmp	r3, #32
 8003696:	d802      	bhi.n	800369e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800369e:	2001      	movs	r0, #1
 80036a0:	f001 faa8 	bl	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq>
 80036a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ae:	d125      	bne.n	80036fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	3305      	adds	r3, #5
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e01f      	b.n	800371a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	3305      	adds	r3, #5
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	e00e      	b.n	800371a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fbb2 f2f3 	udiv	r2, r2, r3
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	3305      	adds	r3, #5
 8003718:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a5c      	ldr	r2, [pc, #368]	@ (8003890 <HAL_I2S_Init+0x270>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	08db      	lsrs	r3, r3, #3
 8003724:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003740:	2302      	movs	r3, #2
 8003742:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d902      	bls.n	8003754 <HAL_I2S_Init+0x134>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2bff      	cmp	r3, #255	@ 0xff
 8003752:	d907      	bls.n	8003764 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003758:	f043 0210 	orr.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e08f      	b.n	8003884 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	ea42 0103 	orr.w	r1, r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	430a      	orrs	r2, r1
 8003776:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003782:	f023 030f 	bic.w	r3, r3, #15
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6851      	ldr	r1, [r2, #4]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68d2      	ldr	r2, [r2, #12]
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6992      	ldr	r2, [r2, #24]
 800379a:	430a      	orrs	r2, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d161      	bne.n	8003874 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a38      	ldr	r2, [pc, #224]	@ (8003894 <HAL_I2S_Init+0x274>)
 80037b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a37      	ldr	r2, [pc, #220]	@ (8003898 <HAL_I2S_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_I2S_Init+0x1a4>
 80037c0:	4b36      	ldr	r3, [pc, #216]	@ (800389c <HAL_I2S_Init+0x27c>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2S_Init+0x1a8>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4932      	ldr	r1, [pc, #200]	@ (8003898 <HAL_I2S_Init+0x278>)
 80037d0:	428a      	cmp	r2, r1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2S_Init+0x1b8>
 80037d4:	4a31      	ldr	r2, [pc, #196]	@ (800389c <HAL_I2S_Init+0x27c>)
 80037d6:	e001      	b.n	80037dc <HAL_I2S_Init+0x1bc>
 80037d8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80037dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003898 <HAL_I2S_Init+0x278>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_I2S_Init+0x1d4>
 80037f0:	4b2a      	ldr	r3, [pc, #168]	@ (800389c <HAL_I2S_Init+0x27c>)
 80037f2:	e001      	b.n	80037f8 <HAL_I2S_Init+0x1d8>
 80037f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037f8:	2202      	movs	r2, #2
 80037fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a25      	ldr	r2, [pc, #148]	@ (8003898 <HAL_I2S_Init+0x278>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_I2S_Init+0x1ea>
 8003806:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_I2S_Init+0x27c>)
 8003808:	e001      	b.n	800380e <HAL_I2S_Init+0x1ee>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381a:	d003      	beq.n	8003824 <HAL_I2S_Init+0x204>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003824:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e001      	b.n	8003830 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800383a:	4313      	orrs	r3, r2
 800383c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003844:	4313      	orrs	r3, r2
 8003846:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800384e:	4313      	orrs	r3, r2
 8003850:	b29a      	uxth	r2, r3
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	4313      	orrs	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800385c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <HAL_I2S_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_I2S_Init+0x24c>
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <HAL_I2S_Init+0x27c>)
 800386a:	e001      	b.n	8003870 <HAL_I2S_Init+0x250>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003870:	897a      	ldrh	r2, [r7, #10]
 8003872:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	08003b89 	.word	0x08003b89
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	08003c9d 	.word	0x08003c9d
 8003898:	40003800 	.word	0x40003800
 800389c:	40003400 	.word	0x40003400

080038a0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_I2S_Transmit_DMA+0x1a>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08a      	b.n	80039d4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d001      	beq.n	80038ce <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	e082      	b.n	80039d4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_I2S_Transmit_DMA+0x3e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e07a      	b.n	80039d4 <HAL_I2S_Transmit_DMA+0x134>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2203      	movs	r2, #3
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d002      	beq.n	8003912 <HAL_I2S_Transmit_DMA+0x72>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d10a      	bne.n	8003928 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003926:	e005      	b.n	8003934 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	4a28      	ldr	r2, [pc, #160]	@ (80039dc <HAL_I2S_Transmit_DMA+0x13c>)
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	4a27      	ldr	r2, [pc, #156]	@ (80039e0 <HAL_I2S_Transmit_DMA+0x140>)
 8003942:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	4a26      	ldr	r2, [pc, #152]	@ (80039e4 <HAL_I2S_Transmit_DMA+0x144>)
 800394a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003954:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800395c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003964:	f7ff f9e4 	bl	8002d30 <HAL_DMA_Start_IT>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f043 0208 	orr.w	r2, r3, #8
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0202 	orr.w	r2, r2, #2
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	08003a67 	.word	0x08003a67
 80039e0:	08003a25 	.word	0x08003a25
 80039e4:	08003a83 	.word	0x08003a83

080039e8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10e      	bne.n	8003a58 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0202 	bic.w	r2, r2, #2
 8003a48:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7fd fb63 	bl	8001124 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff ffb7 	bl	80039e8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0203 	bic.w	r2, r2, #3
 8003a9e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	f043 0208 	orr.w	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff ffa5 	bl	8003a10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	881a      	ldrh	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	1c9a      	adds	r2, r3, #2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10e      	bne.n	8003b22 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7fd fb01 	bl	8001124 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	b292      	uxth	r2, r2
 8003b3e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10e      	bne.n	8003b80 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ff3e 	bl	80039fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d13a      	bne.n	8003c1a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d109      	bne.n	8003bc2 <I2S_IRQHandler+0x3a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d102      	bne.n	8003bc2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ffb4 	bl	8003b2a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d126      	bne.n	8003c1a <I2S_IRQHandler+0x92>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d11f      	bne.n	8003c1a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003be8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0c:	f043 0202 	orr.w	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fefb 	bl	8003a10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d136      	bne.n	8003c94 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d109      	bne.n	8003c44 <I2S_IRQHandler+0xbc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3a:	2b80      	cmp	r3, #128	@ 0x80
 8003c3c:	d102      	bne.n	8003c44 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff45 	bl	8003ace <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d122      	bne.n	8003c94 <I2S_IRQHandler+0x10c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d11b      	bne.n	8003c94 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c6a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff febe 	bl	8003a10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a92      	ldr	r2, [pc, #584]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cb6:	4b92      	ldr	r3, [pc, #584]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb8:	e001      	b.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a8b      	ldr	r2, [pc, #556]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003cd4:	4b8a      	ldr	r3, [pc, #552]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cd6:	e001      	b.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce8:	d004      	beq.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 8099 	bne.w	8003e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d107      	bne.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f925 	bl	8003f58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9c8 	bl	80040b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d13a      	bne.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d035      	beq.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d46:	4b6e      	ldr	r3, [pc, #440]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d48:	e001      	b.n	8003d4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4969      	ldr	r1, [pc, #420]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d56:	428b      	cmp	r3, r1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d5a:	4b69      	ldr	r3, [pc, #420]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d5c:	e001      	b.n	8003d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fe34 	bl	8003a10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	f040 80c3 	bne.w	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80bd 	beq.w	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a49      	ldr	r2, [pc, #292]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dda:	4b49      	ldr	r3, [pc, #292]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ddc:	e001      	b.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4944      	ldr	r1, [pc, #272]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003dee:	4b44      	ldr	r3, [pc, #272]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dfa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fdf6 	bl	8003a10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e24:	e089      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8be 	bl	8003fbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f8fd 	bl	8004054 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b40      	cmp	r3, #64	@ 0x40
 8003e62:	d12f      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02a      	beq.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8a:	e001      	b.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4919      	ldr	r1, [pc, #100]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e9c:	4b18      	ldr	r3, [pc, #96]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e9e:	e001      	b.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ea0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fda6 	bl	8003a10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d136      	bne.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d031      	beq.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4902      	ldr	r1, [pc, #8]	@ (8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	d106      	bne.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ef6:	4b02      	ldr	r3, [pc, #8]	@ (8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef8:	e006      	b.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003efa:	bf00      	nop
 8003efc:	40003800 	.word	0x40003800
 8003f00:	40003400 	.word	0x40003400
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fd6c 	bl	8003a10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	e000      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f3a:	bf00      	nop
}
 8003f3c:	bf00      	nop
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	1c99      	adds	r1, r3, #2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6251      	str	r1, [r2, #36]	@ 0x24
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d113      	bne.n	8003fb2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ffc9 	bl	8003f44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	1c99      	adds	r1, r3, #2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6251      	str	r1, [r2, #36]	@ 0x24
 8003fce:	8819      	ldrh	r1, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800404c <I2SEx_TxISR_I2SExt+0x90>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <I2SEx_TxISR_I2SExt+0x22>
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <I2SEx_TxISR_I2SExt+0x94>)
 8003fdc:	e001      	b.n	8003fe2 <I2SEx_TxISR_I2SExt+0x26>
 8003fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d121      	bne.n	8004042 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a12      	ldr	r2, [pc, #72]	@ (800404c <I2SEx_TxISR_I2SExt+0x90>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <I2SEx_TxISR_I2SExt+0x50>
 8004008:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <I2SEx_TxISR_I2SExt+0x94>)
 800400a:	e001      	b.n	8004010 <I2SEx_TxISR_I2SExt+0x54>
 800400c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	490d      	ldr	r1, [pc, #52]	@ (800404c <I2SEx_TxISR_I2SExt+0x90>)
 8004018:	428b      	cmp	r3, r1
 800401a:	d101      	bne.n	8004020 <I2SEx_TxISR_I2SExt+0x64>
 800401c:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <I2SEx_TxISR_I2SExt+0x94>)
 800401e:	e001      	b.n	8004024 <I2SEx_TxISR_I2SExt+0x68>
 8004020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004024:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004028:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ff81 	bl	8003f44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40003800 	.word	0x40003800
 8004050:	40003400 	.word	0x40003400

08004054 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68d8      	ldr	r0, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	1c99      	adds	r1, r3, #2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800406c:	b282      	uxth	r2, r0
 800406e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d113      	bne.n	80040b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004096:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ff4a 	bl	8003f44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a20      	ldr	r2, [pc, #128]	@ (8004148 <I2SEx_RxISR_I2SExt+0x90>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <I2SEx_RxISR_I2SExt+0x16>
 80040ca:	4b20      	ldr	r3, [pc, #128]	@ (800414c <I2SEx_RxISR_I2SExt+0x94>)
 80040cc:	e001      	b.n	80040d2 <I2SEx_RxISR_I2SExt+0x1a>
 80040ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d2:	68d8      	ldr	r0, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	1c99      	adds	r1, r3, #2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040de:	b282      	uxth	r2, r0
 80040e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d121      	bne.n	800413e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <I2SEx_RxISR_I2SExt+0x90>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <I2SEx_RxISR_I2SExt+0x50>
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <I2SEx_RxISR_I2SExt+0x94>)
 8004106:	e001      	b.n	800410c <I2SEx_RxISR_I2SExt+0x54>
 8004108:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	490d      	ldr	r1, [pc, #52]	@ (8004148 <I2SEx_RxISR_I2SExt+0x90>)
 8004114:	428b      	cmp	r3, r1
 8004116:	d101      	bne.n	800411c <I2SEx_RxISR_I2SExt+0x64>
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <I2SEx_RxISR_I2SExt+0x94>)
 800411a:	e001      	b.n	8004120 <I2SEx_RxISR_I2SExt+0x68>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004120:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004124:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff03 	bl	8003f44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40003800 	.word	0x40003800
 800414c:	40003400 	.word	0x40003400

08004150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e267      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d075      	beq.n	800425a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800416e:	4b88      	ldr	r3, [pc, #544]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b04      	cmp	r3, #4
 8004178:	d00c      	beq.n	8004194 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417a:	4b85      	ldr	r3, [pc, #532]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004182:	2b08      	cmp	r3, #8
 8004184:	d112      	bne.n	80041ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4b82      	ldr	r3, [pc, #520]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004192:	d10b      	bne.n	80041ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	4b7e      	ldr	r3, [pc, #504]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05b      	beq.n	8004258 <HAL_RCC_OscConfig+0x108>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d157      	bne.n	8004258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e242      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b4:	d106      	bne.n	80041c4 <HAL_RCC_OscConfig+0x74>
 80041b6:	4b76      	ldr	r3, [pc, #472]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a75      	ldr	r2, [pc, #468]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e01d      	b.n	8004200 <HAL_RCC_OscConfig+0xb0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x98>
 80041ce:	4b70      	ldr	r3, [pc, #448]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b6d      	ldr	r3, [pc, #436]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6c      	ldr	r2, [pc, #432]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0xb0>
 80041e8:	4b69      	ldr	r3, [pc, #420]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a68      	ldr	r2, [pc, #416]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	4b66      	ldr	r3, [pc, #408]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a65      	ldr	r2, [pc, #404]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd fe96 	bl	8001f38 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd fe92 	bl	8001f38 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e207      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4b5b      	ldr	r3, [pc, #364]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0xc0>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd fe82 	bl	8001f38 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fd fe7e 	bl	8001f38 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	@ 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e1f3      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	4b51      	ldr	r3, [pc, #324]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0xe8>
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d063      	beq.n	800432e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004266:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004272:	4b47      	ldr	r3, [pc, #284]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800427a:	2b08      	cmp	r3, #8
 800427c:	d11c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427e:	4b44      	ldr	r3, [pc, #272]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d116      	bne.n	80042b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428a:	4b41      	ldr	r3, [pc, #260]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_RCC_OscConfig+0x152>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d001      	beq.n	80042a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e1c7      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4937      	ldr	r1, [pc, #220]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b6:	e03a      	b.n	800432e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c0:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <HAL_RCC_OscConfig+0x244>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fe37 	bl	8001f38 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fd fe33 	bl	8001f38 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e1a8      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ec:	4b28      	ldr	r3, [pc, #160]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4925      	ldr	r1, [pc, #148]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	600b      	str	r3, [r1, #0]
 8004300:	e015      	b.n	800432e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004302:	4b24      	ldr	r3, [pc, #144]	@ (8004394 <HAL_RCC_OscConfig+0x244>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fe16 	bl	8001f38 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fd fe12 	bl	8001f38 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e187      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d036      	beq.n	80043a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004342:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <HAL_RCC_OscConfig+0x248>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fd fdf6 	bl	8001f38 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004350:	f7fd fdf2 	bl	8001f38 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e167      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_RCC_OscConfig+0x240>)
 8004364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x200>
 800436e:	e01b      	b.n	80043a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004370:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <HAL_RCC_OscConfig+0x248>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004376:	f7fd fddf 	bl	8001f38 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800437c:	e00e      	b.n	800439c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437e:	f7fd fddb 	bl	8001f38 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d907      	bls.n	800439c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e150      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
 8004390:	40023800 	.word	0x40023800
 8004394:	42470000 	.word	0x42470000
 8004398:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439c:	4b88      	ldr	r3, [pc, #544]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800439e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ea      	bne.n	800437e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8097 	beq.w	80044e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b81      	ldr	r3, [pc, #516]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	4b7d      	ldr	r3, [pc, #500]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	4a7c      	ldr	r2, [pc, #496]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043d6:	4b7a      	ldr	r3, [pc, #488]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b77      	ldr	r3, [pc, #476]	@ (80045c4 <HAL_RCC_OscConfig+0x474>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d118      	bne.n	8004424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f2:	4b74      	ldr	r3, [pc, #464]	@ (80045c4 <HAL_RCC_OscConfig+0x474>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a73      	ldr	r2, [pc, #460]	@ (80045c4 <HAL_RCC_OscConfig+0x474>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fd fd9b 	bl	8001f38 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fd fd97 	bl	8001f38 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e10c      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	4b6a      	ldr	r3, [pc, #424]	@ (80045c4 <HAL_RCC_OscConfig+0x474>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d106      	bne.n	800443a <HAL_RCC_OscConfig+0x2ea>
 800442c:	4b64      	ldr	r3, [pc, #400]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a63      	ldr	r2, [pc, #396]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
 8004438:	e01c      	b.n	8004474 <HAL_RCC_OscConfig+0x324>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b05      	cmp	r3, #5
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x30c>
 8004442:	4b5f      	ldr	r3, [pc, #380]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	4a5e      	ldr	r2, [pc, #376]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	6713      	str	r3, [r2, #112]	@ 0x70
 800444e:	4b5c      	ldr	r3, [pc, #368]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	4a5b      	ldr	r2, [pc, #364]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	6713      	str	r3, [r2, #112]	@ 0x70
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0x324>
 800445c:	4b58      	ldr	r3, [pc, #352]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004460:	4a57      	ldr	r2, [pc, #348]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	@ 0x70
 8004468:	4b55      	ldr	r3, [pc, #340]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	4a54      	ldr	r2, [pc, #336]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd fd5c 	bl	8001f38 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004482:	e00a      	b.n	800449a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fd fd58 	bl	8001f38 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e0cb      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	4b49      	ldr	r3, [pc, #292]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0ee      	beq.n	8004484 <HAL_RCC_OscConfig+0x334>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a8:	f7fd fd46 	bl	8001f38 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b0:	f7fd fd42 	bl	8001f38 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e0b5      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c6:	4b3e      	ldr	r3, [pc, #248]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1ee      	bne.n	80044b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d105      	bne.n	80044e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d8:	4b39      	ldr	r3, [pc, #228]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	4a38      	ldr	r2, [pc, #224]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80a1 	beq.w	8004630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ee:	4b34      	ldr	r3, [pc, #208]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d05c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d141      	bne.n	8004586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b31      	ldr	r3, [pc, #196]	@ (80045c8 <HAL_RCC_OscConfig+0x478>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fd fd16 	bl	8001f38 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004510:	f7fd fd12 	bl	8001f38 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e087      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69da      	ldr	r2, [r3, #28]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	019b      	lsls	r3, r3, #6
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	3b01      	subs	r3, #1
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	491b      	ldr	r1, [pc, #108]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004558:	4b1b      	ldr	r3, [pc, #108]	@ (80045c8 <HAL_RCC_OscConfig+0x478>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7fd fceb 	bl	8001f38 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004566:	f7fd fce7 	bl	8001f38 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e05c      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004578:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x416>
 8004584:	e054      	b.n	8004630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004586:	4b10      	ldr	r3, [pc, #64]	@ (80045c8 <HAL_RCC_OscConfig+0x478>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd fcd4 	bl	8001f38 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004594:	f7fd fcd0 	bl	8001f38 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e045      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_OscConfig+0x470>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x444>
 80045b2:	e03d      	b.n	8004630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e038      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40007000 	.word	0x40007000
 80045c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCC_OscConfig+0x4ec>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d028      	beq.n	800462c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d121      	bne.n	800462c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d11a      	bne.n	800462c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045fc:	4013      	ands	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004604:	4293      	cmp	r3, r2
 8004606:	d111      	bne.n	800462c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	3b01      	subs	r3, #1
 8004616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d107      	bne.n	800462c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800

08004640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0cc      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004654:	4b68      	ldr	r3, [pc, #416]	@ (80047f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d90c      	bls.n	800467c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b65      	ldr	r3, [pc, #404]	@ (80047f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b63      	ldr	r3, [pc, #396]	@ (80047f8 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0b8      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004694:	4b59      	ldr	r3, [pc, #356]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a58      	ldr	r2, [pc, #352]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800469e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046ac:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a52      	ldr	r2, [pc, #328]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b8:	4b50      	ldr	r3, [pc, #320]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	494d      	ldr	r1, [pc, #308]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d044      	beq.n	8004760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	4b47      	ldr	r3, [pc, #284]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d119      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e07f      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d003      	beq.n	80046fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d107      	bne.n	800470e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fe:	4b3f      	ldr	r3, [pc, #252]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e06f      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	4b3b      	ldr	r3, [pc, #236]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e067      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471e:	4b37      	ldr	r3, [pc, #220]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	4934      	ldr	r1, [pc, #208]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004730:	f7fd fc02 	bl	8001f38 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	e00a      	b.n	800474e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004738:	f7fd fbfe 	bl	8001f38 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e04f      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474e:	4b2b      	ldr	r3, [pc, #172]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 020c 	and.w	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	429a      	cmp	r2, r3
 800475e:	d1eb      	bne.n	8004738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004760:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d20c      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b20      	ldr	r3, [pc, #128]	@ (80047f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e032      	b.n	80047ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004794:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4916      	ldr	r1, [pc, #88]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047b2:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	490e      	ldr	r1, [pc, #56]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047c6:	f000 f821 	bl	800480c <HAL_RCC_GetSysClockFreq>
 80047ca:	4602      	mov	r2, r0
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	490a      	ldr	r1, [pc, #40]	@ (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	5ccb      	ldrb	r3, [r1, r3]
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047e2:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fb62 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023c00 	.word	0x40023c00
 80047fc:	40023800 	.word	0x40023800
 8004800:	08056234 	.word	0x08056234
 8004804:	20000008 	.word	0x20000008
 8004808:	2000000c 	.word	0x2000000c

0800480c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800480c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004810:	b094      	sub	sp, #80	@ 0x50
 8004812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004824:	4b79      	ldr	r3, [pc, #484]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	d00d      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x40>
 8004830:	2b08      	cmp	r3, #8
 8004832:	f200 80e1 	bhi.w	80049f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x34>
 800483a:	2b04      	cmp	r3, #4
 800483c:	d003      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x3a>
 800483e:	e0db      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004840:	4b73      	ldr	r3, [pc, #460]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004844:	e0db      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004846:	4b73      	ldr	r3, [pc, #460]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800484a:	e0d8      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800484c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004854:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004856:	4b6d      	ldr	r3, [pc, #436]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d063      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004862:	4b6a      	ldr	r3, [pc, #424]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	2200      	movs	r2, #0
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800486c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	633b      	str	r3, [r7, #48]	@ 0x30
 8004876:	2300      	movs	r3, #0
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
 800487a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800487e:	4622      	mov	r2, r4
 8004880:	462b      	mov	r3, r5
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	0159      	lsls	r1, r3, #5
 800488c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004890:	0150      	lsls	r0, r2, #5
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4621      	mov	r1, r4
 8004898:	1a51      	subs	r1, r2, r1
 800489a:	6139      	str	r1, [r7, #16]
 800489c:	4629      	mov	r1, r5
 800489e:	eb63 0301 	sbc.w	r3, r3, r1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b0:	4659      	mov	r1, fp
 80048b2:	018b      	lsls	r3, r1, #6
 80048b4:	4651      	mov	r1, sl
 80048b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ba:	4651      	mov	r1, sl
 80048bc:	018a      	lsls	r2, r1, #6
 80048be:	4651      	mov	r1, sl
 80048c0:	ebb2 0801 	subs.w	r8, r2, r1
 80048c4:	4659      	mov	r1, fp
 80048c6:	eb63 0901 	sbc.w	r9, r3, r1
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048de:	4690      	mov	r8, r2
 80048e0:	4699      	mov	r9, r3
 80048e2:	4623      	mov	r3, r4
 80048e4:	eb18 0303 	adds.w	r3, r8, r3
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	462b      	mov	r3, r5
 80048ec:	eb49 0303 	adc.w	r3, r9, r3
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048fe:	4629      	mov	r1, r5
 8004900:	024b      	lsls	r3, r1, #9
 8004902:	4621      	mov	r1, r4
 8004904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004908:	4621      	mov	r1, r4
 800490a:	024a      	lsls	r2, r1, #9
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004912:	2200      	movs	r2, #0
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800491c:	f7fb fc5a 	bl	80001d4 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004928:	e058      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b38      	ldr	r3, [pc, #224]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	2200      	movs	r2, #0
 8004932:	4618      	mov	r0, r3
 8004934:	4611      	mov	r1, r2
 8004936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	f04f 0000 	mov.w	r0, #0
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	0159      	lsls	r1, r3, #5
 8004952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004956:	0150      	lsls	r0, r2, #5
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4641      	mov	r1, r8
 800495e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004962:	4649      	mov	r1, r9
 8004964:	eb63 0b01 	sbc.w	fp, r3, r1
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800497c:	ebb2 040a 	subs.w	r4, r2, sl
 8004980:	eb63 050b 	sbc.w	r5, r3, fp
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	464b      	mov	r3, r9
 80049a0:	eb45 0303 	adc.w	r3, r5, r3
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049b2:	4629      	mov	r1, r5
 80049b4:	028b      	lsls	r3, r1, #10
 80049b6:	4621      	mov	r1, r4
 80049b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049bc:	4621      	mov	r1, r4
 80049be:	028a      	lsls	r2, r1, #10
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049c6:	2200      	movs	r2, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	61fa      	str	r2, [r7, #28]
 80049cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d0:	f7fb fc00 	bl	80001d4 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049f6:	e002      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80049fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3750      	adds	r7, #80	@ 0x50
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	00f42400 	.word	0x00f42400
 8004a14:	007a1200 	.word	0x007a1200

08004a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d035      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a40:	4b67      	ldr	r3, [pc, #412]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a46:	f7fd fa77 	bl	8001f38 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a4e:	f7fd fa73 	bl	8001f38 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0ba      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a60:	4b60      	ldr	r3, [pc, #384]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	019a      	lsls	r2, r3, #6
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	495a      	ldr	r1, [pc, #360]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a80:	4b57      	ldr	r3, [pc, #348]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a86:	f7fd fa57 	bl	8001f38 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a8e:	f7fd fa53 	bl	8001f38 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e09a      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	4b50      	ldr	r3, [pc, #320]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8083 	beq.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b49      	ldr	r3, [pc, #292]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	4a48      	ldr	r2, [pc, #288]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aca:	4b46      	ldr	r3, [pc, #280]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ad6:	4b44      	ldr	r3, [pc, #272]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a43      	ldr	r2, [pc, #268]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ae2:	f7fd fa29 	bl	8001f38 <HAL_GetTick>
 8004ae6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aea:	f7fd fa25 	bl	8001f38 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e06c      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004afc:	4b3a      	ldr	r3, [pc, #232]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b08:	4b36      	ldr	r3, [pc, #216]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b10:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d028      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b26:	4b2f      	ldr	r3, [pc, #188]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b30:	4b2e      	ldr	r3, [pc, #184]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b36:	4b2d      	ldr	r3, [pc, #180]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b3c:	4a29      	ldr	r2, [pc, #164]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b42:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d114      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b4e:	f7fd f9f3 	bl	8001f38 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fd f9ef 	bl	8001f38 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e034      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ee      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b84:	d10d      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b86:	4b17      	ldr	r3, [pc, #92]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9a:	4912      	ldr	r1, [pc, #72]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
 8004ba0:	e005      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bba:	490a      	ldr	r1, [pc, #40]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7c1a      	ldrb	r2, [r3, #16]
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bd2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	42470068 	.word	0x42470068
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000
 8004bec:	42470e40 	.word	0x42470e40
 8004bf0:	424711e0 	.word	0x424711e0

08004bf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d13f      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c12:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c1a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c28:	d12f      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c2c:	617b      	str	r3, [r7, #20]
          break;
 8004c2e:	e02f      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c30:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c3c:	d108      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c46:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e007      	b.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c50:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c58:	4a15      	ldr	r2, [pc, #84]	@ (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c60:	4b10      	ldr	r3, [pc, #64]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7a:	0f1b      	lsrs	r3, r3, #28
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
          break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
          break;
 8004c8e:	bf00      	nop
        }
      }
      break;
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004c92:	bf00      	nop
    }
  }
  return frequency;
 8004c94:	697b      	ldr	r3, [r7, #20]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00bb8000 	.word	0x00bb8000
 8004cac:	007a1200 	.word	0x007a1200
 8004cb0:	00f42400 	.word	0x00f42400

08004cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07b      	b.n	8004dbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d108      	bne.n	8004ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cd6:	d009      	beq.n	8004cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	61da      	str	r2, [r3, #28]
 8004cde:	e005      	b.n	8004cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc ffac 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d70:	ea42 0103 	orr.w	r1, r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	f003 0104 	and.w	r1, r3, #4
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f003 0210 	and.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b088      	sub	sp, #32
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd6:	f7fd f8af 	bl	8001f38 <HAL_GetTick>
 8004dda:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d001      	beq.n	8004df0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
 8004dee:	e12a      	b.n	8005046 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit+0x36>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e122      	b.n	8005046 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_SPI_Transmit+0x48>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e11b      	b.n	8005046 <HAL_SPI_Transmit+0x280>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5c:	d10f      	bne.n	8004e7e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d007      	beq.n	8004e9c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea4:	d152      	bne.n	8004f4c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Transmit+0xee>
 8004eae:	8b7b      	ldrh	r3, [r7, #26]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d145      	bne.n	8004f40 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ed8:	e032      	b.n	8004f40 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d112      	bne.n	8004f0e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f0c:	e018      	b.n	8004f40 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f0e:	f7fd f813 	bl	8001f38 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d803      	bhi.n	8004f26 <HAL_SPI_Transmit+0x160>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d102      	bne.n	8004f2c <HAL_SPI_Transmit+0x166>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e082      	b.n	8005046 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1c7      	bne.n	8004eda <HAL_SPI_Transmit+0x114>
 8004f4a:	e053      	b.n	8004ff4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Transmit+0x194>
 8004f54:	8b7b      	ldrh	r3, [r7, #26]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d147      	bne.n	8004fea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f80:	e033      	b.n	8004fea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d113      	bne.n	8004fb8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	7812      	ldrb	r2, [r2, #0]
 8004f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fb6:	e018      	b.n	8004fea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb8:	f7fc ffbe 	bl	8001f38 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d803      	bhi.n	8004fd0 <HAL_SPI_Transmit+0x20a>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d102      	bne.n	8004fd6 <HAL_SPI_Transmit+0x210>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e02d      	b.n	8005046 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1c6      	bne.n	8004f82 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fbe7 	bl	80057cc <SPI_EndRxTxTransaction>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005044:	2300      	movs	r3, #0
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af02      	add	r7, sp, #8
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	e104      	b.n	8005278 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005076:	d112      	bne.n	800509e <HAL_SPI_Receive+0x50>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10e      	bne.n	800509e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2204      	movs	r2, #4
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f8f3 	bl	8005280 <HAL_SPI_TransmitReceive>
 800509a:	4603      	mov	r3, r0
 800509c:	e0ec      	b.n	8005278 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800509e:	f7fc ff4b 	bl	8001f38 <HAL_GetTick>
 80050a2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_Receive+0x62>
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0e1      	b.n	8005278 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_SPI_Receive+0x74>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0da      	b.n	8005278 <HAL_SPI_Receive+0x22a>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2204      	movs	r2, #4
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	88fa      	ldrh	r2, [r7, #6]
 80050e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005110:	d10f      	bne.n	8005132 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513c:	2b40      	cmp	r3, #64	@ 0x40
 800513e:	d007      	beq.n	8005150 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800514e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d170      	bne.n	800523a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005158:	e035      	b.n	80051c6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d115      	bne.n	8005194 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f103 020c 	add.w	r2, r3, #12
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005192:	e018      	b.n	80051c6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005194:	f7fc fed0 	bl	8001f38 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d803      	bhi.n	80051ac <HAL_SPI_Receive+0x15e>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_Receive+0x164>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e058      	b.n	8005278 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1c4      	bne.n	800515a <HAL_SPI_Receive+0x10c>
 80051d0:	e038      	b.n	8005244 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d113      	bne.n	8005208 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ea:	b292      	uxth	r2, r2
 80051ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005206:	e018      	b.n	800523a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005208:	f7fc fe96 	bl	8001f38 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d803      	bhi.n	8005220 <HAL_SPI_Receive+0x1d2>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d102      	bne.n	8005226 <HAL_SPI_Receive+0x1d8>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e01e      	b.n	8005278 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1c6      	bne.n	80051d2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fa59 	bl	8005700 <SPI_EndRxTransaction>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08a      	sub	sp, #40	@ 0x28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800528e:	2301      	movs	r3, #1
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005292:	f7fc fe51 	bl	8001f38 <HAL_GetTick>
 8005296:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800529e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052a6:	887b      	ldrh	r3, [r7, #2]
 80052a8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052aa:	7ffb      	ldrb	r3, [r7, #31]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d00c      	beq.n	80052ca <HAL_SPI_TransmitReceive+0x4a>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052b6:	d106      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x46>
 80052c0:	7ffb      	ldrb	r3, [r7, #31]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d001      	beq.n	80052ca <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
 80052c8:	e17f      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x5c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x5c>
 80052d6:	887b      	ldrh	r3, [r7, #2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e174      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_SPI_TransmitReceive+0x6e>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e16d      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d003      	beq.n	800530a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2205      	movs	r2, #5
 8005306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	887a      	ldrh	r2, [r7, #2]
 800531a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	887a      	ldrh	r2, [r7, #2]
 8005320:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	887a      	ldrh	r2, [r7, #2]
 800532c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d007      	beq.n	800535e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005366:	d17e      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_SPI_TransmitReceive+0xf6>
 8005370:	8afb      	ldrh	r3, [r7, #22]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d16c      	bne.n	8005450 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	881a      	ldrh	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539a:	e059      	b.n	8005450 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d11b      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x162>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d016      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x162>
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d113      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	881a      	ldrh	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	1c9a      	adds	r2, r3, #2
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d119      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x1a4>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d014      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	b292      	uxth	r2, r2
 8005406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	1c9a      	adds	r2, r3, #2
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005420:	2301      	movs	r3, #1
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005424:	f7fc fd88 	bl	8001f38 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005430:	429a      	cmp	r2, r3
 8005432:	d80d      	bhi.n	8005450 <HAL_SPI_TransmitReceive+0x1d0>
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d009      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e0bc      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1a0      	bne.n	800539c <HAL_SPI_TransmitReceive+0x11c>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d19b      	bne.n	800539c <HAL_SPI_TransmitReceive+0x11c>
 8005464:	e082      	b.n	800556c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_SPI_TransmitReceive+0x1f4>
 800546e:	8afb      	ldrh	r3, [r7, #22]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d171      	bne.n	8005558 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800549a:	e05d      	b.n	8005558 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d11c      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x264>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d017      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x264>
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d114      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d119      	bne.n	8005526 <HAL_SPI_TransmitReceive+0x2a6>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d014      	beq.n	8005526 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005522:	2301      	movs	r3, #1
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005526:	f7fc fd07 	bl	8001f38 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005532:	429a      	cmp	r2, r3
 8005534:	d803      	bhi.n	800553e <HAL_SPI_TransmitReceive+0x2be>
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d102      	bne.n	8005544 <HAL_SPI_TransmitReceive+0x2c4>
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e038      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d19c      	bne.n	800549c <HAL_SPI_TransmitReceive+0x21c>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d197      	bne.n	800549c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f92b 	bl	80057cc <SPI_EndRxTxTransaction>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e01d      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3728      	adds	r7, #40	@ 0x28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055e0:	b2db      	uxtb	r3, r3
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005600:	f7fc fc9a 	bl	8001f38 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	4413      	add	r3, r2
 800560e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005610:	f7fc fc92 	bl	8001f38 <HAL_GetTick>
 8005614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005616:	4b39      	ldr	r3, [pc, #228]	@ (80056fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	015b      	lsls	r3, r3, #5
 800561c:	0d1b      	lsrs	r3, r3, #20
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	fb02 f303 	mul.w	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005626:	e054      	b.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d050      	beq.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005630:	f7fc fc82 	bl	8001f38 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	429a      	cmp	r2, r3
 800563e:	d902      	bls.n	8005646 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d13d      	bne.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800565e:	d111      	bne.n	8005684 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005668:	d004      	beq.n	8005674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005672:	d107      	bne.n	8005684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568c:	d10f      	bne.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e017      	b.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d19b      	bne.n	8005628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000008 	.word	0x20000008

08005700 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005714:	d111      	bne.n	800573a <SPI_EndRxTransaction+0x3a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571e:	d004      	beq.n	800572a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005728:	d107      	bne.n	800573a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005738:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005742:	d12a      	bne.n	800579a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574c:	d012      	beq.n	8005774 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	@ 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff ff49 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d02d      	beq.n	80057c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e026      	b.n	80057c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	2101      	movs	r1, #1
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff ff36 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01a      	beq.n	80057c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e013      	b.n	80057c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2101      	movs	r1, #1
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff ff23 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e000      	b.n	80057c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2201      	movs	r2, #1
 80057e0:	2102      	movs	r1, #2
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff ff04 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e032      	b.n	8005864 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057fe:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <SPI_EndRxTxTransaction+0xa0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1b      	ldr	r2, [pc, #108]	@ (8005870 <SPI_EndRxTxTransaction+0xa4>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	0d5b      	lsrs	r3, r3, #21
 800580a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800581c:	d112      	bne.n	8005844 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	2180      	movs	r1, #128	@ 0x80
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fee1 	bl	80055f0 <SPI_WaitFlagStateUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e00f      	b.n	8005864 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	3b01      	subs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	2b80      	cmp	r3, #128	@ 0x80
 800585c:	d0f2      	beq.n	8005844 <SPI_EndRxTxTransaction+0x78>
 800585e:	e000      	b.n	8005862 <SPI_EndRxTxTransaction+0x96>
        break;
 8005860:	bf00      	nop
  }

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000008 	.word	0x20000008
 8005870:	165e9f81 	.word	0x165e9f81

08005874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e041      	b.n	800590a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fc fa2a 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f000 fa72 	bl	8005d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e03c      	b.n	80059a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <HAL_TIM_Base_Start+0xa0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005946:	d013      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1a      	ldr	r2, [pc, #104]	@ (80059b8 <HAL_TIM_Base_Start+0xa4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a19      	ldr	r2, [pc, #100]	@ (80059bc <HAL_TIM_Base_Start+0xa8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a17      	ldr	r2, [pc, #92]	@ (80059c0 <HAL_TIM_Base_Start+0xac>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a16      	ldr	r2, [pc, #88]	@ (80059c4 <HAL_TIM_Base_Start+0xb0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d111      	bne.n	8005994 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d010      	beq.n	80059a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005992:	e007      	b.n	80059a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40014000 	.word	0x40014000

080059c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d020      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0202 	mvn.w	r2, #2
 80059fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9a3 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f995 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f9a6 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d020      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0204 	mvn.w	r2, #4
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f97d 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f96f 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f980 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f957 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f949 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f95a 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0210 	mvn.w	r2, #16
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f931 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f923 	bl	8005d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f934 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0201 	mvn.w	r2, #1
 8005b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f901 	bl	8005d36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fac0 	bl	80060d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f905 	bl	8005d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0220 	mvn.w	r2, #32
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa92 	bl	80060c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e0b4      	b.n	8005d2e <HAL_TIM_ConfigClockSource+0x186>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfc:	d03e      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0xd4>
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c02:	f200 8087 	bhi.w	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c0a:	f000 8086 	beq.w	8005d1a <HAL_TIM_ConfigClockSource+0x172>
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c12:	d87f      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b70      	cmp	r3, #112	@ 0x70
 8005c16:	d01a      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xa6>
 8005c18:	2b70      	cmp	r3, #112	@ 0x70
 8005c1a:	d87b      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b60      	cmp	r3, #96	@ 0x60
 8005c1e:	d050      	beq.n	8005cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8005c20:	2b60      	cmp	r3, #96	@ 0x60
 8005c22:	d877      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b50      	cmp	r3, #80	@ 0x50
 8005c26:	d03c      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c28:	2b50      	cmp	r3, #80	@ 0x50
 8005c2a:	d873      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d058      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8005c30:	2b40      	cmp	r3, #64	@ 0x40
 8005c32:	d86f      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b30      	cmp	r3, #48	@ 0x30
 8005c36:	d064      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	2b30      	cmp	r3, #48	@ 0x30
 8005c3a:	d86b      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d060      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d867      	bhi.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05c      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d05a      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x15a>
 8005c4c:	e062      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c5e:	f000 f9a3 	bl	8005fa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	609a      	str	r2, [r3, #8]
      break;
 8005c7a:	e04f      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8c:	f000 f98c 	bl	8005fa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c9e:	609a      	str	r2, [r3, #8]
      break;
 8005ca0:	e03c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f000 f900 	bl	8005eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2150      	movs	r1, #80	@ 0x50
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f959 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005cc0:	e02c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f000 f91f 	bl	8005f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2160      	movs	r1, #96	@ 0x60
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f949 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005ce0:	e01c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 f8e0 	bl	8005eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 f939 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e00c      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f000 f930 	bl	8005f72 <TIM_ITRx_SetConfig>
      break;
 8005d12:	e003      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	e000      	b.n	8005d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3a      	ldr	r2, [pc, #232]	@ (8005e98 <TIM_Base_SetConfig+0xfc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dba:	d00b      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a37      	ldr	r2, [pc, #220]	@ (8005e9c <TIM_Base_SetConfig+0x100>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a36      	ldr	r2, [pc, #216]	@ (8005ea0 <TIM_Base_SetConfig+0x104>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a35      	ldr	r2, [pc, #212]	@ (8005ea4 <TIM_Base_SetConfig+0x108>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d108      	bne.n	8005de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2b      	ldr	r2, [pc, #172]	@ (8005e98 <TIM_Base_SetConfig+0xfc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df4:	d017      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a28      	ldr	r2, [pc, #160]	@ (8005e9c <TIM_Base_SetConfig+0x100>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a27      	ldr	r2, [pc, #156]	@ (8005ea0 <TIM_Base_SetConfig+0x104>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <TIM_Base_SetConfig+0x108>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a25      	ldr	r2, [pc, #148]	@ (8005ea8 <TIM_Base_SetConfig+0x10c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a24      	ldr	r2, [pc, #144]	@ (8005eac <TIM_Base_SetConfig+0x110>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <TIM_Base_SetConfig+0x114>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e98 <TIM_Base_SetConfig+0xfc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d103      	bne.n	8005e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d105      	bne.n	8005e8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40000400 	.word	0x40000400
 8005ea0:	40000800 	.word	0x40000800
 8005ea4:	40000c00 	.word	0x40000c00
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40014400 	.word	0x40014400
 8005eb0:	40014800 	.word	0x40014800

08005eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f023 0201 	bic.w	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 030a 	bic.w	r3, r3, #10
 8005ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f023 0210 	bic.w	r2, r3, #16
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f043 0307 	orr.w	r3, r3, #7
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	609a      	str	r2, [r3, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	021a      	lsls	r2, r3, #8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e050      	b.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1c      	ldr	r2, [pc, #112]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604c:	d013      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a18      	ldr	r2, [pc, #96]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a16      	ldr	r2, [pc, #88]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a13      	ldr	r2, [pc, #76]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10c      	bne.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4313      	orrs	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40014000 	.word	0x40014000

080060c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <memset>:
 80060ec:	4402      	add	r2, r0
 80060ee:	4603      	mov	r3, r0
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d100      	bne.n	80060f6 <memset+0xa>
 80060f4:	4770      	bx	lr
 80060f6:	f803 1b01 	strb.w	r1, [r3], #1
 80060fa:	e7f9      	b.n	80060f0 <memset+0x4>

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	@ (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	@ (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	@ (8006140 <__libc_init_array+0x44>)
 8006110:	f000 f818 	bl	8006144 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	08056254 	.word	0x08056254
 8006138:	08056254 	.word	0x08056254
 800613c:	08056254 	.word	0x08056254
 8006140:	08056258 	.word	0x08056258

08006144 <_init>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr

08006150 <_fini>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr
