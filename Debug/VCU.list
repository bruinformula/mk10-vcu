
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050280  080065dc  080065dc  000075dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805685c  0805685c  00058014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0805685c  0805685c  0005785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08056864  08056864  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08056864  08056864  00057864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08056868  08056868  00057868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0805686c  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000014  08056880  00058014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08056880  00058310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115cc  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8b  00000000  00000000  00069610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0006c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d46  00000000  00000000  0006d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cf3  00000000  00000000  0006e10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144cd  00000000  00000000  00086e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7df  00000000  00000000  0009b2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137aad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047bc  00000000  00000000  00137af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0013c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080065c4 	.word	0x080065c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080065c4 	.word	0x080065c4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
  MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 8000506:	f001 fae5 	bl	8001ad4 <MCP2515_Reset>
  HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 ff60 	bl	80023d0 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  RXF1reg.RXF1SIDH = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800054c:	2308      	movs	r3, #8
 800054e:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	77fb      	strb	r3, [r7, #31]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	76fb      	strb	r3, [r7, #27]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8000584:	2300      	movs	r3, #0
 8000586:	74fb      	strb	r3, [r7, #19]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 800058c:	2308      	movs	r3, #8
 800058e:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000598:	f001 fa2e 	bl	80019f8 <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
  {
    return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e065      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80005ac:	f001 fa46 	bl	8001a3c <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
  {
    return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e05b      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f001 fb07 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f001 fb01 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 fafa 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f001 faf3 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f001 faec 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f001 fae5 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f001 fade 	bl	8001bdc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f001 fad7 	bl	8001bdc <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f001 fa66 	bl	8001b00 <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f001 faa7 	bl	8001b90 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f001 faa3 	bl	8001b90 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f001 fa9f 	bl	8001b90 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f001 fa9b 	bl	8001b90 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f001 fa97 	bl	8001b90 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000662:	f001 fa19 	bl	8001a98 <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
    return false;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <CANSPI_Initialize+0x178>
  
  return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000694:	2200      	movs	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000698:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800069a:	2200      	movs	r2, #0
 800069c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <CANSPI_Transmit+0x120>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80006a4:	f001 fb10 	bl	8001cc8 <MCP2515_ReadStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ae:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 80006b0:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f001 fa22 	bl	8001b00 <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 80006c0:	202d      	movs	r0, #45	@ 0x2d
 80006c2:	f001 fa1d 	bl	8001b00 <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006ca:	2030      	movs	r0, #48	@ 0x30
 80006cc:	f001 fa18 	bl	8001b00 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f001 fa13 	bl	8001b00 <MCP2515_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f001 fa0e 	bl	8001b00 <MCP2515_ReadByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d115      	bne.n	8000722 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6858      	ldr	r0, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4a28      	ldr	r2, [pc, #160]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000700:	4619      	mov	r1, r3
 8000702:	f000 f928 	bl	8000956 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1a      	ldrb	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3309      	adds	r3, #9
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000710:	2040      	movs	r0, #64	@ 0x40
 8000712:	f001 fa8f 	bl	8001c34 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000716:	2081      	movs	r0, #129	@ 0x81
 8000718:	f001 faba 	bl	8001c90 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e038      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <CANSPI_Transmit+0x124>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800073a:	4619      	mov	r1, r3
 800073c:	f000 f90b 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a1a      	ldrb	r2, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3309      	adds	r3, #9
 8000748:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800074a:	2042      	movs	r0, #66	@ 0x42
 800074c:	f001 fa72 	bl	8001c34 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000750:	2082      	movs	r0, #130	@ 0x82
 8000752:	f001 fa9d 	bl	8001c90 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e01b      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <CANSPI_Transmit+0x124>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d114      	bne.n	8000794 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000774:	4619      	mov	r1, r3
 8000776:	f000 f8ee 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1a      	ldrb	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3309      	adds	r3, #9
 8000782:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000784:	2044      	movs	r0, #68	@ 0x44
 8000786:	f001 fa55 	bl	8001c34 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800078a:	2084      	movs	r0, #132	@ 0x84
 800078c:	f001 fa80 	bl	8001c90 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000034 	.word	0x20000034
 80007a4:	20000030 	.word	0x20000030

080007a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80007b4:	f001 faa6 	bl	8001d04 <MCP2515_GetRxStatus>
 80007b8:	4603      	mov	r3, r0
 80007ba:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d066      	beq.n	8000896 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b40      	cmp	r3, #64	@ 0x40
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7b3b      	ldrb	r3, [r7, #12]
 80007dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	220d      	movs	r2, #13
 80007fa:	4619      	mov	r1, r3
 80007fc:	2090      	movs	r0, #144	@ 0x90
 80007fe:	f001 f9a3 	bl	8001b48 <MCP2515_ReadRxSequence>
 8000802:	e00c      	b.n	800081e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b80      	cmp	r3, #128	@ 0x80
 800080e:	d106      	bne.n	800081e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	220d      	movs	r2, #13
 8000816:	4619      	mov	r1, r3
 8000818:	2094      	movs	r0, #148	@ 0x94
 800081a:	f001 f995 	bl	8001b48 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800081e:	7b3b      	ldrb	r3, [r7, #12]
 8000820:	f003 0318 	and.w	r3, r3, #24
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b10      	cmp	r3, #16
 8000828:	d10c      	bne.n	8000844 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2202      	movs	r2, #2
 800082e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000830:	7cb8      	ldrb	r0, [r7, #18]
 8000832:	7cf9      	ldrb	r1, [r7, #19]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	f000 f832 	bl	80008a0 <convertReg2ExtendedCANid>
 800083c:	4602      	mov	r2, r0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	e00b      	b.n	800085c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800084a:	7c3b      	ldrb	r3, [r7, #16]
 800084c:	7c7a      	ldrb	r2, [r7, #17]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f863 	bl	800091c <convertReg2StandardCANid>
 8000856:	4602      	mov	r2, r0
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800085c:	7d3a      	ldrb	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000862:	7d7a      	ldrb	r2, [r7, #21]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000868:	7dba      	ldrb	r2, [r7, #22]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000874:	7e3a      	ldrb	r2, [r7, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800087a:	7e7a      	ldrb	r2, [r7, #25]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000880:	7eba      	ldrb	r2, [r7, #26]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000886:	7efa      	ldrb	r2, [r7, #27]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800088c:	7f3a      	ldrb	r2, [r7, #28]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000896:	7ffb      	ldrb	r3, [r7, #31]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	717b      	strb	r3, [r7, #5]
 80008ba:	4613      	mov	r3, r2
 80008bc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4413      	add	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4413      	add	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4413      	add	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4413      	add	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000910:	697b      	ldr	r3, [r7, #20]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc90      	pop	{r4, r7}
 800091a:	4770      	bx	lr

0800091c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000948:	68fb      	ldr	r3, [r7, #12]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	460b      	mov	r3, r1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d12e      	bne.n	80009cc <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f023 031f 	bic.w	r3, r3, #31
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	4413      	add	r3, r2
 80009a8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	3308      	adds	r3, #8
 80009ae:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	f023 0314 	bic.w	r3, r3, #20
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80009ca:	e013      	b.n	80009f4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <checkShutdown>:
/* USER CODE BEGIN 0 */

/**
 * @brief Repeatedly check the shutdown pin; if high, set torque to 0 and block forever.
 */
void checkShutdown(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 8000a06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0a:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <checkShutdown+0x34>)
 8000a0c:	f003 f816 	bl	8003a3c <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
	if (pinState == GPIO_PIN_SET) {
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d107      	bne.n	8000a2a <checkShutdown+0x2a>
		requestedTorque = 0;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <checkShutdown+0x38>)
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 8000a22:	f000 fb6b 	bl	80010fc <sendTorqueCommand>
		while(true){}
 8000a26:	bf00      	nop
 8000a28:	e7fd      	b.n	8000a26 <checkShutdown+0x26>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020000 	.word	0x40020000
 8000a38:	200002b8 	.word	0x200002b8

08000a3c <updateRpm>:

/**
 * @brief Update Inverter RPM reading from the last received CAN message.
 */
void updateRpm() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <updateRpm+0x30>)
 8000a42:	7adb      	ldrb	r3, [r3, #11]
 8000a44:	461a      	mov	r2, r3
			| (rxMessage.frame.data3 << 8));
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <updateRpm+0x30>)
 8000a48:	7b1b      	ldrb	r3, [r3, #12]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	4313      	orrs	r3, r2
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5a:	ee17 2a90 	vmov	r2, s15
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <updateRpm+0x34>)
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000029c 	.word	0x2000029c
 8000a70:	200002f8 	.word	0x200002f8

08000a74 <readFromCAN>:

/**
 * @brief Read relevant data from incoming CAN messages
 */
void readFromCAN() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <readFromCAN+0x28>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	22a5      	movs	r2, #165	@ 0xa5
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d102      	bne.n	8000a88 <readFromCAN+0x14>
		updateRpm();
 8000a82:	f7ff ffdb 	bl	8000a3c <updateRpm>
	}
	else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
		updateBMSDiagnostics();
	}
}
 8000a86:	e007      	b.n	8000a98 <readFromCAN+0x24>
	else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <readFromCAN+0x28>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f44f 62d6 	mov.w	r2, #1712	@ 0x6b0
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <readFromCAN+0x24>
		updateBMSDiagnostics();
 8000a94:	f000 f804 	bl	8000aa0 <updateBMSDiagnostics>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000029c 	.word	0x2000029c

08000aa0 <updateBMSDiagnostics>:

/**
 * @brief Parse BMS diagnostics from a received CAN message
 */
void updateBMSDiagnostics(void) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
	// Pack_Current (signed 16-bit at bit 8, factor 0.1)
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <updateBMSDiagnostics+0xa8>)
 8000aa8:	7a9b      	ldrb	r3, [r3, #10]
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <updateBMSDiagnostics+0xa8>)
 8000ab2:	7a5b      	ldrb	r3, [r3, #9]
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	82fb      	strh	r3, [r7, #22]
	float pack_current = pack_current_raw * 0.1f;
 8000aba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000b4c <updateBMSDiagnostics+0xac>
 8000aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ace:	edc7 7a04 	vstr	s15, [r7, #16]

	// Pack_Inst_Voltage (unsigned 16-bit at bit 24, factor 0.1)
	uint16_t pack_voltage_raw = (rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <updateBMSDiagnostics+0xa8>)
 8000ad4:	7b1b      	ldrb	r3, [r3, #12]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <updateBMSDiagnostics+0xa8>)
 8000ade:	7adb      	ldrb	r3, [r3, #11]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	81fb      	strh	r3, [r7, #14]
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000b4c <updateBMSDiagnostics+0xac>
 8000af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000afa:	edc7 7a02 	vstr	s15, [r7, #8]

	// Is_Ready_State (bit 54)
	bool is_ready = (rxMessage.frame.data6 >> 6) & 0x01;
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <updateBMSDiagnostics+0xa8>)
 8000b00:	7bdb      	ldrb	r3, [r3, #15]
 8000b02:	099b      	lsrs	r3, r3, #6
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf14      	ite	ne
 8000b0e:	2301      	movne	r3, #1
 8000b10:	2300      	moveq	r3, #0
 8000b12:	71fb      	strb	r3, [r7, #7]

	bms_diagnostics.inverterActive = is_ready ? 1 : 0;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <updateBMSDiagnostics+0xb0>)
 8000b1a:	601a      	str	r2, [r3, #0]
	bms_diagnostics.packCurrent    = (int)pack_current;
 8000b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b24:	ee17 2a90 	vmov	r2, s15
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <updateBMSDiagnostics+0xb0>)
 8000b2a:	609a      	str	r2, [r3, #8]
	bms_diagnostics.packVoltage    = (int)pack_voltage;
 8000b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b34:	ee17 2a90 	vmov	r2, s15
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <updateBMSDiagnostics+0xb0>)
 8000b3a:	605a      	str	r2, [r3, #4]
}
 8000b3c:	bf00      	nop
 8000b3e:	371c      	adds	r7, #28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	2000029c 	.word	0x2000029c
 8000b4c:	3dcccccd 	.word	0x3dcccccd
 8000b50:	200002ec 	.word	0x200002ec

08000b54 <HAL_ADC_ConvCpltCallback>:

/**
 * @brief ADC Conversion Complete callback. Copies the DMA buffer into apps/bse values.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	// Because DMAContinuousRequests is enabled and triggered by TIM3,
	// this will be called repeatedly on each conversion sequence.
	apps1Value = ADC_Reads[APPS1_RANK];
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000b6a:	801a      	strh	r2, [r3, #0]
	apps2Value = ADC_Reads[APPS2_RANK];
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b7a:	801a      	strh	r2, [r3, #0]
	bseValue   = ADC_Reads[BSE_RANK];
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_ADC_ConvCpltCallback+0x58>)
 8000b8a:	801a      	strh	r2, [r3, #0]

	millis_since_dma_read = HAL_GetTick();
 8000b8c:	f001 fc14 	bl	80023b8 <HAL_GetTick>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002cc 	.word	0x200002cc
 8000ba4:	200002b0 	.word	0x200002b0
 8000ba8:	200002b2 	.word	0x200002b2
 8000bac:	200002b4 	.word	0x200002b4
 8000bb0:	200002c8 	.word	0x200002c8

08000bb4 <calculateTorqueRequest>:

/**
 * @brief Calculate the requested torque based on APPS and RPM, or regen based on BSE.
 */
void calculateTorqueRequest(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b095      	sub	sp, #84	@ 0x54
 8000bb8:	af00      	add	r7, sp, #0
	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000bba:	4bab      	ldr	r3, [pc, #684]	@ (8000e68 <calculateTorqueRequest+0x2b4>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd0:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL);
 8000bd4:	f640 431c 	movw	r3, #3100	@ 0xc1c
 8000bd8:	461a      	mov	r2, r3
 8000bda:	230a      	movs	r3, #10
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bea:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000bee:	4b9f      	ldr	r3, [pc, #636]	@ (8000e6c <calculateTorqueRequest+0x2b8>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c04:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL);
 8000c08:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	230a      	movs	r3, #10
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float appsValue = (apps1_as_percent + apps2_as_percent) / 2.0f;
 8000c22:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000c26:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c2e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c36:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	if (appsValue > 0) {
 8000c3a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	f340 80de 	ble.w	8000e06 <calculateTorqueRequest+0x252>
		// Pedal-based torque map
		int numPedalSteps = 10;
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
		int numRpmSteps   = 10;
 8000c4e:	230a      	movs	r3, #10
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30

		float pedalStepSize = 100.0f / (numPedalSteps - 1);
 8000c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c54:	3b01      	subs	r3, #1
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5e:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8000e70 <calculateTorqueRequest+0x2bc>
 8000c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c66:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float rpmStepSize   = MAX_RPM / (numRpmSteps - 1);
 8000c6a:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8000e74 <calculateTorqueRequest+0x2c0>
 8000c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c70:	3b01      	subs	r3, #1
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		int pedalLowIndx = (int)(appsValue / (pedalStepSize / 100.0f));  // handle properly if needed
 8000c82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c86:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8000e70 <calculateTorqueRequest+0x2bc>
 8000c8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c8e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8000c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c9a:	ee17 3a90 	vmov	r3, s15
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
		int pedalHighIndx = pedalLowIndx + 1;
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (pedalHighIndx >= numPedalSteps) {
 8000ca6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000caa:	429a      	cmp	r2, r3
 8000cac:	db02      	blt.n	8000cb4 <calculateTorqueRequest+0x100>
			pedalHighIndx = numPedalSteps - 1;
 8000cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}

		int rpmLowIndx = (int)(inverter_diagnostics.motorRpm / rpmStepSize);
 8000cb4:	4b70      	ldr	r3, [pc, #448]	@ (8000e78 <calculateTorqueRequest+0x2c4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cc0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 3a90 	vmov	r3, s15
 8000cd0:	623b      	str	r3, [r7, #32]
		int rpmHighIndx = rpmLowIndx + 1;
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (rpmHighIndx >= numRpmSteps) {
 8000cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	db02      	blt.n	8000ce6 <calculateTorqueRequest+0x132>
			rpmHighIndx = numRpmSteps - 1;
 8000ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
		}

		float T00 = TORQUE_ARRAY[pedalLowIndx][rpmLowIndx];   // Lower-left
 8000ce6:	4965      	ldr	r1, [pc, #404]	@ (8000e7c <calculateTorqueRequest+0x2c8>)
 8000ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	6a3a      	ldr	r2, [r7, #32]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61fb      	str	r3, [r7, #28]
		float T10 = TORQUE_ARRAY[pedalHighIndx][rpmLowIndx];  // Upper-left
 8000cfe:	495f      	ldr	r1, [pc, #380]	@ (8000e7c <calculateTorqueRequest+0x2c8>)
 8000d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	6a3a      	ldr	r2, [r7, #32]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	61bb      	str	r3, [r7, #24]
		float T01 = TORQUE_ARRAY[pedalLowIndx][rpmHighIndx];  // Lower-right
 8000d16:	4959      	ldr	r1, [pc, #356]	@ (8000e7c <calculateTorqueRequest+0x2c8>)
 8000d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	617b      	str	r3, [r7, #20]
		float T11 = TORQUE_ARRAY[pedalHighIndx][rpmHighIndx]; // Upper-right
 8000d2e:	4953      	ldr	r1, [pc, #332]	@ (8000e7c <calculateTorqueRequest+0x2c8>)
 8000d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	613b      	str	r3, [r7, #16]

		float pedalLerp = (appsValue * 100.0f - (pedalLowIndx * pedalStepSize)) / pedalStepSize;
 8000d46:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000d4a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000e70 <calculateTorqueRequest+0x2bc>
 8000d4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d68:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d70:	edc7 7a03 	vstr	s15, [r7, #12]
		float rpmLerp   = (float)(inverter_diagnostics.motorRpm - (rpmLowIndx * rpmStepSize)) / rpmStepSize;
 8000d74:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <calculateTorqueRequest+0x2c4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d8a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9e:	edc7 7a02 	vstr	s15, [r7, #8]

		float torqueLow  = T00 + (T01 - T00) * rpmLerp;
 8000da2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000da6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dae:	edd7 7a02 	vldr	s15, [r7, #8]
 8000db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dbe:	edc7 7a01 	vstr	s15, [r7, #4]
		float torqueHigh = T10 + (T11 - T10) * rpmLerp;
 8000dc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000dc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dde:	edc7 7a00 	vstr	s15, [r7]

		requestedTorque = torqueLow + (torqueHigh - torqueLow) * pedalLerp;
 8000de2:	ed97 7a00 	vldr	s14, [r7]
 8000de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <calculateTorqueRequest+0x2cc>)
 8000e00:	edc3 7a00 	vstr	s15, [r3]
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
				/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL);
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
				* bse_as_percent + REGEN_BASELINE_TORQUE;
	}
}
 8000e04:	e02a      	b.n	8000e5c <calculateTorqueRequest+0x2a8>
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <calculateTorqueRequest+0x2d0>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e12:	2300      	movs	r3, #0
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1c:	ee77 6a67 	vsub.f32	s13, s14, s15
				/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL);
 8000e20:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000e24:	461a      	mov	r2, r3
 8000e26:	2300      	movs	r3, #0
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e36:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000e3a:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000e3e:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8000e88 <calculateTorqueRequest+0x2d4>
 8000e42:	ee37 7a67 	vsub.f32	s14, s14, s15
				* bse_as_percent + REGEN_BASELINE_TORQUE;
 8000e46:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000e88 <calculateTorqueRequest+0x2d4>
 8000e52:	ee77 7a87 	vadd.f32	s15, s15, s14
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <calculateTorqueRequest+0x2cc>)
 8000e58:	edc3 7a00 	vstr	s15, [r3]
}
 8000e5c:	bf00      	nop
 8000e5e:	3754      	adds	r7, #84	@ 0x54
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	200002b0 	.word	0x200002b0
 8000e6c:	200002b2 	.word	0x200002b2
 8000e70:	42c80000 	.word	0x42c80000
 8000e74:	463b8000 	.word	0x463b8000
 8000e78:	200002f8 	.word	0x200002f8
 8000e7c:	080065dc 	.word	0x080065dc
 8000e80:	200002b8 	.word	0x200002b8
 8000e84:	200002b4 	.word	0x200002b4
 8000e88:	00000000 	.word	0x00000000

08000e8c <checkAPPSPlausibility>:

/**
 * @brief Check plausibility of APPS sensors.
 */
void checkAPPSPlausibility(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e90:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <checkAPPSPlausibility+0xf0>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea6:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000eaa:	f640 431c 	movw	r3, #3100	@ 0xc1c
 8000eae:	461a      	mov	r2, r3
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000f80 <checkAPPSPlausibility+0xf4>
 8000ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <checkAPPSPlausibility+0xf8>)
 8000eca:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ece:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <checkAPPSPlausibility+0xfc>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eda:	230a      	movs	r3, #10
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee4:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000ee8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000eec:	461a      	mov	r2, r3
 8000eee:	230a      	movs	r3, #10
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000f80 <checkAPPSPlausibility+0xf4>
 8000f02:	ee67 7a87 	vmul.f32	s15, s15, s14
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000f06:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <checkAPPSPlausibility+0x100>)
 8000f08:	edc3 7a00 	vstr	s15, [r3]

	if (fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <checkAPPSPlausibility+0xf8>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <checkAPPSPlausibility+0x100>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1c:	eeb0 7ae7 	vabs.f32	s14, s15
 8000f20:	230a      	movs	r3, #10
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f32:	dd0c      	ble.n	8000f4e <checkAPPSPlausibility+0xc2>
		millis_since_apps_implausible = HAL_GetTick();
 8000f34:	f001 fa40 	bl	80023b8 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <checkAPPSPlausibility+0x104>)
 8000f3c:	6013      	str	r3, [r2, #0]
		apps_plausible = 0; // false
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <checkAPPSPlausibility+0x108>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <checkAPPSPlausibility+0x10c>)
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
		requestedTorque = 0;
	}
	else {
		apps_plausible = 1; // true
	}
}
 8000f4c:	e014      	b.n	8000f78 <checkAPPSPlausibility+0xec>
	else if (!apps_plausible
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <checkAPPSPlausibility+0x108>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <checkAPPSPlausibility+0xe6>
			&& (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000f56:	f001 fa2f 	bl	80023b8 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <checkAPPSPlausibility+0x104>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2264      	movs	r2, #100	@ 0x64
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d204      	bcs.n	8000f72 <checkAPPSPlausibility+0xe6>
		requestedTorque = 0;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <checkAPPSPlausibility+0x10c>)
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	e002      	b.n	8000f78 <checkAPPSPlausibility+0xec>
		apps_plausible = 1; // true
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <checkAPPSPlausibility+0x108>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	801a      	strh	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002b0 	.word	0x200002b0
 8000f80:	42c80000 	.word	0x42c80000
 8000f84:	200002d8 	.word	0x200002d8
 8000f88:	200002b2 	.word	0x200002b2
 8000f8c:	200002dc 	.word	0x200002dc
 8000f90:	200002c4 	.word	0x200002c4
 8000f94:	20000000 	.word	0x20000000
 8000f98:	200002b8 	.word	0x200002b8

08000f9c <checkCrossCheck>:

/**
 * @brief Check cross-check between APPS and brake pedal.
 */
void checkCrossCheck(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80010e0 <checkCrossCheck+0x144>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	2300      	movs	r3, #0
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb8:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000fbc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd2:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80010e4 <checkCrossCheck+0x148>
 8000fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000fda:	4b43      	ldr	r3, [pc, #268]	@ (80010e8 <checkCrossCheck+0x14c>)
 8000fdc:	edc3 7a00 	vstr	s15, [r3]

	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000fe0:	4b42      	ldr	r3, [pc, #264]	@ (80010ec <checkCrossCheck+0x150>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	230a      	movs	r3, #10
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000ffa:	f640 431c 	movw	r3, #3100	@ 0xc1c
 8000ffe:	461a      	mov	r2, r3
 8001000:	230a      	movs	r3, #10
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8001010:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80010e4 <checkCrossCheck+0x148>
 8001014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001018:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <checkCrossCheck+0x154>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001028:	230a      	movs	r3, #10
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001032:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8001036:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800103a:	461a      	mov	r2, r3
 800103c:	230a      	movs	r3, #10
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 800104c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80010e4 <checkCrossCheck+0x148>
 8001050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001054:	edc7 7a02 	vstr	s15, [r7, #8]
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8001058:	ed97 7a03 	vldr	s14, [r7, #12]
 800105c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001064:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106c:	edc7 7a01 	vstr	s15, [r7, #4]

	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8001070:	2319      	movs	r3, #25
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	ed97 7a01 	vldr	s14, [r7, #4]
 800107e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	dd0c      	ble.n	80010a2 <checkCrossCheck+0x106>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <checkCrossCheck+0x144>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2264      	movs	r2, #100	@ 0x64
 800108e:	4293      	cmp	r3, r2
 8001090:	d907      	bls.n	80010a2 <checkCrossCheck+0x106>
		cross_check_plausible = 0;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <checkCrossCheck+0x158>)
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <checkCrossCheck+0x15c>)
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e018      	b.n	80010d4 <checkCrossCheck+0x138>
	}
	else if (!cross_check_plausible
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <checkCrossCheck+0x158>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d110      	bne.n	80010cc <checkCrossCheck+0x130>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 80010aa:	2305      	movs	r3, #5
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	dd04      	ble.n	80010cc <checkCrossCheck+0x130>
		requestedTorque = 0;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <checkCrossCheck+0x15c>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e003      	b.n	80010d4 <checkCrossCheck+0x138>
	}
	else {
		cross_check_plausible = 1;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <checkCrossCheck+0x158>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	801a      	strh	r2, [r3, #0]
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	200002b4 	.word	0x200002b4
 80010e4:	42c80000 	.word	0x42c80000
 80010e8:	200002e0 	.word	0x200002e0
 80010ec:	200002b0 	.word	0x200002b0
 80010f0:	200002b2 	.word	0x200002b2
 80010f4:	20000002 	.word	0x20000002
 80010f8:	200002b8 	.word	0x200002b8

080010fc <sendTorqueCommand>:

/**
 * @brief Send the torque command message over CAN.
 */
void sendTorqueCommand(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <sendTorqueCommand+0x78>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001114:	ee17 3a90 	vmov	r3, s15
 8001118:	607b      	str	r3, [r7, #4]

	// Break the torqueValue into two bytes (little-endian)
	char msg0 = torqueValue & 0xFF;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	70fb      	strb	r3, [r7, #3]
	char msg1 = (torqueValue >> 8) & 0xFF;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	121b      	asrs	r3, r3, #8
 8001122:	70bb      	strb	r3, [r7, #2]

	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	txMessage.frame.id = 0x0C0;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <sendTorqueCommand+0x7c>)
 800112c:	22c0      	movs	r2, #192	@ 0xc0
 800112e:	605a      	str	r2, [r3, #4]
	txMessage.frame.dlc = 8;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001132:	2208      	movs	r2, #8
 8001134:	721a      	strb	r2, [r3, #8]

	txMessage.frame.data0 = msg0;
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	7253      	strb	r3, [r2, #9]
	txMessage.frame.data1 = msg1;
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <sendTorqueCommand+0x7c>)
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	7293      	strb	r3, [r2, #10]
	txMessage.frame.data2 = 0;
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001144:	2200      	movs	r2, #0
 8001146:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <sendTorqueCommand+0x7c>)
 800114a:	2200      	movs	r2, #0
 800114c:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 0;
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001150:	2200      	movs	r2, #0
 8001152:	735a      	strb	r2, [r3, #13]
	txMessage.frame.data5 = 0;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001156:	2200      	movs	r2, #0
 8001158:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = 0;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <sendTorqueCommand+0x7c>)
 800115c:	2200      	movs	r2, #0
 800115e:	73da      	strb	r2, [r3, #15]
	txMessage.frame.data7 = 0;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001162:	2200      	movs	r2, #0
 8001164:	741a      	strb	r2, [r3, #16]

	CANSPI_Transmit(&txMessage);
 8001166:	4804      	ldr	r0, [pc, #16]	@ (8001178 <sendTorqueCommand+0x7c>)
 8001168:	f7ff fa8a 	bl	8000680 <CANSPI_Transmit>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002b8 	.word	0x200002b8
 8001178:	20000288 	.word	0x20000288

0800117c <checkReadyToDrive>:

/**
 * @brief Check if the driver has pressed the brake pedal and the RTD pin is set.
 */
void checkReadyToDrive(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_GPIO_Port, RTD_Pin);
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <checkReadyToDrive+0x30>)
 8001186:	f002 fc59 	bl	8003a3c <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <checkReadyToDrive+0x28>
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <checkReadyToDrive+0x34>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2264      	movs	r2, #100	@ 0x64
 800119a:	4293      	cmp	r3, r2
 800119c:	d902      	bls.n	80011a4 <checkReadyToDrive+0x28>
		readyToDrive = 1;
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <checkReadyToDrive+0x38>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	}
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020000 	.word	0x40020000
 80011b0:	200002b4 	.word	0x200002b4
 80011b4:	200002e4 	.word	0x200002e4

080011b8 <sendPrechargeRequest>:

/**
 * @brief If a hardware pin requests precharge, send a request via CAN after a short debounce.
 */
void sendPrechargeRequest(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_GPIO_Port, PRECHARGE_Pin);
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	4826      	ldr	r0, [pc, #152]	@ (800125c <sendPrechargeRequest+0xa4>)
 80011c2:	f002 fc3b 	bl	8003a3c <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	if(pinState == GPIO_PIN_SET && !prechargeState){
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d10c      	bne.n	80011ea <sendPrechargeRequest+0x32>
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <sendPrechargeRequest+0xa8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d108      	bne.n	80011ea <sendPrechargeRequest+0x32>
		prechargeState = true;
 80011d8:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <sendPrechargeRequest+0xa8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		millis_precharge = HAL_GetTick();
 80011de:	f001 f8eb 	bl	80023b8 <HAL_GetTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <sendPrechargeRequest+0xac>)
 80011e6:	6013      	str	r3, [r2, #0]
		txMessage.frame.data5 = 0;
		txMessage.frame.data6 = 0;
		txMessage.frame.data7 = 0;
		CANSPI_Transmit(&txMessage);
	}
}
 80011e8:	e034      	b.n	8001254 <sendPrechargeRequest+0x9c>
	else if (pinState == GPIO_PIN_RESET){
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <sendPrechargeRequest+0x40>
		prechargeState = false;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <sendPrechargeRequest+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	e02d      	b.n	8001254 <sendPrechargeRequest+0x9c>
	else if(HAL_GetTick()-millis_precharge >= 1000){
 80011f8:	f001 f8de 	bl	80023b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <sendPrechargeRequest+0xac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001208:	d324      	bcc.n	8001254 <sendPrechargeRequest+0x9c>
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <sendPrechargeRequest+0xb0>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = PRECHARGE_REQUEST_ID;
 8001210:	2300      	movs	r3, #0
 8001212:	461a      	mov	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001216:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <sendPrechargeRequest+0xb0>)
 800121a:	2208      	movs	r2, #8
 800121c:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 2; // your precharge request code
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001220:	2202      	movs	r2, #2
 8001222:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 0;
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001226:	2200      	movs	r2, #0
 8001228:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 0;
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <sendPrechargeRequest+0xb0>)
 800122c:	2200      	movs	r2, #0
 800122e:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 0;
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 0;
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 0;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <sendPrechargeRequest+0xb0>)
 800123e:	2200      	movs	r2, #0
 8001240:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 0;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001244:	2200      	movs	r2, #0
 8001246:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 0;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <sendPrechargeRequest+0xb0>)
 800124a:	2200      	movs	r2, #0
 800124c:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <sendPrechargeRequest+0xb0>)
 8001250:	f7ff fa16 	bl	8000680 <CANSPI_Transmit>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020800 	.word	0x40020800
 8001260:	200002e5 	.word	0x200002e5
 8001264:	200002e8 	.word	0x200002e8
 8001268:	20000288 	.word	0x20000288

0800126c <HAL_I2S_TxCpltCallback>:
// I2S chunk-based WAV Playback Methods
//-----------------------------------------------
/**
 * @brief Called by HAL when a DMA transmission completes (for one chunk).
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1c      	ldr	r2, [pc, #112]	@ (80012ec <HAL_I2S_TxCpltCallback+0x80>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d131      	bne.n	80012e2 <HAL_I2S_TxCpltCallback+0x76>
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <HAL_I2S_TxCpltCallback+0x84>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12d      	bne.n	80012e2 <HAL_I2S_TxCpltCallback+0x76>
		// finished one chunk
		if (wavPos < halfwordCount) {
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_I2S_TxCpltCallback+0x88>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <HAL_I2S_TxCpltCallback+0x8c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d224      	bcs.n	80012dc <HAL_I2S_TxCpltCallback+0x70>
			// Start the next chunk
			uint32_t remain = halfwordCount - wavPos;
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_I2S_TxCpltCallback+0x8c>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <HAL_I2S_TxCpltCallback+0x88>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f247 5230 	movw	r2, #30000	@ 0x7530
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d802      	bhi.n	80012ae <HAL_I2S_TxCpltCallback+0x42>
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	e001      	b.n	80012b2 <HAL_I2S_TxCpltCallback+0x46>
 80012ae:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012b2:	827b      	strh	r3, [r7, #18]
			const uint16_t *chunkPtr = wavePCM + wavPos;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_I2S_TxCpltCallback+0x90>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_I2S_TxCpltCallback+0x88>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
			wavPos += thisChunk;
 80012c2:	8a7a      	ldrh	r2, [r7, #18]
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_I2S_TxCpltCallback+0x88>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_I2S_TxCpltCallback+0x88>)
 80012cc:	6013      	str	r3, [r2, #0]

			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	461a      	mov	r2, r3
 80012d2:	68f9      	ldr	r1, [r7, #12]
 80012d4:	480a      	ldr	r0, [pc, #40]	@ (8001300 <HAL_I2S_TxCpltCallback+0x94>)
 80012d6:	f002 fd23 	bl	8003d20 <HAL_I2S_Transmit_DMA>
		else {
			// entire wave is done
			waveFinished = 1;
		}
	}
}
 80012da:	e002      	b.n	80012e2 <HAL_I2S_TxCpltCallback+0x76>
			waveFinished = 1;
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <HAL_I2S_TxCpltCallback+0x84>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40003800 	.word	0x40003800
 80012f0:	20000308 	.word	0x20000308
 80012f4:	200002fc 	.word	0x200002fc
 80012f8:	20000304 	.word	0x20000304
 80012fc:	20000300 	.word	0x20000300
 8001300:	200000e0 	.word	0x200000e0

08001304 <PlayStartupSoundOnce>:

/**
 * @brief Play the startup sound from Flash exactly once.
 */
void PlayStartupSoundOnce(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <PlayStartupSoundOnce+0x74>)
 800130c:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <PlayStartupSoundOnce+0x78>)
 800130e:	601a      	str	r2, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <PlayStartupSoundOnce+0x7c>)
 8001312:	3b2c      	subs	r3, #44	@ 0x2c
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <PlayStartupSoundOnce+0x80>)
 8001318:	6013      	str	r3, [r2, #0]
	wavPos = 0;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <PlayStartupSoundOnce+0x84>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <PlayStartupSoundOnce+0x88>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]

	// First chunk
	uint32_t remain = halfwordCount - wavPos;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <PlayStartupSoundOnce+0x80>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <PlayStartupSoundOnce+0x84>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	60fb      	str	r3, [r7, #12]
	uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001338:	4293      	cmp	r3, r2
 800133a:	d802      	bhi.n	8001342 <PlayStartupSoundOnce+0x3e>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	b29b      	uxth	r3, r3
 8001340:	e001      	b.n	8001346 <PlayStartupSoundOnce+0x42>
 8001342:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001346:	817b      	strh	r3, [r7, #10]
	const uint16_t *chunkPtr = wavePCM + wavPos;
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <PlayStartupSoundOnce+0x74>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <PlayStartupSoundOnce+0x84>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	607b      	str	r3, [r7, #4]
	wavPos += thisChunk;
 8001356:	897a      	ldrh	r2, [r7, #10]
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <PlayStartupSoundOnce+0x84>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <PlayStartupSoundOnce+0x84>)
 8001360:	6013      	str	r3, [r2, #0]

	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8001362:	897b      	ldrh	r3, [r7, #10]
 8001364:	461a      	mov	r2, r3
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4809      	ldr	r0, [pc, #36]	@ (8001390 <PlayStartupSoundOnce+0x8c>)
 800136a:	f002 fcd9 	bl	8003d20 <HAL_I2S_Transmit_DMA>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000300 	.word	0x20000300
 800137c:	08006798 	.word	0x08006798
 8001380:	000500d8 	.word	0x000500d8
 8001384:	20000304 	.word	0x20000304
 8001388:	200002fc 	.word	0x200002fc
 800138c:	20000308 	.word	0x20000308
 8001390:	200000e0 	.word	0x200000e0

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f000 ffa8 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f86c 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f000 fa32 	bl	8001808 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a4:	f000 f9f2 	bl	800178c <MX_DMA_Init>
  MX_ADC1_Init();
 80013a8:	f000 f8d0 	bl	800154c <MX_ADC1_Init>
  MX_TIM3_Init();
 80013ac:	f000 f9a0 	bl	80016f0 <MX_TIM3_Init>
  MX_SPI3_Init();
 80013b0:	f000 f968 	bl	8001684 <MX_SPI3_Init>
  MX_I2S2_Init();
 80013b4:	f000 f938 	bl	8001628 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  // Start TIM3
  HAL_TIM_Base_Start(&htim3);
 80013b8:	4823      	ldr	r0, [pc, #140]	@ (8001448 <main+0xb4>)
 80013ba:	f004 fceb 	bl	8005d94 <HAL_TIM_Base_Start>

  // Initialize the CAN at 500kbps (CANSPI_Initialize sets the MCP2515)
  if (CANSPI_Initialize() != true) {
 80013be:	f7ff f89f 	bl	8000500 <CANSPI_Initialize>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <main+0x3e>
  	Error_Handler();
 80013ce:	f000 fb0d 	bl	80019ec <Error_Handler>
  }

  // Initialize some diagnostics values
  bms_diagnostics.inverterActive = 0;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <main+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
  inverter_diagnostics.motorRpm   = 0;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <main+0xbc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

  // Start ADC in DMA mode
  // This will trigger on each rising edge of TIM3 TRGO, in combination
  // with hadc1.Init.DMAContinuousRequests = ENABLE.
  HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <main+0xc0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	491c      	ldr	r1, [pc, #112]	@ (8001458 <main+0xc4>)
 80013e6:	481d      	ldr	r0, [pc, #116]	@ (800145c <main+0xc8>)
 80013e8:	f001 f96a 	bl	80026c0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check for new CAN data
	  if (CANSPI_Receive(&rxMessage)) {
 80013ec:	481c      	ldr	r0, [pc, #112]	@ (8001460 <main+0xcc>)
 80013ee:	f7ff f9db 	bl	80007a8 <CANSPI_Receive>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <main+0x68>
		  readFromCAN();
 80013f8:	f7ff fb3c 	bl	8000a74 <readFromCAN>
	  }

	  // Periodically do your torque calculations:
	  calculateTorqueRequest();
 80013fc:	f7ff fbda 	bl	8000bb4 <calculateTorqueRequest>
	  checkAPPSPlausibility();
 8001400:	f7ff fd44 	bl	8000e8c <checkAPPSPlausibility>
	  checkCrossCheck();
 8001404:	f7ff fdca 	bl	8000f9c <checkCrossCheck>
	  checkReadyToDrive();
 8001408:	f7ff feb8 	bl	800117c <checkReadyToDrive>
	  sendPrechargeRequest();
 800140c:	f7ff fed4 	bl	80011b8 <sendPrechargeRequest>
	  checkShutdown();  // If pin is high, torque->0, block
 8001410:	f7ff faf6 	bl	8000a00 <checkShutdown>

	  finalTorqueRequest   = requestedTorque;
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <main+0xd0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <main+0xd4>)
 800141a:	6013      	str	r3, [r2, #0]
	  lastRequestedTorque  = requestedTorque;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <main+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a12      	ldr	r2, [pc, #72]	@ (800146c <main+0xd8>)
 8001422:	6013      	str	r3, [r2, #0]

	  // If the driver is ready to drive, send torque over CAN
	  static uint8_t prevReadyToDrive = 0;
	  if (readyToDrive) {
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <main+0xdc>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <main+0xa8>
		  // If we just transitioned from not-ready to ready, play sound
		  if(!prevReadyToDrive){
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <main+0xe0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <main+0xa4>
			  PlayStartupSoundOnce();
 8001434:	f7ff ff66 	bl	8001304 <PlayStartupSoundOnce>
		  }
		  sendTorqueCommand();
 8001438:	f7ff fe60 	bl	80010fc <sendTorqueCommand>
	  }
	  prevReadyToDrive = readyToDrive;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <main+0xdc>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <main+0xe0>)
 8001442:	701a      	strb	r2, [r3, #0]
  {
 8001444:	e7d2      	b.n	80013ec <main+0x58>
 8001446:	bf00      	nop
 8001448:	200001e0 	.word	0x200001e0
 800144c:	200002ec 	.word	0x200002ec
 8001450:	200002f8 	.word	0x200002f8
 8001454:	20000004 	.word	0x20000004
 8001458:	200002cc 	.word	0x200002cc
 800145c:	20000038 	.word	0x20000038
 8001460:	2000029c 	.word	0x2000029c
 8001464:	200002b8 	.word	0x200002b8
 8001468:	200002c0 	.word	0x200002c0
 800146c:	200002bc 	.word	0x200002bc
 8001470:	200002e4 	.word	0x200002e4
 8001474:	20000309 	.word	0x20000309

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	@ 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2230      	movs	r2, #48	@ 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f005 f870 	bl	800656c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	4b28      	ldr	r3, [pc, #160]	@ (8001544 <SystemClock_Config+0xcc>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	4a27      	ldr	r2, [pc, #156]	@ (8001544 <SystemClock_Config+0xcc>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ac:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <SystemClock_Config+0xcc>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <SystemClock_Config+0xd0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014c4:	4a20      	ldr	r2, [pc, #128]	@ (8001548 <SystemClock_Config+0xd0>)
 80014c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <SystemClock_Config+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e0:	2310      	movs	r3, #16
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ec:	2308      	movs	r3, #8
 80014ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80014f0:	2354      	movs	r3, #84	@ 0x54
 80014f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014f8:	2307      	movs	r3, #7
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f003 f865 	bl	80045d0 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800150c:	f000 fa6e 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fac7 	bl	8004ac0 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001538:	f000 fa58 	bl	80019ec <Error_Handler>
  }
}
 800153c:	bf00      	nop
 800153e:	3750      	adds	r7, #80	@ 0x50
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800155e:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001560:	4a30      	ldr	r2, [pc, #192]	@ (8001624 <MX_ADC1_Init+0xd8>)
 8001562:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001564:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001566:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800156a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MX_ADC1_Init+0xd4>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001574:	2201      	movs	r2, #1
 8001576:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001578:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <MX_ADC1_Init+0xd4>)
 800157a:	2200      	movs	r2, #0
 800157c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157e:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001590:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001594:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001596:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <MX_ADC1_Init+0xd4>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <MX_ADC1_Init+0xd4>)
 800159e:	2203      	movs	r2, #3
 80015a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_ADC1_Init+0xd4>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <MX_ADC1_Init+0xd4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b0:	481b      	ldr	r0, [pc, #108]	@ (8001620 <MX_ADC1_Init+0xd4>)
 80015b2:	f000 ff31 	bl	8002418 <HAL_ADC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80015bc:	f000 fa16 	bl	80019ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015c8:	2307      	movs	r3, #7
 80015ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4813      	ldr	r0, [pc, #76]	@ (8001620 <MX_ADC1_Init+0xd4>)
 80015d2:	f001 f983 	bl	80028dc <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015dc:	f000 fa06 	bl	80019ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015e0:	2303      	movs	r3, #3
 80015e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015e4:	2303      	movs	r3, #3
 80015e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4619      	mov	r1, r3
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <MX_ADC1_Init+0xd4>)
 80015ee:	f001 f975 	bl	80028dc <HAL_ADC_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80015f8:	f000 f9f8 	bl	80019ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_ADC1_Init+0xd4>)
 800160a:	f001 f967 	bl	80028dc <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001614:	f000 f9ea 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000038 	.word	0x20000038
 8001624:	40012000 	.word	0x40012000

08001628 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <MX_I2S2_Init+0x54>)
 800162e:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <MX_I2S2_Init+0x58>)
 8001630:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <MX_I2S2_Init+0x54>)
 8001634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001638:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <MX_I2S2_Init+0x54>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_I2S2_Init+0x54>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <MX_I2S2_Init+0x54>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <MX_I2S2_Init+0x54>)
 800164e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001652:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_I2S2_Init+0x54>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_I2S2_Init+0x54>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_I2S2_Init+0x54>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_I2S2_Init+0x54>)
 8001668:	f002 fa1a 	bl	8003aa0 <HAL_I2S_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8001672:	f000 f9bb 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000e0 	.word	0x200000e0
 8001680:	40003800 	.word	0x40003800

08001684 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <MX_SPI3_Init+0x64>)
 800168a:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <MX_SPI3_Init+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <MX_SPI3_Init+0x64>)
 8001690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001694:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_SPI3_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_SPI3_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016b8:	2210      	movs	r2, #16
 80016ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016d0:	220a      	movs	r2, #10
 80016d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_SPI3_Init+0x64>)
 80016d6:	f003 fd2d 	bl	8005134 <HAL_SPI_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80016e0:	f000 f984 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000188 	.word	0x20000188
 80016ec:	40003c00 	.word	0x40003c00

080016f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_TIM3_Init+0x94>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	@ (8001788 <MX_TIM3_Init+0x98>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_TIM3_Init+0x94>)
 8001714:	2204      	movs	r2, #4
 8001716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_TIM3_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_TIM3_Init+0x94>)
 8001720:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_TIM3_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <MX_TIM3_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	@ (8001784 <MX_TIM3_Init+0x94>)
 8001734:	f004 fade 	bl	8005cf4 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 f955 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_TIM3_Init+0x94>)
 8001750:	f004 fc6a 	bl	8006028 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 f947 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800175e:	2320      	movs	r3, #32
 8001760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <MX_TIM3_Init+0x94>)
 800176c:	f004 fe7c 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001776:	f000 f939 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200001e0 	.word	0x200001e0
 8001788:	40000400 	.word	0x40000400

0800178c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <MX_DMA_Init+0x78>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a1a      	ldr	r2, [pc, #104]	@ (8001804 <MX_DMA_Init+0x78>)
 800179c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <MX_DMA_Init+0x78>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_DMA_Init+0x78>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <MX_DMA_Init+0x78>)
 80017b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_DMA_Init+0x78>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	200d      	movs	r0, #13
 80017d0:	f001 fc09 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017d4:	200d      	movs	r0, #13
 80017d6:	f001 fc22 	bl	800301e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	200f      	movs	r0, #15
 80017e0:	f001 fc01 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80017e4:	200f      	movs	r0, #15
 80017e6:	f001 fc1a 	bl	800301e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2038      	movs	r0, #56	@ 0x38
 80017f0:	f001 fbf9 	bl	8002fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017f4:	2038      	movs	r0, #56	@ 0x38
 80017f6:	f001 fc12 	bl	800301e <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b6e      	ldr	r3, [pc, #440]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a6d      	ldr	r2, [pc, #436]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b6b      	ldr	r3, [pc, #428]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b67      	ldr	r3, [pc, #412]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b64      	ldr	r3, [pc, #400]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b60      	ldr	r3, [pc, #384]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a5f      	ldr	r2, [pc, #380]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b5d      	ldr	r3, [pc, #372]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b59      	ldr	r3, [pc, #356]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a58      	ldr	r2, [pc, #352]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b56      	ldr	r3, [pc, #344]	@ (80019dc <MX_GPIO_Init+0x1d4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	4853      	ldr	r0, [pc, #332]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 8001894:	f002 f8ea 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	210e      	movs	r1, #14
 800189c:	4850      	ldr	r0, [pc, #320]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 800189e:	f002 f8e5 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2120      	movs	r1, #32
 80018a6:	484f      	ldr	r0, [pc, #316]	@ (80019e4 <MX_GPIO_Init+0x1dc>)
 80018a8:	f002 f8e0 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b2:	484c      	ldr	r0, [pc, #304]	@ (80019e4 <MX_GPIO_Init+0x1dc>)
 80018b4:	f002 f8da 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2110      	movs	r1, #16
 80018bc:	484a      	ldr	r0, [pc, #296]	@ (80019e8 <MX_GPIO_Init+0x1e0>)
 80018be:	f002 f8d5 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4841      	ldr	r0, [pc, #260]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 80018da:	f001 ff2b 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	483a      	ldr	r0, [pc, #232]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 80018f6:	f001 ff1d 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 80018fa:	2302      	movs	r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001902:	2301      	movs	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4833      	ldr	r0, [pc, #204]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 8001912:	f001 ff0f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8001916:	230c      	movs	r3, #12
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	482c      	ldr	r0, [pc, #176]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 800192e:	f001 ff01 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001932:	2320      	movs	r3, #32
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4826      	ldr	r0, [pc, #152]	@ (80019e4 <MX_GPIO_Init+0x1dc>)
 800194a:	f001 fef3 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTD_Pin SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = RTD_Pin|SHUTDOWN_Pin;
 800194e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4820      	ldr	r0, [pc, #128]	@ (80019e4 <MX_GPIO_Init+0x1dc>)
 8001964:	f001 fee6 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_Pin;
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRECHARGE_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4819      	ldr	r0, [pc, #100]	@ (80019e0 <MX_GPIO_Init+0x1d8>)
 800197c:	f001 feda 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8001980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198a:	2301      	movs	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4812      	ldr	r0, [pc, #72]	@ (80019e4 <MX_GPIO_Init+0x1dc>)
 800199a:	f001 fecb 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800199e:	2310      	movs	r3, #16
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <MX_GPIO_Init+0x1e0>)
 80019b6:	f001 febd 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ba:	2320      	movs	r3, #32
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <MX_GPIO_Init+0x1e0>)
 80019ce:	f001 feb1 	bl	8003734 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	@ 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40020400 	.word	0x40020400

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80019fe:	2201      	movs	r2, #1
 8001a00:	2102      	movs	r1, #2
 8001a02:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MCP2515_Initialize+0x3c>)
 8001a04:	f002 f832 	bl	8003a6c <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8001a08:	230a      	movs	r3, #10
 8001a0a:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001a0c:	480a      	ldr	r0, [pc, #40]	@ (8001a38 <MCP2515_Initialize+0x40>)
 8001a0e:	f004 f820 	bl	8005a52 <HAL_SPI_GetState>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <MCP2515_Initialize+0x24>
      return true;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e006      	b.n	8001a2a <MCP2515_Initialize+0x32>
    
    loop--;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f1      	bne.n	8001a0c <MCP2515_Initialize+0x14>
      
  return false;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020800 	.word	0x40020800
 8001a38:	20000188 	.word	0x20000188

08001a3c <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	200f      	movs	r0, #15
 8001a46:	f000 f8a3 	bl	8001b90 <MCP2515_WriteByte>
  HAL_Delay(100);
 8001a4a:	2064      	movs	r0, #100	@ 0x64
 8001a4c:	f000 fcc0 	bl	80023d0 <HAL_Delay>
  uint8_t loop = 10;
 8001a50:	230a      	movs	r3, #10
 8001a52:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	200f      	movs	r0, #15
 8001a58:	f000 f89a 	bl	8001b90 <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001a5c:	200e      	movs	r0, #14
 8001a5e:	f000 f84f 	bl	8001b00 <MCP2515_ReadByte>
 8001a62:	4603      	mov	r3, r0
 8001a64:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 8001a66:	2030      	movs	r0, #48	@ 0x30
 8001a68:	f000 f84a 	bl	8001b00 <MCP2515_ReadByte>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001a76:	2b80      	cmp	r3, #128	@ 0x80
 8001a78:	d101      	bne.n	8001a7e <MCP2515_SetConfigMode+0x42>
      return true;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e008      	b.n	8001a90 <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001a84:	2064      	movs	r0, #100	@ 0x64
 8001a86:	f000 fca3 	bl	80023d0 <HAL_Delay>

  } while(loop > 0);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	e7e1      	b.n	8001a54 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	200f      	movs	r0, #15
 8001aa2:	f000 f875 	bl	8001b90 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001aaa:	200e      	movs	r0, #14
 8001aac:	f000 f828 	bl	8001b00 <MCP2515_ReadByte>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <MCP2515_SetNormalMode+0x26>
      return true;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e006      	b.n	8001acc <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ef      	bne.n	8001aaa <MCP2515_SetNormalMode+0x12>
  
  return false;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2102      	movs	r1, #2
 8001adc:	4807      	ldr	r0, [pc, #28]	@ (8001afc <MCP2515_Reset+0x28>)
 8001ade:	f001 ffc5 	bl	8003a6c <HAL_GPIO_WritePin>
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 fc74 	bl	80023d0 <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 8001ae8:	20c0      	movs	r0, #192	@ 0xc0
 8001aea:	f000 f929 	bl	8001d40 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001aee:	2201      	movs	r2, #1
 8001af0:	2102      	movs	r1, #2
 8001af2:	4802      	ldr	r0, [pc, #8]	@ (8001afc <MCP2515_Reset+0x28>)
 8001af4:	f001 ffba 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40020800 	.word	0x40020800

08001b00 <MCP2515_ReadByte>:



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <MCP2515_ReadByte+0x44>)
 8001b10:	f001 ffac 	bl	8003a6c <HAL_GPIO_WritePin>
 8001b14:	2001      	movs	r0, #1
 8001b16:	f000 fc5b 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f000 f910 	bl	8001d40 <SPI_Tx>
  SPI_Tx(address);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f90c 	bl	8001d40 <SPI_Tx>
  retVal = SPI_Rx();
 8001b28:	f000 f930 	bl	8001d8c <SPI_Rx>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <MCP2515_ReadByte+0x44>)
 8001b36:	f001 ff99 	bl	8003a6c <HAL_GPIO_WritePin>
  
  return retVal;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40020800 	.word	0x40020800

08001b48 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	480b      	ldr	r0, [pc, #44]	@ (8001b8c <MCP2515_ReadRxSequence+0x44>)
 8001b5e:	f001 ff85 	bl	8003a6c <HAL_GPIO_WritePin>
 8001b62:	2001      	movs	r0, #1
 8001b64:	f000 fc34 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(instruction);        
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f8e8 	bl	8001d40 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001b70:	79bb      	ldrb	r3, [r7, #6]
 8001b72:	4619      	mov	r1, r3
 8001b74:	6838      	ldr	r0, [r7, #0]
 8001b76:	f000 f919 	bl	8001dac <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <MCP2515_ReadRxSequence+0x44>)
 8001b80:	f001 ff74 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40020800 	.word	0x40020800

08001b90 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MCP2515_WriteByte+0x48>)
 8001ba6:	f001 ff61 	bl	8003a6c <HAL_GPIO_WritePin>
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 fc10 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f000 f8c5 	bl	8001d40 <SPI_Tx>
  SPI_Tx(address);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f8c1 	bl	8001d40 <SPI_Tx>
  SPI_Tx(data);  
 8001bbe:	79bb      	ldrb	r3, [r7, #6]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f8bd 	bl	8001d40 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2102      	movs	r1, #2
 8001bca:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <MCP2515_WriteByte+0x48>)
 8001bcc:	f001 ff4e 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020800 	.word	0x40020800

08001bdc <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	603a      	str	r2, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	460b      	mov	r3, r1
 8001bea:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001bec:	2200      	movs	r2, #0
 8001bee:	2102      	movs	r1, #2
 8001bf0:	480f      	ldr	r0, [pc, #60]	@ (8001c30 <MCP2515_WriteByteSequence+0x54>)
 8001bf2:	f001 ff3b 	bl	8003a6c <HAL_GPIO_WritePin>
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f000 fbea 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f000 f89f 	bl	8001d40 <SPI_Tx>
  SPI_Tx(startAddress);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f89b 	bl	8001d40 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001c0a:	79ba      	ldrb	r2, [r7, #6]
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f000 f8a3 	bl	8001d64 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2102      	movs	r1, #2
 8001c22:	4803      	ldr	r0, [pc, #12]	@ (8001c30 <MCP2515_WriteByteSequence+0x54>)
 8001c24:	f001 ff22 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020800 	.word	0x40020800

08001c34 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	4613      	mov	r3, r2
 8001c44:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001c46:	2200      	movs	r2, #0
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4810      	ldr	r0, [pc, #64]	@ (8001c8c <MCP2515_LoadTxSequence+0x58>)
 8001c4c:	f001 ff0e 	bl	8003a6c <HAL_GPIO_WritePin>
 8001c50:	2001      	movs	r0, #1
 8001c52:	f000 fbbd 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f871 	bl	8001d40 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001c5e:	2104      	movs	r1, #4
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f000 f87f 	bl	8001d64 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f869 	bl	8001d40 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001c6e:	7bbb      	ldrb	r3, [r7, #14]
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f876 	bl	8001d64 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <MCP2515_LoadTxSequence+0x58>)
 8001c7e:	f001 fef5 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40020800 	.word	0x40020800

08001c90 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	4809      	ldr	r0, [pc, #36]	@ (8001cc4 <MCP2515_RequestToSend+0x34>)
 8001ca0:	f001 fee4 	bl	8003a6c <HAL_GPIO_WritePin>
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f000 fb93 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f847 	bl	8001d40 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4803      	ldr	r0, [pc, #12]	@ (8001cc4 <MCP2515_RequestToSend+0x34>)
 8001cb8:	f001 fed8 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <MCP2515_ReadStatus+0x38>)
 8001cd4:	f001 feca 	bl	8003a6c <HAL_GPIO_WritePin>
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f000 fb79 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001cde:	20a0      	movs	r0, #160	@ 0xa0
 8001ce0:	f000 f82e 	bl	8001d40 <SPI_Tx>
  retVal = SPI_Rx();
 8001ce4:	f000 f852 	bl	8001d8c <SPI_Rx>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 8001cec:	2201      	movs	r2, #1
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <MCP2515_ReadStatus+0x38>)
 8001cf2:	f001 febb 	bl	8003a6c <HAL_GPIO_WritePin>
  
  return retVal;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020800 	.word	0x40020800

08001d04 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	480b      	ldr	r0, [pc, #44]	@ (8001d3c <MCP2515_GetRxStatus+0x38>)
 8001d10:	f001 feac 	bl	8003a6c <HAL_GPIO_WritePin>
 8001d14:	2001      	movs	r0, #1
 8001d16:	f000 fb5b 	bl	80023d0 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8001d1a:	20b0      	movs	r0, #176	@ 0xb0
 8001d1c:	f000 f810 	bl	8001d40 <SPI_Tx>
  retVal = SPI_Rx();
 8001d20:	f000 f834 	bl	8001d8c <SPI_Rx>
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MCP2515_GetRxStatus+0x38>)
 8001d2e:	f001 fe9d 	bl	8003a6c <HAL_GPIO_WritePin>
  
  return retVal;
 8001d32:	79fb      	ldrb	r3, [r7, #7]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40020800 	.word	0x40020800

08001d40 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001d4a:	1df9      	adds	r1, r7, #7
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4803      	ldr	r0, [pc, #12]	@ (8001d60 <SPI_Tx+0x20>)
 8001d52:	f003 fa78 	bl	8005246 <HAL_SPI_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000188 	.word	0x20000188

08001d64 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	230a      	movs	r3, #10
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <SPI_TxBuffer+0x24>)
 8001d7a:	f003 fa64 	bl	8005246 <HAL_SPI_Transmit>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000188 	.word	0x20000188

08001d8c <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001d92:	1df9      	adds	r1, r7, #7
 8001d94:	230a      	movs	r3, #10
 8001d96:	2201      	movs	r2, #1
 8001d98:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <SPI_Rx+0x1c>)
 8001d9a:	f003 fb98 	bl	80054ce <HAL_SPI_Receive>
  return retVal;
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000188 	.word	0x20000188

08001dac <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	230a      	movs	r3, #10
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <SPI_RxBuffer+0x24>)
 8001dc2:	f003 fb84 	bl	80054ce <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000188 	.word	0x20000188

08001dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f001 f8dc 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a33      	ldr	r2, [pc, #204]	@ (8001f10 <HAL_ADC_MspInit+0xec>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d160      	bne.n	8001f08 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b32      	ldr	r3, [pc, #200]	@ (8001f14 <HAL_ADC_MspInit+0xf0>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	4a31      	ldr	r2, [pc, #196]	@ (8001f14 <HAL_ADC_MspInit+0xf0>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e56:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <HAL_ADC_MspInit+0xf0>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_ADC_MspInit+0xf0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f14 <HAL_ADC_MspInit+0xf0>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_ADC_MspInit+0xf0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e7e:	230e      	movs	r3, #14
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e82:	2303      	movs	r3, #3
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4821      	ldr	r0, [pc, #132]	@ (8001f18 <HAL_ADC_MspInit+0xf4>)
 8001e92:	f001 fc4f 	bl	8003734 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e96:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001e98:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <HAL_ADC_MspInit+0xfc>)
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001eb8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ec0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ec4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ecc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ed0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ed4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001edc:	480f      	ldr	r0, [pc, #60]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ede:	f001 f8b9 	bl	8003054 <HAL_DMA_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001ee8:	f7ff fd80 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_ADC_MspInit+0xf8>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	2012      	movs	r0, #18
 8001efe:	f001 f872 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f02:	2012      	movs	r0, #18
 8001f04:	f001 f88b 	bl	800301e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	@ 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40012000 	.word	0x40012000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	20000080 	.word	0x20000080
 8001f20:	40026410 	.word	0x40026410

08001f24 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	@ 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3d      	ldr	r2, [pc, #244]	@ (8002048 <HAL_I2S_MspInit+0x124>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d174      	bne.n	8002040 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001f56:	2301      	movs	r3, #1
 8001f58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001f5a:	23c0      	movs	r3, #192	@ 0xc0
 8001f5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f002 ff96 	bl	8004e98 <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001f72:	f7ff fd3b 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_I2S_MspInit+0x128>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4a33      	ldr	r2, [pc, #204]	@ (800204c <HAL_I2S_MspInit+0x128>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_I2S_MspInit+0x128>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_I2S_MspInit+0x128>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <HAL_I2S_MspInit+0x128>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_I2S_MspInit+0x128>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001fae:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4821      	ldr	r0, [pc, #132]	@ (8002050 <HAL_I2S_MspInit+0x12c>)
 8001fcc:	f001 fbb2 	bl	8003734 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001fd2:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <HAL_I2S_MspInit+0x134>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001fde:	2240      	movs	r2, #64	@ 0x40
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8001ffa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ffe:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 800200e:	2204      	movs	r2, #4
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8002014:	2201      	movs	r2, #1
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002024:	480b      	ldr	r0, [pc, #44]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8002026:	f001 f815 	bl	8003054 <HAL_DMA_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8002030:	f7ff fcdc 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 8002038:	639a      	str	r2, [r3, #56]	@ 0x38
 800203a:	4a06      	ldr	r2, [pc, #24]	@ (8002054 <HAL_I2S_MspInit+0x130>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002040:	bf00      	nop
 8002042:	3738      	adds	r7, #56	@ 0x38
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40003800 	.word	0x40003800
 800204c:	40023800 	.word	0x40023800
 8002050:	40020400 	.word	0x40020400
 8002054:	20000128 	.word	0x20000128
 8002058:	40026070 	.word	0x40026070

0800205c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <HAL_SPI_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12c      	bne.n	80020d8 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_SPI_MspInit+0x88>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_SPI_MspInit+0x88>)
 8002088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_SPI_MspInit+0x88>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_SPI_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_SPI_MspInit+0x88>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_SPI_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80020b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020c8:	2306      	movs	r3, #6
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	@ (80020e8 <HAL_SPI_MspInit+0x8c>)
 80020d4:	f001 fb2e 	bl	8003734 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	@ 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40003c00 	.word	0x40003c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020800 	.word	0x40020800

080020ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <HAL_TIM_Base_MspInit+0xb4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d14c      	bne.n	8002198 <HAL_TIM_Base_MspInit+0xac>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800211a:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 800211c:	4a23      	ldr	r2, [pc, #140]	@ (80021ac <HAL_TIM_Base_MspInit+0xc0>)
 800211e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002122:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002126:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002128:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800212e:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 800213e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002142:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002144:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002146:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800214c:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002154:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002158:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002160:	4811      	ldr	r0, [pc, #68]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002162:	f000 ff77 	bl	8003054 <HAL_DMA_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800216c:	f7ff fc3e 	bl	80019ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
 8002176:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002180:	621a      	str	r2, [r3, #32]
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	201d      	movs	r0, #29
 800218e:	f000 ff2a 	bl	8002fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002192:	201d      	movs	r0, #29
 8002194:	f000 ff43 	bl	800301e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	20000228 	.word	0x20000228
 80021ac:	40026040 	.word	0x40026040

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <NMI_Handler+0x4>

080021b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <MemManage_Handler+0x4>

080021c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002206:	f000 f8c3 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <DMA1_Stream2_IRQHandler+0x10>)
 8002216:	f001 f823 	bl	8003260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000228 	.word	0x20000228

08002224 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <DMA1_Stream4_IRQHandler+0x10>)
 800222a:	f001 f819 	bl	8003260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000128 	.word	0x20000128

08002238 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <ADC_IRQHandler+0x10>)
 800223e:	f000 f92e 	bl	800249e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000038 	.word	0x20000038

0800224c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <TIM3_IRQHandler+0x10>)
 8002252:	f003 fdf9 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200001e0 	.word	0x200001e0

08002260 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <DMA2_Stream0_IRQHandler+0x10>)
 8002266:	f000 fffb 	bl	8003260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000080 	.word	0x20000080

08002274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <SystemInit+0x20>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <SystemInit+0x20>)
 8002280:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800229c:	f7ff ffea 	bl	8002274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480c      	ldr	r0, [pc, #48]	@ (80022d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a2:	490d      	ldr	r1, [pc, #52]	@ (80022d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a4:	4a0d      	ldr	r2, [pc, #52]	@ (80022dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b8:	4c0a      	ldr	r4, [pc, #40]	@ (80022e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f004 f959 	bl	800657c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7ff f863 	bl	8001394 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80022dc:	0805686c 	.word	0x0805686c
  ldr r2, =_sbss
 80022e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80022e4:	20000310 	.word	0x20000310

080022e8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <DMA1_Stream0_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	@ (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 fe5b 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f808 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fd58 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_InitTick+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_InitTick+0x58>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fe73 	bl	800303a <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d80a      	bhi.n	800237a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f000 fe3b 	bl	8002fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002370:	4a06      	ldr	r2, [pc, #24]	@ (800238c <HAL_InitTick+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000008 	.word	0x20000008
 8002388:	20000010 	.word	0x20000010
 800238c:	2000000c 	.word	0x2000000c

08002390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000010 	.word	0x20000010
 80023b4:	2000030c 	.word	0x2000030c

080023b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	2000030c 	.word	0x2000030c

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000010 	.word	0x20000010

08002418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e033      	b.n	8002496 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fcf4 	bl	8001e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	f043 0202 	orr.w	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fb58 	bl	8002b20 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
 8002486:	e001      	b.n	800248c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d049      	beq.n	8002568 <HAL_ADC_IRQHandler+0xca>
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d046      	beq.n	8002568 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d12b      	bne.n	8002558 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d127      	bne.n	8002558 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002520:	2b00      	cmp	r3, #0
 8002522:	d119      	bne.n	8002558 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0220 	bic.w	r2, r2, #32
 8002532:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fafb 	bl	8000b54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0212 	mvn.w	r2, #18
 8002566:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002576:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d057      	beq.n	800262e <HAL_ADC_IRQHandler+0x190>
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d054      	beq.n	800262e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d139      	bne.n	800261e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d12b      	bne.n	800261e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d124      	bne.n	800261e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d119      	bne.n	800261e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025f8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fbfc 	bl	8002e1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 020c 	mvn.w	r2, #12
 800262c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_ADC_IRQHandler+0x1d6>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d014      	beq.n	8002674 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d10d      	bne.n	8002674 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f925 	bl	80028b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 0201 	mvn.w	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002682:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x218>
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	f043 0202 	orr.w	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0220 	mvn.w	r2, #32
 80026a4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f90e 	bl	80028c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0220 	mvn.w	r2, #32
 80026b4:	601a      	str	r2, [r3, #0]
  }
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_ADC_Start_DMA+0x1e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e0ce      	b.n	800287c <HAL_ADC_Start_DMA+0x1bc>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d018      	beq.n	8002726 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002704:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_ADC_Start_DMA+0x1c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5f      	ldr	r2, [pc, #380]	@ (8002888 <HAL_ADC_Start_DMA+0x1c8>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9a      	lsrs	r2, r3, #18
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002718:	e002      	b.n	8002720 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	3b01      	subs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002734:	d107      	bne.n	8002746 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002744:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	f040 8086 	bne.w	8002862 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002780:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002794:	d106      	bne.n	80027a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f023 0206 	bic.w	r2, r3, #6
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80027a2:	e002      	b.n	80027aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <HAL_ADC_Start_DMA+0x1cc>)
 80027b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	4a35      	ldr	r2, [pc, #212]	@ (8002890 <HAL_ADC_Start_DMA+0x1d0>)
 80027bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	4a34      	ldr	r2, [pc, #208]	@ (8002894 <HAL_ADC_Start_DMA+0x1d4>)
 80027c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	4a33      	ldr	r2, [pc, #204]	@ (8002898 <HAL_ADC_Start_DMA+0x1d8>)
 80027cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80027e6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	334c      	adds	r3, #76	@ 0x4c
 8002802:	4619      	mov	r1, r3
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f000 fcd2 	bl	80031b0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10f      	bne.n	8002838 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d129      	bne.n	800287a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	e020      	b.n	800287a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a17      	ldr	r2, [pc, #92]	@ (800289c <HAL_ADC_Start_DMA+0x1dc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d11b      	bne.n	800287a <HAL_ADC_Start_DMA+0x1ba>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d114      	bne.n	800287a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e00b      	b.n	800287a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f043 0210 	orr.w	r2, r3, #16
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000008 	.word	0x20000008
 8002888:	431bde83 	.word	0x431bde83
 800288c:	40012300 	.word	0x40012300
 8002890:	08002d19 	.word	0x08002d19
 8002894:	08002dd3 	.word	0x08002dd3
 8002898:	08002def 	.word	0x08002def
 800289c:	40012000 	.word	0x40012000

080028a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e105      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x228>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d925      	bls.n	8002954 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68d9      	ldr	r1, [r3, #12]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	3b1e      	subs	r3, #30
 800291e:	2207      	movs	r2, #7
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43da      	mvns	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	400a      	ands	r2, r1
 800292c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68d9      	ldr	r1, [r3, #12]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	4603      	mov	r3, r0
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4403      	add	r3, r0
 8002946:	3b1e      	subs	r3, #30
 8002948:	409a      	lsls	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	e022      	b.n	800299a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6919      	ldr	r1, [r3, #16]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	2207      	movs	r2, #7
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6919      	ldr	r1, [r3, #16]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	4603      	mov	r3, r0
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4403      	add	r3, r0
 8002990:	409a      	lsls	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d824      	bhi.n	80029ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b05      	subs	r3, #5
 80029b4:	221f      	movs	r2, #31
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	4618      	mov	r0, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b05      	subs	r3, #5
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80029ea:	e04c      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d824      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b23      	subs	r3, #35	@ 0x23
 8002a06:	221f      	movs	r2, #31
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b23      	subs	r3, #35	@ 0x23
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a3c:	e023      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b41      	subs	r3, #65	@ 0x41
 8002a50:	221f      	movs	r2, #31
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	3b41      	subs	r3, #65	@ 0x41
 8002a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <HAL_ADC_ConfigChannel+0x234>)
 8002a88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <HAL_ADC_ConfigChannel+0x238>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1cc>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <HAL_ADC_ConfigChannel+0x238>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d123      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d003      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x1e6>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b11      	cmp	r3, #17
 8002ac0:	d11b      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d111      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_ADC_ConfigChannel+0x23c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <HAL_ADC_ConfigChannel+0x240>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9a      	lsrs	r2, r3, #18
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002aec:	e002      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f9      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40012300 	.word	0x40012300
 8002b14:	40012000 	.word	0x40012000
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	431bde83 	.word	0x431bde83

08002b20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b28:	4b79      	ldr	r3, [pc, #484]	@ (8002d10 <ADC_Init+0x1f0>)
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	4a58      	ldr	r2, [pc, #352]	@ (8002d14 <ADC_Init+0x1f4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e00f      	b.n	8002c1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c1c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0202 	bic.w	r2, r2, #2
 8002c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	005a      	lsls	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01b      	beq.n	8002c84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c5a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	3b01      	subs	r3, #1
 8002c78:	035a      	lsls	r2, r3, #13
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e007      	b.n	8002c94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	051a      	lsls	r2, r3, #20
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cd6:	025a      	lsls	r2, r3, #9
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	029a      	lsls	r2, r3, #10
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40012300 	.word	0x40012300
 8002d14:	0f000001 	.word	0x0f000001

08002d18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d13c      	bne.n	8002dac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d12b      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d127      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d119      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0220 	bic.w	r2, r2, #32
 8002d7e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fd fed5 	bl	8000b54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002daa:	e00e      	b.n	8002dca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff fd85 	bl	80028c8 <HAL_ADC_ErrorCallback>
}
 8002dbe:	e004      	b.n	8002dca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fd5d 	bl	80028a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	@ 0x40
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f043 0204 	orr.w	r2, r3, #4
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff fd5a 	bl	80028c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f9c:	d301      	bcc.n	8002fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <SysTick_Config+0x40>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002faa:	210f      	movs	r1, #15
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	f7ff ff8e 	bl	8002ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <SysTick_Config+0x40>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <SysTick_Config+0x40>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff29 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff8:	f7ff ff3e 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f7ff ff8e 	bl	8002f24 <NVIC_EncodePriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff5d 	bl	8002ed0 <__NVIC_SetPriority>
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff31 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffa2 	bl	8002f8c <SysTick_Config>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff f9aa 	bl	80023b8 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e099      	b.n	80031a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003090:	e00f      	b.n	80030b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003092:	f7ff f991 	bl	80023b8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b05      	cmp	r3, #5
 800309e:	d908      	bls.n	80030b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e078      	b.n	80031a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e8      	bne.n	8003092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <HAL_DMA_Init+0x158>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	2b04      	cmp	r3, #4
 800310a:	d107      	bne.n	800311c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	4313      	orrs	r3, r2
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	2b04      	cmp	r3, #4
 8003144:	d117      	bne.n	8003176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fa6f 	bl	800363c <DMA_CheckFifoParam>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	@ 0x40
 8003168:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003172:	2301      	movs	r3, #1
 8003174:	e016      	b.n	80031a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa26 	bl	80035d0 <DMA_CalcBaseAndBitshift>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	223f      	movs	r2, #63	@ 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	f010803f 	.word	0xf010803f

080031b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_DMA_Start_IT+0x26>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e040      	b.n	8003258 <HAL_DMA_Start_IT+0xa8>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12f      	bne.n	800324a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f9b8 	bl	8003574 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	223f      	movs	r2, #63	@ 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0216 	orr.w	r2, r2, #22
 800321e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e005      	b.n	8003256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800326c:	4b8e      	ldr	r3, [pc, #568]	@ (80034a8 <HAL_DMA_IRQHandler+0x248>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a8e      	ldr	r2, [pc, #568]	@ (80034ac <HAL_DMA_IRQHandler+0x24c>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	2208      	movs	r2, #8
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01a      	beq.n	80032cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	2208      	movs	r2, #8
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	2201      	movs	r2, #1
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d012      	beq.n	8003338 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2204      	movs	r2, #4
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	2210      	movs	r2, #16
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d043      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d03c      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	2210      	movs	r2, #16
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e01f      	b.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
 80033a0:	e016      	b.n	80033d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0208 	bic.w	r2, r2, #8
 80033be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	2220      	movs	r2, #32
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 808f 	beq.w	8003500 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8087 	beq.w	8003500 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f6:	2220      	movs	r2, #32
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b05      	cmp	r3, #5
 8003408:	d136      	bne.n	8003478 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0216 	bic.w	r2, r2, #22
 8003418:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003428:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <HAL_DMA_IRQHandler+0x1da>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0208 	bic.w	r2, r2, #8
 8003448:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	223f      	movs	r2, #63	@ 0x3f
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07e      	beq.n	800356c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
        }
        return;
 8003476:	e079      	b.n	800356c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	2b00      	cmp	r3, #0
 800349a:	d031      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
 80034a4:	e02c      	b.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008
 80034ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d023      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e01e      	b.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0210 	bic.w	r2, r2, #16
 80034de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	d032      	beq.n	800356e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d022      	beq.n	800355a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2205      	movs	r2, #5
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3301      	adds	r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d307      	bcc.n	8003548 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f2      	bne.n	800352c <HAL_DMA_IRQHandler+0x2cc>
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003548:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
 800356a:	e000      	b.n	800356e <HAL_DMA_IRQHandler+0x30e>
        return;
 800356c:	bf00      	nop
    }
  }
}
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003590:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d108      	bne.n	80035b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035b2:	e007      	b.n	80035c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b10      	subs	r3, #16
 80035e0:	4a14      	ldr	r2, [pc, #80]	@ (8003634 <DMA_CalcBaseAndBitshift+0x64>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ea:	4a13      	ldr	r2, [pc, #76]	@ (8003638 <DMA_CalcBaseAndBitshift+0x68>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d909      	bls.n	8003612 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003610:	e007      	b.n	8003622 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	aaaaaaab 	.word	0xaaaaaaab
 8003638:	08056854 	.word	0x08056854

0800363c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d856      	bhi.n	800370a <DMA_CheckFifoParam+0xce>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <DMA_CheckFifoParam+0x28>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003687 	.word	0x08003687
 800366c:	08003675 	.word	0x08003675
 8003670:	0800370b 	.word	0x0800370b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d046      	beq.n	800370e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e043      	b.n	800370e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368e:	d140      	bne.n	8003712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e03d      	b.n	8003712 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369e:	d121      	bne.n	80036e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d837      	bhi.n	8003716 <DMA_CheckFifoParam+0xda>
 80036a6:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <DMA_CheckFifoParam+0x70>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c3 	.word	0x080036c3
 80036b4:	080036bd 	.word	0x080036bd
 80036b8:	080036d5 	.word	0x080036d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e030      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d025      	beq.n	800371a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d2:	e022      	b.n	800371a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036e2:	e01c      	b.n	800371e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d903      	bls.n	80036f2 <DMA_CheckFifoParam+0xb6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f0:	e018      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      break;
 80036f6:	e015      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e00b      	b.n	8003722 <DMA_CheckFifoParam+0xe6>
      break;
 800370a:	bf00      	nop
 800370c:	e00a      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e008      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e006      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;   
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
    }
  } 
  
  return status; 
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e159      	b.n	8003a04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8148 	bne.w	80039fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	2b02      	cmp	r3, #2
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d017      	beq.n	8003824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d123      	bne.n	8003878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a2 	beq.w	80039fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	4a56      	ldr	r2, [pc, #344]	@ (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ca:	4b54      	ldr	r3, [pc, #336]	@ (8003a1c <HAL_GPIO_Init+0x2e8>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d6:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_GPIO_Init+0x2ec>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a49      	ldr	r2, [pc, #292]	@ (8003a24 <HAL_GPIO_Init+0x2f0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x202>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a48      	ldr	r2, [pc, #288]	@ (8003a28 <HAL_GPIO_Init+0x2f4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x1fe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a47      	ldr	r2, [pc, #284]	@ (8003a2c <HAL_GPIO_Init+0x2f8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x1fa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a46      	ldr	r2, [pc, #280]	@ (8003a30 <HAL_GPIO_Init+0x2fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x1f6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a45      	ldr	r2, [pc, #276]	@ (8003a34 <HAL_GPIO_Init+0x300>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x1f2>
 8003922:	2304      	movs	r3, #4
 8003924:	e008      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003926:	2307      	movs	r3, #7
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x204>
 800392a:	2303      	movs	r3, #3
 800392c:	e004      	b.n	8003938 <HAL_GPIO_Init+0x204>
 800392e:	2302      	movs	r3, #2
 8003930:	e002      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_GPIO_Init+0x204>
 8003936:	2300      	movs	r3, #0
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f002 0203 	and.w	r2, r2, #3
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4093      	lsls	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003948:	4935      	ldr	r1, [pc, #212]	@ (8003a20 <HAL_GPIO_Init+0x2ec>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a24      	ldr	r2, [pc, #144]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039aa:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d4:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_GPIO_Init+0x304>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f67f aea2 	bls.w	8003750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	@ 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40020000 	.word	0x40020000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40013c00 	.word	0x40013c00

08003a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e001      	b.n	8003a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e128      	b.n	8003d04 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a90      	ldr	r2, [pc, #576]	@ (8003d0c <HAL_I2S_Init+0x26c>)
 8003aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fe fa29 	bl	8001f24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ae8:	f023 030f 	bic.w	r3, r3, #15
 8003aec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d060      	beq.n	8003bc0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b06:	2310      	movs	r3, #16
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e001      	b.n	8003b10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b0c:	2320      	movs	r3, #32
 8003b0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d802      	bhi.n	8003b1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f001 faa8 	bl	8005074 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b24:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2e:	d125      	bne.n	8003b7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	3305      	adds	r3, #5
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e01f      	b.n	8003b9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	3305      	adds	r3, #5
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e00e      	b.n	8003b9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	3305      	adds	r3, #5
 8003b98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8003d10 <HAL_I2S_Init+0x270>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	08db      	lsrs	r3, r3, #3
 8003ba4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e003      	b.n	8003bc8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d902      	bls.n	8003bd4 <HAL_I2S_Init+0x134>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2bff      	cmp	r3, #255	@ 0xff
 8003bd2:	d907      	bls.n	8003be4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd8:	f043 0210 	orr.w	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e08f      	b.n	8003d04 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	ea42 0103 	orr.w	r1, r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c02:	f023 030f 	bic.w	r3, r3, #15
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6851      	ldr	r1, [r2, #4]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68d2      	ldr	r2, [r2, #12]
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6992      	ldr	r2, [r2, #24]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c26:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d161      	bne.n	8003cf4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a38      	ldr	r2, [pc, #224]	@ (8003d14 <HAL_I2S_Init+0x274>)
 8003c34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a37      	ldr	r2, [pc, #220]	@ (8003d18 <HAL_I2S_Init+0x278>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_I2S_Init+0x1a4>
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <HAL_I2S_Init+0x27c>)
 8003c42:	e001      	b.n	8003c48 <HAL_I2S_Init+0x1a8>
 8003c44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4932      	ldr	r1, [pc, #200]	@ (8003d18 <HAL_I2S_Init+0x278>)
 8003c50:	428a      	cmp	r2, r1
 8003c52:	d101      	bne.n	8003c58 <HAL_I2S_Init+0x1b8>
 8003c54:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <HAL_I2S_Init+0x27c>)
 8003c56:	e001      	b.n	8003c5c <HAL_I2S_Init+0x1bc>
 8003c58:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c60:	f023 030f 	bic.w	r3, r3, #15
 8003c64:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d18 <HAL_I2S_Init+0x278>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2S_Init+0x1d4>
 8003c70:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <HAL_I2S_Init+0x27c>)
 8003c72:	e001      	b.n	8003c78 <HAL_I2S_Init+0x1d8>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c78:	2202      	movs	r2, #2
 8003c7a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <HAL_I2S_Init+0x278>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_I2S_Init+0x1ea>
 8003c86:	4b25      	ldr	r3, [pc, #148]	@ (8003d1c <HAL_I2S_Init+0x27c>)
 8003c88:	e001      	b.n	8003c8e <HAL_I2S_Init+0x1ee>
 8003c8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c9a:	d003      	beq.n	8003ca4 <HAL_I2S_Init+0x204>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e001      	b.n	8003cb0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cdc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <HAL_I2S_Init+0x278>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_I2S_Init+0x24c>
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <HAL_I2S_Init+0x27c>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2S_Init+0x250>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cf0:	897a      	ldrh	r2, [r7, #10]
 8003cf2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08004009 	.word	0x08004009
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	0800411d 	.word	0x0800411d
 8003d18:	40003800 	.word	0x40003800
 8003d1c:	40003400 	.word	0x40003400

08003d20 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_I2S_Transmit_DMA+0x1a>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e08a      	b.n	8003e54 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d001      	beq.n	8003d4e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e082      	b.n	8003e54 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_I2S_Transmit_DMA+0x3e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e07a      	b.n	8003e54 <HAL_I2S_Transmit_DMA+0x134>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d002      	beq.n	8003d92 <HAL_I2S_Transmit_DMA+0x72>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d10a      	bne.n	8003da8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003da6:	e005      	b.n	8003db4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	88fa      	ldrh	r2, [r7, #6]
 8003db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	4a28      	ldr	r2, [pc, #160]	@ (8003e5c <HAL_I2S_Transmit_DMA+0x13c>)
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	4a27      	ldr	r2, [pc, #156]	@ (8003e60 <HAL_I2S_Transmit_DMA+0x140>)
 8003dc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	4a26      	ldr	r2, [pc, #152]	@ (8003e64 <HAL_I2S_Transmit_DMA+0x144>)
 8003dca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003dd4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ddc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003de4:	f7ff f9e4 	bl	80031b0 <HAL_DMA_Start_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00f      	beq.n	8003e0e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f043 0208 	orr.w	r2, r3, #8
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e022      	b.n	8003e54 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0202 	orr.w	r2, r2, #2
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e50:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	08003ee7 	.word	0x08003ee7
 8003e60:	08003ea5 	.word	0x08003ea5
 8003e64:	08003f03 	.word	0x08003f03

08003e68 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10e      	bne.n	8003ed8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0202 	bic.w	r2, r2, #2
 8003ec8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7fd f9c7 	bl	800126c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff ffb7 	bl	8003e68 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0203 	bic.w	r2, r2, #3
 8003f1e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	f043 0208 	orr.w	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ffa5 	bl	8003e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	1c9a      	adds	r2, r3, #2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10e      	bne.n	8003fa2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7fd f965 	bl	800126c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	1c9a      	adds	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ff0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ff3e 	bl	8003e7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b04      	cmp	r3, #4
 8004022:	d13a      	bne.n	800409a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d109      	bne.n	8004042 <I2S_IRQHandler+0x3a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004038:	2b40      	cmp	r3, #64	@ 0x40
 800403a:	d102      	bne.n	8004042 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ffb4 	bl	8003faa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	d126      	bne.n	800409a <I2S_IRQHandler+0x92>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b20      	cmp	r3, #32
 8004058:	d11f      	bne.n	800409a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004068:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	f043 0202 	orr.w	r2, r3, #2
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fefb 	bl	8003e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d136      	bne.n	8004114 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d109      	bne.n	80040c4 <I2S_IRQHandler+0xbc>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b80      	cmp	r3, #128	@ 0x80
 80040bc:	d102      	bne.n	80040c4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff45 	bl	8003f4e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d122      	bne.n	8004114 <I2S_IRQHandler+0x10c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d11b      	bne.n	8004114 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ea:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	f043 0204 	orr.w	r2, r3, #4
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff febe 	bl	8003e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a92      	ldr	r2, [pc, #584]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004136:	4b92      	ldr	r3, [pc, #584]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004138:	e001      	b.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800413a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a8b      	ldr	r2, [pc, #556]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004154:	4b8a      	ldr	r3, [pc, #552]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004156:	e001      	b.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004158:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004168:	d004      	beq.n	8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 8099 	bne.w	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d107      	bne.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f925 	bl	80043d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9c8 	bl	8004538 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b40      	cmp	r3, #64	@ 0x40
 80041b0:	d13a      	bne.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d035      	beq.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6e      	ldr	r2, [pc, #440]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c8:	e001      	b.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4969      	ldr	r1, [pc, #420]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d6:	428b      	cmp	r3, r1
 80041d8:	d101      	bne.n	80041de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041da:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041dc:	e001      	b.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0202 	orr.w	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe34 	bl	8003e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b08      	cmp	r3, #8
 8004230:	f040 80c3 	bne.w	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80bd 	beq.w	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800424e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a49      	ldr	r2, [pc, #292]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800425a:	4b49      	ldr	r3, [pc, #292]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800425c:	e001      	b.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800425e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4944      	ldr	r1, [pc, #272]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426a:	428b      	cmp	r3, r1
 800426c:	d101      	bne.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800426e:	4b44      	ldr	r3, [pc, #272]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004270:	e001      	b.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004272:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004276:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800427a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fdf6 	bl	8003e90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a4:	e089      	b.n	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d107      	bne.n	80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8be 	bl	800443c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8fd 	bl	80044d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d12f      	bne.n	8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02a      	beq.n	8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004308:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800430a:	e001      	b.n	8004310 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800430c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4919      	ldr	r1, [pc, #100]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004318:	428b      	cmp	r3, r1
 800431a:	d101      	bne.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800431c:	4b18      	ldr	r3, [pc, #96]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800431e:	e001      	b.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004324:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004328:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fda6 	bl	8003e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b08      	cmp	r3, #8
 800434c:	d136      	bne.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d031      	beq.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a07      	ldr	r2, [pc, #28]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004362:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004364:	e001      	b.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004366:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4902      	ldr	r1, [pc, #8]	@ (800437c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004372:	428b      	cmp	r3, r1
 8004374:	d106      	bne.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004376:	4b02      	ldr	r3, [pc, #8]	@ (8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004378:	e006      	b.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800437a:	bf00      	nop
 800437c:	40003800 	.word	0x40003800
 8004380:	40003400 	.word	0x40003400
 8004384:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004388:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800438c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800439c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f043 0204 	orr.w	r2, r3, #4
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fd6c 	bl	8003e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043b8:	e000      	b.n	80043bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ba:	bf00      	nop
}
 80043bc:	bf00      	nop
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	1c99      	adds	r1, r3, #2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004418:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ffc9 	bl	80043c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	1c99      	adds	r1, r3, #2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6251      	str	r1, [r2, #36]	@ 0x24
 800444e:	8819      	ldrh	r1, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <I2SEx_TxISR_I2SExt+0x90>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <I2SEx_TxISR_I2SExt+0x22>
 800445a:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <I2SEx_TxISR_I2SExt+0x94>)
 800445c:	e001      	b.n	8004462 <I2SEx_TxISR_I2SExt+0x26>
 800445e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004462:	460a      	mov	r2, r1
 8004464:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d121      	bne.n	80044c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <I2SEx_TxISR_I2SExt+0x90>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <I2SEx_TxISR_I2SExt+0x50>
 8004488:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <I2SEx_TxISR_I2SExt+0x94>)
 800448a:	e001      	b.n	8004490 <I2SEx_TxISR_I2SExt+0x54>
 800448c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	490d      	ldr	r1, [pc, #52]	@ (80044cc <I2SEx_TxISR_I2SExt+0x90>)
 8004498:	428b      	cmp	r3, r1
 800449a:	d101      	bne.n	80044a0 <I2SEx_TxISR_I2SExt+0x64>
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <I2SEx_TxISR_I2SExt+0x94>)
 800449e:	e001      	b.n	80044a4 <I2SEx_TxISR_I2SExt+0x68>
 80044a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff81 	bl	80043c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40003800 	.word	0x40003800
 80044d0:	40003400 	.word	0x40003400

080044d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68d8      	ldr	r0, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	1c99      	adds	r1, r3, #2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044ec:	b282      	uxth	r2, r0
 80044ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d113      	bne.n	8004530 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004516:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff4a 	bl	80043c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a20      	ldr	r2, [pc, #128]	@ (80045c8 <I2SEx_RxISR_I2SExt+0x90>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <I2SEx_RxISR_I2SExt+0x16>
 800454a:	4b20      	ldr	r3, [pc, #128]	@ (80045cc <I2SEx_RxISR_I2SExt+0x94>)
 800454c:	e001      	b.n	8004552 <I2SEx_RxISR_I2SExt+0x1a>
 800454e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004552:	68d8      	ldr	r0, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	1c99      	adds	r1, r3, #2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800455e:	b282      	uxth	r2, r0
 8004560:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d121      	bne.n	80045be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a12      	ldr	r2, [pc, #72]	@ (80045c8 <I2SEx_RxISR_I2SExt+0x90>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <I2SEx_RxISR_I2SExt+0x50>
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <I2SEx_RxISR_I2SExt+0x94>)
 8004586:	e001      	b.n	800458c <I2SEx_RxISR_I2SExt+0x54>
 8004588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	490d      	ldr	r1, [pc, #52]	@ (80045c8 <I2SEx_RxISR_I2SExt+0x90>)
 8004594:	428b      	cmp	r3, r1
 8004596:	d101      	bne.n	800459c <I2SEx_RxISR_I2SExt+0x64>
 8004598:	4b0c      	ldr	r3, [pc, #48]	@ (80045cc <I2SEx_RxISR_I2SExt+0x94>)
 800459a:	e001      	b.n	80045a0 <I2SEx_RxISR_I2SExt+0x68>
 800459c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff03 	bl	80043c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40003800 	.word	0x40003800
 80045cc:	40003400 	.word	0x40003400

080045d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e267      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d075      	beq.n	80046da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ee:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d00c      	beq.n	8004614 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4b85      	ldr	r3, [pc, #532]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004602:	2b08      	cmp	r3, #8
 8004604:	d112      	bne.n	800462c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004606:	4b82      	ldr	r3, [pc, #520]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004612:	d10b      	bne.n	800462c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	4b7e      	ldr	r3, [pc, #504]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d05b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x108>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d157      	bne.n	80046d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e242      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d106      	bne.n	8004644 <HAL_RCC_OscConfig+0x74>
 8004636:	4b76      	ldr	r3, [pc, #472]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a75      	ldr	r2, [pc, #468]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xb0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x98>
 800464e:	4b70      	ldr	r3, [pc, #448]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6f      	ldr	r2, [pc, #444]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b6d      	ldr	r3, [pc, #436]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6c      	ldr	r2, [pc, #432]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xb0>
 8004668:	4b69      	ldr	r3, [pc, #420]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b66      	ldr	r3, [pc, #408]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a65      	ldr	r2, [pc, #404]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800467e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fd fe96 	bl	80023b8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fd fe92 	bl	80023b8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	@ 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e207      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xc0>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd fe82 	bl	80023b8 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd fe7e 	bl	80023b8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	@ 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1f3      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b51      	ldr	r3, [pc, #324]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0xe8>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046fe:	4b44      	ldr	r3, [pc, #272]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x152>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1c7      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4937      	ldr	r1, [pc, #220]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e03a      	b.n	80047ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b34      	ldr	r3, [pc, #208]	@ (8004814 <HAL_RCC_OscConfig+0x244>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fe37 	bl	80023b8 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fd fe33 	bl	80023b8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e1a8      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	4b2b      	ldr	r3, [pc, #172]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b28      	ldr	r3, [pc, #160]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4925      	ldr	r1, [pc, #148]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b24      	ldr	r3, [pc, #144]	@ (8004814 <HAL_RCC_OscConfig+0x244>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd fe16 	bl	80023b8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fd fe12 	bl	80023b8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e187      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d036      	beq.n	8004828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_OscConfig+0x248>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd fdf6 	bl	80023b8 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fd fdf2 	bl	80023b8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e167      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_OscConfig+0x240>)
 80047e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x200>
 80047ee:	e01b      	b.n	8004828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f0:	4b09      	ldr	r3, [pc, #36]	@ (8004818 <HAL_RCC_OscConfig+0x248>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fd fddf 	bl	80023b8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	e00e      	b.n	800481c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fe:	f7fd fddb 	bl	80023b8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d907      	bls.n	800481c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e150      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
 8004810:	40023800 	.word	0x40023800
 8004814:	42470000 	.word	0x42470000
 8004818:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	4b88      	ldr	r3, [pc, #544]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800481e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ea      	bne.n	80047fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8097 	beq.w	8004964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483a:	4b81      	ldr	r3, [pc, #516]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004854:	6413      	str	r3, [r2, #64]	@ 0x40
 8004856:	4b7a      	ldr	r3, [pc, #488]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b77      	ldr	r3, [pc, #476]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d118      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b74      	ldr	r3, [pc, #464]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a73      	ldr	r2, [pc, #460]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487e:	f7fd fd9b 	bl	80023b8 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fd fd97 	bl	80023b8 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e10c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b6a      	ldr	r3, [pc, #424]	@ (8004a44 <HAL_RCC_OscConfig+0x474>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x2ea>
 80048ac:	4b64      	ldr	r3, [pc, #400]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b0:	4a63      	ldr	r2, [pc, #396]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b8:	e01c      	b.n	80048f4 <HAL_RCC_OscConfig+0x324>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x30c>
 80048c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048c8:	f043 0304 	orr.w	r3, r3, #4
 80048cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048da:	e00b      	b.n	80048f4 <HAL_RCC_OscConfig+0x324>
 80048dc:	4b58      	ldr	r3, [pc, #352]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e0:	4a57      	ldr	r2, [pc, #348]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e8:	4b55      	ldr	r3, [pc, #340]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ec:	4a54      	ldr	r2, [pc, #336]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80048ee:	f023 0304 	bic.w	r3, r3, #4
 80048f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d015      	beq.n	8004928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fd fd5c 	bl	80023b8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004904:	f7fd fd58 	bl	80023b8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e0cb      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	4b49      	ldr	r3, [pc, #292]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0ee      	beq.n	8004904 <HAL_RCC_OscConfig+0x334>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004928:	f7fd fd46 	bl	80023b8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd fd42 	bl	80023b8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e0b5      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004946:	4b3e      	ldr	r3, [pc, #248]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ee      	bne.n	8004930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004958:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	4a38      	ldr	r2, [pc, #224]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004962:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80a1 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800496e:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b08      	cmp	r3, #8
 8004978:	d05c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d141      	bne.n	8004a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004982:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <HAL_RCC_OscConfig+0x478>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fd fd16 	bl	80023b8 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd fd12 	bl	80023b8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e087      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	019b      	lsls	r3, r3, #6
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	3b01      	subs	r3, #1
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	491b      	ldr	r1, [pc, #108]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <HAL_RCC_OscConfig+0x478>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fd fceb 	bl	80023b8 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e6:	f7fd fce7 	bl	80023b8 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e05c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f8:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x416>
 8004a04:	e054      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <HAL_RCC_OscConfig+0x478>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fcd4 	bl	80023b8 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fd fcd0 	bl	80023b8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e045      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_RCC_OscConfig+0x470>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x444>
 8004a32:	e03d      	b.n	8004ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e038      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40007000 	.word	0x40007000
 8004a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x4ec>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d028      	beq.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d121      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d11a      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	3b01      	subs	r3, #1
 8004a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0cc      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b68      	ldr	r3, [pc, #416]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d90c      	bls.n	8004afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b65      	ldr	r3, [pc, #404]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b63      	ldr	r3, [pc, #396]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b8      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d020      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b14:	4b59      	ldr	r3, [pc, #356]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4a58      	ldr	r2, [pc, #352]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4a52      	ldr	r2, [pc, #328]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	494d      	ldr	r1, [pc, #308]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d044      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d119      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d003      	beq.n	8004b7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e067      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9e:	4b37      	ldr	r3, [pc, #220]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4934      	ldr	r1, [pc, #208]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fc02 	bl	80023b8 <HAL_GetTick>
 8004bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7fd fbfe 	bl	80023b8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e04f      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bce:	4b2b      	ldr	r3, [pc, #172]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 020c 	and.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1eb      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d20c      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bee:	4b22      	ldr	r3, [pc, #136]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e032      	b.n	8004c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4916      	ldr	r1, [pc, #88]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c32:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c46:	f000 f821 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	490a      	ldr	r1, [pc, #40]	@ (8004c80 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	5ccb      	ldrb	r3, [r1, r3]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <HAL_RCC_ClockConfig+0x1c4>)
 8004c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1c8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fb62 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	08056844 	.word	0x08056844
 8004c84:	20000008 	.word	0x20000008
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b094      	sub	sp, #80	@ 0x50
 8004c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca4:	4b79      	ldr	r3, [pc, #484]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d00d      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x40>
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	f200 80e1 	bhi.w	8004e78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cbe:	e0db      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b73      	ldr	r3, [pc, #460]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cc4:	e0db      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cc6:	4b73      	ldr	r3, [pc, #460]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cca:	e0d8      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d063      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	2200      	movs	r2, #0
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	0159      	lsls	r1, r3, #5
 8004d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d10:	0150      	lsls	r0, r2, #5
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4621      	mov	r1, r4
 8004d18:	1a51      	subs	r1, r2, r1
 8004d1a:	6139      	str	r1, [r7, #16]
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d30:	4659      	mov	r1, fp
 8004d32:	018b      	lsls	r3, r1, #6
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	018a      	lsls	r2, r1, #6
 8004d3e:	4651      	mov	r1, sl
 8004d40:	ebb2 0801 	subs.w	r8, r2, r1
 8004d44:	4659      	mov	r1, fp
 8004d46:	eb63 0901 	sbc.w	r9, r3, r1
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d5e:	4690      	mov	r8, r2
 8004d60:	4699      	mov	r9, r3
 8004d62:	4623      	mov	r3, r4
 8004d64:	eb18 0303 	adds.w	r3, r8, r3
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	eb49 0303 	adc.w	r3, r9, r3
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	024b      	lsls	r3, r1, #9
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d88:	4621      	mov	r1, r4
 8004d8a:	024a      	lsls	r2, r1, #9
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d9c:	f7fb fa1a 	bl	80001d4 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da8:	e058      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	2200      	movs	r2, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	4611      	mov	r1, r2
 8004db6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	0159      	lsls	r1, r3, #5
 8004dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd6:	0150      	lsls	r0, r2, #5
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4641      	mov	r1, r8
 8004dde:	ebb2 0a01 	subs.w	sl, r2, r1
 8004de2:	4649      	mov	r1, r9
 8004de4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004df4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004df8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dfc:	ebb2 040a 	subs.w	r4, r2, sl
 8004e00:	eb63 050b 	sbc.w	r5, r3, fp
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	00eb      	lsls	r3, r5, #3
 8004e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e12:	00e2      	lsls	r2, r4, #3
 8004e14:	4614      	mov	r4, r2
 8004e16:	461d      	mov	r5, r3
 8004e18:	4643      	mov	r3, r8
 8004e1a:	18e3      	adds	r3, r4, r3
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	eb45 0303 	adc.w	r3, r5, r3
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e32:	4629      	mov	r1, r5
 8004e34:	028b      	lsls	r3, r1, #10
 8004e36:	4621      	mov	r1, r4
 8004e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	028a      	lsls	r2, r1, #10
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e46:	2200      	movs	r2, #0
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	61fa      	str	r2, [r7, #28]
 8004e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e50:	f7fb f9c0 	bl	80001d4 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	3301      	adds	r3, #1
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e76:	e002      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3750      	adds	r7, #80	@ 0x50
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200

08004e98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d035      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ec0:	4b67      	ldr	r3, [pc, #412]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec6:	f7fd fa77 	bl	80023b8 <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ece:	f7fd fa73 	bl	80023b8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e0ba      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee0:	4b60      	ldr	r3, [pc, #384]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	019a      	lsls	r2, r3, #6
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	071b      	lsls	r3, r3, #28
 8004ef8:	495a      	ldr	r1, [pc, #360]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f00:	4b57      	ldr	r3, [pc, #348]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f06:	f7fd fa57 	bl	80023b8 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f0e:	f7fd fa53 	bl	80023b8 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e09a      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f20:	4b50      	ldr	r3, [pc, #320]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8083 	beq.w	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	4b49      	ldr	r3, [pc, #292]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	4a48      	ldr	r2, [pc, #288]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f4a:	4b46      	ldr	r3, [pc, #280]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f56:	4b44      	ldr	r3, [pc, #272]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a43      	ldr	r2, [pc, #268]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f62:	f7fd fa29 	bl	80023b8 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6a:	f7fd fa25 	bl	80023b8 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e06c      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f88:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f90:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02f      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fbc:	4a29      	ldr	r2, [pc, #164]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fc2:	4b28      	ldr	r3, [pc, #160]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d114      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fce:	f7fd f9f3 	bl	80023b8 <HAL_GetTick>
 8004fd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fd f9ef 	bl	80023b8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e034      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ee      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005004:	d10d      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005006:	4b17      	ldr	r3, [pc, #92]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501a:	4912      	ldr	r1, [pc, #72]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
 8005020:	e005      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4a0f      	ldr	r2, [pc, #60]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005028:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800502c:	6093      	str	r3, [r2, #8]
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005030:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503a:	490a      	ldr	r1, [pc, #40]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	7c1a      	ldrb	r2, [r3, #16]
 8005050:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005052:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	42470068 	.word	0x42470068
 8005064:	40023800 	.word	0x40023800
 8005068:	40007000 	.word	0x40007000
 800506c:	42470e40 	.word	0x42470e40
 8005070:	424711e0 	.word	0x424711e0

08005074 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d13f      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800509a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050a8:	d12f      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050ac:	617b      	str	r3, [r7, #20]
          break;
 80050ae:	e02f      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050bc:	d108      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050c6:	4a19      	ldr	r2, [pc, #100]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e007      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050d0:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d8:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050e0:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050fa:	0f1b      	lsrs	r3, r3, #28
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	617b      	str	r3, [r7, #20]
          break;
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
          break;
 800510e:	bf00      	nop
        }
      }
      break;
 8005110:	e000      	b.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005112:	bf00      	nop
    }
  }
  return frequency;
 8005114:	697b      	ldr	r3, [r7, #20]
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	00bb8000 	.word	0x00bb8000
 800512c:	007a1200 	.word	0x007a1200
 8005130:	00f42400 	.word	0x00f42400

08005134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07b      	b.n	800523e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005156:	d009      	beq.n	800516c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	61da      	str	r2, [r3, #28]
 800515e:	e005      	b.n	800516c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc ff68 	bl	800205c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f0:	ea42 0103 	orr.w	r1, r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	f003 0104 	and.w	r1, r3, #4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	f003 0210 	and.w	r2, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800522c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005256:	f7fd f8af 	bl	80023b8 <HAL_GetTick>
 800525a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d001      	beq.n	8005270 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	e12a      	b.n	80054c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_SPI_Transmit+0x36>
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e122      	b.n	80054c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_SPI_Transmit+0x48>
 800528a:	2302      	movs	r3, #2
 800528c:	e11b      	b.n	80054c6 <HAL_SPI_Transmit+0x280>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2203      	movs	r2, #3
 800529a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052dc:	d10f      	bne.n	80052fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005324:	d152      	bne.n	80053cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Transmit+0xee>
 800532e:	8b7b      	ldrh	r3, [r7, #26]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d145      	bne.n	80053c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005358:	e032      	b.n	80053c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d112      	bne.n	800538e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800538c:	e018      	b.n	80053c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538e:	f7fd f813 	bl	80023b8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d803      	bhi.n	80053a6 <HAL_SPI_Transmit+0x160>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d102      	bne.n	80053ac <HAL_SPI_Transmit+0x166>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e082      	b.n	80054c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1c7      	bne.n	800535a <HAL_SPI_Transmit+0x114>
 80053ca:	e053      	b.n	8005474 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_SPI_Transmit+0x194>
 80053d4:	8b7b      	ldrh	r3, [r7, #26]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d147      	bne.n	800546a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005400:	e033      	b.n	800546a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b02      	cmp	r3, #2
 800540e:	d113      	bne.n	8005438 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005436:	e018      	b.n	800546a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005438:	f7fc ffbe 	bl	80023b8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d803      	bhi.n	8005450 <HAL_SPI_Transmit+0x20a>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d102      	bne.n	8005456 <HAL_SPI_Transmit+0x210>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e02d      	b.n	80054c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1c6      	bne.n	8005402 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fbe7 	bl	8005c4c <SPI_EndRxTxTransaction>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af02      	add	r7, sp, #8
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d001      	beq.n	80054ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
 80054ec:	e104      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054f6:	d112      	bne.n	800551e <HAL_SPI_Receive+0x50>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10e      	bne.n	800551e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2204      	movs	r2, #4
 8005504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f8f3 	bl	8005700 <HAL_SPI_TransmitReceive>
 800551a:	4603      	mov	r3, r0
 800551c:	e0ec      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551e:	f7fc ff4b 	bl	80023b8 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_SPI_Receive+0x62>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0e1      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_SPI_Receive+0x74>
 800553e:	2302      	movs	r3, #2
 8005540:	e0da      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2204      	movs	r2, #4
 800554e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	88fa      	ldrh	r2, [r7, #6]
 8005562:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005590:	d10f      	bne.n	80055b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d007      	beq.n	80055d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d170      	bne.n	80056ba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055d8:	e035      	b.n	8005646 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d115      	bne.n	8005614 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f103 020c 	add.w	r2, r3, #12
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005612:	e018      	b.n	8005646 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005614:	f7fc fed0 	bl	80023b8 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d803      	bhi.n	800562c <HAL_SPI_Receive+0x15e>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d102      	bne.n	8005632 <HAL_SPI_Receive+0x164>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e058      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1c4      	bne.n	80055da <HAL_SPI_Receive+0x10c>
 8005650:	e038      	b.n	80056c4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d113      	bne.n	8005688 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	b292      	uxth	r2, r2
 800566c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005686:	e018      	b.n	80056ba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005688:	f7fc fe96 	bl	80023b8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d803      	bhi.n	80056a0 <HAL_SPI_Receive+0x1d2>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Receive+0x1d8>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e01e      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1c6      	bne.n	8005652 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fa59 	bl	8005b80 <SPI_EndRxTransaction>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80056f6:	2300      	movs	r3, #0
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800570e:	2301      	movs	r3, #1
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005712:	f7fc fe51 	bl	80023b8 <HAL_GetTick>
 8005716:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800571e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005726:	887b      	ldrh	r3, [r7, #2]
 8005728:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800572a:	7ffb      	ldrb	r3, [r7, #31]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d00c      	beq.n	800574a <HAL_SPI_TransmitReceive+0x4a>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005736:	d106      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d102      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x46>
 8005740:	7ffb      	ldrb	r3, [r7, #31]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d001      	beq.n	800574a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
 8005748:	e17f      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_SPI_TransmitReceive+0x5c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_SPI_TransmitReceive+0x5c>
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e174      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_SPI_TransmitReceive+0x6e>
 800576a:	2302      	movs	r3, #2
 800576c:	e16d      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b04      	cmp	r3, #4
 8005780:	d003      	beq.n	800578a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2205      	movs	r2, #5
 8005786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	887a      	ldrh	r2, [r7, #2]
 800579a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d007      	beq.n	80057de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e6:	d17e      	bne.n	80058e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_SPI_TransmitReceive+0xf6>
 80057f0:	8afb      	ldrh	r3, [r7, #22]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d16c      	bne.n	80058d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800581a:	e059      	b.n	80058d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d11b      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x162>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x162>
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	2b01      	cmp	r3, #1
 8005838:	d113      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d119      	bne.n	80058a4 <HAL_SPI_TransmitReceive+0x1a4>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	b292      	uxth	r2, r2
 8005886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058a0:	2301      	movs	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058a4:	f7fc fd88 	bl	80023b8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d80d      	bhi.n	80058d0 <HAL_SPI_TransmitReceive+0x1d0>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d009      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0bc      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1a0      	bne.n	800581c <HAL_SPI_TransmitReceive+0x11c>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d19b      	bne.n	800581c <HAL_SPI_TransmitReceive+0x11c>
 80058e4:	e082      	b.n	80059ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x1f4>
 80058ee:	8afb      	ldrh	r3, [r7, #22]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d171      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591a:	e05d      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d11c      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x264>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_SPI_TransmitReceive+0x264>
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	2b01      	cmp	r3, #1
 8005938:	d114      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d119      	bne.n	80059a6 <HAL_SPI_TransmitReceive+0x2a6>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d014      	beq.n	80059a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059a2:	2301      	movs	r3, #1
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059a6:	f7fc fd07 	bl	80023b8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d803      	bhi.n	80059be <HAL_SPI_TransmitReceive+0x2be>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d102      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x2c4>
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e038      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d19c      	bne.n	800591c <HAL_SPI_TransmitReceive+0x21c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d197      	bne.n	800591c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f92b 	bl	8005c4c <SPI_EndRxTxTransaction>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e01d      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
  }
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	@ 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a60:	b2db      	uxtb	r3, r3
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a80:	f7fc fc9a 	bl	80023b8 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a90:	f7fc fc92 	bl	80023b8 <HAL_GetTick>
 8005a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a96:	4b39      	ldr	r3, [pc, #228]	@ (8005b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	015b      	lsls	r3, r3, #5
 8005a9c:	0d1b      	lsrs	r3, r3, #20
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa6:	e054      	b.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d050      	beq.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ab0:	f7fc fc82 	bl	80023b8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d902      	bls.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d13d      	bne.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ade:	d111      	bne.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae8:	d004      	beq.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af2:	d107      	bne.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b0c:	d10f      	bne.n	8005b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e017      	b.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d19b      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000008 	.word	0x20000008

08005b80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b94:	d111      	bne.n	8005bba <SPI_EndRxTransaction+0x3a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b9e:	d004      	beq.n	8005baa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba8:	d107      	bne.n	8005bba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bc2:	d12a      	bne.n	8005c1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bcc:	d012      	beq.n	8005bf4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2180      	movs	r1, #128	@ 0x80
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ff49 	bl	8005a70 <SPI_WaitFlagStateUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d02d      	beq.n	8005c40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e026      	b.n	8005c42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff36 	bl	8005a70 <SPI_WaitFlagStateUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01a      	beq.n	8005c40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e013      	b.n	8005c42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2200      	movs	r2, #0
 8005c22:	2101      	movs	r1, #1
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff ff23 	bl	8005a70 <SPI_WaitFlagStateUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e000      	b.n	8005c42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2102      	movs	r1, #2
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff ff04 	bl	8005a70 <SPI_WaitFlagStateUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e032      	b.n	8005ce4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cec <SPI_EndRxTxTransaction+0xa0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf0 <SPI_EndRxTxTransaction+0xa4>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	0d5b      	lsrs	r3, r3, #21
 8005c8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9c:	d112      	bne.n	8005cc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2180      	movs	r1, #128	@ 0x80
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff fee1 	bl	8005a70 <SPI_WaitFlagStateUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d016      	beq.n	8005ce2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e00f      	b.n	8005ce4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cda:	2b80      	cmp	r3, #128	@ 0x80
 8005cdc:	d0f2      	beq.n	8005cc4 <SPI_EndRxTxTransaction+0x78>
 8005cde:	e000      	b.n	8005ce2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ce0:	bf00      	nop
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000008 	.word	0x20000008
 8005cf0:	165e9f81 	.word	0x165e9f81

08005cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e041      	b.n	8005d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fc f9e6 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 fa72 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d001      	beq.n	8005dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e03c      	b.n	8005e26 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e34 <HAL_TIM_Base_Start+0xa0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d018      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc6:	d013      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e38 <HAL_TIM_Base_Start+0xa4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00e      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	@ (8005e3c <HAL_TIM_Base_Start+0xa8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a17      	ldr	r2, [pc, #92]	@ (8005e40 <HAL_TIM_Base_Start+0xac>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_TIM_Base_Start+0x5c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <HAL_TIM_Base_Start+0xb0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d111      	bne.n	8005e14 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d010      	beq.n	8005e24 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	e007      	b.n	8005e24 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40014000 	.word	0x40014000

08005e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d020      	beq.n	8005eac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01b      	beq.n	8005eac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0202 	mvn.w	r2, #2
 8005e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9a3 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f995 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f9a6 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d020      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0204 	mvn.w	r2, #4
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f97d 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f96f 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f980 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0208 	mvn.w	r2, #8
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f957 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f949 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f95a 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0210 	mvn.w	r2, #16
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2208      	movs	r2, #8
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f931 	bl	80061de <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f923 	bl	80061ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f934 	bl	80061f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0201 	mvn.w	r2, #1
 8005fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f901 	bl	80061b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fac0 	bl	8006558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f905 	bl	8006206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0220 	mvn.w	r2, #32
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa92 	bl	8006544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_TIM_ConfigClockSource+0x1c>
 8006040:	2302      	movs	r3, #2
 8006042:	e0b4      	b.n	80061ae <HAL_TIM_ConfigClockSource+0x186>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800606a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800607c:	d03e      	beq.n	80060fc <HAL_TIM_ConfigClockSource+0xd4>
 800607e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006082:	f200 8087 	bhi.w	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608a:	f000 8086 	beq.w	800619a <HAL_TIM_ConfigClockSource+0x172>
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006092:	d87f      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b70      	cmp	r3, #112	@ 0x70
 8006096:	d01a      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0xa6>
 8006098:	2b70      	cmp	r3, #112	@ 0x70
 800609a:	d87b      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b60      	cmp	r3, #96	@ 0x60
 800609e:	d050      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x11a>
 80060a0:	2b60      	cmp	r3, #96	@ 0x60
 80060a2:	d877      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b50      	cmp	r3, #80	@ 0x50
 80060a6:	d03c      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0xfa>
 80060a8:	2b50      	cmp	r3, #80	@ 0x50
 80060aa:	d873      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 80060ac:	2b40      	cmp	r3, #64	@ 0x40
 80060ae:	d058      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x13a>
 80060b0:	2b40      	cmp	r3, #64	@ 0x40
 80060b2:	d86f      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 80060b4:	2b30      	cmp	r3, #48	@ 0x30
 80060b6:	d064      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x15a>
 80060b8:	2b30      	cmp	r3, #48	@ 0x30
 80060ba:	d86b      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d060      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x15a>
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d867      	bhi.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d05c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x15a>
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d05a      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x15a>
 80060cc:	e062      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060de:	f000 f9a3 	bl	8006428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	609a      	str	r2, [r3, #8]
      break;
 80060fa:	e04f      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800610c:	f000 f98c 	bl	8006428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800611e:	609a      	str	r2, [r3, #8]
      break;
 8006120:	e03c      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	461a      	mov	r2, r3
 8006130:	f000 f900 	bl	8006334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2150      	movs	r1, #80	@ 0x50
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f959 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8006140:	e02c      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800614e:	461a      	mov	r2, r3
 8006150:	f000 f91f 	bl	8006392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2160      	movs	r1, #96	@ 0x60
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f949 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8006160:	e01c      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800616e:	461a      	mov	r2, r3
 8006170:	f000 f8e0 	bl	8006334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2140      	movs	r1, #64	@ 0x40
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f939 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8006180:	e00c      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f000 f930 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8006192:	e003      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
      break;
 8006198:	e000      	b.n	800619c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800619a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3a      	ldr	r2, [pc, #232]	@ (8006318 <TIM_Base_SetConfig+0xfc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00f      	beq.n	8006254 <TIM_Base_SetConfig+0x38>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623a:	d00b      	beq.n	8006254 <TIM_Base_SetConfig+0x38>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a37      	ldr	r2, [pc, #220]	@ (800631c <TIM_Base_SetConfig+0x100>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d007      	beq.n	8006254 <TIM_Base_SetConfig+0x38>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a36      	ldr	r2, [pc, #216]	@ (8006320 <TIM_Base_SetConfig+0x104>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_Base_SetConfig+0x38>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a35      	ldr	r2, [pc, #212]	@ (8006324 <TIM_Base_SetConfig+0x108>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d108      	bne.n	8006266 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2b      	ldr	r2, [pc, #172]	@ (8006318 <TIM_Base_SetConfig+0xfc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01b      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006274:	d017      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a28      	ldr	r2, [pc, #160]	@ (800631c <TIM_Base_SetConfig+0x100>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a27      	ldr	r2, [pc, #156]	@ (8006320 <TIM_Base_SetConfig+0x104>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00f      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a26      	ldr	r2, [pc, #152]	@ (8006324 <TIM_Base_SetConfig+0x108>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00b      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a25      	ldr	r2, [pc, #148]	@ (8006328 <TIM_Base_SetConfig+0x10c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a24      	ldr	r2, [pc, #144]	@ (800632c <TIM_Base_SetConfig+0x110>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a23      	ldr	r2, [pc, #140]	@ (8006330 <TIM_Base_SetConfig+0x114>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d108      	bne.n	80062b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <TIM_Base_SetConfig+0xfc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d103      	bne.n	80062ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d105      	bne.n	800630a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f023 0201 	bic.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	611a      	str	r2, [r3, #16]
  }
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f023 0201 	bic.w	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800635e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f023 030a 	bic.w	r3, r3, #10
 8006370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006392:	b480      	push	{r7}
 8006394:	b087      	sub	sp, #28
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f023 0210 	bic.w	r2, r3, #16
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	031b      	lsls	r3, r3, #12
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	f043 0307 	orr.w	r3, r3, #7
 8006414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	431a      	orrs	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4313      	orrs	r3, r2
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e050      	b.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1c      	ldr	r2, [pc, #112]	@ (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064cc:	d013      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a18      	ldr	r2, [pc, #96]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a15      	ldr	r2, [pc, #84]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a13      	ldr	r2, [pc, #76]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10c      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4313      	orrs	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40014000 	.word	0x40014000

08006544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <memset>:
 800656c:	4402      	add	r2, r0
 800656e:	4603      	mov	r3, r0
 8006570:	4293      	cmp	r3, r2
 8006572:	d100      	bne.n	8006576 <memset+0xa>
 8006574:	4770      	bx	lr
 8006576:	f803 1b01 	strb.w	r1, [r3], #1
 800657a:	e7f9      	b.n	8006570 <memset+0x4>

0800657c <__libc_init_array>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	4d0d      	ldr	r5, [pc, #52]	@ (80065b4 <__libc_init_array+0x38>)
 8006580:	4c0d      	ldr	r4, [pc, #52]	@ (80065b8 <__libc_init_array+0x3c>)
 8006582:	1b64      	subs	r4, r4, r5
 8006584:	10a4      	asrs	r4, r4, #2
 8006586:	2600      	movs	r6, #0
 8006588:	42a6      	cmp	r6, r4
 800658a:	d109      	bne.n	80065a0 <__libc_init_array+0x24>
 800658c:	4d0b      	ldr	r5, [pc, #44]	@ (80065bc <__libc_init_array+0x40>)
 800658e:	4c0c      	ldr	r4, [pc, #48]	@ (80065c0 <__libc_init_array+0x44>)
 8006590:	f000 f818 	bl	80065c4 <_init>
 8006594:	1b64      	subs	r4, r4, r5
 8006596:	10a4      	asrs	r4, r4, #2
 8006598:	2600      	movs	r6, #0
 800659a:	42a6      	cmp	r6, r4
 800659c:	d105      	bne.n	80065aa <__libc_init_array+0x2e>
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a4:	4798      	blx	r3
 80065a6:	3601      	adds	r6, #1
 80065a8:	e7ee      	b.n	8006588 <__libc_init_array+0xc>
 80065aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ae:	4798      	blx	r3
 80065b0:	3601      	adds	r6, #1
 80065b2:	e7f2      	b.n	800659a <__libc_init_array+0x1e>
 80065b4:	08056864 	.word	0x08056864
 80065b8:	08056864 	.word	0x08056864
 80065bc:	08056864 	.word	0x08056864
 80065c0:	08056868 	.word	0x08056868

080065c4 <_init>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr

080065d0 <_fini>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr
