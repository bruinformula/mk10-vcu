
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00005eac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050280  08006040  08006040  00007040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080562c0  080562c0  00058014  2**0
                  CONTENTS
  4 .ARM          00000008  080562c0  080562c0  000572c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080562c8  080562c8  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080562c8  080562c8  000572c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080562cc  080562cc  000572cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080562d0  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000014  080562e4  00058014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080562e4  000582c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c6c  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c93  00000000  00000000  00069cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0006c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d59  00000000  00000000  0006da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001975c  00000000  00000000  0006e7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144de  00000000  00000000  00087f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7d2  00000000  00000000  0009c403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138bd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f0  00000000  00000000  00138c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000391  00000000  00000000  0013d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013d699  2**0
=======
  1 .text         00005c44  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000500f8  08005dd8  08005dd8  00006dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08055ed0  08055ed0  0005700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08055ed0  08055ed0  00056ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08055ed8  08055ed8  0005700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08055ed8  08055ed8  00056ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08055edc  08055edc  00056edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08055ee0  00057000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  08055eec  0005700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08055eec  000572b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137bd  00000000  00000000  0005703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdd  00000000  00000000  0006a7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0006d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9b  00000000  00000000  0006e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001907a  00000000  00000000  0006f623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e08  00000000  00000000  0008869d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ebac  00000000  00000000  0009e4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f18  00000000  00000000  0013d094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00141fac  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001b4:	08006028 	.word	0x08006028
=======
 80001b4:	08005dc0 	.word	0x08005dc0
>>>>>>> Stashed changes

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08006028 	.word	0x08006028
=======
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005dc0 	.word	0x08005dc0
>>>>>>> Stashed changes

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CANSPI_Initialize>:
  MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  MCP2515_Reset();
<<<<<<< Updated upstream
 80004ca:	f001 f85d 	bl	8001588 <MCP2515_Reset>
  HAL_Delay(10);
 80004ce:	200a      	movs	r0, #10
 80004d0:	f001 fcb0 	bl	8001e34 <HAL_Delay>
=======
 8000506:	f000 ffcf 	bl	80014a8 <MCP2515_Reset>
  HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 fc46 	bl	8001d9c <HAL_Delay>
>>>>>>> Stashed changes
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004d4:	2300      	movs	r3, #0
 80004d6:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 80004d8:	2300      	movs	r3, #0
 80004da:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 80004dc:	2300      	movs	r3, #0
 80004de:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	72fb      	strb	r3, [r7, #11]
  
  RXM1reg.RXM1SIDH = 0x00;
 80004e4:	2300      	movs	r3, #0
 80004e6:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 80004e8:	2300      	movs	r3, #0
 80004ea:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 80004ec:	2300      	movs	r3, #0
 80004ee:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	71fb      	strb	r3, [r7, #7]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004fa:	2300      	movs	r3, #0
 80004fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  RXF1reg.RXF1SIDH = 0x00;
 800050c:	2300      	movs	r3, #0
 800050e:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000510:	2308      	movs	r3, #8
 8000512:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	77fb      	strb	r3, [r7, #31]
  
  RXF2reg.RXF2SIDH = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	76fb      	strb	r3, [r7, #27]
  
  RXF3reg.RXF3SIDH = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	75fb      	strb	r3, [r7, #23]
  
  RXF4reg.RXF4SIDH = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8000544:	2300      	movs	r3, #0
 8000546:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	74fb      	strb	r3, [r7, #19]
  
  RXF5reg.RXF5SIDH = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 8000550:	2308      	movs	r3, #8
 8000552:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
<<<<<<< Updated upstream
 800055c:	f000 ffa6 	bl	80014ac <MCP2515_Initialize>
 8000560:	4603      	mov	r3, r0
 8000562:	f083 0301 	eor.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <CANSPI_Initialize+0xac>
=======
 8000598:	f000 ff18 	bl	80013cc <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
>>>>>>> Stashed changes
  {
    return false;
 800056c:	2300      	movs	r3, #0
 800056e:	e065      	b.n	800063c <CANSPI_Initialize+0x178>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
<<<<<<< Updated upstream
 8000570:	f000 ffbe 	bl	80014f0 <MCP2515_SetConfigMode>
 8000574:	4603      	mov	r3, r0
 8000576:	f083 0301 	eor.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <CANSPI_Initialize+0xc0>
=======
 80005ac:	f000 ff30 	bl	8001410 <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
>>>>>>> Stashed changes
  {
    return false;
 8000580:	2300      	movs	r3, #0
 8000582:	e05b      	b.n	800063c <CANSPI_Initialize+0x178>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
<<<<<<< Updated upstream
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	461a      	mov	r2, r3
 800058a:	2123      	movs	r1, #35	@ 0x23
 800058c:	2020      	movs	r0, #32
 800058e:	f001 f87f 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	461a      	mov	r2, r3
 8000596:	2127      	movs	r1, #39	@ 0x27
 8000598:	2024      	movs	r0, #36	@ 0x24
 800059a:	f001 f879 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	461a      	mov	r2, r3
 80005a4:	2103      	movs	r1, #3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 f872 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	461a      	mov	r2, r3
 80005b2:	2107      	movs	r1, #7
 80005b4:	2004      	movs	r0, #4
 80005b6:	f001 f86b 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	461a      	mov	r2, r3
 80005c0:	210b      	movs	r1, #11
 80005c2:	2008      	movs	r0, #8
 80005c4:	f001 f864 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	461a      	mov	r2, r3
 80005ce:	2113      	movs	r1, #19
 80005d0:	2010      	movs	r0, #16
 80005d2:	f001 f85d 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	461a      	mov	r2, r3
 80005dc:	2117      	movs	r1, #23
 80005de:	2014      	movs	r0, #20
 80005e0:	f001 f856 	bl	8001690 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	461a      	mov	r2, r3
 80005ea:	211b      	movs	r1, #27
 80005ec:	2018      	movs	r0, #24
 80005ee:	f001 f84f 	bl	8001690 <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 80005f2:	2014      	movs	r0, #20
 80005f4:	f000 ffde 	bl	80015b4 <MCP2515_ReadByte>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005fe:	2104      	movs	r1, #4
 8000600:	2060      	movs	r0, #96	@ 0x60
 8000602:	f001 f81f 	bl	8001644 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000606:	2101      	movs	r1, #1
 8000608:	2070      	movs	r0, #112	@ 0x70
 800060a:	f001 f81b 	bl	8001644 <MCP2515_WriteByte>
=======
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f000 fff1 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f000 ffeb 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 ffe4 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f000 ffdd 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f000 ffd6 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f000 ffcf 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f000 ffc8 	bl	80015b0 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f000 ffc1 	bl	80015b0 <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f000 ff50 	bl	80014d4 <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f000 ff91 	bl	8001564 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f000 ff8d 	bl	8001564 <MCP2515_WriteByte>
>>>>>>> Stashed changes
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
<<<<<<< Updated upstream
 800060e:	2100      	movs	r1, #0
 8000610:	202a      	movs	r0, #42	@ 0x2a
 8000612:	f001 f817 	bl	8001644 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000616:	21e5      	movs	r1, #229	@ 0xe5
 8000618:	2029      	movs	r0, #41	@ 0x29
 800061a:	f001 f813 	bl	8001644 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800061e:	2183      	movs	r1, #131	@ 0x83
 8000620:	2028      	movs	r0, #40	@ 0x28
 8000622:	f001 f80f 	bl	8001644 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000626:	f000 ff91 	bl	800154c <MCP2515_SetNormalMode>
 800062a:	4603      	mov	r3, r0
 800062c:	f083 0301 	eor.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <CANSPI_Initialize+0x176>
=======
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f000 ff89 	bl	8001564 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f000 ff85 	bl	8001564 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f000 ff81 	bl	8001564 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000662:	f000 ff03 	bl	800146c <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
>>>>>>> Stashed changes
    return false;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <CANSPI_Initialize+0x178>
  
  return true;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3728      	adds	r7, #40	@ 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000650:	4b44      	ldr	r3, [pc, #272]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000658:	2200      	movs	r2, #0
 800065a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800065c:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <CANSPI_Transmit+0x120>)
 800065e:	2200      	movs	r2, #0
 8000660:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000662:	4b40      	ldr	r3, [pc, #256]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000664:	2200      	movs	r2, #0
 8000666:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
<<<<<<< Updated upstream
 8000668:	f001 f888 	bl	800177c <MCP2515_ReadStatus>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <CANSPI_Transmit+0x124>)
 8000672:	701a      	strb	r2, [r3, #0]
=======
 80006a4:	f000 fffa 	bl	800169c <MCP2515_ReadStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ae:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 8000674:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <CANSPI_Transmit+0x124>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
<<<<<<< Updated upstream
 800067a:	200f      	movs	r0, #15
 800067c:	f000 ff9a 	bl	80015b4 <MCP2515_ReadByte>
 8000680:	4603      	mov	r3, r0
 8000682:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 8000684:	202d      	movs	r0, #45	@ 0x2d
 8000686:	f000 ff95 	bl	80015b4 <MCP2515_ReadByte>
 800068a:	4603      	mov	r3, r0
 800068c:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800068e:	2030      	movs	r0, #48	@ 0x30
 8000690:	f000 ff90 	bl	80015b4 <MCP2515_ReadByte>
 8000694:	4603      	mov	r3, r0
 8000696:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 8000698:	2040      	movs	r0, #64	@ 0x40
 800069a:	f000 ff8b 	bl	80015b4 <MCP2515_ReadByte>
 800069e:	4603      	mov	r3, r0
 80006a0:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006a2:	2050      	movs	r0, #80	@ 0x50
 80006a4:	f000 ff86 	bl	80015b4 <MCP2515_ReadByte>
 80006a8:	4603      	mov	r3, r0
 80006aa:	727b      	strb	r3, [r7, #9]
=======
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 ff0c 	bl	80014d4 <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 80006c0:	202d      	movs	r0, #45	@ 0x2d
 80006c2:	f000 ff07 	bl	80014d4 <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006ca:	2030      	movs	r0, #48	@ 0x30
 80006cc:	f000 ff02 	bl	80014d4 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f000 fefd 	bl	80014d4 <MCP2515_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f000 fef8 	bl	80014d4 <MCP2515_ReadByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	727b      	strb	r3, [r7, #9]
>>>>>>> Stashed changes


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <CANSPI_Transmit+0x124>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d115      	bne.n	80006e6 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6858      	ldr	r0, [r3, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <CANSPI_Transmit+0x120>)
 80006c4:	4619      	mov	r1, r3
 80006c6:	f000 f928 	bl	800091a <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
<<<<<<< Updated upstream
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a1a      	ldrb	r2, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3309      	adds	r3, #9
 80006d2:	4924      	ldr	r1, [pc, #144]	@ (8000764 <CANSPI_Transmit+0x120>)
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f001 f807 	bl	80016e8 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006da:	2081      	movs	r0, #129	@ 0x81
 80006dc:	f001 f832 	bl	8001744 <MCP2515_RequestToSend>
=======
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1a      	ldrb	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3309      	adds	r3, #9
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000710:	2040      	movs	r0, #64	@ 0x40
 8000712:	f000 ff79 	bl	8001608 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000716:	2081      	movs	r0, #129	@ 0x81
 8000718:	f000 ffa4 	bl	8001664 <MCP2515_RequestToSend>
>>>>>>> Stashed changes
    
    returnValue = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e038      	b.n	8000758 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <CANSPI_Transmit+0x124>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d115      	bne.n	8000720 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6858      	ldr	r0, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4a19      	ldr	r2, [pc, #100]	@ (8000764 <CANSPI_Transmit+0x120>)
 80006fe:	4619      	mov	r1, r3
 8000700:	f000 f90b 	bl	800091a <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
<<<<<<< Updated upstream
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7a1a      	ldrb	r2, [r3, #8]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3309      	adds	r3, #9
 800070c:	4915      	ldr	r1, [pc, #84]	@ (8000764 <CANSPI_Transmit+0x120>)
 800070e:	2042      	movs	r0, #66	@ 0x42
 8000710:	f000 ffea 	bl	80016e8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000714:	2082      	movs	r0, #130	@ 0x82
 8000716:	f001 f815 	bl	8001744 <MCP2515_RequestToSend>
=======
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a1a      	ldrb	r2, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3309      	adds	r3, #9
 8000748:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800074a:	2042      	movs	r0, #66	@ 0x42
 800074c:	f000 ff5c 	bl	8001608 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000750:	2082      	movs	r0, #130	@ 0x82
 8000752:	f000 ff87 	bl	8001664 <MCP2515_RequestToSend>
>>>>>>> Stashed changes
    
    returnValue = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e01b      	b.n	8000758 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <CANSPI_Transmit+0x124>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6858      	ldr	r0, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000738:	4619      	mov	r1, r3
 800073a:	f000 f8ee 	bl	800091a <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
<<<<<<< Updated upstream
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7a1a      	ldrb	r2, [r3, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3309      	adds	r3, #9
 8000746:	4907      	ldr	r1, [pc, #28]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000748:	2044      	movs	r0, #68	@ 0x44
 800074a:	f000 ffcd 	bl	80016e8 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800074e:	2084      	movs	r0, #132	@ 0x84
 8000750:	f000 fff8 	bl	8001744 <MCP2515_RequestToSend>
=======
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1a      	ldrb	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3309      	adds	r3, #9
 8000782:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000784:	2044      	movs	r0, #68	@ 0x44
 8000786:	f000 ff3f 	bl	8001608 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800078a:	2084      	movs	r0, #132	@ 0x84
 800078c:	f000 ff6a 	bl	8001664 <MCP2515_RequestToSend>
>>>>>>> Stashed changes
    
    returnValue = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000034 	.word	0x20000034
 8000768:	20000030 	.word	0x20000030

0800076c <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
<<<<<<< Updated upstream
 8000778:	f001 f81e 	bl	80017b8 <MCP2515_GetRxStatus>
 800077c:	4603      	mov	r3, r0
 800077e:	733b      	strb	r3, [r7, #12]
=======
 80007b4:	f000 ff90 	bl	80016d8 <MCP2515_GetRxStatus>
 80007b8:	4603      	mov	r3, r0
 80007ba:	733b      	strb	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d066      	beq.n	800085a <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800078c:	7b3b      	ldrb	r3, [r7, #12]
 800078e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b40      	cmp	r3, #64	@ 0x40
 8000796:	bf0c      	ite	eq
 8000798:	2301      	moveq	r3, #1
 800079a:	2300      	movne	r3, #0
 800079c:	b2da      	uxtb	r2, r3
 800079e:	7b3b      	ldrb	r3, [r7, #12]
 80007a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	220d      	movs	r2, #13
 80007be:	4619      	mov	r1, r3
 80007c0:	2090      	movs	r0, #144	@ 0x90
 80007c2:	f000 ff1b 	bl	80015fc <MCP2515_ReadRxSequence>
 80007c6:	e00c      	b.n	80007e2 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
<<<<<<< Updated upstream
 80007d0:	2b80      	cmp	r3, #128	@ 0x80
 80007d2:	d106      	bne.n	80007e2 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	220d      	movs	r2, #13
 80007da:	4619      	mov	r1, r3
 80007dc:	2094      	movs	r0, #148	@ 0x94
 80007de:	f000 ff0d 	bl	80015fc <MCP2515_ReadRxSequence>
=======
 80007d0:	2b40      	cmp	r3, #64	@ 0x40
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7b3b      	ldrb	r3, [r7, #12]
 80007dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	220d      	movs	r2, #13
 80007fa:	4619      	mov	r1, r3
 80007fc:	2090      	movs	r0, #144	@ 0x90
 80007fe:	f000 fe8d 	bl	800151c <MCP2515_ReadRxSequence>
 8000802:	e00c      	b.n	800081e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b80      	cmp	r3, #128	@ 0x80
 800080e:	d106      	bne.n	800081e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	220d      	movs	r2, #13
 8000816:	4619      	mov	r1, r3
 8000818:	2094      	movs	r0, #148	@ 0x94
 800081a:	f000 fe7f 	bl	800151c <MCP2515_ReadRxSequence>
>>>>>>> Stashed changes
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007e2:	7b3b      	ldrb	r3, [r7, #12]
 80007e4:	f003 0318 	and.w	r3, r3, #24
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	d10c      	bne.n	8000808 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2202      	movs	r2, #2
 80007f2:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007f4:	7cb8      	ldrb	r0, [r7, #18]
 80007f6:	7cf9      	ldrb	r1, [r7, #19]
 80007f8:	7c3a      	ldrb	r2, [r7, #16]
 80007fa:	7c7b      	ldrb	r3, [r7, #17]
 80007fc:	f000 f832 	bl	8000864 <convertReg2ExtendedCANid>
 8000800:	4602      	mov	r2, r0
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	e00b      	b.n	8000820 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800080e:	7c3b      	ldrb	r3, [r7, #16]
 8000810:	7c7a      	ldrb	r2, [r7, #17]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f863 	bl	80008e0 <convertReg2StandardCANid>
 800081a:	4602      	mov	r2, r0
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000820:	7d3a      	ldrb	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000826:	7d7a      	ldrb	r2, [r7, #21]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800082c:	7dba      	ldrb	r2, [r7, #22]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000832:	7dfa      	ldrb	r2, [r7, #23]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000838:	7e3a      	ldrb	r2, [r7, #24]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800083e:	7e7a      	ldrb	r2, [r7, #25]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000844:	7eba      	ldrb	r2, [r7, #26]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800084a:	7efa      	ldrb	r2, [r7, #27]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000850:	7f3a      	ldrb	r2, [r7, #28]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 800085a:	7ffb      	ldrb	r3, [r7, #31]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000864:	b490      	push	{r4, r7}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	717b      	strb	r3, [r7, #5]
 800087e:	4613      	mov	r3, r2
 8000880:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000892:	793b      	ldrb	r3, [r7, #4]
 8000894:	095b      	lsrs	r3, r3, #5
 8000896:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4413      	add	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4413      	add	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4413      	add	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4413      	add	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008d4:	697b      	ldr	r3, [r7, #20]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc90      	pop	{r4, r7}
 80008de:	4770      	bx	lr

080008e0 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	095b      	lsrs	r3, r3, #5
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4413      	add	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800090c:	68fb      	ldr	r3, [r7, #12]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 800091a:	b480      	push	{r7}
 800091c:	b087      	sub	sp, #28
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	460b      	mov	r3, r1
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d12e      	bne.n	8000990 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f023 031f 	bic.w	r3, r3, #31
 8000966:	b2da      	uxtb	r2, r3
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	4413      	add	r3, r2
 800096c:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	3308      	adds	r3, #8
 8000972:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	f023 0314 	bic.w	r3, r3, #20
 800097a:	b2da      	uxtb	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800098e:	e013      	b.n	80009b8 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	015b      	lsls	r3, r3, #5
 80009a0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	701a      	strb	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

<<<<<<< Updated upstream
080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	2400      	movs	r4, #0
 80009cc:	9405      	str	r4, [sp, #20]
 80009ce:	9406      	str	r4, [sp, #24]
 80009d0:	9407      	str	r4, [sp, #28]
 80009d2:	9408      	str	r4, [sp, #32]
 80009d4:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	9401      	str	r4, [sp, #4]
 80009d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000b18 <MX_GPIO_Init+0x154>)
 80009da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009dc:	f042 0204 	orr.w	r2, r2, #4
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80009e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009e4:	f002 0204 	and.w	r2, r2, #4
 80009e8:	9201      	str	r2, [sp, #4]
 80009ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ec:	9402      	str	r4, [sp, #8]
 80009ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80009f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009f8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80009fc:	9202      	str	r2, [sp, #8]
 80009fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	9403      	str	r4, [sp, #12]
 8000a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a0c:	f002 0201 	and.w	r2, r2, #1
 8000a10:	9203      	str	r2, [sp, #12]
 8000a12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	9404      	str	r4, [sp, #16]
 8000a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a18:	f042 0202 	orr.w	r2, r2, #2
 8000a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a28:	4f3c      	ldr	r7, [pc, #240]	@ (8000b1c <MX_GPIO_Init+0x158>)
 8000a2a:	4622      	mov	r2, r4
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f002 fd4e 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	210e      	movs	r1, #14
 8000a38:	4638      	mov	r0, r7
 8000a3a:	f002 fd49 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a3e:	4e38      	ldr	r6, [pc, #224]	@ (8000b20 <MX_GPIO_Init+0x15c>)
 8000a40:	4622      	mov	r2, r4
 8000a42:	2120      	movs	r1, #32
 8000a44:	4630      	mov	r0, r6
 8000a46:	f002 fd43 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a50:	4630      	mov	r0, r6
 8000a52:	f002 fd3d 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RTD_Pin PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RTD_Pin|PRECHARGE_Pin;
 8000a56:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8000a5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	a905      	add	r1, sp, #20
 8000a62:	4638      	mov	r0, r7
 8000a64:	f002 fb98 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000a68:	2501      	movs	r5, #1
 8000a6a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	a905      	add	r1, sp, #20
 8000a74:	4638      	mov	r0, r7
 8000a76:	f002 fb8f 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000a7a:	f04f 0902 	mov.w	r9, #2
 8000a7e:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a84:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	f04f 0803 	mov.w	r8, #3
 8000a8a:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	a905      	add	r1, sp, #20
 8000a90:	4638      	mov	r0, r7
 8000a92:	f002 fb81 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8000a96:	f04f 0a0c 	mov.w	sl, #12
 8000a9a:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	a905      	add	r1, sp, #20
 8000aa6:	4638      	mov	r0, r7
 8000aa8:	f002 fb76 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aac:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aba:	2307      	movs	r3, #7
 8000abc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	a905      	add	r1, sp, #20
 8000ac0:	4630      	mov	r0, r6
 8000ac2:	f002 fb69 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	a905      	add	r1, sp, #20
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	f002 fb60 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8000ad8:	2324      	movs	r3, #36	@ 0x24
 8000ada:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	a905      	add	r1, sp, #20
 8000ae2:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <MX_GPIO_Init+0x160>)
 8000ae4:	f002 fb58 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000af2:	a905      	add	r1, sp, #20
 8000af4:	4630      	mov	r0, r6
 8000af6:	f002 fb4f 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8000afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000afe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b02:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b08:	a905      	add	r1, sp, #20
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	f002 fb44 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	b00a      	add	sp, #40	@ 0x28
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <MX_DMA_Init>:
{
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	9400      	str	r4, [sp, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_DMA_Init+0x54>)
 8000b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b34:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b3c:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000b40:	9200      	str	r2, [sp, #0]
 8000b42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b44:	9401      	str	r4, [sp, #4]
 8000b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b48:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000b4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b58:	4622      	mov	r2, r4
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	200f      	movs	r0, #15
 8000b5e:	f001 ff74 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f001 ff8d 	bl	8002a82 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b68:	4622      	mov	r2, r4
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	2038      	movs	r0, #56	@ 0x38
 8000b6e:	f001 ff6c 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b72:	2038      	movs	r0, #56	@ 0x38
 8000b74:	f001 ff85 	bl	8002a82 <HAL_NVIC_EnableIRQ>
}
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd10      	pop	{r4, pc}
 8000b7c:	40023800 	.word	0x40023800

08000b80 <updateRpm>:
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <updateRpm+0x20>)
 8000b82:	7ad3      	ldrb	r3, [r2, #11]
			| (rxMessage.frame.data3 << 8));
 8000b84:	7b12      	ldrb	r2, [r2, #12]
 8000b86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b96:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <updateRpm+0x24>)
 8000b98:	edc3 7a00 	vstr	s15, [r3]
}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200000a4 	.word	0x200000a4
 8000ba4:	20000048 	.word	0x20000048

08000ba8 <updateBMSDiagnostics>:
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000ba8:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <updateBMSDiagnostics+0x4c>)
 8000baa:	7a93      	ldrb	r3, [r2, #10]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	7a51      	ldrb	r1, [r2, #9]
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	ee07 3a90 	vmov	s15, r3
	float pack_current = pack_current_raw * 0.1f;
 8000bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bbc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000bf8 <updateBMSDiagnostics+0x50>
 8000bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	uint16_t pack_voltage_raw = (rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 8000bc4:	7b11      	ldrb	r1, [r2, #12]
 8000bc6:	7ad3      	ldrb	r3, [r2, #11]
 8000bc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000bcc:	ee07 3a10 	vmov	s14, r3
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000bd4:	ee27 7a26 	vmul.f32	s14, s14, s13
	bool is_ready = (rxMessage.frame.data6 >> 6) & 0x01;
 8000bd8:	7bd2      	ldrb	r2, [r2, #15]
 8000bda:	f3c2 1280 	ubfx	r2, r2, #6, #1
	bms_diagnostics.inverterActive = is_ready ? 1 : 0;
 8000bde:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <updateBMSDiagnostics+0x54>)
 8000be0:	601a      	str	r2, [r3, #0]
	bms_diagnostics.packCurrent    = (int)pack_current;
 8000be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000be6:	edc3 7a02 	vstr	s15, [r3, #8]
	bms_diagnostics.packVoltage    = (int)pack_voltage;
 8000bea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000bee:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8000bf2:	4770      	bx	lr
 8000bf4:	200000a4 	.word	0x200000a4
 8000bf8:	3dcccccd 	.word	0x3dcccccd
 8000bfc:	2000004c 	.word	0x2000004c

08000c00 <readFromCAN>:
void readFromCAN() {
 8000c00:	b508      	push	{r3, lr}
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <readFromCAN+0x20>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c08:	d003      	beq.n	8000c12 <readFromCAN+0x12>
	else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000c0a:	f5b3 6fd6 	cmp.w	r3, #1712	@ 0x6b0
 8000c0e:	d003      	beq.n	8000c18 <readFromCAN+0x18>
}
 8000c10:	bd08      	pop	{r3, pc}
		updateRpm();
 8000c12:	f7ff ffb5 	bl	8000b80 <updateRpm>
 8000c16:	e7fb      	b.n	8000c10 <readFromCAN+0x10>
		updateBMSDiagnostics();
 8000c18:	f7ff ffc6 	bl	8000ba8 <updateBMSDiagnostics>
}
 8000c1c:	e7f8      	b.n	8000c10 <readFromCAN+0x10>
 8000c1e:	bf00      	nop
 8000c20:	200000a4 	.word	0x200000a4

08000c24 <HAL_ADC_ConvCpltCallback>:
	apps1Value = ADC_Reads[APPS1_RANK-1];
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c2a:	6011      	str	r1, [r2, #0]
	apps2Value = ADC_Reads[APPS2_RANK-1];
 8000c2c:	6859      	ldr	r1, [r3, #4]
 8000c2e:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <HAL_ADC_ConvCpltCallback+0x24>)
 8000c30:	6011      	str	r1, [r2, #0]
	bseValue   = ADC_Reads[BSE_RANK-1];
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x28>)
 8000c36:	601a      	str	r2, [r3, #0]
	dma_read_complete = 1;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
}
 8000c3e:	4770      	bx	lr
 8000c40:	20000074 	.word	0x20000074
 8000c44:	200000a0 	.word	0x200000a0
 8000c48:	2000009c 	.word	0x2000009c
 8000c4c:	20000098 	.word	0x20000098
 8000c50:	20000002 	.word	0x20000002

08000c54 <calculateTorqueRequest>:
	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000c54:	4b57      	ldr	r3, [pc, #348]	@ (8000db4 <calculateTorqueRequest+0x160>)
 8000c56:	ed93 7a00 	vldr	s14, [r3]
 8000c5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000c5e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000c62:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000c66:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8000db8 <calculateTorqueRequest+0x164>
 8000c6a:	eec7 7a06 	vdiv.f32	s15, s14, s12
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000c6e:	4b53      	ldr	r3, [pc, #332]	@ (8000dbc <calculateTorqueRequest+0x168>)
 8000c70:	ed93 7a00 	vldr	s14, [r3]
 8000c74:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000c78:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000c7c:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 8000dc0 <calculateTorqueRequest+0x16c>
 8000c80:	eec7 6a06 	vdiv.f32	s13, s14, s12
	float appsValue = (apps1_as_percent + apps2_as_percent) / 2.0f;
 8000c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (appsValue > 0) {
 8000c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	dd77      	ble.n	8000d8a <calculateTorqueRequest+0x136>
void calculateTorqueRequest(void) {
 8000c9a:	b510      	push	{r4, lr}
		int pedalLowIndx = (int)(appsValue / (pedalStepSize / 100.0f));  // handle properly if needed
 8000c9c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000dc4 <calculateTorqueRequest+0x170>
 8000ca0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ca4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000ca8:	ee17 3a10 	vmov	r3, s14
		int pedalHighIndx = pedalLowIndx + 1;
 8000cac:	1c59      	adds	r1, r3, #1
		if (pedalHighIndx >= numPedalSteps) {
 8000cae:	2909      	cmp	r1, #9
 8000cb0:	dd00      	ble.n	8000cb4 <calculateTorqueRequest+0x60>
			pedalHighIndx = numPedalSteps - 1;
 8000cb2:	2109      	movs	r1, #9
		int rpmLowIndx = (int)(inverter_diagnostics.motorRpm / rpmStepSize);
 8000cb4:	4a44      	ldr	r2, [pc, #272]	@ (8000dc8 <calculateTorqueRequest+0x174>)
 8000cb6:	edd2 5a00 	vldr	s11, [r2]
 8000cba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000cbe:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8000dcc <calculateTorqueRequest+0x178>
 8000cc2:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8000cc6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000cca:	ee17 2a10 	vmov	r2, s14
		int rpmHighIndx = rpmLowIndx + 1;
 8000cce:	f102 0e01 	add.w	lr, r2, #1
		if (rpmHighIndx >= numRpmSteps) {
 8000cd2:	f1be 0f09 	cmp.w	lr, #9
 8000cd6:	dd01      	ble.n	8000cdc <calculateTorqueRequest+0x88>
			rpmHighIndx = numRpmSteps - 1;
 8000cd8:	f04f 0e09 	mov.w	lr, #9
		float T00 = TORQUE_ARRAY[pedalLowIndx][rpmLowIndx];   // Lower-left
 8000cdc:	483c      	ldr	r0, [pc, #240]	@ (8000dd0 <calculateTorqueRequest+0x17c>)
 8000cde:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000ce2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000ce6:	4494      	add	ip, r2
 8000ce8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000cec:	ed9c 4a00 	vldr	s8, [ip]
		float T10 = TORQUE_ARRAY[pedalHighIndx][rpmLowIndx];  // Upper-left
 8000cf0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8000cf4:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000cf8:	4494      	add	ip, r2
 8000cfa:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000cfe:	ed9c 5a00 	vldr	s10, [ip]
		float T01 = TORQUE_ARRAY[pedalLowIndx][rpmHighIndx];  // Lower-right
 8000d02:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000d06:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000d0a:	44f4      	add	ip, lr
 8000d0c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d10:	ed9c 6a00 	vldr	s12, [ip]
		float T11 = TORQUE_ARRAY[pedalHighIndx][rpmHighIndx]; // Upper-right
 8000d14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000d18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d1c:	44f4      	add	ip, lr
 8000d1e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000d22:	ed90 7a00 	vldr	s14, [r0]
		float pedalLerp = (appsValue * 100.0f - (pedalLowIndx * pedalStepSize)) / pedalStepSize;
 8000d26:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000dd4 <calculateTorqueRequest+0x180>
 8000d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d2e:	ee06 3a90 	vmov	s13, r3
 8000d32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000d36:	eddf 4a28 	vldr	s9, [pc, #160]	@ 8000dd8 <calculateTorqueRequest+0x184>
 8000d3a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8000d3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000d42:	eec7 3aa4 	vdiv.f32	s7, s15, s9
		float rpmLerp   = (float)(inverter_diagnostics.motorRpm - (rpmLowIndx * rpmStepSize)) / rpmStepSize;
 8000d46:	ee07 2a90 	vmov	s15, r2
 8000d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000dcc <calculateTorqueRequest+0x178>
 8000d52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d56:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8000d5a:	eec5 4aa6 	vdiv.f32	s9, s11, s13
		float torqueLow  = T00 + (T01 - T00) * rpmLerp;
 8000d5e:	ee76 6a44 	vsub.f32	s13, s12, s8
 8000d62:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8000d66:	ee76 6a84 	vadd.f32	s13, s13, s8
		float torqueHigh = T10 + (T11 - T10) * rpmLerp;
 8000d6a:	ee77 7a45 	vsub.f32	s15, s14, s10
 8000d6e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000d72:	ee77 7a85 	vadd.f32	s15, s15, s10
		requestedTorque = torqueLow + (torqueHigh - torqueLow) * pedalLerp;
 8000d76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000d7a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <calculateTorqueRequest+0x188>)
 8000d84:	edc3 7a00 	vstr	s15, [r3]
}
 8000d88:	bd10      	pop	{r4, pc}
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <calculateTorqueRequest+0x18c>)
 8000d8c:	ed93 7a00 	vldr	s14, [r3]
 8000d90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d94:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000de4 <calculateTorqueRequest+0x190>
 8000d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
				* bse_as_percent + REGEN_BASELINE_TORQUE;
 8000d9c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000de8 <calculateTorqueRequest+0x194>
 8000da8:	ee77 7a87 	vadd.f32	s15, s15, s14
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <calculateTorqueRequest+0x188>)
 8000dae:	edc3 7a00 	vstr	s15, [r3]
 8000db2:	4770      	bx	lr
 8000db4:	200000a0 	.word	0x200000a0
 8000db8:	45412000 	.word	0x45412000
 8000dbc:	2000009c 	.word	0x2000009c
 8000dc0:	457f5000 	.word	0x457f5000
 8000dc4:	3de38e38 	.word	0x3de38e38
 8000dc8:	20000048 	.word	0x20000048
 8000dcc:	44a6aaab 	.word	0x44a6aaab
 8000dd0:	08056118 	.word	0x08056118
 8000dd4:	42c80000 	.word	0x42c80000
 8000dd8:	4131c71c 	.word	0x4131c71c
 8000ddc:	20000094 	.word	0x20000094
 8000de0:	20000098 	.word	0x20000098
 8000de4:	457ff000 	.word	0x457ff000
 8000de8:	00000000 	.word	0x00000000

08000dec <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000dec:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <checkAPPSPlausibility+0x98>)
 8000df0:	ed93 7a00 	vldr	s14, [r3]
 8000df4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000df8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8000dfc:	ee37 7a46 	vsub.f32	s14, s14, s12
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000e00:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000e88 <checkAPPSPlausibility+0x9c>
 8000e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e08:	eddf 5a20 	vldr	s11, [pc, #128]	@ 8000e8c <checkAPPSPlausibility+0xa0>
 8000e0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e10:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <checkAPPSPlausibility+0xa4>)
 8000e12:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <checkAPPSPlausibility+0xa8>)
 8000e18:	ed93 7a00 	vldr	s14, [r3]
 8000e1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000e20:	ee37 7a46 	vsub.f32	s14, s14, s12
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000e24:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 8000e98 <checkAPPSPlausibility+0xac>
 8000e28:	eec7 6a05 	vdiv.f32	s13, s14, s10
 8000e2c:	ee26 7aa5 	vmul.f32	s14, s13, s11
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <checkAPPSPlausibility+0xb0>)
 8000e32:	ed83 7a00 	vstr	s14, [r3]
	if (fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000e36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e3a:	eef0 7ae7 	vabs.f32	s15, s15
 8000e3e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e46:	dc06      	bgt.n	8000e56 <checkAPPSPlausibility+0x6a>
	else if (!apps_plausible
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <checkAPPSPlausibility+0xb4>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b173      	cbz	r3, 8000e6c <checkAPPSPlausibility+0x80>
		apps_plausible = 1; // true
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <checkAPPSPlausibility+0xb4>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	801a      	strh	r2, [r3, #0]
}
 8000e54:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8000e56:	f000 ffe1 	bl	8001e1c <HAL_GetTick>
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <checkAPPSPlausibility+0xb8>)
 8000e5c:	6018      	str	r0, [r3, #0]
		apps_plausible = 0; // false
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <checkAPPSPlausibility+0xb4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <checkAPPSPlausibility+0xbc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e7f3      	b.n	8000e54 <checkAPPSPlausibility+0x68>
			&& (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000e6c:	f000 ffd6 	bl	8001e1c <HAL_GetTick>
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <checkAPPSPlausibility+0xb8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1ac0      	subs	r0, r0, r3
 8000e76:	2863      	cmp	r0, #99	@ 0x63
 8000e78:	d8e9      	bhi.n	8000e4e <checkAPPSPlausibility+0x62>
		requestedTorque = 0;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <checkAPPSPlausibility+0xbc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e7e8      	b.n	8000e54 <checkAPPSPlausibility+0x68>
 8000e82:	bf00      	nop
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	45412000 	.word	0x45412000
 8000e8c:	42c80000 	.word	0x42c80000
 8000e90:	20000070 	.word	0x20000070
 8000e94:	2000009c 	.word	0x2000009c
 8000e98:	457f5000 	.word	0x457f5000
 8000e9c:	2000006c 	.word	0x2000006c
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	20000084 	.word	0x20000084
 8000ea8:	20000094 	.word	0x20000094

08000eac <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <checkCrossCheck+0xb0>)
 8000eae:	ed93 7a00 	vldr	s14, [r3]
 8000eb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000eb6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000f60 <checkCrossCheck+0xb4>
 8000eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebe:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8000f64 <checkCrossCheck+0xb8>
 8000ec2:	ee67 7a86 	vmul.f32	s15, s15, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000ec6:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <checkCrossCheck+0xbc>)
 8000ec8:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <checkCrossCheck+0xc0>)
 8000ece:	ed93 7a00 	vldr	s14, [r3]
 8000ed2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000ed6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000eda:	ee37 7a66 	vsub.f32	s14, s14, s13
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000ede:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8000f70 <checkCrossCheck+0xc4>
 8000ee2:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000ee6:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000eea:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <checkCrossCheck+0xc8>)
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000ef4:	ee37 7a66 	vsub.f32	s14, s14, s13
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000ef8:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 8000f78 <checkCrossCheck+0xcc>
 8000efc:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000f00:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f08:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8000f10:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	dd0b      	ble.n	8000f36 <checkCrossCheck+0x8a>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <checkCrossCheck+0xb0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000f26:	d906      	bls.n	8000f36 <checkCrossCheck+0x8a>
		cross_check_plausible = 0;
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <checkCrossCheck+0xd0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <checkCrossCheck+0xd4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	4770      	bx	lr
	else if (!cross_check_plausible
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <checkCrossCheck+0xd0>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b953      	cbnz	r3, 8000f52 <checkCrossCheck+0xa6>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 8000f3c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	dd03      	ble.n	8000f52 <checkCrossCheck+0xa6>
		requestedTorque = 0;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <checkCrossCheck+0xd4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	4770      	bx	lr
		cross_check_plausible = 1;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <checkCrossCheck+0xd0>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	801a      	strh	r2, [r3, #0]
}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000098 	.word	0x20000098
 8000f60:	457ff000 	.word	0x457ff000
 8000f64:	42c80000 	.word	0x42c80000
 8000f68:	20000068 	.word	0x20000068
 8000f6c:	200000a0 	.word	0x200000a0
 8000f70:	45412000 	.word	0x45412000
 8000f74:	2000009c 	.word	0x2000009c
 8000f78:	457f5000 	.word	0x457f5000
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000094 	.word	0x20000094

08000f84 <sendTorqueCommand>:
void sendTorqueCommand(void) {
 8000f84:	b510      	push	{r4, lr}
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <sendTorqueCommand+0x5c>)
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f98:	ee17 2a90 	vmov	r2, s15
	char msg1 = (torqueValue >> 8) & 0xFF;
 8000f9c:	f3c2 2007 	ubfx	r0, r2, #8, #8
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <sendTorqueCommand+0x60>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	7019      	strb	r1, [r3, #0]
	txMessage.frame.id = 0x0C0;
 8000fa6:	24c0      	movs	r4, #192	@ 0xc0
 8000fa8:	605c      	str	r4, [r3, #4]
	txMessage.frame.dlc = 8;
 8000faa:	f04f 0c08 	mov.w	ip, #8
 8000fae:	f883 c008 	strb.w	ip, [r3, #8]
	txMessage.frame.data0 = msg0;
 8000fb2:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1 = msg1;
 8000fb4:	7298      	strb	r0, [r3, #10]
	txMessage.frame.data2 = 0;
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 8000fba:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 1;
 8000fbc:	7359      	strb	r1, [r3, #13]
	if(beginTorqueRequests){
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <sendTorqueCommand+0x64>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b143      	cbz	r3, 8000fd6 <sendTorqueCommand+0x52>
		txMessage.frame.data5 = 0;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <sendTorqueCommand+0x60>)
 8000fc6:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = 0;
 8000fc8:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <sendTorqueCommand+0x60>)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73c3      	strb	r3, [r0, #15]
	txMessage.frame.data7 = 0;
 8000fce:	7403      	strb	r3, [r0, #16]
	CANSPI_Transmit(&txMessage);
 8000fd0:	f7ff fb38 	bl	8000644 <CANSPI_Transmit>
}
 8000fd4:	bd10      	pop	{r4, pc}
		txMessage.frame.data5 = 1;
 8000fd6:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <sendTorqueCommand+0x60>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	739a      	strb	r2, [r3, #14]
 8000fdc:	e7f4      	b.n	8000fc8 <sendTorqueCommand+0x44>
 8000fde:	bf00      	nop
 8000fe0:	20000094 	.word	0x20000094
 8000fe4:	200000b8 	.word	0x200000b8
 8000fe8:	20000088 	.word	0x20000088

08000fec <checkShutdown>:
void checkShutdown(){
 8000fec:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 8000fee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <checkShutdown+0x20>)
 8000ff4:	f002 fa54 	bl	80034a0 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_SET) {
 8000ff8:	2801      	cmp	r0, #1
 8000ffa:	d000      	beq.n	8000ffe <checkShutdown+0x12>
}
 8000ffc:	bd08      	pop	{r3, pc}
		requestedTorque = 0;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <checkShutdown+0x24>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 8001004:	f7ff ffbe 	bl	8000f84 <sendTorqueCommand>
		while(true){}
 8001008:	e7fe      	b.n	8001008 <checkShutdown+0x1c>
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000
 8001010:	20000094 	.word	0x20000094

08001014 <checkReadyToDrive>:
void checkReadyToDrive(void) {
 8001014:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_GPIO_Port, RTD_Pin);
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4818      	ldr	r0, [pc, #96]	@ (800107c <checkReadyToDrive+0x68>)
 800101c:	f002 fa40 	bl	80034a0 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_RESET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8001020:	4603      	mov	r3, r0
 8001022:	b950      	cbnz	r0, 800103a <checkReadyToDrive+0x26>
 8001024:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <checkReadyToDrive+0x6c>)
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 800102c:	d905      	bls.n	800103a <checkReadyToDrive+0x26>
 800102e:	4a15      	ldr	r2, [pc, #84]	@ (8001084 <checkReadyToDrive+0x70>)
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	b112      	cbz	r2, 800103a <checkReadyToDrive+0x26>
 8001034:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <checkReadyToDrive+0x74>)
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	b16a      	cbz	r2, 8001056 <checkReadyToDrive+0x42>
	else if (pinState == GPIO_PIN_SET || bseValue < BRAKE_ACTIVATED_ADC_VAL || !bms_diagnostics.inverterActive ){
 800103a:	2b01      	cmp	r3, #1
 800103c:	d007      	beq.n	800104e <checkReadyToDrive+0x3a>
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <checkReadyToDrive+0x6c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001046:	d302      	bcc.n	800104e <checkReadyToDrive+0x3a>
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <checkReadyToDrive+0x70>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	b95b      	cbnz	r3, 8001066 <checkReadyToDrive+0x52>
		rtdState = false;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <checkReadyToDrive+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
}
 8001054:	bd08      	pop	{r3, pc}
		rtdState = true;
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <checkReadyToDrive+0x74>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		millis_RTD = HAL_GetTick();
 800105c:	f000 fede 	bl	8001e1c <HAL_GetTick>
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <checkReadyToDrive+0x78>)
 8001062:	6018      	str	r0, [r3, #0]
 8001064:	e7f6      	b.n	8001054 <checkReadyToDrive+0x40>
	else if(HAL_GetTick()-millis_precharge >= RTD_BUTTON_PRESS_MILLIS){
 8001066:	f000 fed9 	bl	8001e1c <HAL_GetTick>
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <checkReadyToDrive+0x7c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1ac0      	subs	r0, r0, r3
 8001070:	2863      	cmp	r0, #99	@ 0x63
 8001072:	d9ef      	bls.n	8001054 <checkReadyToDrive+0x40>
		readyToDrive = true;
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <checkReadyToDrive+0x80>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	e7eb      	b.n	8001054 <checkReadyToDrive+0x40>
 800107c:	40020800 	.word	0x40020800
 8001080:	20000098 	.word	0x20000098
 8001084:	2000004c 	.word	0x2000004c
 8001088:	20000064 	.word	0x20000064
 800108c:	20000060 	.word	0x20000060
 8001090:	20000058 	.word	0x20000058
 8001094:	20000065 	.word	0x20000065

08001098 <sendPrechargeRequest>:
void sendPrechargeRequest(void){
 8001098:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_GPIO_Port, PRECHARGE_Pin);
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <sendPrechargeRequest+0x38>)
 800109e:	f002 f9ff 	bl	80034a0 <HAL_GPIO_ReadPin>
	if(pinState == GPIO_PIN_RESET && !prechargeState){
 80010a2:	4603      	mov	r3, r0
 80010a4:	b910      	cbnz	r0, 80010ac <sendPrechargeRequest+0x14>
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <sendPrechargeRequest+0x3c>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	b12a      	cbz	r2, 80010b8 <sendPrechargeRequest+0x20>
	else if (pinState == GPIO_PIN_SET){
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10b      	bne.n	80010c8 <sendPrechargeRequest+0x30>
		prechargeState = false;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <sendPrechargeRequest+0x3c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
}
 80010b6:	bd08      	pop	{r3, pc}
		prechargeState = true;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <sendPrechargeRequest+0x3c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
		millis_precharge = HAL_GetTick();
 80010be:	f000 fead 	bl	8001e1c <HAL_GetTick>
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <sendPrechargeRequest+0x40>)
 80010c4:	6018      	str	r0, [r3, #0]
 80010c6:	e7f6      	b.n	80010b6 <sendPrechargeRequest+0x1e>
	else if(HAL_GetTick()-millis_precharge >= PRECHARGE_BUTTON_PRESS_MILLIS){
 80010c8:	f000 fea8 	bl	8001e1c <HAL_GetTick>
}
 80010cc:	e7f3      	b.n	80010b6 <sendPrechargeRequest+0x1e>
 80010ce:	bf00      	nop
 80010d0:	40020800 	.word	0x40020800
 80010d4:	2000005c 	.word	0x2000005c
 80010d8:	20000058 	.word	0x20000058

080010dc <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 80010dc:	6802      	ldr	r2, [r0, #0]
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_I2S_TxCpltCallback+0x50>)
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d000      	beq.n	80010e6 <HAL_I2S_TxCpltCallback+0xa>
 80010e4:	4770      	bx	lr
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_I2S_TxCpltCallback+0x54>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1fa      	bne.n	80010e4 <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_I2S_TxCpltCallback+0x58>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a11      	ldr	r2, [pc, #68]	@ (8001138 <HAL_I2S_TxCpltCallback+0x5c>)
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d214      	bcs.n	8001124 <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80010fa:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 80010fc:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 80010fe:	f247 5130 	movw	r1, #30000	@ 0x7530
 8001102:	428a      	cmp	r2, r1
 8001104:	d80b      	bhi.n	800111e <HAL_I2S_TxCpltCallback+0x42>
 8001106:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 8001108:	490c      	ldr	r1, [pc, #48]	@ (800113c <HAL_I2S_TxCpltCallback+0x60>)
 800110a:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 800110c:	18d4      	adds	r4, r2, r3
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <HAL_I2S_TxCpltCallback+0x58>)
 8001110:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8001112:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001116:	480a      	ldr	r0, [pc, #40]	@ (8001140 <HAL_I2S_TxCpltCallback+0x64>)
 8001118:	f002 fb34 	bl	8003784 <HAL_I2S_Transmit_DMA>
}
 800111c:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 800111e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001122:	e7f1      	b.n	8001108 <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 8001124:	4b02      	ldr	r3, [pc, #8]	@ (8001130 <HAL_I2S_TxCpltCallback+0x54>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	4770      	bx	lr
 800112c:	40003800 	.word	0x40003800
 8001130:	20000038 	.word	0x20000038
 8001134:	20000044 	.word	0x20000044
 8001138:	2000003c 	.word	0x2000003c
 800113c:	20000040 	.word	0x20000040
 8001140:	200001cc 	.word	0x200001cc

08001144 <PlayStartupSoundOnce>:
void PlayStartupSoundOnce(void) {
 8001144:	b508      	push	{r3, lr}
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 8001146:	4909      	ldr	r1, [pc, #36]	@ (800116c <PlayStartupSoundOnce+0x28>)
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <PlayStartupSoundOnce+0x2c>)
 800114a:	6019      	str	r1, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <PlayStartupSoundOnce+0x30>)
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <PlayStartupSoundOnce+0x34>)
 8001150:	601a      	str	r2, [r3, #0]
	wavPos = 0;
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <PlayStartupSoundOnce+0x38>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <PlayStartupSoundOnce+0x3c>)
 800115a:	7002      	strb	r2, [r0, #0]
	wavPos += thisChunk;
 800115c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8001162:	4808      	ldr	r0, [pc, #32]	@ (8001184 <PlayStartupSoundOnce+0x40>)
 8001164:	f002 fb0e 	bl	8003784 <HAL_I2S_Transmit_DMA>
}
 8001168:	bd08      	pop	{r3, pc}
 800116a:	bf00      	nop
 800116c:	0800606c 	.word	0x0800606c
 8001170:	20000040 	.word	0x20000040
 8001174:	2000003c 	.word	0x2000003c
 8001178:	00028056 	.word	0x00028056
 800117c:	20000044 	.word	0x20000044
 8001180:	20000038 	.word	0x20000038
 8001184:	200001cc 	.word	0x200001cc

08001188 <Error_Handler>:
=======
08000a00 <updateRpm>:
static void StartNextChunk(void);
void PlayStartupSoundOnce(void);



void updateRpm() {
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <updateRpm+0x30>)
 8000a06:	7adb      	ldrb	r3, [r3, #11]
 8000a08:	461a      	mov	r2, r3
			| (rxMessage.frame.data3 << 8));
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <updateRpm+0x30>)
 8000a0c:	7b1b      	ldrb	r3, [r3, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	4313      	orrs	r3, r2
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a1e:	ee17 2a90 	vmov	r2, s15
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <updateRpm+0x34>)
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	2000027c 	.word	0x2000027c
 8000a34:	200002a0 	.word	0x200002a0

08000a38 <readFromCAN>:

void readFromCAN() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <readFromCAN+0x28>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	22a5      	movs	r2, #165	@ 0xa5
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d102      	bne.n	8000a4c <readFromCAN+0x14>
		updateRpm();
 8000a46:	f7ff ffdb 	bl	8000a00 <updateRpm>
	}else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
		updateBMSDiagnostics();
	}
}
 8000a4a:	e007      	b.n	8000a5c <readFromCAN+0x24>
	}else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <readFromCAN+0x28>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f44f 62d6 	mov.w	r2, #1712	@ 0x6b0
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <readFromCAN+0x24>
		updateBMSDiagnostics();
 8000a58:	f000 f804 	bl	8000a64 <updateBMSDiagnostics>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000027c 	.word	0x2000027c

08000a64 <updateBMSDiagnostics>:

void updateBMSDiagnostics(void) {
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
	// Pack_Current (signed 16-bit at bit 8, factor 0.1)
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000a6c:	7a9b      	ldrb	r3, [r3, #10]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000a76:	7a5b      	ldrb	r3, [r3, #9]
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	83fb      	strh	r3, [r7, #30]
	float pack_current = pack_current_raw * 0.1f;
 8000a7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000b1c <updateBMSDiagnostics+0xb8>
 8000a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a92:	edc7 7a06 	vstr	s15, [r7, #24]

	// Pack_Inst_Voltage (unsigned 16-bit at bit 24, factor 0.1)
	uint16_t pack_voltage_raw = (rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000a98:	7b1b      	ldrb	r3, [r3, #12]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000aa2:	7adb      	ldrb	r3, [r3, #11]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	82fb      	strh	r3, [r7, #22]
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000b1c <updateBMSDiagnostics+0xb8>
 8000aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000abe:	edc7 7a04 	vstr	s15, [r7, #16]

	// Is_Ready_State (bit 54)
	bool is_ready = (rxMessage.frame.data6 >> 6) & 0x01;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000ac4:	7bdb      	ldrb	r3, [r3, #15]
 8000ac6:	099b      	lsrs	r3, r3, #6
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

	// Optional: cast to int if needed
	int pack_current_int = (int)(pack_current);
 8000ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae0:	ee17 3a90 	vmov	r3, s15
 8000ae4:	60bb      	str	r3, [r7, #8]
	int pack_voltage_int = (int)(pack_voltage);
 8000ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aee:	ee17 3a90 	vmov	r3, s15
 8000af2:	607b      	str	r3, [r7, #4]
	int is_ready_int = is_ready ? 1 : 0;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	603b      	str	r3, [r7, #0]

	bms_diagnostics.inverterActive = is_ready_int;
 8000af8:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <updateBMSDiagnostics+0xbc>)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	6013      	str	r3, [r2, #0]
	bms_diagnostics.packCurrent = pack_current_int;
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <updateBMSDiagnostics+0xbc>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	6093      	str	r3, [r2, #8]
	bms_diagnostics.packVoltage = pack_voltage_int;
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <updateBMSDiagnostics+0xbc>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6053      	str	r3, [r2, #4]
}
 8000b0a:	bf00      	nop
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000027c 	.word	0x2000027c
 8000b1c:	3dcccccd 	.word	0x3dcccccd
 8000b20:	20000294 	.word	0x20000294

08000b24 <checkReadyToDrive>:
	txMessage.frame.data6 = 0;
	txMessage.frame.data7 = 0;
	CANSPI_Transmit(&txMessage);
}

void checkReadyToDrive(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_GPIO_Port, RTD_Pin);
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4810      	ldr	r0, [pc, #64]	@ (8000b70 <checkReadyToDrive+0x4c>)
 8000b2e:	f002 f9c1 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	uint8_t SDCPinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 8000b36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b3a:	480e      	ldr	r0, [pc, #56]	@ (8000b74 <checkReadyToDrive+0x50>)
 8000b3c:	f002 f9ba 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	71bb      	strb	r3, [r7, #6]
	if (pinState == GPIO_PIN_SET && bseValue < BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive && SDCPinState == GPIO_PIN_SET) {
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d10e      	bne.n	8000b68 <checkReadyToDrive+0x44>
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <checkReadyToDrive+0x54>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2264      	movs	r2, #100	@ 0x64
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d209      	bcs.n	8000b68 <checkReadyToDrive+0x44>
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <checkReadyToDrive+0x58>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <checkReadyToDrive+0x44>
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d102      	bne.n	8000b68 <checkReadyToDrive+0x44>
		readyToDrive = 1;
 8000b62:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <checkReadyToDrive+0x5c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020000 	.word	0x40020000
 8000b78:	20000290 	.word	0x20000290
 8000b7c:	20000294 	.word	0x20000294
 8000b80:	20000292 	.word	0x20000292

08000b84 <HAL_I2S_TxCpltCallback>:
// I2S chunk-based WAV Playback Methods
//-----------------------------------------------
/**
 * @brief Called by HAL when a DMA transmission completes (for one chunk).
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_I2S_TxCpltCallback+0x3c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d10f      	bne.n	8000bb6 <HAL_I2S_TxCpltCallback+0x32>
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_I2S_TxCpltCallback+0x40>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_I2S_TxCpltCallback+0x32>
		// finished one chunk
		if (wavPos < halfwordCount) {
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_I2S_TxCpltCallback+0x44>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_I2S_TxCpltCallback+0x48>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d202      	bcs.n	8000bb0 <HAL_I2S_TxCpltCallback+0x2c>
			StartNextChunk();
 8000baa:	f000 f811 	bl	8000bd0 <StartNextChunk>
		} else {
			// entire wave is done
			waveFinished = 1;
		}
	}
}
 8000bae:	e002      	b.n	8000bb6 <HAL_I2S_TxCpltCallback+0x32>
			waveFinished = 1;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <HAL_I2S_TxCpltCallback+0x40>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40003800 	.word	0x40003800
 8000bc4:	200002b0 	.word	0x200002b0
 8000bc8:	200002a4 	.word	0x200002a4
 8000bcc:	200002ac 	.word	0x200002ac

08000bd0 <StartNextChunk>:

/**
 * @brief Start the next chunk of PCM in Normal DMA mode
 */
static void StartNextChunk(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	// how many halfwords remain
	uint32_t remain = halfwordCount - wavPos;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <StartNextChunk+0x58>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <StartNextChunk+0x5c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	60fb      	str	r3, [r7, #12]
	// pick chunk
	uint16_t thisChunk =
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d802      	bhi.n	8000bf2 <StartNextChunk+0x22>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	e001      	b.n	8000bf6 <StartNextChunk+0x26>
 8000bf2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000bf6:	817b      	strh	r3, [r7, #10]
			(remain > CHUNK_SIZE_HALFWORDS) ?
					CHUNK_SIZE_HALFWORDS : (uint16_t) remain;

	const uint16_t *chunkPtr = wavePCM + wavPos;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <StartNextChunk+0x60>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <StartNextChunk+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	607b      	str	r3, [r7, #4]
	wavPos += thisChunk;
 8000c06:	897a      	ldrh	r2, [r7, #10]
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <StartNextChunk+0x5c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <StartNextChunk+0x5c>)
 8000c10:	6013      	str	r3, [r2, #0]

	// Fire the DMA
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8000c12:	897b      	ldrh	r3, [r7, #10]
 8000c14:	461a      	mov	r2, r3
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <StartNextChunk+0x64>)
 8000c1a:	f002 fabd 	bl	8003198 <HAL_I2S_Transmit_DMA>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200002ac 	.word	0x200002ac
 8000c2c:	200002a4 	.word	0x200002a4
 8000c30:	200002a8 	.word	0x200002a8
 8000c34:	200000d8 	.word	0x200000d8

08000c38 <PlayStartupSoundOnce>:

/**
 * @brief Public function to play the wave from beginning exactly once
 */
void PlayStartupSoundOnce(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <PlayStartupSoundOnce+0x28>)
 8000c3e:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <PlayStartupSoundOnce+0x2c>)
 8000c40:	601a      	str	r2, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <PlayStartupSoundOnce+0x30>)
 8000c44:	3b2c      	subs	r3, #44	@ 0x2c
 8000c46:	085b      	lsrs	r3, r3, #1
 8000c48:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <PlayStartupSoundOnce+0x34>)
 8000c4a:	6013      	str	r3, [r2, #0]
	wavPos = 0;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <PlayStartupSoundOnce+0x38>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <PlayStartupSoundOnce+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

	// Start the first chunk
	StartNextChunk();
 8000c58:	f7ff ffba 	bl	8000bd0 <StartNextChunk>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200002a8 	.word	0x200002a8
 8000c64:	08005e04 	.word	0x08005e04
 8000c68:	000500d8 	.word	0x000500d8
 8000c6c:	200002ac 	.word	0x200002ac
 8000c70:	200002a4 	.word	0x200002a4
 8000c74:	200002b0 	.word	0x200002b0

08000c78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b090      	sub	sp, #64	@ 0x40
 8000c7c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c7e:	f001 f81b 	bl	8001cb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c82:	f000 f8bf 	bl	8000e04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c86:	f000 faa9 	bl	80011dc <MX_GPIO_Init>
	MX_DMA_Init();
 8000c8a:	f000 fa71 	bl	8001170 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000c8e:	f000 fa45 	bl	800111c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000c92:	f000 f921 	bl	8000ed8 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000c96:	f000 f9f3 	bl	8001080 <MX_TIM3_Init>
	MX_SPI3_Init();
 8000c9a:	f000 f9bb 	bl	8001014 <MX_SPI3_Init>
	MX_I2S2_Init();
 8000c9e:	f000 f98b 	bl	8000fb8 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	// Start TIM3
	HAL_TIM_Base_Start(&htim3);
 8000ca2:	4852      	ldr	r0, [pc, #328]	@ (8000dec <main+0x174>)
 8000ca4:	f004 fae6 	bl	8005274 <HAL_TIM_Base_Start>

	/* initalized to be 500kbps, see canspi.c line 131-133 for details */
	if (CANSPI_Initialize() != true) {
 8000ca8:	f7ff fc2a 	bl	8000500 <CANSPI_Initialize>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <main+0x44>
		Error_Handler();
 8000cb8:	f000 fb82 	bl	80013c0 <Error_Handler>
	}

	bms_diagnostics.inverterActive = 0;
 8000cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8000df0 <main+0x178>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
	inverter_diagnostics.motorRpm = 0;
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000df4 <main+0x17c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	/* LOOKING FOR RTD INPUTS LOOP */

	while (!readyToDrive) {
 8000cc8:	e003      	b.n	8000cd2 <main+0x5a>
		checkReadyToDrive();
 8000cca:	f7ff ff2b 	bl	8000b24 <checkReadyToDrive>
		updateBMSDiagnostics();
 8000cce:	f7ff fec9 	bl	8000a64 <updateBMSDiagnostics>
	while (!readyToDrive) {
 8000cd2:	4b49      	ldr	r3, [pc, #292]	@ (8000df8 <main+0x180>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f7      	beq.n	8000cca <main+0x52>
	}

	/* RTD HAS BEEN ACTIVATED */
	PlayStartupSoundOnce();
 8000cda:	f7ff ffad 	bl	8000c38 <PlayStartupSoundOnce>
	while (1) {

		/* DRIVE MODE ACTIVE */

		//		if (CANSPI_Receive(&rxMessage)) {
		readFromCAN();
 8000cde:	f7ff feab 	bl	8000a38 <readFromCAN>
		//		}
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000ce2:	4b46      	ldr	r3, [pc, #280]	@ (8000dfc <main+0x184>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = 0b10000000011;
 8000ce8:	4b44      	ldr	r3, [pc, #272]	@ (8000dfc <main+0x184>)
 8000cea:	f240 4203 	movw	r2, #1027	@ 0x403
 8000cee:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8000cf0:	4b42      	ldr	r3, [pc, #264]	@ (8000dfc <main+0x184>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 0x61;
 8000cf6:	4b41      	ldr	r3, [pc, #260]	@ (8000dfc <main+0x184>)
 8000cf8:	2261      	movs	r2, #97	@ 0x61
 8000cfa:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 0x73;
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <main+0x184>)
 8000cfe:	2273      	movs	r2, #115	@ 0x73
 8000d00:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 0x73;
 8000d02:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <main+0x184>)
 8000d04:	2273      	movs	r2, #115	@ 0x73
 8000d06:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 0x68;
 8000d08:	4b3c      	ldr	r3, [pc, #240]	@ (8000dfc <main+0x184>)
 8000d0a:	2268      	movs	r2, #104	@ 0x68
 8000d0c:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 0x6F;
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000dfc <main+0x184>)
 8000d10:	226f      	movs	r2, #111	@ 0x6f
 8000d12:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 0x6C;
 8000d14:	4b39      	ldr	r3, [pc, #228]	@ (8000dfc <main+0x184>)
 8000d16:	226c      	movs	r2, #108	@ 0x6c
 8000d18:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 0x65;
 8000d1a:	4b38      	ldr	r3, [pc, #224]	@ (8000dfc <main+0x184>)
 8000d1c:	2265      	movs	r2, #101	@ 0x65
 8000d1e:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 0x73;
 8000d20:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <main+0x184>)
 8000d22:	2273      	movs	r2, #115	@ 0x73
 8000d24:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 8000d26:	4835      	ldr	r0, [pc, #212]	@ (8000dfc <main+0x184>)
 8000d28:	f7ff fcaa 	bl	8000680 <CANSPI_Transmit>

		HAL_Delay(100);
 8000d2c:	2064      	movs	r0, #100	@ 0x64
 8000d2e:	f001 f835 	bl	8001d9c <HAL_Delay>

		if(CANSPI_Receive(&rxMessage))
 8000d32:	4833      	ldr	r0, [pc, #204]	@ (8000e00 <main+0x188>)
 8000d34:	f7ff fd38 	bl	80007a8 <CANSPI_Receive>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0cf      	beq.n	8000cde <main+0x66>
		{
			uCAN_MSG orangeMessage = rxMessage;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <main+0x188>)
 8000d40:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000d44:	461d      	mov	r5, r3
 8000d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	6023      	str	r3, [r4, #0]
			uCAN_MSG ppMesage;
			ppMesage.frame.idType = rxMessage.frame.idType;
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <main+0x188>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	763b      	strb	r3, [r7, #24]
			ppMesage.frame.id = rxMessage.frame.id;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <main+0x188>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	61fb      	str	r3, [r7, #28]
			ppMesage.frame.dlc = rxMessage.frame.dlc;
 8000d5a:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <main+0x188>)
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	f887 3020 	strb.w	r3, [r7, #32]
			ppMesage.frame.data0 = rxMessage.frame.data0 | 0xAA;
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <main+0x188>)
 8000d64:	7a5b      	ldrb	r3, [r3, #9]
 8000d66:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ppMesage.frame.data1 = rxMessage.frame.data1 | 0xAA;
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <main+0x188>)
 8000d72:	7a9b      	ldrb	r3, [r3, #10]
 8000d74:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			ppMesage.frame.data2 = rxMessage.frame.data2 | 0xAA;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <main+0x188>)
 8000d80:	7adb      	ldrb	r3, [r3, #11]
 8000d82:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			ppMesage.frame.data3 = rxMessage.frame.data3 | 0xAA;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <main+0x188>)
 8000d8e:	7b1b      	ldrb	r3, [r3, #12]
 8000d90:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			ppMesage.frame.data4 = rxMessage.frame.data4 | 0xAA;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <main+0x188>)
 8000d9c:	7b5b      	ldrb	r3, [r3, #13]
 8000d9e:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			ppMesage.frame.data5 = rxMessage.frame.data5 | 0xAA;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <main+0x188>)
 8000daa:	7b9b      	ldrb	r3, [r3, #14]
 8000dac:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			ppMesage.frame.data6 = rxMessage.frame.data6 | 0xAA;
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <main+0x188>)
 8000db8:	7bdb      	ldrb	r3, [r3, #15]
 8000dba:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			ppMesage.frame.data7 = rxMessage.frame.data7 | 0xAA;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <main+0x188>)
 8000dc6:	7c1b      	ldrb	r3, [r3, #16]
 8000dc8:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			uCAN_MSG ppMessage2 = ppMesage;
 8000dd2:	1d3c      	adds	r4, r7, #4
 8000dd4:	f107 0518 	add.w	r5, r7, #24
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	6023      	str	r3, [r4, #0]

			CANSPI_Transmit(&ppMesage);
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fc4b 	bl	8000680 <CANSPI_Transmit>
		readFromCAN();
 8000dea:	e778      	b.n	8000cde <main+0x66>
 8000dec:	200001d8 	.word	0x200001d8
 8000df0:	20000294 	.word	0x20000294
 8000df4:	200002a0 	.word	0x200002a0
 8000df8:	20000292 	.word	0x20000292
 8000dfc:	20000268 	.word	0x20000268
 8000e00:	2000027c 	.word	0x2000027c

08000e04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b094      	sub	sp, #80	@ 0x50
 8000e08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	2230      	movs	r2, #48	@ 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 ffa8 	bl	8005d68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <SystemClock_Config+0xcc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	4a27      	ldr	r2, [pc, #156]	@ (8000ed0 <SystemClock_Config+0xcc>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e38:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <SystemClock_Config+0xcc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <SystemClock_Config+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e50:	4a20      	ldr	r2, [pc, #128]	@ (8000ed4 <SystemClock_Config+0xd0>)
 8000e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <SystemClock_Config+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e70:	2302      	movs	r3, #2
 8000e72:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000e7c:	2354      	movs	r3, #84	@ 0x54
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e84:	2307      	movs	r3, #7
 8000e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fddb 	bl	8003a48 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000e98:	f000 fa92 	bl	80013c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 f83d 	bl	8003f38 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000ec4:	f000 fa7c 	bl	80013c0 <Error_Handler>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000eea:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000eec:	4a31      	ldr	r2, [pc, #196]	@ (8000fb4 <MX_ADC1_Init+0xdc>)
 8000eee:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000ef2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f18:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f20:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 8000f28:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f3e:	f000 ff51 	bl	8001de4 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x74>
	{
		Error_Handler();
 8000f48:	f000 fa3a 	bl	80013c0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f54:	2304      	movs	r3, #4
 8000f56:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f5e:	f000 ff85 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x94>
	{
		Error_Handler();
 8000f68:	f000 fa2a 	bl	80013c0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8000f70:	2303      	movs	r3, #3
 8000f72:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f7a:	f000 ff77 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0xb0>
	{
		Error_Handler();
 8000f84:	f000 fa1c 	bl	80013c0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8000f88:	230e      	movs	r3, #14
 8000f8a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f90:	2301      	movs	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_ADC1_Init+0xd8>)
 8000f9a:	f000 ff67 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xd0>
	{
		Error_Handler();
 8000fa4:	f000 fa0c 	bl	80013c0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000030 	.word	0x20000030
 8000fb4:	40012000 	.word	0x40012000

08000fb8 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fbe:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <MX_I2S2_Init+0x58>)
 8000fc0:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc8:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fde:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000fe2:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_I2S2_Init+0x54>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_I2S2_Init+0x54>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_I2S2_Init+0x54>)
 8000ff8:	f001 ff8e 	bl	8002f18 <HAL_I2S_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 8001002:	f000 f9dd 	bl	80013c0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000d8 	.word	0x200000d8
 8001010:	40003800 	.word	0x40003800

08001014 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_SPI3_Init+0x64>)
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_SPI3_Init+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001020:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001024:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_SPI3_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_SPI3_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001044:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001048:	2210      	movs	r2, #16
 800104a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_SPI3_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_SPI3_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 10;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001060:	220a      	movs	r2, #10
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_SPI3_Init+0x64>)
 8001066:	f003 fad5 	bl	8004614 <HAL_SPI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8001070:	f000 f9a6 	bl	80013c0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000180 	.word	0x20000180
 800107c:	40003c00 	.word	0x40003c00

08001080 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_TIM3_Init+0x94>)
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <MX_TIM3_Init+0x98>)
 80010a0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 5000;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010c4:	f004 f886 	bl	80051d4 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80010ce:	f000 f977 	bl	80013c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010e0:	f004 f922 	bl	8005328 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 80010ea:	f000 f969 	bl	80013c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ee:	2320      	movs	r3, #32
 80010f0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_TIM3_Init+0x94>)
 80010fc:	f004 fb02 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8001106:	f000 f95b 	bl	80013c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001d8 	.word	0x200001d8
 8001118:	40000400 	.word	0x40000400

0800111c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <MX_USART2_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_USART2_UART_Init+0x4c>)
 8001154:	f004 fb44 	bl	80057e0 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800115e:	f000 f92f 	bl	80013c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000220 	.word	0x20000220
 800116c:	40004400 	.word	0x40004400

08001170 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_DMA_Init+0x68>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <MX_DMA_Init+0x68>)
 8001180:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_DMA_Init+0x68>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_DMA_Init+0x68>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <MX_DMA_Init+0x68>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <MX_DMA_Init+0x68>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	200f      	movs	r0, #15
 80011b4:	f001 f953 	bl	800245e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011b8:	200f      	movs	r0, #15
 80011ba:	f001 f96c 	bl	8002496 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2038      	movs	r0, #56	@ 0x38
 80011c4:	f001 f94b 	bl	800245e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c8:	2038      	movs	r0, #56	@ 0x38
 80011ca:	f001 f964 	bl	8002496 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b6e      	ldr	r3, [pc, #440]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a6d      	ldr	r2, [pc, #436]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b6b      	ldr	r3, [pc, #428]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b67      	ldr	r3, [pc, #412]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a66      	ldr	r2, [pc, #408]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b64      	ldr	r3, [pc, #400]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b60      	ldr	r3, [pc, #384]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a5f      	ldr	r2, [pc, #380]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b5d      	ldr	r3, [pc, #372]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b59      	ldr	r3, [pc, #356]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a58      	ldr	r2, [pc, #352]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b56      	ldr	r3, [pc, #344]	@ (80013b0 <MX_GPIO_Init+0x1d4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2101      	movs	r1, #1
 8001266:	4853      	ldr	r0, [pc, #332]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 8001268:	f001 fe3c 	bl	8002ee4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	210e      	movs	r1, #14
 8001270:	4850      	ldr	r0, [pc, #320]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 8001272:	f001 fe37 	bl	8002ee4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2120      	movs	r1, #32
 800127a:	484f      	ldr	r0, [pc, #316]	@ (80013b8 <MX_GPIO_Init+0x1dc>)
 800127c:	f001 fe32 	bl	8002ee4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001286:	484c      	ldr	r0, [pc, #304]	@ (80013b8 <MX_GPIO_Init+0x1dc>)
 8001288:	f001 fe2c 	bl	8002ee4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2110      	movs	r1, #16
 8001290:	484a      	ldr	r0, [pc, #296]	@ (80013bc <MX_GPIO_Init+0x1e0>)
 8001292:	f001 fe27 	bl	8002ee4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4841      	ldr	r0, [pc, #260]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 80012ae:	f001 fc7d 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	483a      	ldr	r0, [pc, #232]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 80012ca:	f001 fc6f 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_CS_Pin */
	GPIO_InitStruct.Pin = CAN_CS_Pin;
 80012ce:	2302      	movs	r3, #2
 80012d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4833      	ldr	r0, [pc, #204]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 80012e6:	f001 fc61 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
	GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 80012ea:	230c      	movs	r3, #12
 80012ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	482c      	ldr	r0, [pc, #176]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 8001302:	f001 fc53 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 8001306:	2320      	movs	r3, #32
 8001308:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4826      	ldr	r0, [pc, #152]	@ (80013b8 <MX_GPIO_Init+0x1dc>)
 800131e:	f001 fc45 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pins : RTD_Pin PB5 */
	GPIO_InitStruct.Pin = RTD_Pin|GPIO_PIN_5;
 8001322:	2324      	movs	r3, #36	@ 0x24
 8001324:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4821      	ldr	r0, [pc, #132]	@ (80013bc <MX_GPIO_Init+0x1e0>)
 8001336:	f001 fc39 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : PRECHARGE_Pin */
	GPIO_InitStruct.Pin = PRECHARGE_Pin;
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PRECHARGE_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	@ (80013b4 <MX_GPIO_Init+0x1d8>)
 800134e:	f001 fc2d 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : SHUTDOWN_Pin */
	GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8001352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001356:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	@ (80013b8 <MX_GPIO_Init+0x1dc>)
 8001368:	f001 fc20 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN2_CS_Pin */
	GPIO_InitStruct.Pin = CAN2_CS_Pin;
 800136c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001370:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_GPIO_Init+0x1dc>)
 8001386:	f001 fc11 	bl	8002bac <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	2310      	movs	r3, #16
 800138c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4806      	ldr	r0, [pc, #24]	@ (80013bc <MX_GPIO_Init+0x1e0>)
 80013a2:	f001 fc03 	bl	8002bac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	@ 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400

080013c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8001188:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118a:	e7fe      	b.n	800118a <Error_Handler+0x2>

0800118c <MX_ADC1_Init>:
{
 800118c:	b500      	push	{lr}
 800118e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800119a:	4821      	ldr	r0, [pc, #132]	@ (8001220 <MX_ADC1_Init+0x94>)
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <MX_ADC1_Init+0x98>)
 800119e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011a4:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011a8:	2201      	movs	r2, #1
 80011aa:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ac:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ae:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011b6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80011b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011bc:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 80011c0:	2203      	movs	r2, #3
 80011c2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c4:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011c8:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ca:	f000 fe57 	bl	8001e7c <HAL_ADC_Init>
 80011ce:	b9f0      	cbnz	r0, 800120e <MX_ADC1_Init+0x82>
  sConfig.Channel = ADC_CHANNEL_14;
 80011d0:	230e      	movs	r3, #14
 80011d2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011d8:	2307      	movs	r3, #7
 80011da:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011dc:	4669      	mov	r1, sp
 80011de:	4810      	ldr	r0, [pc, #64]	@ (8001220 <MX_ADC1_Init+0x94>)
 80011e0:	f001 f8ae 	bl	8002340 <HAL_ADC_ConfigChannel>
 80011e4:	b9a8      	cbnz	r0, 8001212 <MX_ADC1_Init+0x86>
  sConfig.Channel = ADC_CHANNEL_15;
 80011e6:	230f      	movs	r3, #15
 80011e8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 80011ea:	2303      	movs	r3, #3
 80011ec:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ee:	4669      	mov	r1, sp
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <MX_ADC1_Init+0x94>)
 80011f2:	f001 f8a5 	bl	8002340 <HAL_ADC_ConfigChannel>
 80011f6:	b970      	cbnz	r0, 8001216 <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80011fc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fe:	4669      	mov	r1, sp
 8001200:	4807      	ldr	r0, [pc, #28]	@ (8001220 <MX_ADC1_Init+0x94>)
 8001202:	f001 f89d 	bl	8002340 <HAL_ADC_ConfigChannel>
 8001206:	b940      	cbnz	r0, 800121a <MX_ADC1_Init+0x8e>
}
 8001208:	b005      	add	sp, #20
 800120a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800120e:	f7ff ffbb 	bl	8001188 <Error_Handler>
    Error_Handler();
 8001212:	f7ff ffb9 	bl	8001188 <Error_Handler>
    Error_Handler();
 8001216:	f7ff ffb7 	bl	8001188 <Error_Handler>
    Error_Handler();
 800121a:	f7ff ffb5 	bl	8001188 <Error_Handler>
 800121e:	bf00      	nop
 8001220:	20000274 	.word	0x20000274
 8001224:	40012000 	.word	0x40012000

08001228 <MX_TIM3_Init>:
{
 8001228:	b500      	push	{lr}
 800122a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122c:	2300      	movs	r3, #0
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	9303      	str	r3, [sp, #12]
 8001232:	9304      	str	r3, [sp, #16]
 8001234:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 800123a:	4814      	ldr	r0, [pc, #80]	@ (800128c <MX_TIM3_Init+0x64>)
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <MX_TIM3_Init+0x68>)
 800123e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 8001240:	2204      	movs	r2, #4
 8001242:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 10001;
 8001246:	f242 7211 	movw	r2, #10001	@ 0x2711
 800124a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001250:	f004 fa82 	bl	8005758 <HAL_TIM_Base_Init>
 8001254:	b998      	cbnz	r0, 800127e <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800125c:	a902      	add	r1, sp, #8
 800125e:	480b      	ldr	r0, [pc, #44]	@ (800128c <MX_TIM3_Init+0x64>)
 8001260:	f004 fc14 	bl	8005a8c <HAL_TIM_ConfigClockSource>
 8001264:	b968      	cbnz	r0, 8001282 <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001266:	2320      	movs	r3, #32
 8001268:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800126a:	2380      	movs	r3, #128	@ 0x80
 800126c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126e:	4669      	mov	r1, sp
 8001270:	4806      	ldr	r0, [pc, #24]	@ (800128c <MX_TIM3_Init+0x64>)
 8001272:	f004 fe2b 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	b930      	cbnz	r0, 8001286 <MX_TIM3_Init+0x5e>
}
 8001278:	b007      	add	sp, #28
 800127a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800127e:	f7ff ff83 	bl	8001188 <Error_Handler>
    Error_Handler();
 8001282:	f7ff ff81 	bl	8001188 <Error_Handler>
    Error_Handler();
 8001286:	f7ff ff7f 	bl	8001188 <Error_Handler>
 800128a:	bf00      	nop
 800128c:	200000cc 	.word	0x200000cc
 8001290:	40000400 	.word	0x40000400

08001294 <MX_SPI3_Init>:
{
 8001294:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_SPI3_Init+0x38>)
 8001298:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <MX_SPI3_Init+0x3c>)
 800129a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800129c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80012a0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	2300      	movs	r3, #0
 80012a4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a6:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a8:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012aa:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b0:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012b2:	2210      	movs	r2, #16
 80012b4:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b6:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b8:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ba:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012bc:	230a      	movs	r3, #10
 80012be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012c0:	f003 fc6a 	bl	8004b98 <HAL_SPI_Init>
 80012c4:	b900      	cbnz	r0, 80012c8 <MX_SPI3_Init+0x34>
}
 80012c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012c8:	f7ff ff5e 	bl	8001188 <Error_Handler>
 80012cc:	20000114 	.word	0x20000114
 80012d0:	40003c00 	.word	0x40003c00

080012d4 <MX_I2S2_Init>:
{
 80012d4:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 80012d6:	480b      	ldr	r0, [pc, #44]	@ (8001304 <MX_I2S2_Init+0x30>)
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_I2S2_Init+0x34>)
 80012da:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80012dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e0:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80012e2:	2300      	movs	r3, #0
 80012e4:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012e6:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80012e8:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80012ea:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80012ee:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80012f0:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80012f2:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012f4:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80012f6:	f002 f905 	bl	8003504 <HAL_I2S_Init>
 80012fa:	b900      	cbnz	r0, 80012fe <MX_I2S2_Init+0x2a>
}
 80012fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012fe:	f7ff ff43 	bl	8001188 <Error_Handler>
 8001302:	bf00      	nop
 8001304:	200001cc 	.word	0x200001cc
 8001308:	40003800 	.word	0x40003800

0800130c <SystemClock_Config>:
{
 800130c:	b500      	push	{lr}
 800130e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001310:	2230      	movs	r2, #48	@ 0x30
 8001312:	2100      	movs	r1, #0
 8001314:	a808      	add	r0, sp, #32
 8001316:	f004 fe5b 	bl	8005fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131a:	2300      	movs	r3, #0
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	9304      	str	r3, [sp, #16]
 8001320:	9305      	str	r3, [sp, #20]
 8001322:	9306      	str	r3, [sp, #24]
 8001324:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <SystemClock_Config+0x9c>)
 800132a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800132c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001330:	6411      	str	r1, [r2, #64]	@ 0x40
 8001332:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001334:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001338:	9201      	str	r2, [sp, #4]
 800133a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	491b      	ldr	r1, [pc, #108]	@ (80013ac <SystemClock_Config+0xa0>)
 8001340:	680a      	ldr	r2, [r1, #0]
 8001342:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800134a:	600a      	str	r2, [r1, #0]
 800134c:	680a      	ldr	r2, [r1, #0]
 800134e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001352:	9202      	str	r2, [sp, #8]
 8001354:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001356:	2202      	movs	r2, #2
 8001358:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135a:	2101      	movs	r1, #1
 800135c:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135e:	2110      	movs	r1, #16
 8001360:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001364:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001366:	2308      	movs	r3, #8
 8001368:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800136a:	2354      	movs	r3, #84	@ 0x54
 800136c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136e:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001370:	2307      	movs	r3, #7
 8001372:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	a808      	add	r0, sp, #32
 8001376:	f002 fe5d 	bl	8004034 <HAL_RCC_OscConfig>
 800137a:	b980      	cbnz	r0, 800139e <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2102      	movs	r1, #2
 8001382:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800138c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001390:	a803      	add	r0, sp, #12
 8001392:	f003 f8c7 	bl	8004524 <HAL_RCC_ClockConfig>
 8001396:	b920      	cbnz	r0, 80013a2 <SystemClock_Config+0x96>
}
 8001398:	b015      	add	sp, #84	@ 0x54
 800139a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800139e:	f7ff fef3 	bl	8001188 <Error_Handler>
    Error_Handler();
 80013a2:	f7ff fef1 	bl	8001188 <Error_Handler>
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <main>:
{
 80013b0:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 80013b2:	f000 fccd 	bl	8001d50 <HAL_Init>
  SystemClock_Config();
 80013b6:	f7ff ffa9 	bl	800130c <SystemClock_Config>
  MX_GPIO_Init();
 80013ba:	f7ff fb03 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013be:	f7ff fbb3 	bl	8000b28 <MX_DMA_Init>
  MX_ADC1_Init();
 80013c2:	f7ff fee3 	bl	800118c <MX_ADC1_Init>
  MX_TIM3_Init();
 80013c6:	f7ff ff2f 	bl	8001228 <MX_TIM3_Init>
  MX_SPI3_Init();
 80013ca:	f7ff ff63 	bl	8001294 <MX_SPI3_Init>
  MX_I2S2_Init();
 80013ce:	f7ff ff81 	bl	80012d4 <MX_I2S2_Init>
  HAL_TIM_Base_Start(&htim3);
 80013d2:	4829      	ldr	r0, [pc, #164]	@ (8001478 <main+0xc8>)
 80013d4:	f004 fa10 	bl	80057f8 <HAL_TIM_Base_Start>
  if (CANSPI_Initialize() != true) {
 80013d8:	f7ff f874 	bl	80004c4 <CANSPI_Initialize>
 80013dc:	b128      	cbz	r0, 80013ea <main+0x3a>
  bms_diagnostics.inverterActive = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	4a26      	ldr	r2, [pc, #152]	@ (800147c <main+0xcc>)
 80013e2:	6013      	str	r3, [r2, #0]
  inverter_diagnostics.motorRpm   = 0;
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <main+0xd0>)
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e018      	b.n	800141c <main+0x6c>
  	Error_Handler();
 80013ea:	f7ff fecd 	bl	8001188 <Error_Handler>
		  readFromCAN();
 80013ee:	f7ff fc07 	bl	8000c00 <readFromCAN>
 80013f2:	e018      	b.n	8001426 <main+0x76>
		HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 80013f4:	2203      	movs	r2, #3
 80013f6:	4923      	ldr	r1, [pc, #140]	@ (8001484 <main+0xd4>)
 80013f8:	4823      	ldr	r0, [pc, #140]	@ (8001488 <main+0xd8>)
 80013fa:	f000 fe93 	bl	8002124 <HAL_ADC_Start_DMA>
		dma_read_complete = 0;
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <main+0xdc>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
		millis_since_dma_read = HAL_GetTick();
 8001404:	f000 fd0a 	bl	8001e1c <HAL_GetTick>
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <main+0xe0>)
 800140a:	6018      	str	r0, [r3, #0]
 800140c:	e016      	b.n	800143c <main+0x8c>
			  beginTorqueRequests = true;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <main+0xe4>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
			  PlayStartupSoundOnce();
 8001414:	f7ff fe96 	bl	8001144 <PlayStartupSoundOnce>
		  sendTorqueCommand();
 8001418:	f7ff fdb4 	bl	8000f84 <sendTorqueCommand>
	  if (CANSPI_Receive(&rxMessage)) {
 800141c:	481e      	ldr	r0, [pc, #120]	@ (8001498 <main+0xe8>)
 800141e:	f7ff f9a5 	bl	800076c <CANSPI_Receive>
 8001422:	2800      	cmp	r0, #0
 8001424:	d1e3      	bne.n	80013ee <main+0x3e>
	  if(millis_since_dma_read -  HAL_GetTick() > DMA_READ_TIMEOUT && dma_read_complete){
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <main+0xe0>)
 8001428:	681c      	ldr	r4, [r3, #0]
 800142a:	f000 fcf7 	bl	8001e1c <HAL_GetTick>
 800142e:	1a24      	subs	r4, r4, r0
 8001430:	2c0a      	cmp	r4, #10
 8001432:	d903      	bls.n	800143c <main+0x8c>
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <main+0xdc>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1db      	bne.n	80013f4 <main+0x44>
	  calculateTorqueRequest();
 800143c:	f7ff fc0a 	bl	8000c54 <calculateTorqueRequest>
	  checkAPPSPlausibility();
 8001440:	f7ff fcd4 	bl	8000dec <checkAPPSPlausibility>
	  checkCrossCheck();
 8001444:	f7ff fd32 	bl	8000eac <checkCrossCheck>
	  sendPrechargeRequest();
 8001448:	f7ff fe26 	bl	8001098 <sendPrechargeRequest>
	  checkShutdown();  // If pin is high, torque->0, block
 800144c:	f7ff fdce 	bl	8000fec <checkShutdown>
	  finalTorqueRequest   = requestedTorque;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <main+0xec>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <main+0xf0>)
 8001456:	6013      	str	r3, [r2, #0]
	  lastRequestedTorque  = requestedTorque;
 8001458:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <main+0xf4>)
 800145a:	6013      	str	r3, [r2, #0]
	  uint8_t prevReadyToDrive = readyToDrive;
 800145c:	4c12      	ldr	r4, [pc, #72]	@ (80014a8 <main+0xf8>)
 800145e:	7825      	ldrb	r5, [r4, #0]
	  checkReadyToDrive();
 8001460:	f7ff fdd8 	bl	8001014 <checkReadyToDrive>
	  if (readyToDrive) {
 8001464:	7823      	ldrb	r3, [r4, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0d8      	beq.n	800141c <main+0x6c>
		  if(!prevReadyToDrive){
 800146a:	2d00      	cmp	r5, #0
 800146c:	d0cf      	beq.n	800140e <main+0x5e>
			  beginTorqueRequests = false;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <main+0xe4>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	e7d0      	b.n	8001418 <main+0x68>
 8001476:	bf00      	nop
 8001478:	200000cc 	.word	0x200000cc
 800147c:	2000004c 	.word	0x2000004c
 8001480:	20000048 	.word	0x20000048
 8001484:	20000074 	.word	0x20000074
 8001488:	20000274 	.word	0x20000274
 800148c:	20000002 	.word	0x20000002
 8001490:	20000080 	.word	0x20000080
 8001494:	20000088 	.word	0x20000088
 8001498:	200000a4 	.word	0x200000a4
 800149c:	20000094 	.word	0x20000094
 80014a0:	2000008c 	.word	0x2000008c
 80014a4:	20000090 	.word	0x20000090
 80014a8:	20000065 	.word	0x20000065

080014ac <MCP2515_Initialize>:
=======
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <Error_Handler+0x8>

080013cc <MCP2515_Initialize>:
>>>>>>> Stashed changes
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
<<<<<<< Updated upstream
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80014b2:	2201      	movs	r2, #1
 80014b4:	2102      	movs	r1, #2
 80014b6:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <MCP2515_Initialize+0x3c>)
 80014b8:	f002 f80a 	bl	80034d0 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80014bc:	230a      	movs	r3, #10
 80014be:	71fb      	strb	r3, [r7, #7]
=======
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80013d2:	2201      	movs	r2, #1
 80013d4:	2102      	movs	r1, #2
 80013d6:	480c      	ldr	r0, [pc, #48]	@ (8001408 <MCP2515_Initialize+0x3c>)
 80013d8:	f001 fd84 	bl	8002ee4 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80013dc:	230a      	movs	r3, #10
 80013de:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
<<<<<<< Updated upstream
 80014c0:	480a      	ldr	r0, [pc, #40]	@ (80014ec <MCP2515_Initialize+0x40>)
 80014c2:	f003 fff8 	bl	80054b6 <HAL_SPI_GetState>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <MCP2515_Initialize+0x24>
      return true;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e006      	b.n	80014de <MCP2515_Initialize+0x32>
    
    loop--;
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f1      	bne.n	80014c0 <MCP2515_Initialize+0x14>
      
  return false;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020800 	.word	0x40020800
 80014ec:	20000114 	.word	0x20000114

080014f0 <MCP2515_SetConfigMode>:
=======
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <MCP2515_Initialize+0x40>)
 80013e2:	f003 fda6 	bl	8004f32 <HAL_SPI_GetState>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <MCP2515_Initialize+0x24>
      return true;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e006      	b.n	80013fe <MCP2515_Initialize+0x32>
    
    loop--;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f1      	bne.n	80013e0 <MCP2515_Initialize+0x14>
      
  return false;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020800 	.word	0x40020800
 800140c:	20000180 	.word	0x20000180

08001410 <MCP2515_SetConfigMode>:
>>>>>>> Stashed changes

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
<<<<<<< Updated upstream
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80014f6:	2180      	movs	r1, #128	@ 0x80
 80014f8:	200f      	movs	r0, #15
 80014fa:	f000 f8a3 	bl	8001644 <MCP2515_WriteByte>
  HAL_Delay(100);
 80014fe:	2064      	movs	r0, #100	@ 0x64
 8001500:	f000 fc98 	bl	8001e34 <HAL_Delay>
  uint8_t loop = 10;
 8001504:	230a      	movs	r3, #10
 8001506:	71fb      	strb	r3, [r7, #7]
=======
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001416:	2180      	movs	r1, #128	@ 0x80
 8001418:	200f      	movs	r0, #15
 800141a:	f000 f8a3 	bl	8001564 <MCP2515_WriteByte>
  HAL_Delay(100);
 800141e:	2064      	movs	r0, #100	@ 0x64
 8001420:	f000 fcbc 	bl	8001d9c <HAL_Delay>
  uint8_t loop = 10;
 8001424:	230a      	movs	r3, #10
 8001426:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
<<<<<<< Updated upstream
 8001508:	2180      	movs	r1, #128	@ 0x80
 800150a:	200f      	movs	r0, #15
 800150c:	f000 f89a 	bl	8001644 <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001510:	200e      	movs	r0, #14
 8001512:	f000 f84f 	bl	80015b4 <MCP2515_ReadByte>
 8001516:	4603      	mov	r3, r0
 8001518:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800151a:	2030      	movs	r0, #48	@ 0x30
 800151c:	f000 f84a 	bl	80015b4 <MCP2515_ReadByte>
 8001520:	4603      	mov	r3, r0
 8001522:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800152a:	2b80      	cmp	r3, #128	@ 0x80
 800152c:	d101      	bne.n	8001532 <MCP2515_SetConfigMode+0x42>
      return true;
 800152e:	2301      	movs	r3, #1
 8001530:	e008      	b.n	8001544 <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3b01      	subs	r3, #1
 8001536:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001538:	2064      	movs	r0, #100	@ 0x64
 800153a:	f000 fc7b 	bl	8001e34 <HAL_Delay>

  } while(loop > 0);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	e7e1      	b.n	8001508 <MCP2515_SetConfigMode+0x18>
=======
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f89a 	bl	8001564 <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001430:	200e      	movs	r0, #14
 8001432:	f000 f84f 	bl	80014d4 <MCP2515_ReadByte>
 8001436:	4603      	mov	r3, r0
 8001438:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800143a:	2030      	movs	r0, #48	@ 0x30
 800143c:	f000 f84a 	bl	80014d4 <MCP2515_ReadByte>
 8001440:	4603      	mov	r3, r0
 8001442:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800144a:	2b80      	cmp	r3, #128	@ 0x80
 800144c:	d101      	bne.n	8001452 <MCP2515_SetConfigMode+0x42>
      return true;
 800144e:	2301      	movs	r3, #1
 8001450:	e008      	b.n	8001464 <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3b01      	subs	r3, #1
 8001456:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001458:	2064      	movs	r0, #100	@ 0x64
 800145a:	f000 fc9f 	bl	8001d9c <HAL_Delay>

  } while(loop > 0);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	e7e1      	b.n	8001428 <MCP2515_SetConfigMode+0x18>
>>>>>>> Stashed changes
  } while(1);
  
  return false;
}
<<<<<<< Updated upstream
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <MCP2515_SetNormalMode>:
=======
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <MCP2515_SetNormalMode>:
>>>>>>> Stashed changes

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
<<<<<<< Updated upstream
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001552:	2100      	movs	r1, #0
 8001554:	200f      	movs	r0, #15
 8001556:	f000 f875 	bl	8001644 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800155a:	230a      	movs	r3, #10
 800155c:	71fb      	strb	r3, [r7, #7]
=======
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001472:	2100      	movs	r1, #0
 8001474:	200f      	movs	r0, #15
 8001476:	f000 f875 	bl	8001564 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800147a:	230a      	movs	r3, #10
 800147c:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
<<<<<<< Updated upstream
 800155e:	200e      	movs	r0, #14
 8001560:	f000 f828 	bl	80015b4 <MCP2515_ReadByte>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <MCP2515_SetNormalMode+0x26>
      return true;
 800156e:	2301      	movs	r3, #1
 8001570:	e006      	b.n	8001580 <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	3b01      	subs	r3, #1
 8001576:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ef      	bne.n	800155e <MCP2515_SetNormalMode+0x12>
  
  return false;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <MCP2515_Reset>:
=======
 800147e:	200e      	movs	r0, #14
 8001480:	f000 f828 	bl	80014d4 <MCP2515_ReadByte>
 8001484:	4603      	mov	r3, r0
 8001486:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <MCP2515_SetNormalMode+0x26>
      return true;
 800148e:	2301      	movs	r3, #1
 8001490:	e006      	b.n	80014a0 <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	3b01      	subs	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ef      	bne.n	800147e <MCP2515_SetNormalMode+0x12>
  
  return false;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MCP2515_Reset>:
>>>>>>> Stashed changes
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
<<<<<<< Updated upstream
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 800158c:	2200      	movs	r2, #0
 800158e:	2102      	movs	r1, #2
 8001590:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MCP2515_Reset+0x28>)
 8001592:	f001 ff9d 	bl	80034d0 <HAL_GPIO_WritePin>
 8001596:	2001      	movs	r0, #1
 8001598:	f000 fc4c 	bl	8001e34 <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 800159c:	20c0      	movs	r0, #192	@ 0xc0
 800159e:	f000 f929 	bl	80017f4 <SPI_Tx>

  MCP2515_CS_HIGH();
 80015a2:	2201      	movs	r2, #1
 80015a4:	2102      	movs	r1, #2
 80015a6:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <MCP2515_Reset+0x28>)
 80015a8:	f001 ff92 	bl	80034d0 <HAL_GPIO_WritePin>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020800 	.word	0x40020800

080015b4 <MCP2515_ReadByte>:
=======
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 80014ac:	2200      	movs	r2, #0
 80014ae:	2102      	movs	r1, #2
 80014b0:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <MCP2515_Reset+0x28>)
 80014b2:	f001 fd17 	bl	8002ee4 <HAL_GPIO_WritePin>
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fc70 	bl	8001d9c <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 80014bc:	20c0      	movs	r0, #192	@ 0xc0
 80014be:	f000 f929 	bl	8001714 <SPI_Tx>

  MCP2515_CS_HIGH();
 80014c2:	2201      	movs	r2, #1
 80014c4:	2102      	movs	r1, #2
 80014c6:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <MCP2515_Reset+0x28>)
 80014c8:	f001 fd0c 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020800 	.word	0x40020800

080014d4 <MCP2515_ReadByte>:
>>>>>>> Stashed changes



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
<<<<<<< Updated upstream
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MCP2515_ReadByte+0x44>)
 80015c4:	f001 ff84 	bl	80034d0 <HAL_GPIO_WritePin>
 80015c8:	2001      	movs	r0, #1
 80015ca:	f000 fc33 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f910 	bl	80017f4 <SPI_Tx>
  SPI_Tx(address);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f90c 	bl	80017f4 <SPI_Tx>
  retVal = SPI_Rx();
 80015dc:	f000 f930 	bl	8001840 <SPI_Rx>
 80015e0:	4603      	mov	r3, r0
 80015e2:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80015e4:	2201      	movs	r2, #1
 80015e6:	2102      	movs	r1, #2
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <MCP2515_ReadByte+0x44>)
 80015ea:	f001 ff71 	bl	80034d0 <HAL_GPIO_WritePin>
  
  return retVal;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020800 	.word	0x40020800

080015fc <MCP2515_ReadRxSequence>:
=======
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80014de:	2200      	movs	r2, #0
 80014e0:	2102      	movs	r1, #2
 80014e2:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MCP2515_ReadByte+0x44>)
 80014e4:	f001 fcfe 	bl	8002ee4 <HAL_GPIO_WritePin>
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fc57 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 80014ee:	2003      	movs	r0, #3
 80014f0:	f000 f910 	bl	8001714 <SPI_Tx>
  SPI_Tx(address);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f90c 	bl	8001714 <SPI_Tx>
  retVal = SPI_Rx();
 80014fc:	f000 f930 	bl	8001760 <SPI_Rx>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001504:	2201      	movs	r2, #1
 8001506:	2102      	movs	r1, #2
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MCP2515_ReadByte+0x44>)
 800150a:	f001 fceb 	bl	8002ee4 <HAL_GPIO_WritePin>
  
  return retVal;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020800 	.word	0x40020800

0800151c <MCP2515_ReadRxSequence>:
>>>>>>> Stashed changes

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
<<<<<<< Updated upstream
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	4613      	mov	r3, r2
 800160a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	480b      	ldr	r0, [pc, #44]	@ (8001640 <MCP2515_ReadRxSequence+0x44>)
 8001612:	f001 ff5d 	bl	80034d0 <HAL_GPIO_WritePin>
 8001616:	2001      	movs	r0, #1
 8001618:	f000 fc0c 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(instruction);        
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f8e8 	bl	80017f4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	4619      	mov	r1, r3
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f000 f919 	bl	8001860 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 800162e:	2201      	movs	r2, #1
 8001630:	2102      	movs	r1, #2
 8001632:	4803      	ldr	r0, [pc, #12]	@ (8001640 <MCP2515_ReadRxSequence+0x44>)
 8001634:	f001 ff4c 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40020800 	.word	0x40020800

08001644 <MCP2515_WriteByte>:
=======
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	480b      	ldr	r0, [pc, #44]	@ (8001560 <MCP2515_ReadRxSequence+0x44>)
 8001532:	f001 fcd7 	bl	8002ee4 <HAL_GPIO_WritePin>
 8001536:	2001      	movs	r0, #1
 8001538:	f000 fc30 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(instruction);        
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f8e8 	bl	8001714 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	4619      	mov	r1, r3
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f000 f919 	bl	8001780 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 800154e:	2201      	movs	r2, #1
 8001550:	2102      	movs	r1, #2
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MCP2515_ReadRxSequence+0x44>)
 8001554:	f001 fcc6 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020800 	.word	0x40020800

08001564 <MCP2515_WriteByte>:
>>>>>>> Stashed changes

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
<<<<<<< Updated upstream
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001654:	2200      	movs	r2, #0
 8001656:	2102      	movs	r1, #2
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <MCP2515_WriteByte+0x48>)
 800165a:	f001 ff39 	bl	80034d0 <HAL_GPIO_WritePin>
 800165e:	2001      	movs	r0, #1
 8001660:	f000 fbe8 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001664:	2002      	movs	r0, #2
 8001666:	f000 f8c5 	bl	80017f4 <SPI_Tx>
  SPI_Tx(address);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f8c1 	bl	80017f4 <SPI_Tx>
  SPI_Tx(data);  
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f8bd 	bl	80017f4 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 800167a:	2201      	movs	r2, #1
 800167c:	2102      	movs	r1, #2
 800167e:	4803      	ldr	r0, [pc, #12]	@ (800168c <MCP2515_WriteByte+0x48>)
 8001680:	f001 ff26 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020800 	.word	0x40020800

08001690 <MCP2515_WriteByteSequence>:
=======
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001574:	2200      	movs	r2, #0
 8001576:	2102      	movs	r1, #2
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <MCP2515_WriteByte+0x48>)
 800157a:	f001 fcb3 	bl	8002ee4 <HAL_GPIO_WritePin>
 800157e:	2001      	movs	r0, #1
 8001580:	f000 fc0c 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001584:	2002      	movs	r0, #2
 8001586:	f000 f8c5 	bl	8001714 <SPI_Tx>
  SPI_Tx(address);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8c1 	bl	8001714 <SPI_Tx>
  SPI_Tx(data);  
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8bd 	bl	8001714 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 800159a:	2201      	movs	r2, #1
 800159c:	2102      	movs	r1, #2
 800159e:	4803      	ldr	r0, [pc, #12]	@ (80015ac <MCP2515_WriteByte+0x48>)
 80015a0:	f001 fca0 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020800 	.word	0x40020800

080015b0 <MCP2515_WriteByteSequence>:
>>>>>>> Stashed changes

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
<<<<<<< Updated upstream
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	603a      	str	r2, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	460b      	mov	r3, r1
 800169e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80016a0:	2200      	movs	r2, #0
 80016a2:	2102      	movs	r1, #2
 80016a4:	480f      	ldr	r0, [pc, #60]	@ (80016e4 <MCP2515_WriteByteSequence+0x54>)
 80016a6:	f001 ff13 	bl	80034d0 <HAL_GPIO_WritePin>
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 fbc2 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f000 f89f 	bl	80017f4 <SPI_Tx>
  SPI_Tx(startAddress);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f89b 	bl	80017f4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80016be:	79ba      	ldrb	r2, [r7, #6]
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f000 f8a3 	bl	8001818 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80016d2:	2201      	movs	r2, #1
 80016d4:	2102      	movs	r1, #2
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MCP2515_WriteByteSequence+0x54>)
 80016d8:	f001 fefa 	bl	80034d0 <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40020800 	.word	0x40020800

080016e8 <MCP2515_LoadTxSequence>:
=======
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	603a      	str	r2, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	460b      	mov	r3, r1
 80015be:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80015c0:	2200      	movs	r2, #0
 80015c2:	2102      	movs	r1, #2
 80015c4:	480f      	ldr	r0, [pc, #60]	@ (8001604 <MCP2515_WriteByteSequence+0x54>)
 80015c6:	f001 fc8d 	bl	8002ee4 <HAL_GPIO_WritePin>
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 fbe6 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 80015d0:	2002      	movs	r0, #2
 80015d2:	f000 f89f 	bl	8001714 <SPI_Tx>
  SPI_Tx(startAddress);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f89b 	bl	8001714 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80015de:	79ba      	ldrb	r2, [r7, #6]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	6838      	ldr	r0, [r7, #0]
 80015ee:	f000 f8a3 	bl	8001738 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80015f2:	2201      	movs	r2, #1
 80015f4:	2102      	movs	r1, #2
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <MCP2515_WriteByteSequence+0x54>)
 80015f8:	f001 fc74 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40020800 	.word	0x40020800

08001608 <MCP2515_LoadTxSequence>:
>>>>>>> Stashed changes

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
<<<<<<< Updated upstream
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	4613      	mov	r3, r2
 80016f8:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80016fa:	2200      	movs	r2, #0
 80016fc:	2102      	movs	r1, #2
 80016fe:	4810      	ldr	r0, [pc, #64]	@ (8001740 <MCP2515_LoadTxSequence+0x58>)
 8001700:	f001 fee6 	bl	80034d0 <HAL_GPIO_WritePin>
 8001704:	2001      	movs	r0, #1
 8001706:	f000 fb95 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(instruction);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f871 	bl	80017f4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001712:	2104      	movs	r1, #4
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f000 f87f 	bl	8001818 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f869 	bl	80017f4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f876 	bl	8001818 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 800172c:	2201      	movs	r2, #1
 800172e:	2102      	movs	r1, #2
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <MCP2515_LoadTxSequence+0x58>)
 8001732:	f001 fecd 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020800 	.word	0x40020800

08001744 <MCP2515_RequestToSend>:
=======
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	4613      	mov	r3, r2
 8001618:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800161a:	2200      	movs	r2, #0
 800161c:	2102      	movs	r1, #2
 800161e:	4810      	ldr	r0, [pc, #64]	@ (8001660 <MCP2515_LoadTxSequence+0x58>)
 8001620:	f001 fc60 	bl	8002ee4 <HAL_GPIO_WritePin>
 8001624:	2001      	movs	r0, #1
 8001626:	f000 fbb9 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(instruction);
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f871 	bl	8001714 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001632:	2104      	movs	r1, #4
 8001634:	68b8      	ldr	r0, [r7, #8]
 8001636:	f000 f87f 	bl	8001738 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f869 	bl	8001714 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f876 	bl	8001738 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 800164c:	2201      	movs	r2, #1
 800164e:	2102      	movs	r1, #2
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <MCP2515_LoadTxSequence+0x58>)
 8001652:	f001 fc47 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40020800 	.word	0x40020800

08001664 <MCP2515_RequestToSend>:
>>>>>>> Stashed changes
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
<<<<<<< Updated upstream
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800174e:	2200      	movs	r2, #0
 8001750:	2102      	movs	r1, #2
 8001752:	4809      	ldr	r0, [pc, #36]	@ (8001778 <MCP2515_RequestToSend+0x34>)
 8001754:	f001 febc 	bl	80034d0 <HAL_GPIO_WritePin>
 8001758:	2001      	movs	r0, #1
 800175a:	f000 fb6b 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(instruction);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f847 	bl	80017f4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001766:	2201      	movs	r2, #1
 8001768:	2102      	movs	r1, #2
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <MCP2515_RequestToSend+0x34>)
 800176c:	f001 feb0 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020800 	.word	0x40020800

0800177c <MCP2515_ReadStatus>:
=======
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4809      	ldr	r0, [pc, #36]	@ (8001698 <MCP2515_RequestToSend+0x34>)
 8001674:	f001 fc36 	bl	8002ee4 <HAL_GPIO_WritePin>
 8001678:	2001      	movs	r0, #1
 800167a:	f000 fb8f 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(instruction);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f847 	bl	8001714 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001686:	2201      	movs	r2, #1
 8001688:	2102      	movs	r1, #2
 800168a:	4803      	ldr	r0, [pc, #12]	@ (8001698 <MCP2515_RequestToSend+0x34>)
 800168c:	f001 fc2a 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40020800 	.word	0x40020800

0800169c <MCP2515_ReadStatus>:
>>>>>>> Stashed changes

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
<<<<<<< Updated upstream
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001782:	2200      	movs	r2, #0
 8001784:	2102      	movs	r1, #2
 8001786:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <MCP2515_ReadStatus+0x38>)
 8001788:	f001 fea2 	bl	80034d0 <HAL_GPIO_WritePin>
 800178c:	2001      	movs	r0, #1
 800178e:	f000 fb51 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001792:	20a0      	movs	r0, #160	@ 0xa0
 8001794:	f000 f82e 	bl	80017f4 <SPI_Tx>
  retVal = SPI_Rx();
 8001798:	f000 f852 	bl	8001840 <SPI_Rx>
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <MCP2515_ReadStatus+0x38>)
 80017a6:	f001 fe93 	bl	80034d0 <HAL_GPIO_WritePin>
  
  return retVal;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020800 	.word	0x40020800

080017b8 <MCP2515_GetRxStatus>:
=======
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016a2:	2200      	movs	r2, #0
 80016a4:	2102      	movs	r1, #2
 80016a6:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <MCP2515_ReadStatus+0x38>)
 80016a8:	f001 fc1c 	bl	8002ee4 <HAL_GPIO_WritePin>
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 fb75 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80016b2:	20a0      	movs	r0, #160	@ 0xa0
 80016b4:	f000 f82e 	bl	8001714 <SPI_Tx>
  retVal = SPI_Rx();
 80016b8:	f000 f852 	bl	8001760 <SPI_Rx>
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <MCP2515_ReadStatus+0x38>)
 80016c6:	f001 fc0d 	bl	8002ee4 <HAL_GPIO_WritePin>
  
  return retVal;
 80016ca:	79fb      	ldrb	r3, [r7, #7]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020800 	.word	0x40020800

080016d8 <MCP2515_GetRxStatus>:
>>>>>>> Stashed changes

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
<<<<<<< Updated upstream
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80017be:	2200      	movs	r2, #0
 80017c0:	2102      	movs	r1, #2
 80017c2:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <MCP2515_GetRxStatus+0x38>)
 80017c4:	f001 fe84 	bl	80034d0 <HAL_GPIO_WritePin>
 80017c8:	2001      	movs	r0, #1
 80017ca:	f000 fb33 	bl	8001e34 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80017ce:	20b0      	movs	r0, #176	@ 0xb0
 80017d0:	f000 f810 	bl	80017f4 <SPI_Tx>
  retVal = SPI_Rx();
 80017d4:	f000 f834 	bl	8001840 <SPI_Rx>
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80017dc:	2201      	movs	r2, #1
 80017de:	2102      	movs	r1, #2
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <MCP2515_GetRxStatus+0x38>)
 80017e2:	f001 fe75 	bl	80034d0 <HAL_GPIO_WritePin>
  
  return retVal;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40020800 	.word	0x40020800

080017f4 <SPI_Tx>:
=======
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	480b      	ldr	r0, [pc, #44]	@ (8001710 <MCP2515_GetRxStatus+0x38>)
 80016e4:	f001 fbfe 	bl	8002ee4 <HAL_GPIO_WritePin>
 80016e8:	2001      	movs	r0, #1
 80016ea:	f000 fb57 	bl	8001d9c <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80016ee:	20b0      	movs	r0, #176	@ 0xb0
 80016f0:	f000 f810 	bl	8001714 <SPI_Tx>
  retVal = SPI_Rx();
 80016f4:	f000 f834 	bl	8001760 <SPI_Rx>
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80016fc:	2201      	movs	r2, #1
 80016fe:	2102      	movs	r1, #2
 8001700:	4803      	ldr	r0, [pc, #12]	@ (8001710 <MCP2515_GetRxStatus+0x38>)
 8001702:	f001 fbef 	bl	8002ee4 <HAL_GPIO_WritePin>
  
  return retVal;
 8001706:	79fb      	ldrb	r3, [r7, #7]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40020800 	.word	0x40020800

08001714 <SPI_Tx>:
>>>>>>> Stashed changes
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
<<<<<<< Updated upstream
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80017fe:	1df9      	adds	r1, r7, #7
 8001800:	230a      	movs	r3, #10
 8001802:	2201      	movs	r2, #1
 8001804:	4803      	ldr	r0, [pc, #12]	@ (8001814 <SPI_Tx+0x20>)
 8001806:	f003 fa50 	bl	8004caa <HAL_SPI_Transmit>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000114 	.word	0x20000114

08001818 <SPI_TxBuffer>:
=======
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800171e:	1df9      	adds	r1, r7, #7
 8001720:	230a      	movs	r3, #10
 8001722:	2201      	movs	r2, #1
 8001724:	4803      	ldr	r0, [pc, #12]	@ (8001734 <SPI_Tx+0x20>)
 8001726:	f002 fffe 	bl	8004726 <HAL_SPI_Transmit>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000180 	.word	0x20000180

08001738 <SPI_TxBuffer>:
>>>>>>> Stashed changes

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
<<<<<<< Updated upstream
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	b29a      	uxth	r2, r3
 8001828:	230a      	movs	r3, #10
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <SPI_TxBuffer+0x24>)
 800182e:	f003 fa3c 	bl	8004caa <HAL_SPI_Transmit>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000114 	.word	0x20000114

08001840 <SPI_Rx>:
=======
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	b29a      	uxth	r2, r3
 8001748:	230a      	movs	r3, #10
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <SPI_TxBuffer+0x24>)
 800174e:	f002 ffea 	bl	8004726 <HAL_SPI_Transmit>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000180 	.word	0x20000180

08001760 <SPI_Rx>:
>>>>>>> Stashed changes

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
<<<<<<< Updated upstream
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001846:	1df9      	adds	r1, r7, #7
 8001848:	230a      	movs	r3, #10
 800184a:	2201      	movs	r2, #1
 800184c:	4803      	ldr	r0, [pc, #12]	@ (800185c <SPI_Rx+0x1c>)
 800184e:	f003 fb70 	bl	8004f32 <HAL_SPI_Receive>
  return retVal;
 8001852:	79fb      	ldrb	r3, [r7, #7]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000114 	.word	0x20000114

08001860 <SPI_RxBuffer>:
=======
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001766:	1df9      	adds	r1, r7, #7
 8001768:	230a      	movs	r3, #10
 800176a:	2201      	movs	r2, #1
 800176c:	4803      	ldr	r0, [pc, #12]	@ (800177c <SPI_Rx+0x1c>)
 800176e:	f003 f91e 	bl	80049ae <HAL_SPI_Receive>
  return retVal;
 8001772:	79fb      	ldrb	r3, [r7, #7]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000180 	.word	0x20000180

08001780 <SPI_RxBuffer>:
>>>>>>> Stashed changes

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
<<<<<<< Updated upstream
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	b29a      	uxth	r2, r3
 8001870:	230a      	movs	r3, #10
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <SPI_RxBuffer+0x24>)
 8001876:	f003 fb5c 	bl	8004f32 <HAL_SPI_Receive>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000114 	.word	0x20000114

08001888 <HAL_MspInit>:
=======
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	b29a      	uxth	r2, r3
 8001790:	230a      	movs	r3, #10
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <SPI_RxBuffer+0x24>)
 8001796:	f003 f90a 	bl	80049ae <HAL_SPI_Receive>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000180 	.word	0x20000180

080017a8 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
=======
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <HAL_MspInit+0x4c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c6:	2007      	movs	r0, #7
 80018c8:	f001 f8b4 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>
=======
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e6:	2007      	movs	r0, #7
 80017e8:	f000 fe2e 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_ADC_MspInit>:
=======
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_ADC_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a40      	ldr	r2, [pc, #256]	@ (80019f8 <HAL_ADC_MspInit+0x120>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d179      	bne.n	80019ee <HAL_ADC_MspInit+0x116>
=======
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3b      	ldr	r2, [pc, #236]	@ (8001904 <HAL_ADC_MspInit+0x10c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d170      	bne.n	80018fc <HAL_ADC_MspInit+0x104>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< Updated upstream
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b3f      	ldr	r3, [pc, #252]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a3e      	ldr	r2, [pc, #248]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b3c      	ldr	r3, [pc, #240]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a37      	ldr	r2, [pc, #220]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a30      	ldr	r2, [pc, #192]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_ADC_MspInit+0x124>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
=======
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b3a      	ldr	r3, [pc, #232]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a39      	ldr	r2, [pc, #228]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b37      	ldr	r3, [pc, #220]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b33      	ldr	r3, [pc, #204]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a32      	ldr	r2, [pc, #200]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b2c      	ldr	r3, [pc, #176]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a2b      	ldr	r2, [pc, #172]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <HAL_ADC_MspInit+0x110>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
<<<<<<< Updated upstream
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800194e:	2302      	movs	r3, #2
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4827      	ldr	r0, [pc, #156]	@ (8001a00 <HAL_ADC_MspInit+0x128>)
 8001962:	f001 fc19 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001966:	2330      	movs	r3, #48	@ 0x30
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4822      	ldr	r0, [pc, #136]	@ (8001a04 <HAL_ADC_MspInit+0x12c>)
 800197a:	f001 fc0d 	bl	8003198 <HAL_GPIO_Init>
=======
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800186e:	2312      	movs	r3, #18
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001872:	2303      	movs	r3, #3
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4822      	ldr	r0, [pc, #136]	@ (800190c <HAL_ADC_MspInit+0x114>)
 8001882:	f001 f993 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001886:	2310      	movs	r3, #16
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	481d      	ldr	r0, [pc, #116]	@ (8001910 <HAL_ADC_MspInit+0x118>)
 800189a:	f001 f987 	bl	8002bac <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< Updated upstream
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 8001980:	4a22      	ldr	r2, [pc, #136]	@ (8001a0c <HAL_ADC_MspInit+0x134>)
 8001982:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800198a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 8001998:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019c2:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019c4:	f001 f878 	bl	8002ab8 <HAL_DMA_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80019ce:	f7ff fbdb 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_ADC_MspInit+0x130>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2012      	movs	r0, #18
 80019e4:	f001 f831 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019e8:	2012      	movs	r0, #18
 80019ea:	f001 f84a 	bl	8002a82 <HAL_NVIC_EnableIRQ>
=======
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <HAL_ADC_MspInit+0x120>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018e2:	f000 fdf3 	bl	80024cc <HAL_DMA_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80018ec:	f7ff fd68 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80018f6:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_ADC_MspInit+0x11c>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6393      	str	r3, [r2, #56]	@ 0x38
>>>>>>> Stashed changes

    /* USER CODE END ADC1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40012000 	.word	0x40012000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020800 	.word	0x40020800
 8001a08:	20000214 	.word	0x20000214
 8001a0c:	40026410 	.word	0x40026410

08001a10 <HAL_I2S_MspInit>:
=======
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	@ 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020800 	.word	0x40020800
 8001914:	20000078 	.word	0x20000078
 8001918:	40026410 	.word	0x40026410

0800191c <HAL_I2S_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
<<<<<<< Updated upstream
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	@ 0x38
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b34 <HAL_I2S_MspInit+0x124>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d174      	bne.n	8001b2c <HAL_I2S_MspInit+0x11c>
=======
 800191c:	b580      	push	{r7, lr}
 800191e:	b08e      	sub	sp, #56	@ 0x38
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3d      	ldr	r2, [pc, #244]	@ (8001a40 <HAL_I2S_MspInit+0x124>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d174      	bne.n	8001a38 <HAL_I2S_MspInit+0x11c>
>>>>>>> Stashed changes

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
<<<<<<< Updated upstream
 8001a42:	2301      	movs	r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a46:	23c0      	movs	r3, #192	@ 0xc0
 8001a48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 ff52 	bl	80048fc <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001a5e:	f7ff fb93 	bl	8001188 <Error_Handler>
=======
 800194e:	2301      	movs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001952:	23c0      	movs	r3, #192	@ 0xc0
 8001954:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fd0a 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800196a:	f7ff fd29 	bl	80013c0 <Error_Handler>
>>>>>>> Stashed changes
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
<<<<<<< Updated upstream
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b34      	ldr	r3, [pc, #208]	@ (8001b38 <HAL_I2S_MspInit+0x128>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a33      	ldr	r2, [pc, #204]	@ (8001b38 <HAL_I2S_MspInit+0x128>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <HAL_I2S_MspInit+0x128>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_I2S_MspInit+0x128>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <HAL_I2S_MspInit+0x128>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <HAL_I2S_MspInit+0x128>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
=======
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_I2S_MspInit+0x128>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <HAL_I2S_MspInit+0x128>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197c:	6413      	str	r3, [r2, #64]	@ 0x40
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_I2S_MspInit+0x128>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <HAL_I2S_MspInit+0x128>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a2c      	ldr	r2, [pc, #176]	@ (8001a44 <HAL_I2S_MspInit+0x128>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <HAL_I2S_MspInit+0x128>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
<<<<<<< Updated upstream
 8001a9a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aac:	2305      	movs	r3, #5
 8001aae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4821      	ldr	r0, [pc, #132]	@ (8001b3c <HAL_I2S_MspInit+0x12c>)
 8001ab8:	f001 fb6e 	bl	8003198 <HAL_GPIO_Init>
=======
 80019a6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b8:	2305      	movs	r3, #5
 80019ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4821      	ldr	r0, [pc, #132]	@ (8001a48 <HAL_I2S_MspInit+0x12c>)
 80019c4:	f001 f8f2 	bl	8002bac <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
<<<<<<< Updated upstream
 8001abc:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <HAL_I2S_MspInit+0x134>)
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001ad6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ada:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ae2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001afa:	2204      	movs	r2, #4
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b10:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001b12:	f000 ffd1 	bl	8002ab8 <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001b1c:	f7ff fb34 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001b24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b26:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <HAL_I2S_MspInit+0x130>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6393      	str	r3, [r2, #56]	@ 0x38
=======
 80019c8:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019ca:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <HAL_I2S_MspInit+0x134>)
 80019cc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019d6:	2240      	movs	r2, #64	@ 0x40
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019fe:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a06:	2204      	movs	r2, #4
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a1c:	480b      	ldr	r0, [pc, #44]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a1e:	f000 fd55 	bl	80024cc <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001a28:	f7ff fcca 	bl	80013c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a32:	4a06      	ldr	r2, [pc, #24]	@ (8001a4c <HAL_I2S_MspInit+0x130>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6393      	str	r3, [r2, #56]	@ 0x38
>>>>>>> Stashed changes

    /* USER CODE END SPI2_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8001b2c:	bf00      	nop
 8001b2e:	3738      	adds	r7, #56	@ 0x38
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40003800 	.word	0x40003800
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	2000016c 	.word	0x2000016c
 8001b44:	40026070 	.word	0x40026070

08001b48 <HAL_SPI_MspInit>:
=======
 8001a38:	bf00      	nop
 8001a3a:	3738      	adds	r7, #56	@ 0x38
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40003800 	.word	0x40003800
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	20000120 	.word	0x20000120
 8001a50:	40026070 	.word	0x40026070

08001a54 <HAL_SPI_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< Updated upstream
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	@ (8001bcc <HAL_SPI_MspInit+0x84>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d12c      	bne.n	8001bc4 <HAL_SPI_MspInit+0x7c>
=======
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_SPI_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12c      	bne.n	8001ad0 <HAL_SPI_MspInit+0x7c>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
<<<<<<< Updated upstream
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <HAL_SPI_MspInit+0x88>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a17      	ldr	r2, [pc, #92]	@ (8001bd0 <HAL_SPI_MspInit+0x88>)
 8001b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_SPI_MspInit+0x88>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <HAL_SPI_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a10      	ldr	r2, [pc, #64]	@ (8001bd0 <HAL_SPI_MspInit+0x88>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <HAL_SPI_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
=======
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_SPI_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_SPI_MspInit+0x88>)
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_SPI_MspInit+0x88>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_SPI_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_SPI_MspInit+0x88>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_SPI_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< Updated upstream
 8001ba2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <HAL_SPI_MspInit+0x8c>)
 8001bc0:	f001 faea 	bl	8003198 <HAL_GPIO_Init>
=======
 8001aae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <HAL_SPI_MspInit+0x8c>)
 8001acc:	f001 f86e 	bl	8002bac <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* USER CODE END SPI3_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40003c00 	.word	0x40003c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020800 	.word	0x40020800

08001bd8 <HAL_TIM_Base_MspInit>:
=======
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	@ 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40003c00 	.word	0x40003c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020800 	.word	0x40020800

08001ae4 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <HAL_TIM_Base_MspInit+0x48>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d115      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x3e>
=======
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x2e>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< Updated upstream
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_TIM_Base_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <HAL_TIM_Base_MspInit+0x4c>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_TIM_Base_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	201d      	movs	r0, #29
 8001c0c:	f000 ff1d 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c10:	201d      	movs	r0, #29
 8001c12:	f000 ff36 	bl	8002a82 <HAL_NVIC_EnableIRQ>
=======
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes

    /* USER CODE END TIM3_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40023800 	.word	0x40023800

08001c28 <NMI_Handler>:
=======
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	@ (8001bac <HAL_UART_MspInit+0x84>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12b      	bne.n	8001ba2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_UART_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b82:	230c      	movs	r3, #12
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b92:	2307      	movs	r3, #7
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <HAL_UART_MspInit+0x8c>)
 8001b9e:	f001 f805 	bl	8002bac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40004400 	.word	0x40004400
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
=======
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <NMI_Handler+0x4>

08001c30 <HardFault_Handler>:
=======
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <NMI_Handler+0x4>

08001bc0 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
=======
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:
=======
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
=======
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <MemManage_Handler+0x4>

08001c40 <BusFault_Handler>:
=======
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <MemManage_Handler+0x4>

08001bd0 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
=======
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:
=======
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
=======
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c50 <SVC_Handler>:
=======
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
=======
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <DebugMon_Handler>:
=======
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
=======
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <PendSV_Handler>:
=======
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
=======
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:
=======
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
=======
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8001c7e:	f000 f8b9 	bl	8001df4 <HAL_IncTick>
=======
 8001c0e:	f000 f8a5 	bl	8001d5c <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <DMA1_Stream4_IRQHandler>:
=======
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <DMA1_Stream4_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
=======
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
<<<<<<< Updated upstream
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <DMA1_Stream4_IRQHandler+0x10>)
 8001c8e:	f001 f819 	bl	8002cc4 <HAL_DMA_IRQHandler>
=======
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Stream4_IRQHandler+0x10>)
 8001c1e:	f000 fd5b 	bl	80026d8 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
<<<<<<< Updated upstream
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000016c 	.word	0x2000016c

08001c9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <ADC_IRQHandler+0x10>)
 8001ca2:	f000 f92e 	bl	8001f02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000274 	.word	0x20000274

08001cb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <TIM3_IRQHandler+0x10>)
 8001cb6:	f003 fdf9 	bl	80058ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000cc 	.word	0x200000cc

08001cc4 <DMA2_Stream0_IRQHandler>:
=======
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000120 	.word	0x20000120

08001c2c <DMA2_Stream0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
=======
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< Updated upstream
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <DMA2_Stream0_IRQHandler+0x10>)
 8001cca:	f000 fffb 	bl	8002cc4 <HAL_DMA_IRQHandler>
=======
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA2_Stream0_IRQHandler+0x10>)
 8001c32:	f000 fd51 	bl	80026d8 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< Updated upstream
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000214 	.word	0x20000214

08001cd8 <SystemInit>:
=======
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000078 	.word	0x20000078

08001c40 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	@ (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <Reset_Handler>:
=======
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< Updated upstream
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d00:	f7ff ffea 	bl	8001cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	@ (8001d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f004 f959 	bl	8005fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7ff fb3f 	bl	80013b0 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d40:	080562d0 	.word	0x080562d0
  ldr r2, =_sbss
 8001d44:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d48:	200002c0 	.word	0x200002c0

08001d4c <DMA1_Stream0_IRQHandler>:
=======
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c68:	f7ff ffea 	bl	8001c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c6e:	490d      	ldr	r1, [pc, #52]	@ (8001ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c84:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f004 f871 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7fe ffef 	bl	8000c78 <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ca8:	08055ee0 	.word	0x08055ee0
  ldr r2, =_sbss
 8001cac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cb0:	200002b8 	.word	0x200002b8

08001cb4 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8001d4c:	e7fe      	b.n	8001d4c <DMA1_Stream0_IRQHandler>
	...

08001d50 <HAL_Init>:
=======
 8001cb4:	e7fe      	b.n	8001cb4 <ADC_IRQHandler>
	...

08001cb8 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <HAL_Init+0x40>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
=======
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <HAL_Init+0x40>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
=======
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <HAL_Init+0x40>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d76:	6013      	str	r3, [r2, #0]
=======
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cde:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 fe5b 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fd80 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_InitTick>:
=======
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 fbb1 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fd5c 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fe73 	bl	8002a9e <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
=======
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fbc9 	bl	80024b2 <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd0:	f000 fe3b 	bl	8002a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
=======
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 fb91 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	@ (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000008 	.word	0x20000008
 8001dec:	20000010 	.word	0x20000010
 8001df0:	2000000c 	.word	0x2000000c

08001df4 <HAL_IncTick>:
=======
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000008 	.word	0x20000008
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000010 	.word	0x20000010
 8001e18:	200002bc 	.word	0x200002bc

08001e1c <HAL_GetTick>:
=======
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	200002b4 	.word	0x200002b4

08001d84 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200002bc 	.word	0x200002bc

08001e34 <HAL_Delay>:
=======
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200002b4 	.word	0x200002b4

08001d9c <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff ffee 	bl	8001e1c <HAL_GetTick>
 8001e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e4c:	d005      	beq.n	8001e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_Delay+0x44>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5a:	bf00      	nop
 8001e5c:	f7ff ffde 	bl	8001e1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d8f7      	bhi.n	8001e5c <HAL_Delay+0x28>
  {
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000010 	.word	0x20000010

08001e7c <HAL_ADC_Init>:
=======
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e033      	b.n	8001efa <HAL_ADC_Init+0x7e>
=======
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e033      	b.n	8001e62 <HAL_ADC_Init+0x7e>
>>>>>>> Stashed changes
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< Updated upstream
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_ADC_Init+0x32>
=======
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_ADC_Init+0x32>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< Updated upstream
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fd1c 	bl	80018d8 <HAL_ADC_MspInit>
=======
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fcf8 	bl	80017f8 <HAL_ADC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< Updated upstream
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ec2:	f023 0302 	bic.w	r3, r3, #2
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< Updated upstream
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fb58 	bl	8002584 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eea:	e001      	b.n	8001ef0 <HAL_ADC_Init+0x74>
=======
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f93a 	bl	80020b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e52:	e001      	b.n	8001e58 <HAL_ADC_Init+0x74>
>>>>>>> Stashed changes
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< Updated upstream
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
=======
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d049      	beq.n	8001fcc <HAL_ADC_IRQHandler+0xca>
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d046      	beq.n	8001fcc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d12b      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d127      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d119      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0220 	bic.w	r2, r2, #32
 8001f96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7fe fe31 	bl	8000c24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0212 	mvn.w	r2, #18
 8001fca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d057      	beq.n	8002092 <HAL_ADC_IRQHandler+0x190>
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d054      	beq.n	8002092 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d139      	bne.n	8002082 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002026:	2b00      	cmp	r3, #0
 8002028:	d12b      	bne.n	8002082 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002034:	2b00      	cmp	r3, #0
 8002036:	d124      	bne.n	8002082 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11d      	bne.n	8002082 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d119      	bne.n	8002082 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800205c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fbfc 	bl	8002880 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 020c 	mvn.w	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d017      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x1d6>
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d014      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d10d      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f925 	bl	8002318 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0201 	mvn.w	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <HAL_ADC_IRQHandler+0x218>
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	f043 0202 	orr.w	r2, r3, #2
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0220 	mvn.w	r2, #32
 8002108:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f90e 	bl	800232c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0220 	mvn.w	r2, #32
 8002118:	601a      	str	r2, [r3, #0]
  }
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Start_DMA+0x1e>
 800213e:	2302      	movs	r3, #2
 8002140:	e0ce      	b.n	80022e0 <HAL_ADC_Start_DMA+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d018      	beq.n	800218a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002168:	4b5f      	ldr	r3, [pc, #380]	@ (80022e8 <HAL_ADC_Start_DMA+0x1c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5f      	ldr	r2, [pc, #380]	@ (80022ec <HAL_ADC_Start_DMA+0x1c8>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9a      	lsrs	r2, r3, #18
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3b01      	subs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002198:	d107      	bne.n	80021aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	f040 8086 	bne.w	80022c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f023 0206 	bic.w	r2, r3, #6
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
 8002206:	e002      	b.n	800220e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002216:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <HAL_ADC_Start_DMA+0x1cc>)
 8002218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221e:	4a35      	ldr	r2, [pc, #212]	@ (80022f4 <HAL_ADC_Start_DMA+0x1d0>)
 8002220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002226:	4a34      	ldr	r2, [pc, #208]	@ (80022f8 <HAL_ADC_Start_DMA+0x1d4>)
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	4a33      	ldr	r2, [pc, #204]	@ (80022fc <HAL_ADC_Start_DMA+0x1d8>)
 8002230:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800223a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800224a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800225a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	334c      	adds	r3, #76	@ 0x4c
 8002266:	4619      	mov	r1, r3
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f000 fcd2 	bl	8002c14 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d129      	bne.n	80022de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e020      	b.n	80022de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_ADC_Start_DMA+0x1dc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11b      	bne.n	80022de <HAL_ADC_Start_DMA+0x1ba>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d114      	bne.n	80022de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e00b      	b.n	80022de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000008 	.word	0x20000008
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	40012300 	.word	0x40012300
 80022f4:	0800277d 	.word	0x0800277d
 80022f8:	08002837 	.word	0x08002837
 80022fc:	08002853 	.word	0x08002853
 8002300:	40012000 	.word	0x40012000

08002304 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ConfigChannel>:
=======
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< Updated upstream
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
=======
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e105      	b.n	8002568 <HAL_ADC_ConfigChannel+0x228>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b09      	cmp	r3, #9
 800236a:	d925      	bls.n	80023b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4403      	add	r3, r0
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e022      	b.n	80023fe <HAL_ADC_ConfigChannel+0xbe>
=======
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e105      	b.n	8002094 <HAL_ADC_ConfigChannel+0x228>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d925      	bls.n	8001ee4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68d9      	ldr	r1, [r3, #12]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1e      	subs	r3, #30
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68d9      	ldr	r1, [r3, #12]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4403      	add	r3, r0
 8001ed6:	3b1e      	subs	r3, #30
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	e022      	b.n	8001f2a <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> Stashed changes
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< Updated upstream
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	2207      	movs	r2, #7
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4403      	add	r3, r0
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	611a      	str	r2, [r3, #16]
=======
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2207      	movs	r2, #7
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6919      	ldr	r1, [r3, #16]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4403      	add	r3, r0
 8001f20:	409a      	lsls	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< Updated upstream
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d824      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b05      	subs	r3, #5
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b05      	subs	r3, #5
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34
 800244e:	e04c      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d824      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	@ 0x23
 800246a:	221f      	movs	r2, #31
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	@ 0x23
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a0:	e023      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
=======
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d824      	bhi.n	8001f7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b05      	subs	r3, #5
 8001f44:	221f      	movs	r2, #31
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	400a      	ands	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3b05      	subs	r3, #5
 8001f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7a:	e04c      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d824      	bhi.n	8001fce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3b23      	subs	r3, #35	@ 0x23
 8001f96:	221f      	movs	r2, #31
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b23      	subs	r3, #35	@ 0x23
 8001fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fcc:	e023      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> Stashed changes
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< Updated upstream
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b41      	subs	r3, #65	@ 0x41
 80024b4:	221f      	movs	r2, #31
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b41      	subs	r3, #65	@ 0x41
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3b41      	subs	r3, #65	@ 0x41
 8001fe0:	221f      	movs	r2, #31
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	400a      	ands	r2, r1
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b41      	subs	r3, #65	@ 0x41
 800200a:	fa00 f203 	lsl.w	r2, r0, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 80024ea:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <HAL_ADC_ConfigChannel+0x234>)
 80024ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <HAL_ADC_ConfigChannel+0x238>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d109      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1cc>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d105      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1cc>
=======
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_ADC_ConfigChannel+0x234>)
 8002018:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a21      	ldr	r2, [pc, #132]	@ (80020a4 <HAL_ADC_ConfigChannel+0x238>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d109      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1cc>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b12      	cmp	r3, #18
 800202a:	d105      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> Stashed changes
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< Updated upstream
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
=======
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< Updated upstream
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <HAL_ADC_ConfigChannel+0x238>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d123      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d003      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x1e6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b11      	cmp	r3, #17
 8002524:	d11b      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
=======
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_ADC_ConfigChannel+0x238>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d123      	bne.n	800208a <HAL_ADC_ConfigChannel+0x21e>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d003      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x1e6>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b11      	cmp	r3, #17
 8002050:	d11b      	bne.n	800208a <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> Stashed changes
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< Updated upstream
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d111      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
=======
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b10      	cmp	r3, #16
 8002064:	d111      	bne.n	800208a <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> Stashed changes
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< Updated upstream
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_ADC_ConfigChannel+0x23c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a10      	ldr	r2, [pc, #64]	@ (8002580 <HAL_ADC_ConfigChannel+0x240>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	0c9a      	lsrs	r2, r3, #18
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002550:	e002      	b.n	8002558 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3b01      	subs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x212>
=======
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_ADC_ConfigChannel+0x23c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <HAL_ADC_ConfigChannel+0x240>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9a      	lsrs	r2, r3, #18
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800207c:	e002      	b.n	8002084 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3b01      	subs	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f9      	bne.n	800207e <HAL_ADC_ConfigChannel+0x212>
>>>>>>> Stashed changes
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012300 	.word	0x40012300
 8002578:	40012000 	.word	0x40012000
 800257c:	20000008 	.word	0x20000008
 8002580:	431bde83 	.word	0x431bde83

08002584 <ADC_Init>:
=======
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40012300 	.word	0x40012300
 80020a4:	40012000 	.word	0x40012000
 80020a8:	20000000 	.word	0x20000000
 80020ac:	431bde83 	.word	0x431bde83

080020b0 <ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
=======
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 800258c:	4b79      	ldr	r3, [pc, #484]	@ (8002774 <ADC_Init+0x1f0>)
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
=======
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <ADC_Init+0x1f0>)
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800212a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< Updated upstream
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002616:	4a58      	ldr	r2, [pc, #352]	@ (8002778 <ADC_Init+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800262a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e00f      	b.n	8002682 <ADC_Init+0xfe>
=======
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	4a58      	ldr	r2, [pc, #352]	@ (80022a4 <ADC_Init+0x1f4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	e00f      	b.n	80021ae <ADC_Init+0xfe>
>>>>>>> Stashed changes
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< Updated upstream
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002680:	609a      	str	r2, [r3, #8]
=======
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021ac:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< Updated upstream
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
 800269c:	005a      	lsls	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <ADC_Init+0x164>
=======
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0202 	bic.w	r2, r2, #2
 80021bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7e1b      	ldrb	r3, [r3, #24]
 80021c8:	005a      	lsls	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <ADC_Init+0x164>
>>>>>>> Stashed changes
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< Updated upstream
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	035a      	lsls	r2, r3, #13
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e007      	b.n	80026f8 <ADC_Init+0x174>
=======
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	3b01      	subs	r3, #1
 8002208:	035a      	lsls	r2, r3, #13
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e007      	b.n	8002224 <ADC_Init+0x174>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< Updated upstream
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f6:	605a      	str	r2, [r3, #4]
=======
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002222:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< Updated upstream
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002706:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	3b01      	subs	r3, #1
 8002714:	051a      	lsls	r2, r3, #20
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800273a:	025a      	lsls	r2, r3, #9
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	029a      	lsls	r2, r3, #10
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40012300 	.word	0x40012300
 8002778:	0f000001 	.word	0x0f000001

0800277c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002792:	2b00      	cmp	r3, #0
 8002794:	d13c      	bne.n	8002810 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d12b      	bne.n	8002808 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d127      	bne.n	8002808 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d119      	bne.n	8002808 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0220 	bic.w	r2, r2, #32
 80027e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7fe fa0b 	bl	8000c24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800280e:	e00e      	b.n	800282e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff fd85 	bl	800232c <HAL_ADC_ErrorCallback>
}
 8002822:	e004      	b.n	800282e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fd5d 	bl	8002304 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2240      	movs	r2, #64	@ 0x40
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff fd5a 	bl	800232c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <__NVIC_SetPriorityGrouping>:
=======
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	3b01      	subs	r3, #1
 8002240:	051a      	lsls	r2, r3, #20
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002266:	025a      	lsls	r2, r3, #9
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	029a      	lsls	r2, r3, #10
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40012300 	.word	0x40012300
 80022a4:	0f000001 	.word	0x0f000001

080022a8 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c6:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60d3      	str	r3, [r2, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_GetPriorityGrouping>:
=======
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
=======
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	@ (8002930 <__NVIC_EnableIRQ+0x38>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
=======
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	@ (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	@ (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	@ (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
=======
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
=======
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	@ 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
=======
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a06:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a14:	f7ff ff8e 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
=======
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff29 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
=======
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff29 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
=======
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8002a5c:	f7ff ff3e 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f7ff ff8e 	bl	8002988 <NVIC_EncodePriority>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff5d 	bl	8002934 <__NVIC_SetPriority>
}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_EnableIRQ>:
=======
 8002470:	f7ff ff3e 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	71fb      	strb	r3, [r7, #7]
=======
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff31 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_SYSTICK_Config>:
=======
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff31 	bl	800230c <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffa2 	bl	80029f0 <SysTick_Config>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_DMA_Init>:
=======
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff f9aa 	bl	8001e1c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]
=======
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fc54 	bl	8001d84 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e099      	b.n	8002c08 <HAL_DMA_Init+0x150>
=======
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e099      	b.n	800261c <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< Updated upstream
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af4:	e00f      	b.n	8002b16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002af6:	f7ff f991 	bl	8001e1c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d908      	bls.n	8002b16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e078      	b.n	8002c08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e8      	bne.n	8002af6 <HAL_DMA_Init+0x3e>
=======
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002508:	e00f      	b.n	800252a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800250a:	f7ff fc3b 	bl	8001d84 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b05      	cmp	r3, #5
 8002516:	d908      	bls.n	800252a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e078      	b.n	800261c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e8      	bne.n	800250a <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4b38      	ldr	r3, [pc, #224]	@ (8002c10 <HAL_DMA_Init+0x158>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
=======
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <HAL_DMA_Init+0x158>)
 8002544:	4013      	ands	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d107      	bne.n	8002b80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
=======
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	2b04      	cmp	r3, #4
 8002582:	d107      	bne.n	8002594 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	4313      	orrs	r3, r2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f023 0307 	bic.w	r3, r3, #7
 8002b96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d117      	bne.n	8002bda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
=======
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d117      	bne.n	80025ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa6f 	bl	80030a0 <DMA_CheckFifoParam>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e016      	b.n	8002c08 <HAL_DMA_Init+0x150>
=======
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fa6f 	bl	8002ab4 <DMA_CheckFifoParam>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025ea:	2301      	movs	r3, #1
 80025ec:	e016      	b.n	800261c <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	615a      	str	r2, [r3, #20]
=======
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa26 	bl	8003034 <DMA_CalcBaseAndBitshift>
 8002be8:	4603      	mov	r3, r0
 8002bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	223f      	movs	r2, #63	@ 0x3f
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	f010803f 	.word	0xf010803f

08002c14 <HAL_DMA_Start_IT>:
=======
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa26 	bl	8002a48 <DMA_CalcBaseAndBitshift>
 80025fc:	4603      	mov	r3, r0
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	223f      	movs	r2, #63	@ 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	f010803f 	.word	0xf010803f

08002628 <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	613b      	str	r3, [r7, #16]
=======
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_DMA_Start_IT+0x26>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e040      	b.n	8002cbc <HAL_DMA_Start_IT+0xa8>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d12f      	bne.n	8002cae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9b8 	bl	8002fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	223f      	movs	r2, #63	@ 0x3f
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0216 	orr.w	r2, r2, #22
 8002c82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0208 	orr.w	r2, r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
=======
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_DMA_Start_IT+0x26>
 800264a:	2302      	movs	r3, #2
 800264c:	e040      	b.n	80026d0 <HAL_DMA_Start_IT+0xa8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d12f      	bne.n	80026c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f9b8 	bl	80029ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	223f      	movs	r2, #63	@ 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0216 	orr.w	r2, r2, #22
 8002696:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e005      	b.n	8002cba <HAL_DMA_Start_IT+0xa6>
=======
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e005      	b.n	80026ce <HAL_DMA_Start_IT+0xa6>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< Updated upstream
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_IRQHandler>:
=======
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cd0:	4b8e      	ldr	r3, [pc, #568]	@ (8002f0c <HAL_DMA_IRQHandler+0x248>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002f10 <HAL_DMA_IRQHandler+0x24c>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	2208      	movs	r2, #8
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01a      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002920 <HAL_DMA_IRQHandler+0x248>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002924 <HAL_DMA_IRQHandler+0x24c>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2208      	movs	r2, #8
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0204 	bic.w	r2, r2, #4
 800272a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	2208      	movs	r2, #8
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d34:	2201      	movs	r2, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	2201      	movs	r2, #1
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5e:	f043 0202 	orr.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002766:	2201      	movs	r2, #1
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2204      	movs	r2, #4
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	2204      	movs	r2, #4
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	2204      	movs	r2, #4
 800279e:	409a      	lsls	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	2210      	movs	r2, #16
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d043      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03c      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d018      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d108      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d024      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
 8002df2:	e01f      	b.n	8002e34 <HAL_DMA_IRQHandler+0x170>
=======
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	2210      	movs	r2, #16
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d043      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03c      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d2:	2210      	movs	r2, #16
 80027d4:	409a      	lsls	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d018      	beq.n	800281a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d108      	bne.n	8002808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
 8002806:	e01f      	b.n	8002848 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
 8002e04:	e016      	b.n	8002e34 <HAL_DMA_IRQHandler+0x170>
=======
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e016      	b.n	8002848 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0208 	bic.w	r2, r2, #8
 8002e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
=======
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0208 	bic.w	r2, r2, #8
 8002836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e38:	2220      	movs	r2, #32
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 808f 	beq.w	8002f64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8087 	beq.w	8002f64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d136      	bne.n	8002edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0216 	bic.w	r2, r2, #22
 8002e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x1da>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0208 	bic.w	r2, r2, #8
 8002eac:	601a      	str	r2, [r3, #0]
=======
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2220      	movs	r2, #32
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 808f 	beq.w	8002978 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8087 	beq.w	8002978 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	2220      	movs	r2, #32
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b05      	cmp	r3, #5
 8002880:	d136      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0216 	bic.w	r2, r2, #22
 8002890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x1da>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0208 	bic.w	r2, r2, #8
 80028c0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	223f      	movs	r2, #63	@ 0x3f
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d07e      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
        }
        return;
 8002eda:	e079      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
 8002f08:	e02c      	b.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	1b4e81b5 	.word	0x1b4e81b5
=======
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	223f      	movs	r2, #63	@ 0x3f
 80028c8:	409a      	lsls	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d07e      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
        }
        return;
 80028ee:	e079      	b.n	80029e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10d      	bne.n	8002928 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002910:	2b00      	cmp	r3, #0
 8002912:	d031      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
 800291c:	e02c      	b.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000
 8002924:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d023      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	e01e      	b.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
=======
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
 8002938:	e01e      	b.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10f      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0210 	bic.w	r2, r2, #16
 8002f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
=======
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0210 	bic.w	r2, r2, #16
 8002956:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d032      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
=======
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297c:	2b00      	cmp	r3, #0
 800297e:	d032      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2205      	movs	r2, #5
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d307      	bcc.n	8002fac <HAL_DMA_IRQHandler+0x2e8>
=======
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d307      	bcc.n	80029c0 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x2cc>
 8002faa:	e000      	b.n	8002fae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
 8002fce:	e000      	b.n	8002fd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fd0:	bf00      	nop
    }
  }
}
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <DMA_SetConfig>:
=======
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f2      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x2cc>
 80029be:	e000      	b.n	80029c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
 80029e2:	e000      	b.n	80029e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029e4:	bf00      	nop
    }
  }
}
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	d108      	bne.n	8003018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
=======
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b40      	cmp	r3, #64	@ 0x40
 8002a18:	d108      	bne.n	8002a2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8003016:	e007      	b.n	8003028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DMA_CalcBaseAndBitshift>:
=======
 8002a2a:	e007      	b.n	8002a3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3b10      	subs	r3, #16
 8003044:	4a14      	ldr	r2, [pc, #80]	@ (8003098 <DMA_CalcBaseAndBitshift+0x64>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
=======
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	3b10      	subs	r3, #16
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <DMA_CalcBaseAndBitshift+0x64>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <DMA_CalcBaseAndBitshift+0x68>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d909      	bls.n	8003076 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	1d1a      	adds	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	@ 0x58
 8003074:	e007      	b.n	8003086 <DMA_CalcBaseAndBitshift+0x52>
=======
 8002a62:	4a13      	ldr	r2, [pc, #76]	@ (8002ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d909      	bls.n	8002a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	1d1a      	adds	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a88:	e007      	b.n	8002a9a <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	aaaaaaab 	.word	0xaaaaaaab
 800309c:	080562b8 	.word	0x080562b8

080030a0 <DMA_CheckFifoParam>:
=======
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	aaaaaaab 	.word	0xaaaaaaab
 8002ab0:	08055ec8 	.word	0x08055ec8

08002ab4 <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11f      	bne.n	80030fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d856      	bhi.n	800316e <DMA_CheckFifoParam+0xce>
 80030c0:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <DMA_CheckFifoParam+0x28>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030eb 	.word	0x080030eb
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	0800316f 	.word	0x0800316f
=======
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11f      	bne.n	8002b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d856      	bhi.n	8002b82 <DMA_CheckFifoParam+0xce>
 8002ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8002adc <DMA_CheckFifoParam+0x28>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002aff 	.word	0x08002aff
 8002ae4:	08002aed 	.word	0x08002aed
 8002ae8:	08002b83 	.word	0x08002b83
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d046      	beq.n	8003172 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e8:	e043      	b.n	8003172 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030f2:	d140      	bne.n	8003176 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e03d      	b.n	8003176 <DMA_CheckFifoParam+0xd6>
=======
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d046      	beq.n	8002b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afc:	e043      	b.n	8002b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b06:	d140      	bne.n	8002b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e03d      	b.n	8002b8a <DMA_CheckFifoParam+0xd6>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003102:	d121      	bne.n	8003148 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d837      	bhi.n	800317a <DMA_CheckFifoParam+0xda>
 800310a:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <DMA_CheckFifoParam+0x70>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003121 	.word	0x08003121
 8003114:	08003127 	.word	0x08003127
 8003118:	08003121 	.word	0x08003121
 800311c:	08003139 	.word	0x08003139
=======
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b16:	d121      	bne.n	8002b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d837      	bhi.n	8002b8e <DMA_CheckFifoParam+0xda>
 8002b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b24 <DMA_CheckFifoParam+0x70>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b3b 	.word	0x08002b3b
 8002b2c:	08002b35 	.word	0x08002b35
 8002b30:	08002b4d 	.word	0x08002b4d
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e030      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d025      	beq.n	800317e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003136:	e022      	b.n	800317e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003140:	d11f      	bne.n	8003182 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003146:	e01c      	b.n	8003182 <DMA_CheckFifoParam+0xe2>
=======
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e030      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d025      	beq.n	8002b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e022      	b.n	8002b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b54:	d11f      	bne.n	8002b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b5a:	e01c      	b.n	8002b96 <DMA_CheckFifoParam+0xe2>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d903      	bls.n	8003156 <DMA_CheckFifoParam+0xb6>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d003      	beq.n	800315c <DMA_CheckFifoParam+0xbc>
=======
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d903      	bls.n	8002b6a <DMA_CheckFifoParam+0xb6>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d003      	beq.n	8002b70 <DMA_CheckFifoParam+0xbc>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 8003154:	e018      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      break;
 800315a:	e015      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e00b      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 800316e:	bf00      	nop
 8003170:	e00a      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 8003172:	bf00      	nop
 8003174:	e008      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
 8003178:	e006      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
 800317c:	e004      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;   
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
=======
 8002b68:	e018      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6e:	e015      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e00b      	b.n	8002b9a <DMA_CheckFifoParam+0xe6>
      break;
 8002b82:	bf00      	nop
 8002b84:	e00a      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e008      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e006      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e004      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
 8002b94:	e002      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop

08003198 <HAL_GPIO_Init>:
=======
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
=======
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	@ 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e159      	b.n	8003468 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 8148 	bne.w	8003462 <HAL_GPIO_Init+0x2ca>
=======
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e159      	b.n	8002e7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f040 8148 	bne.w	8002e76 <HAL_GPIO_Init+0x2ca>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< Updated upstream
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d005      	beq.n	80031ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d130      	bne.n	800324c <HAL_GPIO_Init+0xb4>
=======
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d005      	beq.n	8002bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d130      	bne.n	8002c60 <HAL_GPIO_Init+0xb4>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003220:	2201      	movs	r2, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 0201 	and.w	r2, r3, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d017      	beq.n	8003288 <HAL_GPIO_Init+0xf0>
=======
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 0201 	and.w	r2, r3, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d017      	beq.n	8002c9c <HAL_GPIO_Init+0xf0>
>>>>>>> Stashed changes
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	60da      	str	r2, [r3, #12]
=======
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d123      	bne.n	80032dc <HAL_GPIO_Init+0x144>
=======
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d123      	bne.n	8002cf0 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	69b9      	ldr	r1, [r7, #24]
 80032d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	08da      	lsrs	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]
=======
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< Updated upstream
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80a2 	beq.w	8003462 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b57      	ldr	r3, [pc, #348]	@ (8003480 <HAL_GPIO_Init+0x2e8>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	4a56      	ldr	r2, [pc, #344]	@ (8003480 <HAL_GPIO_Init+0x2e8>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800332c:	6453      	str	r3, [r2, #68]	@ 0x44
 800332e:	4b54      	ldr	r3, [pc, #336]	@ (8003480 <HAL_GPIO_Init+0x2e8>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333a:	4a52      	ldr	r2, [pc, #328]	@ (8003484 <HAL_GPIO_Init+0x2ec>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a49      	ldr	r2, [pc, #292]	@ (8003488 <HAL_GPIO_Init+0x2f0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_GPIO_Init+0x202>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a48      	ldr	r2, [pc, #288]	@ (800348c <HAL_GPIO_Init+0x2f4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x1fe>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a47      	ldr	r2, [pc, #284]	@ (8003490 <HAL_GPIO_Init+0x2f8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x1fa>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a46      	ldr	r2, [pc, #280]	@ (8003494 <HAL_GPIO_Init+0x2fc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x1f6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a45      	ldr	r2, [pc, #276]	@ (8003498 <HAL_GPIO_Init+0x300>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x1f2>
 8003386:	2304      	movs	r3, #4
 8003388:	e008      	b.n	800339c <HAL_GPIO_Init+0x204>
 800338a:	2307      	movs	r3, #7
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x204>
 800338e:	2303      	movs	r3, #3
 8003390:	e004      	b.n	800339c <HAL_GPIO_Init+0x204>
 8003392:	2302      	movs	r3, #2
 8003394:	e002      	b.n	800339c <HAL_GPIO_Init+0x204>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x204>
 800339a:	2300      	movs	r3, #0
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	4093      	lsls	r3, r2
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ac:	4935      	ldr	r1, [pc, #212]	@ (8003484 <HAL_GPIO_Init+0x2ec>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <HAL_GPIO_Init+0x304>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033de:	4a2f      	ldr	r2, [pc, #188]	@ (800349c <HAL_GPIO_Init+0x304>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e4:	4b2d      	ldr	r3, [pc, #180]	@ (800349c <HAL_GPIO_Init+0x304>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003408:	4a24      	ldr	r2, [pc, #144]	@ (800349c <HAL_GPIO_Init+0x304>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340e:	4b23      	ldr	r3, [pc, #140]	@ (800349c <HAL_GPIO_Init+0x304>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003432:	4a1a      	ldr	r2, [pc, #104]	@ (800349c <HAL_GPIO_Init+0x304>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003438:	4b18      	ldr	r3, [pc, #96]	@ (800349c <HAL_GPIO_Init+0x304>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345c:	4a0f      	ldr	r2, [pc, #60]	@ (800349c <HAL_GPIO_Init+0x304>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	f67f aea2 	bls.w	80031b4 <HAL_GPIO_Init+0x1c>
=======
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80a2 	beq.w	8002e76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b57      	ldr	r3, [pc, #348]	@ (8002e94 <HAL_GPIO_Init+0x2e8>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a56      	ldr	r2, [pc, #344]	@ (8002e94 <HAL_GPIO_Init+0x2e8>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b54      	ldr	r3, [pc, #336]	@ (8002e94 <HAL_GPIO_Init+0x2e8>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4e:	4a52      	ldr	r2, [pc, #328]	@ (8002e98 <HAL_GPIO_Init+0x2ec>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a49      	ldr	r2, [pc, #292]	@ (8002e9c <HAL_GPIO_Init+0x2f0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_Init+0x202>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a48      	ldr	r2, [pc, #288]	@ (8002ea0 <HAL_GPIO_Init+0x2f4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x1fe>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a47      	ldr	r2, [pc, #284]	@ (8002ea4 <HAL_GPIO_Init+0x2f8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x1fa>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a46      	ldr	r2, [pc, #280]	@ (8002ea8 <HAL_GPIO_Init+0x2fc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x1f6>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a45      	ldr	r2, [pc, #276]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x1f2>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	e008      	b.n	8002db0 <HAL_GPIO_Init+0x204>
 8002d9e:	2307      	movs	r3, #7
 8002da0:	e006      	b.n	8002db0 <HAL_GPIO_Init+0x204>
 8002da2:	2303      	movs	r3, #3
 8002da4:	e004      	b.n	8002db0 <HAL_GPIO_Init+0x204>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_Init+0x204>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_GPIO_Init+0x204>
 8002dae:	2300      	movs	r3, #0
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f002 0203 	and.w	r2, r2, #3
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	4093      	lsls	r3, r2
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc0:	4935      	ldr	r1, [pc, #212]	@ (8002e98 <HAL_GPIO_Init+0x2ec>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dce:	4b38      	ldr	r3, [pc, #224]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df2:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df8:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e1c:	4a24      	ldr	r2, [pc, #144]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e22:	4b23      	ldr	r3, [pc, #140]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e46:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e4c:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e70:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	f67f aea2 	bls.w	8002bc8 <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40013800 	.word	0x40013800
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400
 8003490:	40020800 	.word	0x40020800
 8003494:	40020c00 	.word	0x40020c00
 8003498:	40021000 	.word	0x40021000
 800349c:	40013c00 	.word	0x40013c00

080034a0 <HAL_GPIO_ReadPin>:
=======
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40020800 	.word	0x40020800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
=======
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< Updated upstream
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e001      	b.n	80034c2 <HAL_GPIO_ReadPin+0x22>
=======
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e001      	b.n	8002ed6 <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_GPIO_WritePin>:
=======
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
=======
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 80034e0:	787b      	ldrb	r3, [r7, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
=======
 8002ef4:	787b      	ldrb	r3, [r7, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 80034ec:	e003      	b.n	80034f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	041a      	lsls	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	619a      	str	r2, [r3, #24]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_I2S_Init>:
=======
 8002f00:	e003      	b.n	8002f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	041a      	lsls	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_I2S_Init>:
>>>>>>> Stashed changes
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
=======
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
<<<<<<< Updated upstream
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e128      	b.n	8003768 <HAL_I2S_Init+0x264>
=======
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e128      	b.n	800317c <HAL_I2S_Init+0x264>
>>>>>>> Stashed changes
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
<<<<<<< Updated upstream
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a90      	ldr	r2, [pc, #576]	@ (8003770 <HAL_I2S_Init+0x26c>)
 800352e:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a90      	ldr	r2, [pc, #576]	@ (8003184 <HAL_I2S_Init+0x26c>)
 8002f42:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
<<<<<<< Updated upstream
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fa6d 	bl	8001a10 <HAL_I2S_MspInit>
=======
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fe fce9 	bl	800191c <HAL_I2S_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
<<<<<<< Updated upstream
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
<<<<<<< Updated upstream
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800354c:	f023 030f 	bic.w	r3, r3, #15
 8003550:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2202      	movs	r2, #2
 8003558:	621a      	str	r2, [r3, #32]
=======
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f60:	f023 030f 	bic.w	r3, r3, #15
 8002f64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
<<<<<<< Updated upstream
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d060      	beq.n	8003624 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800356a:	2310      	movs	r3, #16
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e001      	b.n	8003574 <HAL_I2S_Init+0x70>
=======
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d060      	beq.n	8003038 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f7e:	2310      	movs	r3, #16
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e001      	b.n	8002f88 <HAL_I2S_Init+0x70>
>>>>>>> Stashed changes
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
<<<<<<< Updated upstream
 8003570:	2320      	movs	r3, #32
 8003572:	617b      	str	r3, [r7, #20]
=======
 8002f84:	2320      	movs	r3, #32
 8002f86:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
<<<<<<< Updated upstream
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b20      	cmp	r3, #32
 800357a:	d802      	bhi.n	8003582 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	617b      	str	r3, [r7, #20]
=======
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d802      	bhi.n	8002f96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
<<<<<<< Updated upstream
 8003582:	2001      	movs	r0, #1
 8003584:	f001 faa8 	bl	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003588:	60f8      	str	r0, [r7, #12]
=======
 8002f96:	2001      	movs	r0, #1
 8002f98:	f001 fadc 	bl	8004554 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f9c:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
<<<<<<< Updated upstream
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003592:	d125      	bne.n	80035e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	3305      	adds	r3, #5
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e01f      	b.n	80035fe <HAL_I2S_Init+0xfa>
=======
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa6:	d125      	bne.n	8002ff4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	3305      	adds	r3, #5
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	e01f      	b.n	8003012 <HAL_I2S_Init+0xfa>
>>>>>>> Stashed changes
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
<<<<<<< Updated upstream
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	461a      	mov	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	3305      	adds	r3, #5
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e00e      	b.n	80035fe <HAL_I2S_Init+0xfa>
=======
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	3305      	adds	r3, #5
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e00e      	b.n	8003012 <HAL_I2S_Init+0xfa>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
<<<<<<< Updated upstream
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	3305      	adds	r3, #5
 80035fc:	613b      	str	r3, [r7, #16]
=======
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	3305      	adds	r3, #5
 8003010:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
<<<<<<< Updated upstream
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4a5c      	ldr	r2, [pc, #368]	@ (8003774 <HAL_I2S_Init+0x270>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	08db      	lsrs	r3, r3, #3
 8003608:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e003      	b.n	800362c <HAL_I2S_Init+0x128>
=======
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4a5c      	ldr	r2, [pc, #368]	@ (8003188 <HAL_I2S_Init+0x270>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e003      	b.n	8003040 <HAL_I2S_Init+0x128>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
<<<<<<< Updated upstream
 8003624:	2302      	movs	r3, #2
 8003626:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
=======
 8003038:	2302      	movs	r3, #2
 800303a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
<<<<<<< Updated upstream
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d902      	bls.n	8003638 <HAL_I2S_Init+0x134>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2bff      	cmp	r3, #255	@ 0xff
 8003636:	d907      	bls.n	8003648 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	f043 0210 	orr.w	r2, r3, #16
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e08f      	b.n	8003768 <HAL_I2S_Init+0x264>
=======
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d902      	bls.n	800304c <HAL_I2S_Init+0x134>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2bff      	cmp	r3, #255	@ 0xff
 800304a:	d907      	bls.n	800305c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e08f      	b.n	800317c <HAL_I2S_Init+0x264>
>>>>>>> Stashed changes
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
<<<<<<< Updated upstream
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	ea42 0103 	orr.w	r1, r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	430a      	orrs	r2, r1
 800365a:	621a      	str	r2, [r3, #32]
=======
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	ea42 0103 	orr.w	r1, r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	430a      	orrs	r2, r1
 800306e:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
<<<<<<< Updated upstream
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003666:	f023 030f 	bic.w	r3, r3, #15
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6851      	ldr	r1, [r2, #4]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6892      	ldr	r2, [r2, #8]
 8003672:	4311      	orrs	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68d2      	ldr	r2, [r2, #12]
 8003678:	4311      	orrs	r1, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6992      	ldr	r2, [r2, #24]
 800367e:	430a      	orrs	r2, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	61da      	str	r2, [r3, #28]
=======
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800307a:	f023 030f 	bic.w	r3, r3, #15
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6851      	ldr	r1, [r2, #4]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68d2      	ldr	r2, [r2, #12]
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6992      	ldr	r2, [r2, #24]
 8003092:	430a      	orrs	r2, r1
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800309e:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
<<<<<<< Updated upstream
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d161      	bne.n	8003758 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a38      	ldr	r2, [pc, #224]	@ (8003778 <HAL_I2S_Init+0x274>)
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a37      	ldr	r2, [pc, #220]	@ (800377c <HAL_I2S_Init+0x278>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_I2S_Init+0x1a4>
 80036a4:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036a6:	e001      	b.n	80036ac <HAL_I2S_Init+0x1a8>
 80036a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4932      	ldr	r1, [pc, #200]	@ (800377c <HAL_I2S_Init+0x278>)
 80036b4:	428a      	cmp	r2, r1
 80036b6:	d101      	bne.n	80036bc <HAL_I2S_Init+0x1b8>
 80036b8:	4a31      	ldr	r2, [pc, #196]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2S_Init+0x1bc>
 80036bc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80036c4:	f023 030f 	bic.w	r3, r3, #15
 80036c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <HAL_I2S_Init+0x278>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_I2S_Init+0x1d4>
 80036d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036d6:	e001      	b.n	80036dc <HAL_I2S_Init+0x1d8>
 80036d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036dc:	2202      	movs	r2, #2
 80036de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a25      	ldr	r2, [pc, #148]	@ (800377c <HAL_I2S_Init+0x278>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_I2S_Init+0x1ea>
 80036ea:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_I2S_Init+0x27c>)
 80036ec:	e001      	b.n	80036f2 <HAL_I2S_Init+0x1ee>
 80036ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036fe:	d003      	beq.n	8003708 <HAL_I2S_Init+0x204>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e001      	b.n	8003714 <HAL_I2S_Init+0x210>
=======
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d161      	bne.n	800316c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a38      	ldr	r2, [pc, #224]	@ (800318c <HAL_I2S_Init+0x274>)
 80030ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a37      	ldr	r2, [pc, #220]	@ (8003190 <HAL_I2S_Init+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_I2S_Init+0x1a4>
 80030b8:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <HAL_I2S_Init+0x27c>)
 80030ba:	e001      	b.n	80030c0 <HAL_I2S_Init+0x1a8>
 80030bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	4932      	ldr	r1, [pc, #200]	@ (8003190 <HAL_I2S_Init+0x278>)
 80030c8:	428a      	cmp	r2, r1
 80030ca:	d101      	bne.n	80030d0 <HAL_I2S_Init+0x1b8>
 80030cc:	4a31      	ldr	r2, [pc, #196]	@ (8003194 <HAL_I2S_Init+0x27c>)
 80030ce:	e001      	b.n	80030d4 <HAL_I2S_Init+0x1bc>
 80030d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80030d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030d8:	f023 030f 	bic.w	r3, r3, #15
 80030dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003190 <HAL_I2S_Init+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_I2S_Init+0x1d4>
 80030e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003194 <HAL_I2S_Init+0x27c>)
 80030ea:	e001      	b.n	80030f0 <HAL_I2S_Init+0x1d8>
 80030ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030f0:	2202      	movs	r2, #2
 80030f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a25      	ldr	r2, [pc, #148]	@ (8003190 <HAL_I2S_Init+0x278>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_I2S_Init+0x1ea>
 80030fe:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <HAL_I2S_Init+0x27c>)
 8003100:	e001      	b.n	8003106 <HAL_I2S_Init+0x1ee>
 8003102:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003112:	d003      	beq.n	800311c <HAL_I2S_Init+0x204>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d103      	bne.n	8003124 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800311c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e001      	b.n	8003128 <HAL_I2S_Init+0x210>
>>>>>>> Stashed changes
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
<<<<<<< Updated upstream
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
=======
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
<<<<<<< Updated upstream
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800371e:	4313      	orrs	r3, r2
 8003720:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003728:	4313      	orrs	r3, r2
 800372a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003732:	4313      	orrs	r3, r2
 8003734:	b29a      	uxth	r2, r3
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	4313      	orrs	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003740:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <HAL_I2S_Init+0x278>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_I2S_Init+0x24c>
 800374c:	4b0c      	ldr	r3, [pc, #48]	@ (8003780 <HAL_I2S_Init+0x27c>)
 800374e:	e001      	b.n	8003754 <HAL_I2S_Init+0x250>
 8003750:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003754:	897a      	ldrh	r2, [r7, #10]
 8003756:	61da      	str	r2, [r3, #28]
=======
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003132:	4313      	orrs	r3, r2
 8003134:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800313c:	4313      	orrs	r3, r2
 800313e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003146:	4313      	orrs	r3, r2
 8003148:	b29a      	uxth	r2, r3
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	4313      	orrs	r3, r2
 800314e:	b29b      	uxth	r3, r3
 8003150:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003154:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <HAL_I2S_Init+0x278>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_I2S_Init+0x24c>
 8003160:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <HAL_I2S_Init+0x27c>)
 8003162:	e001      	b.n	8003168 <HAL_I2S_Init+0x250>
 8003164:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003168:	897a      	ldrh	r2, [r7, #10]
 800316a:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
<<<<<<< Updated upstream
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	08003a6d 	.word	0x08003a6d
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	08003b81 	.word	0x08003b81
 800377c:	40003800 	.word	0x40003800
 8003780:	40003400 	.word	0x40003400

08003784 <HAL_I2S_Transmit_DMA>:
=======
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08003481 	.word	0x08003481
 8003188:	cccccccd 	.word	0xcccccccd
 800318c:	08003595 	.word	0x08003595
 8003190:	40003800 	.word	0x40003800
 8003194:	40003400 	.word	0x40003400

08003198 <HAL_I2S_Transmit_DMA>:
>>>>>>> Stashed changes
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_I2S_Transmit_DMA+0x1a>
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e08a      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	e082      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x134>
=======
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_I2S_Transmit_DMA+0x1a>
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e08a      	b.n	80032cc <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d001      	beq.n	80031c6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	e082      	b.n	80032cc <HAL_I2S_Transmit_DMA+0x134>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
<<<<<<< Updated upstream
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2S_Transmit_DMA+0x3e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e07a      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x134>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d002      	beq.n	80037f6 <HAL_I2S_Transmit_DMA+0x72>
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10a      	bne.n	800380c <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800380a:	e005      	b.n	8003818 <HAL_I2S_Transmit_DMA+0x94>
=======
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_I2S_Transmit_DMA+0x3e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e07a      	b.n	80032cc <HAL_I2S_Transmit_DMA+0x134>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d002      	beq.n	800320a <HAL_I2S_Transmit_DMA+0x72>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d10a      	bne.n	8003220 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800321e:	e005      	b.n	800322c <HAL_I2S_Transmit_DMA+0x94>
>>>>>>> Stashed changes
  }
  else
  {
    hi2s->TxXferSize = Size;
<<<<<<< Updated upstream
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	88fa      	ldrh	r2, [r7, #6]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a
=======
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
>>>>>>> Stashed changes
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
<<<<<<< Updated upstream
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	4a28      	ldr	r2, [pc, #160]	@ (80038c0 <HAL_I2S_Transmit_DMA+0x13c>)
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	4a27      	ldr	r2, [pc, #156]	@ (80038c4 <HAL_I2S_Transmit_DMA+0x140>)
 8003826:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <HAL_I2S_Transmit_DMA+0x144>)
 800382e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003838:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003840:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003848:	f7ff f9e4 	bl	8002c14 <HAL_DMA_Start_IT>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00f      	beq.n	8003872 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e022      	b.n	80038b8 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0202 	orr.w	r2, r2, #2
 8003896:	605a      	str	r2, [r3, #4]
=======
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	4a28      	ldr	r2, [pc, #160]	@ (80032d4 <HAL_I2S_Transmit_DMA+0x13c>)
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	4a27      	ldr	r2, [pc, #156]	@ (80032d8 <HAL_I2S_Transmit_DMA+0x140>)
 800323a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <HAL_I2S_Transmit_DMA+0x144>)
 8003242:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800324c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003254:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800325c:	f7ff f9e4 	bl	8002628 <HAL_DMA_Start_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00f      	beq.n	8003286 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f043 0208 	orr.w	r2, r3, #8
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e022      	b.n	80032cc <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0202 	orr.w	r2, r2, #2
 80032aa:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
<<<<<<< Updated upstream
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038b4:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	0800394b 	.word	0x0800394b
 80038c4:	08003909 	.word	0x08003909
 80038c8:	08003967 	.word	0x08003967

080038cc <HAL_I2S_TxHalfCpltCallback>:
=======
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d107      	bne.n	80032ca <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032c8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	0800335f 	.word	0x0800335f
 80032d8:	0800331d 	.word	0x0800331d
 80032dc:	0800337b 	.word	0x0800337b

080032e0 <HAL_I2S_TxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
=======
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2S_RxCpltCallback>:
=======
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_I2S_RxCpltCallback>:
>>>>>>> Stashed changes
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
=======
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2S_ErrorCallback>:
=======
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_I2S_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
=======
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <I2S_DMATxCplt>:
=======
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <I2S_DMATxCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10e      	bne.n	800393c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0202 	bic.w	r2, r2, #2
 800392c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0202 	bic.w	r2, r2, #2
 8003340:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
<<<<<<< Updated upstream
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7fd fbcd 	bl	80010dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <I2S_DMATxHalfCplt>:
=======
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7fd fc17 	bl	8000b84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <I2S_DMATxHalfCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	60fb      	str	r3, [r7, #12]
=======
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
<<<<<<< Updated upstream
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ffb7 	bl	80038cc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <I2S_DMAError>:
=======
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7ff ffb7 	bl	80032e0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <I2S_DMAError>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0203 	bic.w	r2, r2, #3
 8003982:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399c:	f043 0208 	orr.w	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003386:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0203 	bic.w	r2, r2, #3
 8003396:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	f043 0208 	orr.w	r2, r3, #8
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff ffa5 	bl	80038f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <I2S_Transmit_IT>:
=======
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff ffa5 	bl	8003308 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2S_Transmit_IT>:
>>>>>>> Stashed changes
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10e      	bne.n	800341a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800340a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
<<<<<<< Updated upstream
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fd fb6b 	bl	80010dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2S_Receive_IT>:
=======
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd fbb5 	bl	8000b84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <I2S_Receive_IT>:
>>>>>>> Stashed changes
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	b292      	uxth	r2, r2
 8003a22:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	b292      	uxth	r2, r2
 8003436:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003468:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
<<<<<<< Updated upstream
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff3e 	bl	80038e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2S_IRQHandler>:
=======
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ff3e 	bl	80032f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2S_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d13a      	bne.n	8003afe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d109      	bne.n	8003aa6 <I2S_IRQHandler+0x3a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9c:	2b40      	cmp	r3, #64	@ 0x40
 8003a9e:	d102      	bne.n	8003aa6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffb4 	bl	8003a0e <I2S_Receive_IT>
=======
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b04      	cmp	r3, #4
 800349a:	d13a      	bne.n	8003512 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d109      	bne.n	80034ba <I2S_IRQHandler+0x3a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d102      	bne.n	80034ba <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ffb4 	bl	8003422 <I2S_Receive_IT>
>>>>>>> Stashed changes
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
<<<<<<< Updated upstream
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aac:	2b40      	cmp	r3, #64	@ 0x40
 8003aae:	d126      	bne.n	8003afe <I2S_IRQHandler+0x92>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d11f      	bne.n	8003afe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003acc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d126      	bne.n	8003512 <I2S_IRQHandler+0x92>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d11f      	bne.n	8003512 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034e0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
<<<<<<< Updated upstream
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af0:	f043 0202 	orr.w	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	f043 0202 	orr.w	r2, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fefb 	bl	80038f4 <HAL_I2S_ErrorCallback>
=======
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fefb 	bl	8003308 <HAL_I2S_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d136      	bne.n	8003b78 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d109      	bne.n	8003b28 <I2S_IRQHandler+0xbc>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1e:	2b80      	cmp	r3, #128	@ 0x80
 8003b20:	d102      	bne.n	8003b28 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ff45 	bl	80039b2 <I2S_Transmit_IT>
=======
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b03      	cmp	r3, #3
 800351c:	d136      	bne.n	800358c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d109      	bne.n	800353c <I2S_IRQHandler+0xbc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b80      	cmp	r3, #128	@ 0x80
 8003534:	d102      	bne.n	800353c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff45 	bl	80033c6 <I2S_Transmit_IT>
>>>>>>> Stashed changes
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
<<<<<<< Updated upstream
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d122      	bne.n	8003b78 <I2S_IRQHandler+0x10c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d11b      	bne.n	8003b78 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b4e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6a:	f043 0204 	orr.w	r2, r3, #4
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d122      	bne.n	800358c <I2S_IRQHandler+0x10c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b20      	cmp	r3, #32
 8003552:	d11b      	bne.n	800358c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003562:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f043 0204 	orr.w	r2, r3, #4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff febe 	bl	80038f4 <HAL_I2S_ErrorCallback>
=======
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff febe 	bl	8003308 <HAL_I2S_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8003b78:	bf00      	nop
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_I2SEx_FullDuplex_IRQHandler>:
=======
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_I2SEx_FullDuplex_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a92      	ldr	r2, [pc, #584]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b9a:	4b92      	ldr	r3, [pc, #584]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b9c:	e001      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a8b      	ldr	r2, [pc, #556]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bba:	e001      	b.n	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bcc:	d004      	beq.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 8099 	bne.w	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
=======
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a92      	ldr	r2, [pc, #584]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ae:	4b92      	ldr	r3, [pc, #584]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b0:	e001      	b.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a8b      	ldr	r2, [pc, #556]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035cc:	4b8a      	ldr	r3, [pc, #552]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ce:	e001      	b.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e0:	d004      	beq.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8099 	bne.w	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d107      	bne.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
>>>>>>> Stashed changes
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
<<<<<<< Updated upstream
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f925 	bl	8003e3c <I2SEx_TxISR_I2S>
=======
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f925 	bl	8003850 <I2SEx_TxISR_I2S>
>>>>>>> Stashed changes
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
<<<<<<< Updated upstream
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
=======
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
>>>>>>> Stashed changes
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
<<<<<<< Updated upstream
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9c8 	bl	8003f9c <I2SEx_RxISR_I2SExt>
=======
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f9c8 	bl	80039b0 <I2SEx_RxISR_I2SExt>
>>>>>>> Stashed changes
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
<<<<<<< Updated upstream
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d13a      	bne.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d035      	beq.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6e      	ldr	r2, [pc, #440]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c2c:	e001      	b.n	8003c32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4969      	ldr	r1, [pc, #420]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c3e:	4b69      	ldr	r3, [pc, #420]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c40:	e001      	b.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f043 0202 	orr.w	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	d13a      	bne.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d035      	beq.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6e      	ldr	r2, [pc, #440]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800363e:	4b6e      	ldr	r3, [pc, #440]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003640:	e001      	b.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003642:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4969      	ldr	r1, [pc, #420]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800364e:	428b      	cmp	r3, r1
 8003650:	d101      	bne.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003652:	4b69      	ldr	r3, [pc, #420]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003654:	e001      	b.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800365a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800365e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800366e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fe34 	bl	80038f4 <HAL_I2S_ErrorCallback>
=======
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe34 	bl	8003308 <HAL_I2S_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
<<<<<<< Updated upstream
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	f040 80c3 	bne.w	8003e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80bd 	beq.w	8003e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a49      	ldr	r2, [pc, #292]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cbe:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cc0:	e001      	b.n	8003cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4944      	ldr	r1, [pc, #272]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cd2:	4b44      	ldr	r3, [pc, #272]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cd4:	e001      	b.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f043 0204 	orr.w	r2, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	f040 80c3 	bne.w	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80bd 	beq.w	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a49      	ldr	r2, [pc, #292]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036d2:	4b49      	ldr	r3, [pc, #292]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d4:	e001      	b.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4944      	ldr	r1, [pc, #272]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036e2:	428b      	cmp	r3, r1
 80036e4:	d101      	bne.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036e6:	4b44      	ldr	r3, [pc, #272]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e8:	e001      	b.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fdf6 	bl	80038f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d08:	e089      	b.n	8003e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
=======
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fdf6 	bl	8003308 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371c:	e089      	b.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
>>>>>>> Stashed changes
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
<<<<<<< Updated upstream
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d107      	bne.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
=======
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d107      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
>>>>>>> Stashed changes
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
<<<<<<< Updated upstream
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8be 	bl	8003ea0 <I2SEx_TxISR_I2SExt>
=======
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8be 	bl	80038b4 <I2SEx_TxISR_I2SExt>
>>>>>>> Stashed changes
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
<<<<<<< Updated upstream
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
=======
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
>>>>>>> Stashed changes
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
<<<<<<< Updated upstream
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8fd 	bl	8003f38 <I2SEx_RxISR_I2S>
=======
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8fd 	bl	800394c <I2SEx_RxISR_I2S>
>>>>>>> Stashed changes
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
<<<<<<< Updated upstream
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d44:	2b40      	cmp	r3, #64	@ 0x40
 8003d46:	d12f      	bne.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02a      	beq.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1e      	ldr	r2, [pc, #120]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6e:	e001      	b.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4919      	ldr	r1, [pc, #100]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d80:	4b18      	ldr	r3, [pc, #96]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d82:	e001      	b.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d12f      	bne.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02a      	beq.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003774:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003780:	4b1d      	ldr	r3, [pc, #116]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003782:	e001      	b.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4919      	ldr	r1, [pc, #100]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d101      	bne.n	8003798 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003794:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003796:	e001      	b.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800379c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fda6 	bl	80038f4 <HAL_I2S_ErrorCallback>
=======
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fda6 	bl	8003308 <HAL_I2S_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
<<<<<<< Updated upstream
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d136      	bne.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d031      	beq.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a07      	ldr	r2, [pc, #28]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dc6:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc8:	e001      	b.n	8003dce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4902      	ldr	r1, [pc, #8]	@ (8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd6:	428b      	cmp	r3, r1
 8003dd8:	d106      	bne.n	8003de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003dda:	4b02      	ldr	r3, [pc, #8]	@ (8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ddc:	e006      	b.n	8003dec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003dde:	bf00      	nop
 8003de0:	40003800 	.word	0x40003800
 8003de4:	40003400 	.word	0x40003400
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003df0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d136      	bne.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d031      	beq.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037da:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4902      	ldr	r1, [pc, #8]	@ (80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ea:	428b      	cmp	r3, r1
 80037ec:	d106      	bne.n	80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037ee:	4b02      	ldr	r3, [pc, #8]	@ (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f0:	e006      	b.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037f2:	bf00      	nop
 80037f4:	40003800 	.word	0x40003800
 80037f8:	40003400 	.word	0x40003400
 80037fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003800:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003804:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003814:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
<<<<<<< Updated upstream
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fd6c 	bl	80038f4 <HAL_I2S_ErrorCallback>
=======
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fd6c 	bl	8003308 <HAL_I2S_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8003e1c:	e000      	b.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e1e:	bf00      	nop
}
 8003e20:	bf00      	nop
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_I2SEx_TxRxCpltCallback>:
=======
 8003830:	e000      	b.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003832:	bf00      	nop
}
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_I2SEx_TxRxCpltCallback>:
>>>>>>> Stashed changes
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
=======
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <I2SEx_TxISR_I2S>:
=======
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <I2SEx_TxISR_I2S>:
>>>>>>> Stashed changes
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c99      	adds	r1, r3, #2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003e4e:	881a      	ldrh	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	1c99      	adds	r1, r3, #2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6251      	str	r1, [r2, #36]	@ 0x24
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d113      	bne.n	80038aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003890:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
<<<<<<< Updated upstream
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ffc9 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
=======
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ffc9 	bl	800383c <HAL_I2SEx_TxRxCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <I2SEx_TxISR_I2SExt>:
=======
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <I2SEx_TxISR_I2SExt>:
>>>>>>> Stashed changes
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	1c99      	adds	r1, r3, #2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6251      	str	r1, [r2, #36]	@ 0x24
 8003eb2:	8819      	ldrh	r1, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <I2SEx_TxISR_I2SExt+0x90>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <I2SEx_TxISR_I2SExt+0x22>
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f34 <I2SEx_TxISR_I2SExt+0x94>)
 8003ec0:	e001      	b.n	8003ec6 <I2SEx_TxISR_I2SExt+0x26>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d121      	bne.n	8003f26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	@ (8003f30 <I2SEx_TxISR_I2SExt+0x90>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <I2SEx_TxISR_I2SExt+0x50>
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <I2SEx_TxISR_I2SExt+0x94>)
 8003eee:	e001      	b.n	8003ef4 <I2SEx_TxISR_I2SExt+0x54>
 8003ef0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	490d      	ldr	r1, [pc, #52]	@ (8003f30 <I2SEx_TxISR_I2SExt+0x90>)
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d101      	bne.n	8003f04 <I2SEx_TxISR_I2SExt+0x64>
 8003f00:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <I2SEx_TxISR_I2SExt+0x94>)
 8003f02:	e001      	b.n	8003f08 <I2SEx_TxISR_I2SExt+0x68>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c99      	adds	r1, r3, #2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6251      	str	r1, [r2, #36]	@ 0x24
 80038c6:	8819      	ldrh	r1, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <I2SEx_TxISR_I2SExt+0x90>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <I2SEx_TxISR_I2SExt+0x22>
 80038d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <I2SEx_TxISR_I2SExt+0x94>)
 80038d4:	e001      	b.n	80038da <I2SEx_TxISR_I2SExt+0x26>
 80038d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038da:	460a      	mov	r2, r1
 80038dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d121      	bne.n	800393a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a12      	ldr	r2, [pc, #72]	@ (8003944 <I2SEx_TxISR_I2SExt+0x90>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <I2SEx_TxISR_I2SExt+0x50>
 8003900:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <I2SEx_TxISR_I2SExt+0x94>)
 8003902:	e001      	b.n	8003908 <I2SEx_TxISR_I2SExt+0x54>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	490d      	ldr	r1, [pc, #52]	@ (8003944 <I2SEx_TxISR_I2SExt+0x90>)
 8003910:	428b      	cmp	r3, r1
 8003912:	d101      	bne.n	8003918 <I2SEx_TxISR_I2SExt+0x64>
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <I2SEx_TxISR_I2SExt+0x94>)
 8003916:	e001      	b.n	800391c <I2SEx_TxISR_I2SExt+0x68>
 8003918:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800391c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003920:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
<<<<<<< Updated upstream
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff81 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
=======
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff81 	bl	800383c <HAL_I2SEx_TxRxCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40003800 	.word	0x40003800
 8003f34:	40003400 	.word	0x40003400

08003f38 <I2SEx_RxISR_I2S>:
=======
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40003800 	.word	0x40003800
 8003948:	40003400 	.word	0x40003400

0800394c <I2SEx_RxISR_I2S>:
>>>>>>> Stashed changes
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68d8      	ldr	r0, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	1c99      	adds	r1, r3, #2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003f50:	b282      	uxth	r2, r0
 8003f52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d113      	bne.n	8003f94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68d8      	ldr	r0, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	1c99      	adds	r1, r3, #2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003964:	b282      	uxth	r2, r0
 8003966:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d113      	bne.n	80039a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800398e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
<<<<<<< Updated upstream
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff4a 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
=======
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff4a 	bl	800383c <HAL_I2SEx_TxRxCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2SEx_RxISR_I2SExt>:
=======
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2SEx_RxISR_I2SExt>:
>>>>>>> Stashed changes
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
<<<<<<< Updated upstream
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	@ (800402c <I2SEx_RxISR_I2SExt+0x90>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <I2SEx_RxISR_I2SExt+0x16>
 8003fae:	4b20      	ldr	r3, [pc, #128]	@ (8004030 <I2SEx_RxISR_I2SExt+0x94>)
 8003fb0:	e001      	b.n	8003fb6 <I2SEx_RxISR_I2SExt+0x1a>
 8003fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb6:	68d8      	ldr	r0, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	1c99      	adds	r1, r3, #2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003fc2:	b282      	uxth	r2, r0
 8003fc4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d121      	bne.n	8004022 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a12      	ldr	r2, [pc, #72]	@ (800402c <I2SEx_RxISR_I2SExt+0x90>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <I2SEx_RxISR_I2SExt+0x50>
 8003fe8:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <I2SEx_RxISR_I2SExt+0x94>)
 8003fea:	e001      	b.n	8003ff0 <I2SEx_RxISR_I2SExt+0x54>
 8003fec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	490d      	ldr	r1, [pc, #52]	@ (800402c <I2SEx_RxISR_I2SExt+0x90>)
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	d101      	bne.n	8004000 <I2SEx_RxISR_I2SExt+0x64>
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8004030 <I2SEx_RxISR_I2SExt+0x94>)
 8003ffe:	e001      	b.n	8004004 <I2SEx_RxISR_I2SExt+0x68>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004004:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004008:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a20      	ldr	r2, [pc, #128]	@ (8003a40 <I2SEx_RxISR_I2SExt+0x90>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <I2SEx_RxISR_I2SExt+0x16>
 80039c2:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <I2SEx_RxISR_I2SExt+0x94>)
 80039c4:	e001      	b.n	80039ca <I2SEx_RxISR_I2SExt+0x1a>
 80039c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ca:	68d8      	ldr	r0, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	1c99      	adds	r1, r3, #2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80039d6:	b282      	uxth	r2, r0
 80039d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d121      	bne.n	8003a36 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <I2SEx_RxISR_I2SExt+0x90>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <I2SEx_RxISR_I2SExt+0x50>
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <I2SEx_RxISR_I2SExt+0x94>)
 80039fe:	e001      	b.n	8003a04 <I2SEx_RxISR_I2SExt+0x54>
 8003a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	490d      	ldr	r1, [pc, #52]	@ (8003a40 <I2SEx_RxISR_I2SExt+0x90>)
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d101      	bne.n	8003a14 <I2SEx_RxISR_I2SExt+0x64>
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <I2SEx_RxISR_I2SExt+0x94>)
 8003a12:	e001      	b.n	8003a18 <I2SEx_RxISR_I2SExt+0x68>
 8003a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> Stashed changes
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
<<<<<<< Updated upstream
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff03 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
=======
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff03 	bl	800383c <HAL_I2SEx_TxRxCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40003800 	.word	0x40003800
 8004030:	40003400 	.word	0x40003400

08004034 <HAL_RCC_OscConfig>:
=======
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40003800 	.word	0x40003800
 8003a44:	40003400 	.word	0x40003400

08003a48 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
=======
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e267      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
=======
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e267      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d075      	beq.n	800413e <HAL_RCC_OscConfig+0x10a>
=======
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d075      	beq.n	8003b52 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
<<<<<<< Updated upstream
 8004052:	4b88      	ldr	r3, [pc, #544]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b04      	cmp	r3, #4
 800405c:	d00c      	beq.n	8004078 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4b85      	ldr	r3, [pc, #532]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004066:	2b08      	cmp	r3, #8
 8004068:	d112      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b82      	ldr	r3, [pc, #520]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b7e      	ldr	r3, [pc, #504]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_RCC_OscConfig+0x108>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d157      	bne.n	800413c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e242      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
=======
 8003a66:	4b88      	ldr	r3, [pc, #544]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d00c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b85      	ldr	r3, [pc, #532]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d112      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4b82      	ldr	r3, [pc, #520]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05b      	beq.n	8003b50 <HAL_RCC_OscConfig+0x108>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d157      	bne.n	8003b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e242      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x74>
 800409a:	4b76      	ldr	r3, [pc, #472]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a75      	ldr	r2, [pc, #468]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x98>
 80040b2:	4b70      	ldr	r3, [pc, #448]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b6d      	ldr	r3, [pc, #436]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040cc:	4b69      	ldr	r3, [pc, #420]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a68      	ldr	r2, [pc, #416]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b66      	ldr	r3, [pc, #408]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a65      	ldr	r2, [pc, #404]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd fe96 	bl	8001e1c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fd fe92 	bl	8001e1c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e207      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b5b      	ldr	r3, [pc, #364]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0xc0>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
=======
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x74>
 8003aae:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xb0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x98>
 8003ac6:	4b70      	ldr	r3, [pc, #448]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6f      	ldr	r2, [pc, #444]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6c      	ldr	r2, [pc, #432]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xb0>
 8003ae0:	4b69      	ldr	r3, [pc, #420]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a68      	ldr	r2, [pc, #416]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b66      	ldr	r3, [pc, #408]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a65      	ldr	r2, [pc, #404]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fe f940 	bl	8001d84 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fe f93c 	bl	8001d84 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e207      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xc0>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004114:	f7fd fe82 	bl	8001e1c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fd fe7e 	bl	8001e1c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	@ 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1f3      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	4b51      	ldr	r3, [pc, #324]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0xe8>
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
=======
 8003b28:	f7fe f92c 	bl	8001d84 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe f928 	bl	8001d84 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1f3      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b51      	ldr	r3, [pc, #324]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0xe8>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d063      	beq.n	8004212 <HAL_RCC_OscConfig+0x1de>
=======
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d063      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
<<<<<<< Updated upstream
 800414a:	4b4a      	ldr	r3, [pc, #296]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11c      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b44      	ldr	r3, [pc, #272]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	4b41      	ldr	r3, [pc, #260]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1c7      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
=======
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d11c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b44      	ldr	r3, [pc, #272]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1c7      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8004186:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4937      	ldr	r1, [pc, #220]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	e03a      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
=======
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4937      	ldr	r1, [pc, #220]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e03a      	b.n	8003c26 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	4b34      	ldr	r3, [pc, #208]	@ (8004278 <HAL_RCC_OscConfig+0x244>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fd fe37 	bl	8001e1c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fd fe33 	bl	8001e1c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1a8      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x17e>
=======
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b34      	ldr	r3, [pc, #208]	@ (8003c8c <HAL_RCC_OscConfig+0x244>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f8e1 	bl	8001d84 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe f8dd 	bl	8001d84 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1a8      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80041d0:	4b28      	ldr	r3, [pc, #160]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4925      	ldr	r1, [pc, #148]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
=======
 8003be4:	4b28      	ldr	r3, [pc, #160]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4925      	ldr	r1, [pc, #148]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80041e6:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <HAL_RCC_OscConfig+0x244>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd fe16 	bl	8001e1c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fd fe12 	bl	8001e1c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e187      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1c0>
=======
 8003bfa:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_RCC_OscConfig+0x244>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe f8c0 	bl	8001d84 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fe f8bc 	bl	8001d84 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e187      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d036      	beq.n	800428c <HAL_RCC_OscConfig+0x258>
=======
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d036      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< Updated upstream
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_RCC_OscConfig+0x248>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fd fdf6 	bl	8001e1c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004234:	f7fd fdf2 	bl	8001e1c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e167      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCC_OscConfig+0x240>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x200>
 8004252:	e01b      	b.n	800428c <HAL_RCC_OscConfig+0x258>
=======
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3a:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <HAL_RCC_OscConfig+0x248>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fe f8a0 	bl	8001d84 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fe f89c 	bl	8001d84 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e167      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x200>
 8003c66:	e01b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8004254:	4b09      	ldr	r3, [pc, #36]	@ (800427c <HAL_RCC_OscConfig+0x248>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fd fddf 	bl	8001e1c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	e00e      	b.n	8004280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fd fddb 	bl	8001e1c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d907      	bls.n	8004280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e150      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
 8004274:	40023800 	.word	0x40023800
 8004278:	42470000 	.word	0x42470000
 800427c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	4b88      	ldr	r3, [pc, #544]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ea      	bne.n	8004262 <HAL_RCC_OscConfig+0x22e>
=======
 8003c68:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <HAL_RCC_OscConfig+0x248>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7fe f889 	bl	8001d84 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	e00e      	b.n	8003c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fe f885 	bl	8001d84 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d907      	bls.n	8003c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e150      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	42470000 	.word	0x42470000
 8003c90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	4b88      	ldr	r3, [pc, #544]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ea      	bne.n	8003c76 <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8097 	beq.w	80043c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
=======
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8097 	beq.w	8003ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 800429e:	4b81      	ldr	r3, [pc, #516]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b7d      	ldr	r3, [pc, #500]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	4a7c      	ldr	r2, [pc, #496]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ba:	4b7a      	ldr	r3, [pc, #488]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b77      	ldr	r3, [pc, #476]	@ (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d6:	4b74      	ldr	r3, [pc, #464]	@ (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a73      	ldr	r2, [pc, #460]	@ (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fd9b 	bl	8001e1c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd fd97 	bl	8001e1c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e10c      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCC_OscConfig+0x474>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2b6>
=======
 8003cb2:	4b81      	ldr	r3, [pc, #516]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cce:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b77      	ldr	r3, [pc, #476]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d118      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b74      	ldr	r3, [pc, #464]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a73      	ldr	r2, [pc, #460]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe f845 	bl	8001d84 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fe f841 	bl	8001d84 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e10c      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	4b6a      	ldr	r3, [pc, #424]	@ (8003ebc <HAL_RCC_OscConfig+0x474>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x2b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x2ea>
 8004310:	4b64      	ldr	r3, [pc, #400]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a63      	ldr	r2, [pc, #396]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
 800431c:	e01c      	b.n	8004358 <HAL_RCC_OscConfig+0x324>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x30c>
 8004326:	4b5f      	ldr	r3, [pc, #380]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	4a5e      	ldr	r2, [pc, #376]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	@ 0x70
 8004332:	4b5c      	ldr	r3, [pc, #368]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	4a5b      	ldr	r2, [pc, #364]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	@ 0x70
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0x324>
 8004340:	4b58      	ldr	r3, [pc, #352]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	4a57      	ldr	r2, [pc, #348]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	@ 0x70
 800434c:	4b55      	ldr	r3, [pc, #340]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a54      	ldr	r2, [pc, #336]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd fd5c 	bl	8001e1c <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fd fd58 	bl	8001e1c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0cb      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	4b49      	ldr	r3, [pc, #292]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ee      	beq.n	8004368 <HAL_RCC_OscConfig+0x334>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x382>
=======
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x2ea>
 8003d24:	4b64      	ldr	r3, [pc, #400]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d28:	4a63      	ldr	r2, [pc, #396]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d30:	e01c      	b.n	8003d6c <HAL_RCC_OscConfig+0x324>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x30c>
 8003d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d46:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0x324>
 8003d54:	4b58      	ldr	r3, [pc, #352]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	4a57      	ldr	r2, [pc, #348]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d60:	4b55      	ldr	r3, [pc, #340]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a54      	ldr	r2, [pc, #336]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f023 0304 	bic.w	r3, r3, #4
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fe f806 	bl	8001d84 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fe f802 	bl	8001d84 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0cb      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	4b49      	ldr	r3, [pc, #292]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ee      	beq.n	8003d7c <HAL_RCC_OscConfig+0x334>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x382>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 800438c:	f7fd fd46 	bl	8001e1c <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd fd42 	bl	8001e1c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0b5      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043aa:	4b3e      	ldr	r3, [pc, #248]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ee      	bne.n	8004394 <HAL_RCC_OscConfig+0x360>
=======
 8003da0:	f7fd fff0 	bl	8001d84 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fd ffec 	bl	8001d84 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0b5      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ee      	bne.n	8003da8 <HAL_RCC_OscConfig+0x360>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d105      	bne.n	80043c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043bc:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	4a38      	ldr	r2, [pc, #224]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b39      	ldr	r3, [pc, #228]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	4a38      	ldr	r2, [pc, #224]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a1 	beq.w	8004514 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d2:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d05c      	beq.n	8004498 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d141      	bne.n	800446a <HAL_RCC_OscConfig+0x436>
=======
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a1 	beq.w	8003f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de6:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d05c      	beq.n	8003eac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d141      	bne.n	8003e7e <HAL_RCC_OscConfig+0x436>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 80043e6:	4b31      	ldr	r3, [pc, #196]	@ (80044ac <HAL_RCC_OscConfig+0x478>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fd fd16 	bl	8001e1c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd fd12 	bl	8001e1c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e087      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x3c0>
=======
 8003dfa:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <HAL_RCC_OscConfig+0x478>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd ffc0 	bl	8001d84 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fd ffbc 	bl	8001d84 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e087      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	3b01      	subs	r3, #1
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	491b      	ldr	r1, [pc, #108]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
=======
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	491b      	ldr	r1, [pc, #108]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 800443c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x478>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fd fceb 	bl	8001e1c <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7fd fce7 	bl	8001e1c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e05c      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445c:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x416>
 8004468:	e054      	b.n	8004514 <HAL_RCC_OscConfig+0x4e0>
=======
 8003e50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCC_OscConfig+0x478>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fd ff95 	bl	8001d84 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fd ff91 	bl	8001d84 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e05c      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x416>
 8003e7c:	e054      	b.n	8003f28 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 800446a:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <HAL_RCC_OscConfig+0x478>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd fcd4 	bl	8001e1c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd fcd0 	bl	8001e1c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e045      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <HAL_RCC_OscConfig+0x470>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x444>
 8004496:	e03d      	b.n	8004514 <HAL_RCC_OscConfig+0x4e0>
=======
 8003e7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <HAL_RCC_OscConfig+0x478>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd ff7e 	bl	8001d84 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fd ff7a 	bl	8001d84 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e045      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x444>
 8003eaa:	e03d      	b.n	8003f28 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e038      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40007000 	.word	0x40007000
 80044ac:	42470060 	.word	0x42470060
=======
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e038      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	42470060 	.word	0x42470060
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 80044b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <HAL_RCC_OscConfig+0x4ec>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
=======
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x4ec>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d028      	beq.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d121      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d11a      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044e0:	4013      	ands	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x4e2>
=======
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d028      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d121      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d11a      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d111      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800

08004524 <HAL_RCC_ClockConfig>:
=======
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800

08003f38 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
=======
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0cc      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0cc      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004538:	4b68      	ldr	r3, [pc, #416]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d90c      	bls.n	8004560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b65      	ldr	r3, [pc, #404]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
=======
 8003f4c:	4b68      	ldr	r3, [pc, #416]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d90c      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b65      	ldr	r3, [pc, #404]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 800454e:	4b63      	ldr	r3, [pc, #396]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003f62:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0b8      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x8a>
=======
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800459a:	6093      	str	r3, [r2, #8]
=======
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f8c:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a58      	ldr	r2, [pc, #352]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa4:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a52      	ldr	r2, [pc, #328]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fae:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 800459c:	4b50      	ldr	r3, [pc, #320]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
=======
 8003fb0:	4b50      	ldr	r3, [pc, #320]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	494d      	ldr	r1, [pc, #308]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d044      	beq.n	8004644 <HAL_RCC_ClockConfig+0x120>
=======
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d044      	beq.n	8004058 <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d119      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d119      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	4b3f      	ldr	r3, [pc, #252]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 80045f2:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e067      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
=======
 8004006:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e067      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8004602:	4b37      	ldr	r3, [pc, #220]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4934      	ldr	r1, [pc, #208]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fd fc02 	bl	8001e1c <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fd fbfe 	bl	8001e1c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf8>
=======
 8004016:	4b37      	ldr	r3, [pc, #220]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 0203 	bic.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4934      	ldr	r1, [pc, #208]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004028:	f7fd feac 	bl	8001d84 <HAL_GetTick>
 800402c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	e00a      	b.n	8004046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7fd fea8 	bl	8001d84 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e04f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 020c 	and.w	r2, r3, #12
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	429a      	cmp	r2, r3
 8004056:	d1eb      	bne.n	8004030 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d20c      	bcs.n	800466c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b22      	ldr	r3, [pc, #136]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
=======
 8004058:	4b25      	ldr	r3, [pc, #148]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d20c      	bcs.n	8004080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 800465a:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
=======
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e032      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
=======
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408c:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4916      	ldr	r1, [pc, #88]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
=======
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	490e      	ldr	r1, [pc, #56]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fb62 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	080562a8 	.word	0x080562a8
 80046e8:	20000008 	.word	0x20000008
 80046ec:	2000000c 	.word	0x2000000c

080046f0 <HAL_RCC_GetSysClockFreq>:
=======
 80040be:	f000 f821 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	490a      	ldr	r1, [pc, #40]	@ (80040f8 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	5ccb      	ldrb	r3, [r1, r3]
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a09      	ldr	r2, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040da:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd fe0c 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00
 80040f4:	40023800 	.word	0x40023800
 80040f8:	08055eb0 	.word	0x08055eb0
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b094      	sub	sp, #80	@ 0x50
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80e1 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0db      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 8004104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004108:	b094      	sub	sp, #80	@ 0x50
 800410a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800411c:	4b79      	ldr	r3, [pc, #484]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x200>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d00d      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x40>
 8004128:	2b08      	cmp	r3, #8
 800412a:	f200 80e1 	bhi.w	80042f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x34>
 8004132:	2b04      	cmp	r3, #4
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0x3a>
 8004136:	e0db      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8004724:	4b73      	ldr	r3, [pc, #460]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004728:	e0db      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8004138:	4b73      	ldr	r3, [pc, #460]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x204>)
 800413a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800413c:	e0db      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 800472a:	4b73      	ldr	r3, [pc, #460]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800472e:	e0d8      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800413e:	4b73      	ldr	r3, [pc, #460]	@ (800430c <HAL_RCC_GetSysClockFreq+0x208>)
 8004140:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004142:	e0d8      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8004730:	4b6f      	ldr	r3, [pc, #444]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004738:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473a:	4b6d      	ldr	r3, [pc, #436]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	f04f 0000 	mov.w	r0, #0
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	0159      	lsls	r1, r3, #5
 8004770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004774:	0150      	lsls	r0, r2, #5
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4621      	mov	r1, r4
 800477c:	1a51      	subs	r1, r2, r1
 800477e:	6139      	str	r1, [r7, #16]
 8004780:	4629      	mov	r1, r5
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	018b      	lsls	r3, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479e:	4651      	mov	r1, sl
 80047a0:	018a      	lsls	r2, r1, #6
 80047a2:	4651      	mov	r1, sl
 80047a4:	ebb2 0801 	subs.w	r8, r2, r1
 80047a8:	4659      	mov	r1, fp
 80047aa:	eb63 0901 	sbc.w	r9, r3, r1
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c2:	4690      	mov	r8, r2
 80047c4:	4699      	mov	r9, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	eb18 0303 	adds.w	r3, r8, r3
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	462b      	mov	r3, r5
 80047d0:	eb49 0303 	adc.w	r3, r9, r3
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e2:	4629      	mov	r1, r5
 80047e4:	024b      	lsls	r3, r1, #9
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ec:	4621      	mov	r1, r4
 80047ee:	024a      	lsls	r2, r1, #9
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004800:	f7fb fce8 	bl	80001d4 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800480c:	e058      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8004144:	4b6f      	ldr	r3, [pc, #444]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x200>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800414c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414e:	4b6d      	ldr	r3, [pc, #436]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x200>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d063      	beq.n	8004222 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	4b6a      	ldr	r3, [pc, #424]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x200>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	2200      	movs	r2, #0
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004164:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416c:	633b      	str	r3, [r7, #48]	@ 0x30
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
 8004172:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	0159      	lsls	r1, r3, #5
 8004184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004188:	0150      	lsls	r0, r2, #5
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4621      	mov	r1, r4
 8004190:	1a51      	subs	r1, r2, r1
 8004192:	6139      	str	r1, [r7, #16]
 8004194:	4629      	mov	r1, r5
 8004196:	eb63 0301 	sbc.w	r3, r3, r1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a8:	4659      	mov	r1, fp
 80041aa:	018b      	lsls	r3, r1, #6
 80041ac:	4651      	mov	r1, sl
 80041ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b2:	4651      	mov	r1, sl
 80041b4:	018a      	lsls	r2, r1, #6
 80041b6:	4651      	mov	r1, sl
 80041b8:	ebb2 0801 	subs.w	r8, r2, r1
 80041bc:	4659      	mov	r1, fp
 80041be:	eb63 0901 	sbc.w	r9, r3, r1
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d6:	4690      	mov	r8, r2
 80041d8:	4699      	mov	r9, r3
 80041da:	4623      	mov	r3, r4
 80041dc:	eb18 0303 	adds.w	r3, r8, r3
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	462b      	mov	r3, r5
 80041e4:	eb49 0303 	adc.w	r3, r9, r3
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041f6:	4629      	mov	r1, r5
 80041f8:	024b      	lsls	r3, r1, #9
 80041fa:	4621      	mov	r1, r4
 80041fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004200:	4621      	mov	r1, r4
 8004202:	024a      	lsls	r2, r1, #9
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420a:	2200      	movs	r2, #0
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004214:	f7fb ffde 	bl	80001d4 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004220:	e058      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 800480e:	4b38      	ldr	r3, [pc, #224]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	4611      	mov	r1, r2
 800481a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483a:	0150      	lsls	r0, r2, #5
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4641      	mov	r1, r8
 8004842:	ebb2 0a01 	subs.w	sl, r2, r1
 8004846:	4649      	mov	r1, r9
 8004848:	eb63 0b01 	sbc.w	fp, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800485c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004860:	ebb2 040a 	subs.w	r4, r2, sl
 8004864:	eb63 050b 	sbc.w	r5, r3, fp
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	464b      	mov	r3, r9
 8004884:	eb45 0303 	adc.w	r3, r5, r3
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004896:	4629      	mov	r1, r5
 8004898:	028b      	lsls	r3, r1, #10
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a0:	4621      	mov	r1, r4
 80048a2:	028a      	lsls	r2, r1, #10
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	61fa      	str	r2, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	f7fb fc8e 	bl	80001d4 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8004222:	4b38      	ldr	r3, [pc, #224]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x200>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	2200      	movs	r2, #0
 800422a:	4618      	mov	r0, r3
 800422c:	4611      	mov	r1, r2
 800422e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
 8004238:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	f04f 0000 	mov.w	r0, #0
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	0159      	lsls	r1, r3, #5
 800424a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424e:	0150      	lsls	r0, r2, #5
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4641      	mov	r1, r8
 8004256:	ebb2 0a01 	subs.w	sl, r2, r1
 800425a:	4649      	mov	r1, r9
 800425c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800426c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004270:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004274:	ebb2 040a 	subs.w	r4, r2, sl
 8004278:	eb63 050b 	sbc.w	r5, r3, fp
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	00eb      	lsls	r3, r5, #3
 8004286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428a:	00e2      	lsls	r2, r4, #3
 800428c:	4614      	mov	r4, r2
 800428e:	461d      	mov	r5, r3
 8004290:	4643      	mov	r3, r8
 8004292:	18e3      	adds	r3, r4, r3
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	464b      	mov	r3, r9
 8004298:	eb45 0303 	adc.w	r3, r5, r3
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042aa:	4629      	mov	r1, r5
 80042ac:	028b      	lsls	r3, r1, #10
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b4:	4621      	mov	r1, r4
 80042b6:	028a      	lsls	r2, r1, #10
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	61fa      	str	r2, [r7, #28]
 80042c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c8:	f7fb ff84 	bl	80001d4 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3750      	adds	r7, #80	@ 0x50
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCCEx_PeriphCLKConfig>:
=======
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x204>)
 80042f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3750      	adds	r7, #80	@ 0x50
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	00f42400 	.word	0x00f42400
 800430c:	007a1200 	.word	0x007a1200

08004310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <HAL_RCC_GetHCLKFreq+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000000 	.word	0x20000000

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800432c:	f7ff fff0 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4903      	ldr	r1, [pc, #12]	@ (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	08055ec0 	.word	0x08055ec0

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004354:	f7ff ffdc 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0b5b      	lsrs	r3, r3, #13
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	@ (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	08055ec0 	.word	0x08055ec0

08004378 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]
=======
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
<<<<<<< Updated upstream
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004920:	2b00      	cmp	r3, #0
 8004922:	d035      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x94>
=======
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800439c:	2b00      	cmp	r3, #0
 800439e:	d035      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x94>
>>>>>>> Stashed changes
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
<<<<<<< Updated upstream
 8004924:	4b67      	ldr	r3, [pc, #412]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800492a:	f7fd fa77 	bl	8001e1c <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004932:	f7fd fa73 	bl	8001e1c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e0ba      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004944:	4b60      	ldr	r3, [pc, #384]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x36>
=======
 80043a0:	4b67      	ldr	r3, [pc, #412]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fd fced 	bl	8001d84 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ae:	f7fd fce9 	bl	8001d84 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0ba      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c0:	4b60      	ldr	r3, [pc, #384]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x36>
>>>>>>> Stashed changes
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	019a      	lsls	r2, r3, #6
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	071b      	lsls	r3, r3, #28
 800495c:	495a      	ldr	r1, [pc, #360]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
=======
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	019a      	lsls	r2, r3, #6
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	071b      	lsls	r3, r3, #28
 80043d8:	495a      	ldr	r1, [pc, #360]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
>>>>>>> Stashed changes
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< Updated upstream
 8004964:	4b57      	ldr	r3, [pc, #348]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800496a:	f7fd fa57 	bl	8001e1c <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004972:	f7fd fa53 	bl	8001e1c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e09a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004984:	4b50      	ldr	r3, [pc, #320]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x76>
=======
 80043e0:	4b57      	ldr	r3, [pc, #348]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043e6:	f7fd fccd 	bl	8001d84 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ee:	f7fd fcc9 	bl	8001d84 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e09a      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004400:	4b50      	ldr	r3, [pc, #320]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x76>
>>>>>>> Stashed changes
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< Updated upstream
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8083 	beq.w	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
=======
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8083 	beq.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
>>>>>>> Stashed changes
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	4b49      	ldr	r3, [pc, #292]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	4a48      	ldr	r2, [pc, #288]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ae:	4b46      	ldr	r3, [pc, #280]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a43      	ldr	r2, [pc, #268]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049c6:	f7fd fa29 	bl	8001e1c <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fd fa25 	bl	8001e1c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e06c      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049e0:	4b3a      	ldr	r3, [pc, #232]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
=======
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b49      	ldr	r3, [pc, #292]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	4a48      	ldr	r2, [pc, #288]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	@ 0x40
 800442a:	4b46      	ldr	r3, [pc, #280]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004436:	4b44      	ldr	r3, [pc, #272]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a43      	ldr	r2, [pc, #268]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004440:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004442:	f7fd fc9f 	bl	8001d84 <HAL_GetTick>
 8004446:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444a:	f7fd fc9b 	bl	8001d84 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e06c      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800445c:	4b3a      	ldr	r3, [pc, #232]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xd2>
>>>>>>> Stashed changes
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< Updated upstream
 80049ec:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02f      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d028      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a14:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a20:	4a29      	ldr	r2, [pc, #164]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a26:	4b28      	ldr	r3, [pc, #160]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d114      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fd f9f3 	bl	8001e1c <HAL_GetTick>
 8004a36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd f9ef 	bl	8001e1c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e034      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ee      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
=======
 8004468:	4b36      	ldr	r3, [pc, #216]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004470:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02f      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	d028      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004486:	4b2f      	ldr	r3, [pc, #188]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004490:	4b2e      	ldr	r3, [pc, #184]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004496:	4b2d      	ldr	r3, [pc, #180]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800449c:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a2:	4b28      	ldr	r3, [pc, #160]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d114      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fd fc69 	bl	8001d84 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b4:	e00a      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fd fc65 	bl	8001d84 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e034      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ee      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
>>>>>>> Stashed changes
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< Updated upstream
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a68:	d10d      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7e:	4912      	ldr	r1, [pc, #72]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]
 8004a84:	e005      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a86:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a90:	6093      	str	r3, [r2, #8]
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	490a      	ldr	r1, [pc, #40]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	670b      	str	r3, [r1, #112]	@ 0x70
=======
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044e4:	d10d      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044e6:	4b17      	ldr	r3, [pc, #92]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80044f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fa:	4912      	ldr	r1, [pc, #72]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]
 8004500:	e005      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004502:	4b10      	ldr	r3, [pc, #64]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004508:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800450c:	6093      	str	r3, [r2, #8]
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004510:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	490a      	ldr	r1, [pc, #40]	@ (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	670b      	str	r3, [r1, #112]	@ 0x70
>>>>>>> Stashed changes
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< Updated upstream
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7c1a      	ldrb	r2, [r3, #16]
 8004ab4:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ab6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	42470068 	.word	0x42470068
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40007000 	.word	0x40007000
 8004ad0:	42470e40 	.word	0x42470e40
 8004ad4:	424711e0 	.word	0x424711e0

08004ad8 <HAL_RCCEx_GetPeriphCLKFreq>:
=======
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7c1a      	ldrb	r2, [r3, #16]
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004532:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	42470068 	.word	0x42470068
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000
 800454c:	42470e40 	.word	0x42470e40
 8004550:	424711e0 	.word	0x424711e0

08004554 <HAL_RCCEx_GetPeriphCLKFreq>:
>>>>>>> Stashed changes
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
<<<<<<< Updated upstream
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d13f      	bne.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
=======
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d13f      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
>>>>>>> Stashed changes
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
<<<<<<< Updated upstream
 8004af6:	4b24      	ldr	r3, [pc, #144]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b0c:	d12f      	bne.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
=======
 8004572:	4b24      	ldr	r3, [pc, #144]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800457a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004588:	d12f      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x96>
>>>>>>> Stashed changes
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
<<<<<<< Updated upstream
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b10:	617b      	str	r3, [r7, #20]
          break;
 8004b12:	e02f      	b.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
=======
 800458a:	4b1f      	ldr	r3, [pc, #124]	@ (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800458c:	617b      	str	r3, [r7, #20]
          break;
 800458e:	e02f      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
>>>>>>> Stashed changes
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
<<<<<<< Updated upstream
 8004b14:	4b1c      	ldr	r3, [pc, #112]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b20:	d108      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b22:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b2a:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	e007      	b.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
=======
 8004590:	4b1c      	ldr	r3, [pc, #112]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800459c:	d108      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800459e:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a6:	4a19      	ldr	r2, [pc, #100]	@ (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e007      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
>>>>>>> Stashed changes
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
<<<<<<< Updated upstream
 8004b34:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b3c:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	613b      	str	r3, [r7, #16]
=======
 80045b0:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045b8:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
<<<<<<< Updated upstream
 8004b44:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b5e:	0f1b      	lsrs	r3, r3, #28
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	617b      	str	r3, [r7, #20]
          break;
 8004b6c:	e002      	b.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
=======
 80045c0:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045da:	0f1b      	lsrs	r3, r3, #28
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
          break;
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
>>>>>>> Stashed changes
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
<<<<<<< Updated upstream
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
          break;
 8004b72:	bf00      	nop
        }
      }
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
=======
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
          break;
 80045ee:	bf00      	nop
        }
      }
      break;
 80045f0:	e000      	b.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
>>>>>>> Stashed changes
    }
    default:
    {
      break;
<<<<<<< Updated upstream
 8004b76:	bf00      	nop
    }
  }
  return frequency;
 8004b78:	697b      	ldr	r3, [r7, #20]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	00bb8000 	.word	0x00bb8000
 8004b90:	007a1200 	.word	0x007a1200
 8004b94:	00f42400 	.word	0x00f42400

08004b98 <HAL_SPI_Init>:
=======
 80045f2:	bf00      	nop
    }
  }
  return frequency;
 80045f4:	697b      	ldr	r3, [r7, #20]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	00bb8000 	.word	0x00bb8000
 800460c:	007a1200 	.word	0x007a1200
 8004610:	00f42400 	.word	0x00f42400

08004614 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07b      	b.n	8004ca2 <HAL_SPI_Init+0x10a>
=======
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e07b      	b.n	800471e <HAL_SPI_Init+0x10a>
>>>>>>> Stashed changes
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< Updated upstream
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <HAL_SPI_Init+0x2c>
=======
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <HAL_SPI_Init+0x2c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< Updated upstream
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bba:	d009      	beq.n	8004bd0 <HAL_SPI_Init+0x38>
=======
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004636:	d009      	beq.n	800464c <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< Updated upstream
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	61da      	str	r2, [r3, #28]
 8004bc2:	e005      	b.n	8004bd0 <HAL_SPI_Init+0x38>
=======
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]
 800463e:	e005      	b.n	800464c <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< Updated upstream
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	615a      	str	r2, [r3, #20]
=======
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
=======
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc ffac 	bl	8001b48 <HAL_SPI_MspInit>
=======
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd f9f4 	bl	8001a54 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c06:	601a      	str	r2, [r3, #0]
=======
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004682:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< Updated upstream
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c54:	ea42 0103 	orr.w	r1, r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
=======
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< Updated upstream
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	f003 0104 	and.w	r1, r3, #4
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f003 0210 	and.w	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
=======
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0104 	and.w	r1, r3, #4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	f003 0210 	and.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_SPI_Transmit>:
=======
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800470c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SPI_Transmit>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b088      	sub	sp, #32
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
=======
 8004726:	b580      	push	{r7, lr}
 8004728:	b088      	sub	sp, #32
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004cba:	f7fd f8af 	bl	8001e1c <HAL_GetTick>
 8004cbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e12a      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Transmit+0x36>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e122      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
=======
 8004736:	f7fd fb25 	bl	8001d84 <HAL_GetTick>
 800473a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	e12a      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_SPI_Transmit+0x36>
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e122      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Transmit+0x48>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e11b      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d40:	d10f      	bne.n	8004d62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d60:	601a      	str	r2, [r3, #0]
=======
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_SPI_Transmit+0x48>
 800476a:	2302      	movs	r3, #2
 800476c:	e11b      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047bc:	d10f      	bne.n	80047de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d007      	beq.n	8004d80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d7e:	601a      	str	r2, [r3, #0]
=======
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047fa:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d88:	d152      	bne.n	8004e30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0xee>
 8004d92:	8b7b      	ldrh	r3, [r7, #26]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d145      	bne.n	8004e24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dbc:	e032      	b.n	8004e24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d112      	bne.n	8004df2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004df0:	e018      	b.n	8004e24 <HAL_SPI_Transmit+0x17a>
=======
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004804:	d152      	bne.n	80048ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0xee>
 800480e:	8b7b      	ldrh	r3, [r7, #26]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d145      	bne.n	80048a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004838:	e032      	b.n	80048a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d112      	bne.n	800486e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800486c:	e018      	b.n	80048a0 <HAL_SPI_Transmit+0x17a>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8004df2:	f7fd f813 	bl	8001e1c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Transmit+0x160>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Transmit+0x166>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e082      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1c7      	bne.n	8004dbe <HAL_SPI_Transmit+0x114>
 8004e2e:	e053      	b.n	8004ed8 <HAL_SPI_Transmit+0x22e>
=======
 800486e:	f7fd fa89 	bl	8001d84 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d803      	bhi.n	8004886 <HAL_SPI_Transmit+0x160>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d102      	bne.n	800488c <HAL_SPI_Transmit+0x166>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e082      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1c7      	bne.n	800483a <HAL_SPI_Transmit+0x114>
 80048aa:	e053      	b.n	8004954 <HAL_SPI_Transmit+0x22e>
>>>>>>> Stashed changes
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Transmit+0x194>
 8004e38:	8b7b      	ldrh	r3, [r7, #26]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d147      	bne.n	8004ece <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e64:	e033      	b.n	8004ece <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d113      	bne.n	8004e9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e9a:	e018      	b.n	8004ece <HAL_SPI_Transmit+0x224>
=======
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x194>
 80048b4:	8b7b      	ldrh	r3, [r7, #26]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d147      	bne.n	800494a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048e0:	e033      	b.n	800494a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d113      	bne.n	8004918 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004916:	e018      	b.n	800494a <HAL_SPI_Transmit+0x224>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8004e9c:	f7fc ffbe 	bl	8001e1c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d803      	bhi.n	8004eb4 <HAL_SPI_Transmit+0x20a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb2:	d102      	bne.n	8004eba <HAL_SPI_Transmit+0x210>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e02d      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1c6      	bne.n	8004e66 <HAL_SPI_Transmit+0x1bc>
=======
 8004918:	f7fd fa34 	bl	8001d84 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d803      	bhi.n	8004930 <HAL_SPI_Transmit+0x20a>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Transmit+0x210>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e02d      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1c6      	bne.n	80048e2 <HAL_SPI_Transmit+0x1bc>
>>>>>>> Stashed changes
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 fbe7 	bl	80056b0 <SPI_EndRxTxTransaction>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fbe7 	bl	800512c <SPI_EndRxTxTransaction>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_SPI_Transmit+0x280>
=======
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_OK;
<<<<<<< Updated upstream
 8004f28:	2300      	movs	r3, #0
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_SPI_Receive>:
=======
 80049a4:	2300      	movs	r3, #0
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_SPI_Receive>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b088      	sub	sp, #32
 8004f36:	af02      	add	r7, sp, #8
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
=======
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b088      	sub	sp, #32
 80049b2:	af02      	add	r7, sp, #8
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
<<<<<<< Updated upstream
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d001      	beq.n	8004f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e104      	b.n	800515c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f5a:	d112      	bne.n	8004f82 <HAL_SPI_Receive+0x50>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10e      	bne.n	8004f82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2204      	movs	r2, #4
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f8f3 	bl	8005164 <HAL_SPI_TransmitReceive>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	e0ec      	b.n	800515c <HAL_SPI_Receive+0x22a>
=======
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
 80049cc:	e104      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049d6:	d112      	bne.n	80049fe <HAL_SPI_Receive+0x50>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10e      	bne.n	80049fe <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2204      	movs	r2, #4
 80049e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f8f3 	bl	8004be0 <HAL_SPI_TransmitReceive>
 80049fa:	4603      	mov	r3, r0
 80049fc:	e0ec      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
>>>>>>> Stashed changes
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004f82:	f7fc ff4b 	bl	8001e1c <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_SPI_Receive+0x62>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0e1      	b.n	800515c <HAL_SPI_Receive+0x22a>
=======
 80049fe:	f7fd f9c1 	bl	8001d84 <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Receive+0x62>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0e1      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SPI_Receive+0x74>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e0da      	b.n	800515c <HAL_SPI_Receive+0x22a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_SPI_Receive+0x74>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0da      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	88fa      	ldrh	r2, [r7, #6]
 8004a42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< Updated upstream
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff4:	d10f      	bne.n	8005016 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005014:	601a      	str	r2, [r3, #0]
=======
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a70:	d10f      	bne.n	8004a92 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a90:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005020:	2b40      	cmp	r3, #64	@ 0x40
 8005022:	d007      	beq.n	8005034 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005032:	601a      	str	r2, [r3, #0]
=======
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d007      	beq.n	8004ab0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aae:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d170      	bne.n	800511e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800503c:	e035      	b.n	80050aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d115      	bne.n	8005078 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f103 020c 	add.w	r2, r3, #12
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005076:	e018      	b.n	80050aa <HAL_SPI_Receive+0x178>
=======
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d170      	bne.n	8004b9a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ab8:	e035      	b.n	8004b26 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d115      	bne.n	8004af4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f103 020c 	add.w	r2, r3, #12
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004af2:	e018      	b.n	8004b26 <HAL_SPI_Receive+0x178>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 8005078:	f7fc fed0 	bl	8001e1c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d803      	bhi.n	8005090 <HAL_SPI_Receive+0x15e>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Receive+0x164>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e058      	b.n	800515c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1c4      	bne.n	800503e <HAL_SPI_Receive+0x10c>
 80050b4:	e038      	b.n	8005128 <HAL_SPI_Receive+0x1f6>
=======
 8004af4:	f7fd f946 	bl	8001d84 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d803      	bhi.n	8004b0c <HAL_SPI_Receive+0x15e>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_Receive+0x164>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e058      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1c4      	bne.n	8004aba <HAL_SPI_Receive+0x10c>
 8004b30:	e038      	b.n	8004ba4 <HAL_SPI_Receive+0x1f6>
>>>>>>> Stashed changes
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< Updated upstream
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d113      	bne.n	80050ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	b292      	uxth	r2, r2
 80050d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050ea:	e018      	b.n	800511e <HAL_SPI_Receive+0x1ec>
=======
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d113      	bne.n	8004b68 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b66:	e018      	b.n	8004b9a <HAL_SPI_Receive+0x1ec>
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
 80050ec:	f7fc fe96 	bl	8001e1c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_Receive+0x1d2>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005102:	d102      	bne.n	800510a <HAL_SPI_Receive+0x1d8>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e01e      	b.n	800515c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1c6      	bne.n	80050b6 <HAL_SPI_Receive+0x184>
=======
 8004b68:	f7fd f90c 	bl	8001d84 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d803      	bhi.n	8004b80 <HAL_SPI_Receive+0x1d2>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d102      	bne.n	8004b86 <HAL_SPI_Receive+0x1d8>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e01e      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1c6      	bne.n	8004b32 <HAL_SPI_Receive+0x184>
>>>>>>> Stashed changes
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa59 	bl	80055e4 <SPI_EndRxTransaction>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fa59 	bl	8005060 <SPI_EndRxTransaction>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
<<<<<<< Updated upstream
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_SPI_Receive+0x22a>
=======
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_SPI_Receive+0x22a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_OK;
<<<<<<< Updated upstream
 800515a:	2300      	movs	r3, #0
  }
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_TransmitReceive>:
=======
 8004bd6:	2300      	movs	r3, #0
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_SPI_TransmitReceive>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	@ 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	807b      	strh	r3, [r7, #2]
=======
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	@ 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< Updated upstream
 8005172:	2301      	movs	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8005176:	f7fc fe51 	bl	8001e1c <HAL_GetTick>
 800517a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005182:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800518e:	7ffb      	ldrb	r3, [r7, #31]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d00c      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x4a>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800519a:	d106      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x46>
 80051a4:	7ffb      	ldrb	r3, [r7, #31]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d001      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
 80051ac:	e17f      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x5c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x5c>
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e174      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
=======
 8004bf2:	f7fd f8c7 	bl	8001d84 <HAL_GetTick>
 8004bf6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bfe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d00c      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0x4a>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c16:	d106      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x46>
 8004c20:	7ffb      	ldrb	r3, [r7, #31]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d001      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004c26:	2302      	movs	r3, #2
 8004c28:	e17f      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x5c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x5c>
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e174      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x6e>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e16d      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d003      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2205      	movs	r2, #5
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
=======
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x6e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e16d      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d003      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2205      	movs	r2, #5
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	887a      	ldrh	r2, [r7, #2]
 80051fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	887a      	ldrh	r2, [r7, #2]
 8005204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	887a      	ldrh	r2, [r7, #2]
 8004c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522e:	2b40      	cmp	r3, #64	@ 0x40
 8005230:	d007      	beq.n	8005242 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005240:	601a      	str	r2, [r3, #0]
=======
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d007      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cbc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< Updated upstream
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800524a:	d17e      	bne.n	800534a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_SPI_TransmitReceive+0xf6>
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d16c      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	86da      	strh	r2, [r3, #54]	@ 0x36
=======
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc6:	d17e      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0xf6>
 8004cd0:	8afb      	ldrh	r3, [r7, #22]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d16c      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
>>>>>>> Stashed changes
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 800527e:	e059      	b.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d11b      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x162>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d016      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x162>
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	2b01      	cmp	r3, #1
 800529c:	d113      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a2:	881a      	ldrh	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ae:	1c9a      	adds	r2, r3, #2
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8004cfa:	e059      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d11b      	bne.n	8004d42 <HAL_SPI_TransmitReceive+0x162>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x162>
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d113      	bne.n	8004d42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	1c9a      	adds	r2, r3, #2
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d119      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x1a4>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d014      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e8:	b292      	uxth	r2, r2
 80052ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005308:	f7fc fd88 	bl	8001e1c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005314:	429a      	cmp	r2, r3
 8005316:	d80d      	bhi.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800531e:	d009      	beq.n	8005334 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e0bc      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1a0      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x11c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d19b      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x11c>
 8005348:	e082      	b.n	8005450 <HAL_SPI_TransmitReceive+0x2ec>
=======
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d119      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1a4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	b292      	uxth	r2, r2
 8004d66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	1c9a      	adds	r2, r3, #2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d80:	2301      	movs	r3, #1
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d84:	f7fc fffe 	bl	8001d84 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d80d      	bhi.n	8004db0 <HAL_SPI_TransmitReceive+0x1d0>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d009      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0bc      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1a0      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x11c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d19b      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x11c>
 8004dc4:	e082      	b.n	8004ecc <HAL_SPI_TransmitReceive+0x2ec>
>>>>>>> Stashed changes
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x1f4>
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d171      	bne.n	800543c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	86da      	strh	r2, [r3, #54]	@ 0x36
=======
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x1f4>
 8004dce:	8afb      	ldrh	r3, [r7, #22]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d171      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	86da      	strh	r2, [r3, #54]	@ 0x36
>>>>>>> Stashed changes
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 800537e:	e05d      	b.n	800543c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d11c      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x264>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x264>
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	2b01      	cmp	r3, #1
 800539c:	d114      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
=======
 8004dfa:	e05d      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d11c      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x264>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d017      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x264>
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d114      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d119      	bne.n	800540a <HAL_SPI_TransmitReceive+0x2a6>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d014      	beq.n	800540a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005406:	2301      	movs	r3, #1
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800540a:	f7fc fd07 	bl	8001e1c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005416:	429a      	cmp	r2, r3
 8005418:	d803      	bhi.n	8005422 <HAL_SPI_TransmitReceive+0x2be>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005420:	d102      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x2c4>
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e038      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d19c      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x21c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d197      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x21c>
=======
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d119      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x2a6>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d014      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e82:	2301      	movs	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e86:	f7fc ff7d 	bl	8001d84 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d803      	bhi.n	8004e9e <HAL_SPI_TransmitReceive+0x2be>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d102      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x2c4>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e038      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d19c      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x21c>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d197      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x21c>
>>>>>>> Stashed changes
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f92b 	bl	80056b0 <SPI_EndRxTxTransaction>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e01d      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
=======
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f92b 	bl	800512c <SPI_EndRxTxTransaction>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e01d      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	693b      	ldr	r3, [r7, #16]
=======
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
  }


  hspi->State = HAL_SPI_STATE_READY;
<<<<<<< Updated upstream
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_SPI_TransmitReceive+0x34a>
=======
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x34a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_OK;
<<<<<<< Updated upstream
 80054ac:	2300      	movs	r3, #0
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3728      	adds	r7, #40	@ 0x28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SPI_GetState>:
=======
 8004f28:	2300      	movs	r3, #0
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3728      	adds	r7, #40	@ 0x28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_SPI_GetState>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054c4:	b2db      	uxtb	r3, r3
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <SPI_WaitFlagStateUntilTimeout>:
=======
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f40:	b2db      	uxtb	r3, r3
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
=======
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< Updated upstream
 80054e4:	f7fc fc9a 	bl	8001e1c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4413      	add	r3, r2
 80054f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f4:	f7fc fc92 	bl	8001e1c <HAL_GetTick>
 80054f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054fa:	4b39      	ldr	r3, [pc, #228]	@ (80055e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	015b      	lsls	r3, r3, #5
 8005500:	0d1b      	lsrs	r3, r3, #20
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550a:	e054      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005512:	d050      	beq.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005514:	f7fc fc82 	bl	8001e1c <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	429a      	cmp	r2, r3
 8005522:	d902      	bls.n	800552a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d13d      	bne.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8004f60:	f7fc ff10 	bl	8001d84 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f70:	f7fc ff08 	bl	8001d84 <HAL_GetTick>
 8004f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f76:	4b39      	ldr	r3, [pc, #228]	@ (800505c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	015b      	lsls	r3, r3, #5
 8004f7c:	0d1b      	lsrs	r3, r3, #20
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	fb02 f303 	mul.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f86:	e054      	b.n	8005032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d050      	beq.n	8005032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f90:	f7fc fef8 	bl	8001d84 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d902      	bls.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d13d      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005542:	d111      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d004      	beq.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005556:	d107      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005566:	601a      	str	r2, [r3, #0]
=======
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fbe:	d111      	bne.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc8:	d004      	beq.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd2:	d107      	bne.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005570:	d10f      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e017      	b.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d19b      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fec:	d10f      	bne.n	800500e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800500c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e017      	b.n	8005052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3b01      	subs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d19b      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000008 	.word	0x20000008

080055e4 <SPI_EndRxTransaction>:
=======
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000000 	.word	0x20000000

08005060 <SPI_EndRxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f8:	d111      	bne.n	800561e <SPI_EndRxTransaction+0x3a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005602:	d004      	beq.n	800560e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560c:	d107      	bne.n	800561e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800561c:	601a      	str	r2, [r3, #0]
=======
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005074:	d111      	bne.n	800509a <SPI_EndRxTransaction+0x3a>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507e:	d004      	beq.n	800508a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005088:	d107      	bne.n	800509a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005098:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< Updated upstream
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005626:	d12a      	bne.n	800567e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005630:	d012      	beq.n	8005658 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	2180      	movs	r1, #128	@ 0x80
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff ff49 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02d      	beq.n	80056a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e026      	b.n	80056a6 <SPI_EndRxTransaction+0xc2>
=======
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050a2:	d12a      	bne.n	80050fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ac:	d012      	beq.n	80050d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	@ 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff ff49 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02d      	beq.n	8005120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e026      	b.n	8005122 <SPI_EndRxTransaction+0xc2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	2101      	movs	r1, #1
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff ff36 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01a      	beq.n	80056a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e013      	b.n	80056a6 <SPI_EndRxTransaction+0xc2>
=======
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	2101      	movs	r1, #1
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff ff36 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01a      	beq.n	8005120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e013      	b.n	8005122 <SPI_EndRxTransaction+0xc2>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2200      	movs	r2, #0
 8005686:	2101      	movs	r1, #1
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff ff23 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005698:	f043 0220 	orr.w	r2, r3, #32
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e000      	b.n	80056a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <SPI_EndRxTxTransaction>:
=======
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	2101      	movs	r1, #1
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff23 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e000      	b.n	8005122 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2201      	movs	r2, #1
 80056c4:	2102      	movs	r1, #2
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff ff04 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e032      	b.n	8005748 <SPI_EndRxTxTransaction+0x98>
=======
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2201      	movs	r2, #1
 8005140:	2102      	movs	r1, #2
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff ff04 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e032      	b.n	80051c4 <SPI_EndRxTxTransaction+0x98>
>>>>>>> Stashed changes
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
<<<<<<< Updated upstream
 80056e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <SPI_EndRxTxTransaction+0xa0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005754 <SPI_EndRxTxTransaction+0xa4>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	0d5b      	lsrs	r3, r3, #21
 80056ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005700:	d112      	bne.n	8005728 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fee1 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d016      	beq.n	8005746 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e00f      	b.n	8005748 <SPI_EndRxTxTransaction+0x98>
=======
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <SPI_EndRxTxTransaction+0xa0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	@ (80051d0 <SPI_EndRxTxTransaction+0xa4>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	0d5b      	lsrs	r3, r3, #21
 800516a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517c:	d112      	bne.n	80051a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff fee1 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d016      	beq.n	80051c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e00f      	b.n	80051c4 <SPI_EndRxTxTransaction+0x98>
>>>>>>> Stashed changes
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< Updated upstream
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <SPI_EndRxTxTransaction+0x94>
=======
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <SPI_EndRxTxTransaction+0x94>
>>>>>>> Stashed changes
      {
        break;
      }
      count--;
<<<<<<< Updated upstream
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	3b01      	subs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b80      	cmp	r3, #128	@ 0x80
 8005740:	d0f2      	beq.n	8005728 <SPI_EndRxTxTransaction+0x78>
 8005742:	e000      	b.n	8005746 <SPI_EndRxTxTransaction+0x96>
        break;
 8005744:	bf00      	nop
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000008 	.word	0x20000008
 8005754:	165e9f81 	.word	0x165e9f81

08005758 <HAL_TIM_Base_Init>:
=======
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	d0f2      	beq.n	80051a4 <SPI_EndRxTxTransaction+0x78>
 80051be:	e000      	b.n	80051c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80051c0:	bf00      	nop
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000000 	.word	0x20000000
 80051d0:	165e9f81 	.word	0x165e9f81

080051d4 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e041      	b.n	80057ee <HAL_TIM_Base_Init+0x96>
=======
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e041      	b.n	800526a <HAL_TIM_Base_Init+0x96>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc fa2a 	bl	8001bd8 <HAL_TIM_Base_MspInit>
=======
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc fc72 	bl	8001ae4 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 fa72 	bl	8005c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_TIM_Base_Start>:
=======
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f950 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_TIM_Base_Start>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
=======
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< Updated upstream
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e03c      	b.n	800588a <HAL_TIM_Base_Start+0x92>
=======
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d001      	beq.n	800528c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e03c      	b.n	8005306 <HAL_TIM_Base_Start+0x92>
>>>>>>> Stashed changes
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <HAL_TIM_Base_Start+0xa0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_TIM_Base_Start+0x5c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582a:	d013      	beq.n	8005854 <HAL_TIM_Base_Start+0x5c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1a      	ldr	r2, [pc, #104]	@ (800589c <HAL_TIM_Base_Start+0xa4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_TIM_Base_Start+0x5c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <HAL_TIM_Base_Start+0xa8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_TIM_Base_Start+0x5c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a17      	ldr	r2, [pc, #92]	@ (80058a4 <HAL_TIM_Base_Start+0xac>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_Base_Start+0x5c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <HAL_TIM_Base_Start+0xb0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b06      	cmp	r3, #6
 8005864:	d010      	beq.n	8005888 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	e007      	b.n	8005888 <HAL_TIM_Base_Start+0x90>
=======
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <HAL_TIM_Base_Start+0xa0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_Base_Start+0x5c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_Base_Start+0x5c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005318 <HAL_TIM_Base_Start+0xa4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_Base_Start+0x5c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a19      	ldr	r2, [pc, #100]	@ (800531c <HAL_TIM_Base_Start+0xa8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_Base_Start+0x5c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <HAL_TIM_Base_Start+0xac>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_Base_Start+0x5c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <HAL_TIM_Base_Start+0xb0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d111      	bne.n	80052f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d010      	beq.n	8005304 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f2:	e007      	b.n	8005304 <HAL_TIM_Base_Start+0x90>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
=======
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40014000 	.word	0x40014000

080058ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0202 	mvn.w	r2, #2
 80058e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9a3 	bl	8005c42 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f995 	bl	8005c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9a6 	bl	8005c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0204 	mvn.w	r2, #4
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f97d 	bl	8005c42 <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f96f 	bl	8005c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f980 	bl	8005c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0208 	mvn.w	r2, #8
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2204      	movs	r2, #4
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f957 	bl	8005c42 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f949 	bl	8005c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f95a 	bl	8005c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0210 	mvn.w	r2, #16
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2208      	movs	r2, #8
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f931 	bl	8005c42 <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f923 	bl	8005c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f934 	bl	8005c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0201 	mvn.w	r2, #1
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f901 	bl	8005c1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fac0 	bl	8005fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f905 	bl	8005c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0220 	mvn.w	r2, #32
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa92 	bl	8005fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_TIM_ConfigClockSource>:
=======
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40014000 	.word	0x40014000

08005328 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
=======
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e0b4      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x186>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIM_ConfigClockSource+0x1c>
 8005340:	2302      	movs	r3, #2
 8005342:	e0b4      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x186>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae0:	d03e      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0xd4>
 8005ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae6:	f200 8087 	bhi.w	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aee:	f000 8086 	beq.w	8005bfe <HAL_TIM_ConfigClockSource+0x172>
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af6:	d87f      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b70      	cmp	r3, #112	@ 0x70
 8005afa:	d01a      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0xa6>
 8005afc:	2b70      	cmp	r3, #112	@ 0x70
 8005afe:	d87b      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b60      	cmp	r3, #96	@ 0x60
 8005b02:	d050      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b04:	2b60      	cmp	r3, #96	@ 0x60
 8005b06:	d877      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b50      	cmp	r3, #80	@ 0x50
 8005b0a:	d03c      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0xfa>
 8005b0c:	2b50      	cmp	r3, #80	@ 0x50
 8005b0e:	d873      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b40      	cmp	r3, #64	@ 0x40
 8005b12:	d058      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b14:	2b40      	cmp	r3, #64	@ 0x40
 8005b16:	d86f      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b30      	cmp	r3, #48	@ 0x30
 8005b1a:	d064      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b30      	cmp	r3, #48	@ 0x30
 8005b1e:	d86b      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d060      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d867      	bhi.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d05c      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d05a      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b30:	e062      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800536a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537c:	d03e      	beq.n	80053fc <HAL_TIM_ConfigClockSource+0xd4>
 800537e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005382:	f200 8087 	bhi.w	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538a:	f000 8086 	beq.w	800549a <HAL_TIM_ConfigClockSource+0x172>
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005392:	d87f      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b70      	cmp	r3, #112	@ 0x70
 8005396:	d01a      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0xa6>
 8005398:	2b70      	cmp	r3, #112	@ 0x70
 800539a:	d87b      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b60      	cmp	r3, #96	@ 0x60
 800539e:	d050      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x11a>
 80053a0:	2b60      	cmp	r3, #96	@ 0x60
 80053a2:	d877      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b50      	cmp	r3, #80	@ 0x50
 80053a6:	d03c      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0xfa>
 80053a8:	2b50      	cmp	r3, #80	@ 0x50
 80053aa:	d873      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d058      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x13a>
 80053b0:	2b40      	cmp	r3, #64	@ 0x40
 80053b2:	d86f      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b30      	cmp	r3, #48	@ 0x30
 80053b6:	d064      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	2b30      	cmp	r3, #48	@ 0x30
 80053ba:	d86b      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d060      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d867      	bhi.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d05c      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d05a      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x15a>
 80053cc:	e062      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b42:	f000 f9a3 	bl	8005e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	609a      	str	r2, [r3, #8]
      break;
 8005b5e:	e04f      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
=======
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053de:	f000 f971 	bl	80056c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	609a      	str	r2, [r3, #8]
      break;
 80053fa:	e04f      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b70:	f000 f98c 	bl	8005e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b82:	609a      	str	r2, [r3, #8]
      break;
 8005b84:	e03c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
=======
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800540c:	f000 f95a 	bl	80056c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800541e:	609a      	str	r2, [r3, #8]
      break;
 8005420:	e03c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 f900 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2150      	movs	r1, #80	@ 0x50
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f959 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e02c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	461a      	mov	r2, r3
 8005430:	f000 f8ce 	bl	80055d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2150      	movs	r1, #80	@ 0x50
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f927 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005440:	e02c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f000 f91f 	bl	8005df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2160      	movs	r1, #96	@ 0x60
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f949 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005bc4:	e01c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	461a      	mov	r2, r3
 8005450:	f000 f8ed 	bl	800562e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2160      	movs	r1, #96	@ 0x60
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f917 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005460:	e01c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 f8e0 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2140      	movs	r1, #64	@ 0x40
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f939 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e00c      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	461a      	mov	r2, r3
 8005470:	f000 f8ae 	bl	80055d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2140      	movs	r1, #64	@ 0x40
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f907 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005480:	e00c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f000 f930 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005bf6:	e003      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
=======
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 f8fe 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005492:	e003      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bfc:	e000      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <TIM_Base_SetConfig>:
=======
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      break;
 8005498:	e000      	b.n	800549c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800549a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3a      	ldr	r2, [pc, #232]	@ (8005d7c <TIM_Base_SetConfig+0xfc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0x38>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0x38>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a37      	ldr	r2, [pc, #220]	@ (8005d80 <TIM_Base_SetConfig+0x100>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0x38>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a36      	ldr	r2, [pc, #216]	@ (8005d84 <TIM_Base_SetConfig+0x104>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a35      	ldr	r2, [pc, #212]	@ (8005d88 <TIM_Base_SetConfig+0x108>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d108      	bne.n	8005cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8005d7c <TIM_Base_SetConfig+0xfc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01b      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd8:	d017      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <TIM_Base_SetConfig+0x100>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a27      	ldr	r2, [pc, #156]	@ (8005d84 <TIM_Base_SetConfig+0x104>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00f      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a26      	ldr	r2, [pc, #152]	@ (8005d88 <TIM_Base_SetConfig+0x108>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00b      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a25      	ldr	r2, [pc, #148]	@ (8005d8c <TIM_Base_SetConfig+0x10c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a24      	ldr	r2, [pc, #144]	@ (8005d90 <TIM_Base_SetConfig+0x110>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_Base_SetConfig+0x8a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a23      	ldr	r2, [pc, #140]	@ (8005d94 <TIM_Base_SetConfig+0x114>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d108      	bne.n	8005d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
=======
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3a      	ldr	r2, [pc, #232]	@ (80055b4 <TIM_Base_SetConfig+0xfc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a37      	ldr	r2, [pc, #220]	@ (80055b8 <TIM_Base_SetConfig+0x100>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a36      	ldr	r2, [pc, #216]	@ (80055bc <TIM_Base_SetConfig+0x104>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x38>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a35      	ldr	r2, [pc, #212]	@ (80055c0 <TIM_Base_SetConfig+0x108>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2b      	ldr	r2, [pc, #172]	@ (80055b4 <TIM_Base_SetConfig+0xfc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01b      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d017      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a28      	ldr	r2, [pc, #160]	@ (80055b8 <TIM_Base_SetConfig+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a27      	ldr	r2, [pc, #156]	@ (80055bc <TIM_Base_SetConfig+0x104>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a26      	ldr	r2, [pc, #152]	@ (80055c0 <TIM_Base_SetConfig+0x108>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a25      	ldr	r2, [pc, #148]	@ (80055c4 <TIM_Base_SetConfig+0x10c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a24      	ldr	r2, [pc, #144]	@ (80055c8 <TIM_Base_SetConfig+0x110>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x8a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a23      	ldr	r2, [pc, #140]	@ (80055cc <TIM_Base_SetConfig+0x114>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0e      	ldr	r2, [pc, #56]	@ (8005d7c <TIM_Base_SetConfig+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a0e      	ldr	r2, [pc, #56]	@ (80055b4 <TIM_Base_SetConfig+0xfc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d103      	bne.n	8005588 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d105      	bne.n	8005d6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800

08005d98 <TIM_TI1_ConfigInputStage>:
=======
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d105      	bne.n	80055a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f023 0201 	bic.w	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	611a      	str	r2, [r3, #16]
  }
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
=======
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_TI2_ConfigInputStage>:
=======
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f023 0201 	bic.w	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 030a 	bic.w	r3, r3, #10
 800560c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
=======
 800562e:	b480      	push	{r7}
 8005630:	b087      	sub	sp, #28
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f023 0210 	bic.w	r2, r3, #16
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	031b      	lsls	r3, r3, #12
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <TIM_ITRx_SetConfig>:
=======
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 0210 	bic.w	r2, r3, #16
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	031b      	lsls	r3, r3, #12
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800566a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
=======
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f043 0307 	orr.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_ETR_SetConfig>:
=======
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f043 0307 	orr.w	r3, r3, #7
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	609a      	str	r2, [r3, #8]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
=======
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e050      	b.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	@ (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d018      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f30:	d013      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	@ (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a13      	ldr	r2, [pc, #76]	@ (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10c      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]
=======
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e050      	b.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005768:	d013      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a18      	ldr	r2, [pc, #96]	@ (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a16      	ldr	r2, [pc, #88]	@ (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10c      	bne.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40014000 	.word	0x40014000

08005fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
=======
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e042      	b.n	8005878 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fc f98e 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2224      	movs	r2, #36	@ 0x24
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f82b 	bl	8005880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
>>>>>>> Stashed changes
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <memset>:
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d100      	bne.n	8005fda <memset+0xa>
 8005fd8:	4770      	bx	lr
 8005fda:	f803 1b01 	strb.w	r1, [r3], #1
 8005fde:	e7f9      	b.n	8005fd4 <memset+0x4>

08005fe0 <__libc_init_array>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8006018 <__libc_init_array+0x38>)
 8005fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800601c <__libc_init_array+0x3c>)
 8005fe6:	1b64      	subs	r4, r4, r5
 8005fe8:	10a4      	asrs	r4, r4, #2
 8005fea:	2600      	movs	r6, #0
 8005fec:	42a6      	cmp	r6, r4
 8005fee:	d109      	bne.n	8006004 <__libc_init_array+0x24>
 8005ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8006020 <__libc_init_array+0x40>)
 8005ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8006024 <__libc_init_array+0x44>)
 8005ff4:	f000 f818 	bl	8006028 <_init>
 8005ff8:	1b64      	subs	r4, r4, r5
 8005ffa:	10a4      	asrs	r4, r4, #2
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	42a6      	cmp	r6, r4
 8006000:	d105      	bne.n	800600e <__libc_init_array+0x2e>
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	f855 3b04 	ldr.w	r3, [r5], #4
 8006008:	4798      	blx	r3
 800600a:	3601      	adds	r6, #1
 800600c:	e7ee      	b.n	8005fec <__libc_init_array+0xc>
 800600e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006012:	4798      	blx	r3
 8006014:	3601      	adds	r6, #1
 8006016:	e7f2      	b.n	8005ffe <__libc_init_array+0x1e>
 8006018:	080562c8 	.word	0x080562c8
 800601c:	080562c8 	.word	0x080562c8
 8006020:	080562c8 	.word	0x080562c8
 8006024:	080562cc 	.word	0x080562cc

08006028 <_init>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr

08006034 <_fini>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr
=======
 8005880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005884:	b0c0      	sub	sp, #256	@ 0x100
 8005886:	af00      	add	r7, sp, #0
 8005888:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	68d9      	ldr	r1, [r3, #12]
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	ea40 0301 	orr.w	r3, r0, r1
 80058a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058d8:	f021 010c 	bic.w	r1, r1, #12
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058e6:	430b      	orrs	r3, r1
 80058e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	6999      	ldr	r1, [r3, #24]
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	ea40 0301 	orr.w	r3, r0, r1
 8005906:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b8f      	ldr	r3, [pc, #572]	@ (8005b4c <UART_SetConfig+0x2cc>)
 8005910:	429a      	cmp	r2, r3
 8005912:	d005      	beq.n	8005920 <UART_SetConfig+0xa0>
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b50 <UART_SetConfig+0x2d0>)
 800591c:	429a      	cmp	r2, r3
 800591e:	d104      	bne.n	800592a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fd16 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005924:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005928:	e003      	b.n	8005932 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800592a:	f7fe fcfd 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 800592e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593c:	f040 810c 	bne.w	8005b58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800594a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800594e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	1891      	adds	r1, r2, r2
 8005958:	65b9      	str	r1, [r7, #88]	@ 0x58
 800595a:	415b      	adcs	r3, r3
 800595c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800595e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005962:	4621      	mov	r1, r4
 8005964:	eb12 0801 	adds.w	r8, r2, r1
 8005968:	4629      	mov	r1, r5
 800596a:	eb43 0901 	adc.w	r9, r3, r1
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800597a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800597e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005982:	4690      	mov	r8, r2
 8005984:	4699      	mov	r9, r3
 8005986:	4623      	mov	r3, r4
 8005988:	eb18 0303 	adds.w	r3, r8, r3
 800598c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005990:	462b      	mov	r3, r5
 8005992:	eb49 0303 	adc.w	r3, r9, r3
 8005996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059ae:	460b      	mov	r3, r1
 80059b0:	18db      	adds	r3, r3, r3
 80059b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059b4:	4613      	mov	r3, r2
 80059b6:	eb42 0303 	adc.w	r3, r2, r3
 80059ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80059bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059c4:	f7fa fc06 	bl	80001d4 <__aeabi_uldivmod>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4b61      	ldr	r3, [pc, #388]	@ (8005b54 <UART_SetConfig+0x2d4>)
 80059ce:	fba3 2302 	umull	r2, r3, r3, r2
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	011c      	lsls	r4, r3, #4
 80059d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	1891      	adds	r1, r2, r2
 80059ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059f0:	415b      	adcs	r3, r3
 80059f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059f8:	4641      	mov	r1, r8
 80059fa:	eb12 0a01 	adds.w	sl, r2, r1
 80059fe:	4649      	mov	r1, r9
 8005a00:	eb43 0b01 	adc.w	fp, r3, r1
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a18:	4692      	mov	sl, r2
 8005a1a:	469b      	mov	fp, r3
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a26:	464b      	mov	r3, r9
 8005a28:	eb4b 0303 	adc.w	r3, fp, r3
 8005a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a44:	460b      	mov	r3, r1
 8005a46:	18db      	adds	r3, r3, r3
 8005a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	eb42 0303 	adc.w	r3, r2, r3
 8005a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a5a:	f7fa fbbb 	bl	80001d4 <__aeabi_uldivmod>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4611      	mov	r1, r2
 8005a64:	4b3b      	ldr	r3, [pc, #236]	@ (8005b54 <UART_SetConfig+0x2d4>)
 8005a66:	fba3 2301 	umull	r2, r3, r3, r1
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2264      	movs	r2, #100	@ 0x64
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	1acb      	subs	r3, r1, r3
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a7a:	4b36      	ldr	r3, [pc, #216]	@ (8005b54 <UART_SetConfig+0x2d4>)
 8005a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a88:	441c      	add	r4, r3
 8005a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	1891      	adds	r1, r2, r2
 8005aa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005aa4:	415b      	adcs	r3, r3
 8005aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aac:	4641      	mov	r1, r8
 8005aae:	1851      	adds	r1, r2, r1
 8005ab0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	414b      	adcs	r3, r1
 8005ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	00cb      	lsls	r3, r1, #3
 8005ac8:	4651      	mov	r1, sl
 8005aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ace:	4651      	mov	r1, sl
 8005ad0:	00ca      	lsls	r2, r1, #3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4642      	mov	r2, r8
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005af8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005afc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b00:	460b      	mov	r3, r1
 8005b02:	18db      	adds	r3, r3, r3
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b06:	4613      	mov	r3, r2
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b16:	f7fa fb5d 	bl	80001d4 <__aeabi_uldivmod>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <UART_SetConfig+0x2d4>)
 8005b20:	fba3 1302 	umull	r1, r3, r3, r2
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	2164      	movs	r1, #100	@ 0x64
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	3332      	adds	r3, #50	@ 0x32
 8005b32:	4a08      	ldr	r2, [pc, #32]	@ (8005b54 <UART_SetConfig+0x2d4>)
 8005b34:	fba2 2303 	umull	r2, r3, r2, r3
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	f003 0207 	and.w	r2, r3, #7
 8005b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4422      	add	r2, r4
 8005b46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b48:	e106      	b.n	8005d58 <UART_SetConfig+0x4d8>
 8005b4a:	bf00      	nop
 8005b4c:	40011000 	.word	0x40011000
 8005b50:	40011400 	.word	0x40011400
 8005b54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b6a:	4642      	mov	r2, r8
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	1891      	adds	r1, r2, r2
 8005b70:	6239      	str	r1, [r7, #32]
 8005b72:	415b      	adcs	r3, r3
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	1854      	adds	r4, r2, r1
 8005b7e:	4649      	mov	r1, r9
 8005b80:	eb43 0501 	adc.w	r5, r3, r1
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	00eb      	lsls	r3, r5, #3
 8005b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b92:	00e2      	lsls	r2, r4, #3
 8005b94:	4614      	mov	r4, r2
 8005b96:	461d      	mov	r5, r3
 8005b98:	4643      	mov	r3, r8
 8005b9a:	18e3      	adds	r3, r4, r3
 8005b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	eb45 0303 	adc.w	r3, r5, r3
 8005ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	008b      	lsls	r3, r1, #2
 8005bca:	4621      	mov	r1, r4
 8005bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	008a      	lsls	r2, r1, #2
 8005bd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bd8:	f7fa fafc 	bl	80001d4 <__aeabi_uldivmod>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4b60      	ldr	r3, [pc, #384]	@ (8005d64 <UART_SetConfig+0x4e4>)
 8005be2:	fba3 2302 	umull	r2, r3, r3, r2
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	011c      	lsls	r4, r3, #4
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	1891      	adds	r1, r2, r2
 8005c02:	61b9      	str	r1, [r7, #24]
 8005c04:	415b      	adcs	r3, r3
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	1851      	adds	r1, r2, r1
 8005c10:	6139      	str	r1, [r7, #16]
 8005c12:	4649      	mov	r1, r9
 8005c14:	414b      	adcs	r3, r1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c24:	4659      	mov	r1, fp
 8005c26:	00cb      	lsls	r3, r1, #3
 8005c28:	4651      	mov	r1, sl
 8005c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2e:	4651      	mov	r1, sl
 8005c30:	00ca      	lsls	r2, r1, #3
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	4603      	mov	r3, r0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c40:	464b      	mov	r3, r9
 8005c42:	460a      	mov	r2, r1
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c64:	4649      	mov	r1, r9
 8005c66:	008b      	lsls	r3, r1, #2
 8005c68:	4641      	mov	r1, r8
 8005c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c6e:	4641      	mov	r1, r8
 8005c70:	008a      	lsls	r2, r1, #2
 8005c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c76:	f7fa faad 	bl	80001d4 <__aeabi_uldivmod>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4b38      	ldr	r3, [pc, #224]	@ (8005d64 <UART_SetConfig+0x4e4>)
 8005c82:	fba3 2301 	umull	r2, r3, r3, r1
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	2264      	movs	r2, #100	@ 0x64
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	1acb      	subs	r3, r1, r3
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	3332      	adds	r3, #50	@ 0x32
 8005c94:	4a33      	ldr	r2, [pc, #204]	@ (8005d64 <UART_SetConfig+0x4e4>)
 8005c96:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ca0:	441c      	add	r4, r3
 8005ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005caa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	1891      	adds	r1, r2, r2
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	415b      	adcs	r3, r3
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	1851      	adds	r1, r2, r1
 8005cc4:	6039      	str	r1, [r7, #0]
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	414b      	adcs	r3, r1
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cd8:	4659      	mov	r1, fp
 8005cda:	00cb      	lsls	r3, r1, #3
 8005cdc:	4651      	mov	r1, sl
 8005cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	00ca      	lsls	r2, r1, #3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	4642      	mov	r2, r8
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	460a      	mov	r2, r1
 8005cf6:	eb42 0303 	adc.w	r3, r2, r3
 8005cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d14:	4649      	mov	r1, r9
 8005d16:	008b      	lsls	r3, r1, #2
 8005d18:	4641      	mov	r1, r8
 8005d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d1e:	4641      	mov	r1, r8
 8005d20:	008a      	lsls	r2, r1, #2
 8005d22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d26:	f7fa fa55 	bl	80001d4 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <UART_SetConfig+0x4e4>)
 8005d30:	fba3 1302 	umull	r1, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	2164      	movs	r1, #100	@ 0x64
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	3332      	adds	r3, #50	@ 0x32
 8005d42:	4a08      	ldr	r2, [pc, #32]	@ (8005d64 <UART_SetConfig+0x4e4>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f003 020f 	and.w	r2, r3, #15
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4422      	add	r2, r4
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d64:	51eb851f 	.word	0x51eb851f

08005d68 <memset>:
 8005d68:	4402      	add	r2, r0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <memset+0xa>
 8005d70:	4770      	bx	lr
 8005d72:	f803 1b01 	strb.w	r1, [r3], #1
 8005d76:	e7f9      	b.n	8005d6c <memset+0x4>

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	@ (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f000 f818 	bl	8005dc0 <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08055ed8 	.word	0x08055ed8
 8005db4:	08055ed8 	.word	0x08055ed8
 8005db8:	08055ed8 	.word	0x08055ed8
 8005dbc:	08055edc 	.word	0x08055edc

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
>>>>>>> Stashed changes
