
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b5c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005cf0  08005cf0  00006cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d18  08005d18  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d1c  08005d1c  00006d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000000c  08005d2c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005d2c  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137b3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf8  00000000  00000000  0001a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9c  00000000  00000000  0001e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001907a  00000000  00000000  0001f634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ddc  00000000  00000000  000386ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb96  00000000  00000000  0004e48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f18  00000000  00000000  000ed064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f1f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005cd8 	.word	0x08005cd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005cd8 	.word	0x08005cd8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
  MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 8000506:	f000 ff73 	bl	80013f0 <MCP2515_Reset>
  HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 fbea 	bl	8001ce4 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  RXF1reg.RXF1SIDH = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800054c:	2308      	movs	r3, #8
 800054e:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	77fb      	strb	r3, [r7, #31]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	76fb      	strb	r3, [r7, #27]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8000584:	2300      	movs	r3, #0
 8000586:	74fb      	strb	r3, [r7, #19]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 800058c:	2308      	movs	r3, #8
 800058e:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000598:	f000 febc 	bl	8001314 <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
  {
    return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e065      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80005ac:	f000 fed4 	bl	8001358 <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
  {
    return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e05b      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f000 ff95 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f000 ff8f 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 ff88 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f000 ff81 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f000 ff7a 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f000 ff73 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f000 ff6c 	bl	80014f8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f000 ff65 	bl	80014f8 <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f000 fef4 	bl	800141c <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f000 ff35 	bl	80014ac <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f000 ff31 	bl	80014ac <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f000 ff2d 	bl	80014ac <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f000 ff29 	bl	80014ac <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f000 ff25 	bl	80014ac <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000662:	f000 fea7 	bl	80013b4 <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
    return false;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <CANSPI_Initialize+0x178>
  
  return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000694:	2200      	movs	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000698:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800069a:	2200      	movs	r2, #0
 800069c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <CANSPI_Transmit+0x120>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80006a4:	f000 ff9e 	bl	80015e4 <MCP2515_ReadStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ae:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 80006b0:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 feb0 	bl	800141c <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 80006c0:	202d      	movs	r0, #45	@ 0x2d
 80006c2:	f000 feab 	bl	800141c <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006ca:	2030      	movs	r0, #48	@ 0x30
 80006cc:	f000 fea6 	bl	800141c <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f000 fea1 	bl	800141c <MCP2515_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f000 fe9c 	bl	800141c <MCP2515_ReadByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d115      	bne.n	8000722 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6858      	ldr	r0, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4a28      	ldr	r2, [pc, #160]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000700:	4619      	mov	r1, r3
 8000702:	f000 f928 	bl	8000956 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1a      	ldrb	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3309      	adds	r3, #9
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000710:	2040      	movs	r0, #64	@ 0x40
 8000712:	f000 ff1d 	bl	8001550 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000716:	2081      	movs	r0, #129	@ 0x81
 8000718:	f000 ff48 	bl	80015ac <MCP2515_RequestToSend>
    
    returnValue = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e038      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <CANSPI_Transmit+0x124>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800073a:	4619      	mov	r1, r3
 800073c:	f000 f90b 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a1a      	ldrb	r2, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3309      	adds	r3, #9
 8000748:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800074a:	2042      	movs	r0, #66	@ 0x42
 800074c:	f000 ff00 	bl	8001550 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000750:	2082      	movs	r0, #130	@ 0x82
 8000752:	f000 ff2b 	bl	80015ac <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e01b      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <CANSPI_Transmit+0x124>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d114      	bne.n	8000794 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000774:	4619      	mov	r1, r3
 8000776:	f000 f8ee 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1a      	ldrb	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3309      	adds	r3, #9
 8000782:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000784:	2044      	movs	r0, #68	@ 0x44
 8000786:	f000 fee3 	bl	8001550 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800078a:	2084      	movs	r0, #132	@ 0x84
 800078c:	f000 ff0e 	bl	80015ac <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	20000028 	.word	0x20000028

080007a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80007b4:	f000 ff34 	bl	8001620 <MCP2515_GetRxStatus>
 80007b8:	4603      	mov	r3, r0
 80007ba:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d066      	beq.n	8000896 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b40      	cmp	r3, #64	@ 0x40
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7b3b      	ldrb	r3, [r7, #12]
 80007dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	220d      	movs	r2, #13
 80007fa:	4619      	mov	r1, r3
 80007fc:	2090      	movs	r0, #144	@ 0x90
 80007fe:	f000 fe31 	bl	8001464 <MCP2515_ReadRxSequence>
 8000802:	e00c      	b.n	800081e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b80      	cmp	r3, #128	@ 0x80
 800080e:	d106      	bne.n	800081e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	220d      	movs	r2, #13
 8000816:	4619      	mov	r1, r3
 8000818:	2094      	movs	r0, #148	@ 0x94
 800081a:	f000 fe23 	bl	8001464 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800081e:	7b3b      	ldrb	r3, [r7, #12]
 8000820:	f003 0318 	and.w	r3, r3, #24
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b10      	cmp	r3, #16
 8000828:	d10c      	bne.n	8000844 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2202      	movs	r2, #2
 800082e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000830:	7cb8      	ldrb	r0, [r7, #18]
 8000832:	7cf9      	ldrb	r1, [r7, #19]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	f000 f832 	bl	80008a0 <convertReg2ExtendedCANid>
 800083c:	4602      	mov	r2, r0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	e00b      	b.n	800085c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800084a:	7c3b      	ldrb	r3, [r7, #16]
 800084c:	7c7a      	ldrb	r2, [r7, #17]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f863 	bl	800091c <convertReg2StandardCANid>
 8000856:	4602      	mov	r2, r0
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800085c:	7d3a      	ldrb	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000862:	7d7a      	ldrb	r2, [r7, #21]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000868:	7dba      	ldrb	r2, [r7, #22]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000874:	7e3a      	ldrb	r2, [r7, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800087a:	7e7a      	ldrb	r2, [r7, #25]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000880:	7eba      	ldrb	r2, [r7, #26]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000886:	7efa      	ldrb	r2, [r7, #27]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800088c:	7f3a      	ldrb	r2, [r7, #28]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000896:	7ffb      	ldrb	r3, [r7, #31]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	717b      	strb	r3, [r7, #5]
 80008ba:	4613      	mov	r3, r2
 80008bc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4413      	add	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4413      	add	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4413      	add	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4413      	add	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000910:	697b      	ldr	r3, [r7, #20]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc90      	pop	{r4, r7}
 800091a:	4770      	bx	lr

0800091c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000948:	68fb      	ldr	r3, [r7, #12]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	460b      	mov	r3, r1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d12e      	bne.n	80009cc <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f023 031f 	bic.w	r3, r3, #31
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	4413      	add	r3, r2
 80009a8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	3308      	adds	r3, #8
 80009ae:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	f023 0314 	bic.w	r3, r3, #20
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80009ca:	e013      	b.n	80009f4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <updateRpm>:
		sendTorqueCommand();
		while(true){}
	}
}

void updateRpm() {
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <updateRpm+0x30>)
 8000a06:	7adb      	ldrb	r3, [r3, #11]
 8000a08:	461a      	mov	r2, r3
			| (rxMessage.frame.data3 << 8));
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <updateRpm+0x30>)
 8000a0c:	7b1b      	ldrb	r3, [r3, #12]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	4313      	orrs	r3, r2
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a1e:	ee17 2a90 	vmov	r2, s15
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <updateRpm+0x34>)
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	2000027c 	.word	0x2000027c
 8000a34:	2000029c 	.word	0x2000029c

08000a38 <readFromCAN>:

void readFromCAN() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <readFromCAN+0x28>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	22a5      	movs	r2, #165	@ 0xa5
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d102      	bne.n	8000a4c <readFromCAN+0x14>
		updateRpm();
 8000a46:	f7ff ffdb 	bl	8000a00 <updateRpm>
	}else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
		updateBMSDiagnostics();
	}
}
 8000a4a:	e007      	b.n	8000a5c <readFromCAN+0x24>
	}else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <readFromCAN+0x28>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f44f 62d6 	mov.w	r2, #1712	@ 0x6b0
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <readFromCAN+0x24>
		updateBMSDiagnostics();
 8000a58:	f000 f804 	bl	8000a64 <updateBMSDiagnostics>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000027c 	.word	0x2000027c

08000a64 <updateBMSDiagnostics>:

void updateBMSDiagnostics(void) {
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
	// Pack_Current (signed 16-bit at bit 8, factor 0.1)
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000a6c:	7a9b      	ldrb	r3, [r3, #10]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000a76:	7a5b      	ldrb	r3, [r3, #9]
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	83fb      	strh	r3, [r7, #30]
	float pack_current = pack_current_raw * 0.1f;
 8000a7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000b1c <updateBMSDiagnostics+0xb8>
 8000a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a92:	edc7 7a06 	vstr	s15, [r7, #24]

	// Pack_Inst_Voltage (unsigned 16-bit at bit 24, factor 0.1)
	uint16_t pack_voltage_raw = (rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000a98:	7b1b      	ldrb	r3, [r3, #12]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000aa2:	7adb      	ldrb	r3, [r3, #11]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	82fb      	strh	r3, [r7, #22]
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000b1c <updateBMSDiagnostics+0xb8>
 8000aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000abe:	edc7 7a04 	vstr	s15, [r7, #16]

	// Is_Ready_State (bit 54)
	bool is_ready = (rxMessage.frame.data6 >> 6) & 0x01;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <updateBMSDiagnostics+0xb4>)
 8000ac4:	7bdb      	ldrb	r3, [r3, #15]
 8000ac6:	099b      	lsrs	r3, r3, #6
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

	// Optional: cast to int if needed
	int pack_current_int = (int)(pack_current);
 8000ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae0:	ee17 3a90 	vmov	r3, s15
 8000ae4:	60bb      	str	r3, [r7, #8]
	int pack_voltage_int = (int)(pack_voltage);
 8000ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aee:	ee17 3a90 	vmov	r3, s15
 8000af2:	607b      	str	r3, [r7, #4]
	int is_ready_int = is_ready ? 1 : 0;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	603b      	str	r3, [r7, #0]

	bms_diagnostics.inverterActive = is_ready_int;
 8000af8:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <updateBMSDiagnostics+0xbc>)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	6013      	str	r3, [r2, #0]
	bms_diagnostics.packCurrent = pack_current_int;
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <updateBMSDiagnostics+0xbc>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	6093      	str	r3, [r2, #8]
	bms_diagnostics.packVoltage = pack_voltage_int;
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <updateBMSDiagnostics+0xbc>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6053      	str	r3, [r2, #4]
}
 8000b0a:	bf00      	nop
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000027c 	.word	0x2000027c
 8000b1c:	3dcccccd 	.word	0x3dcccccd
 8000b20:	20000290 	.word	0x20000290

08000b24 <HAL_I2S_TxCpltCallback>:
// I2S chunk-based WAV Playback Methods
//-----------------------------------------------
/**
 * @brief Called by HAL when a DMA transmission completes (for one chunk).
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_I2S_TxCpltCallback+0x3c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10f      	bne.n	8000b56 <HAL_I2S_TxCpltCallback+0x32>
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_I2S_TxCpltCallback+0x40>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10b      	bne.n	8000b56 <HAL_I2S_TxCpltCallback+0x32>
		// finished one chunk
		if (wavPos < halfwordCount) {
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_I2S_TxCpltCallback+0x44>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_I2S_TxCpltCallback+0x48>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d202      	bcs.n	8000b50 <HAL_I2S_TxCpltCallback+0x2c>
			StartNextChunk();
 8000b4a:	f000 f811 	bl	8000b70 <StartNextChunk>
		} else {
			// entire wave is done
			waveFinished = 1;
		}
	}
}
 8000b4e:	e002      	b.n	8000b56 <HAL_I2S_TxCpltCallback+0x32>
			waveFinished = 1;
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <HAL_I2S_TxCpltCallback+0x40>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40003800 	.word	0x40003800
 8000b64:	200002ac 	.word	0x200002ac
 8000b68:	200002a0 	.word	0x200002a0
 8000b6c:	200002a8 	.word	0x200002a8

08000b70 <StartNextChunk>:

/**
 * @brief Start the next chunk of PCM in Normal DMA mode
 */
static void StartNextChunk(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
	// how many halfwords remain
	uint32_t remain = halfwordCount - wavPos;
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <StartNextChunk+0x58>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <StartNextChunk+0x5c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	60fb      	str	r3, [r7, #12]
	// pick chunk
	uint16_t thisChunk =
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d802      	bhi.n	8000b92 <StartNextChunk+0x22>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	e001      	b.n	8000b96 <StartNextChunk+0x26>
 8000b92:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000b96:	817b      	strh	r3, [r7, #10]
			(remain > CHUNK_SIZE_HALFWORDS) ?
					CHUNK_SIZE_HALFWORDS : (uint16_t) remain;

	const uint16_t *chunkPtr = wavePCM + wavPos;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <StartNextChunk+0x60>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <StartNextChunk+0x5c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	607b      	str	r3, [r7, #4]
	wavPos += thisChunk;
 8000ba6:	897a      	ldrh	r2, [r7, #10]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <StartNextChunk+0x5c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <StartNextChunk+0x5c>)
 8000bb0:	6013      	str	r3, [r2, #0]

	// Fire the DMA
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8000bb2:	897b      	ldrh	r3, [r7, #10]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <StartNextChunk+0x64>)
 8000bba:	f002 fa79 	bl	80030b0 <HAL_I2S_Transmit_DMA>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002a8 	.word	0x200002a8
 8000bcc:	200002a0 	.word	0x200002a0
 8000bd0:	200002a4 	.word	0x200002a4
 8000bd4:	200000d8 	.word	0x200000d8

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b090      	sub	sp, #64	@ 0x40
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 f80f 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f8b3 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fa9d 	bl	8001124 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bea:	f000 fa65 	bl	80010b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bee:	f000 fa39 	bl	8001064 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bf2:	f000 f915 	bl	8000e20 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000bf6:	f000 f9e7 	bl	8000fc8 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000bfa:	f000 f9af 	bl	8000f5c <MX_SPI3_Init>
  MX_I2S2_Init();
 8000bfe:	f000 f97f 	bl	8000f00 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
	// Start TIM3
	HAL_TIM_Base_Start(&htim3);
 8000c02:	484d      	ldr	r0, [pc, #308]	@ (8000d38 <main+0x160>)
 8000c04:	f004 fac2 	bl	800518c <HAL_TIM_Base_Start>

	/* initalized to be 500kbps, see canspi.c line 131-133 for details */
	if (CANSPI_Initialize() != true) {
 8000c08:	f7ff fc7a 	bl	8000500 <CANSPI_Initialize>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	f083 0301 	eor.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <main+0x44>
		Error_Handler();
 8000c18:	f000 fb76 	bl	8001308 <Error_Handler>
	}

	bms_diagnostics.inverterActive = 0;
 8000c1c:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <main+0x164>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
	inverter_diagnostics.motorRpm = 0;
 8000c22:	4b47      	ldr	r3, [pc, #284]	@ (8000d40 <main+0x168>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		if (CANSPI_Receive(&rxMessage)) {
			readFromCAN();
 8000c28:	f7ff ff06 	bl	8000a38 <readFromCAN>
//		}
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	@ (8000d44 <main+0x16c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		txMessage.frame.id = 0b10000000011;
 8000c32:	4b44      	ldr	r3, [pc, #272]	@ (8000d44 <main+0x16c>)
 8000c34:	f240 4203 	movw	r2, #1027	@ 0x403
 8000c38:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8000c3a:	4b42      	ldr	r3, [pc, #264]	@ (8000d44 <main+0x16c>)
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 0x61;
 8000c40:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <main+0x16c>)
 8000c42:	2261      	movs	r2, #97	@ 0x61
 8000c44:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 0x73;
 8000c46:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <main+0x16c>)
 8000c48:	2273      	movs	r2, #115	@ 0x73
 8000c4a:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 0x73;
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d44 <main+0x16c>)
 8000c4e:	2273      	movs	r2, #115	@ 0x73
 8000c50:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 0x68;
 8000c52:	4b3c      	ldr	r3, [pc, #240]	@ (8000d44 <main+0x16c>)
 8000c54:	2268      	movs	r2, #104	@ 0x68
 8000c56:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 0x6F;
 8000c58:	4b3a      	ldr	r3, [pc, #232]	@ (8000d44 <main+0x16c>)
 8000c5a:	226f      	movs	r2, #111	@ 0x6f
 8000c5c:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 0x6C;
 8000c5e:	4b39      	ldr	r3, [pc, #228]	@ (8000d44 <main+0x16c>)
 8000c60:	226c      	movs	r2, #108	@ 0x6c
 8000c62:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 0x65;
 8000c64:	4b37      	ldr	r3, [pc, #220]	@ (8000d44 <main+0x16c>)
 8000c66:	2265      	movs	r2, #101	@ 0x65
 8000c68:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 0x73;
 8000c6a:	4b36      	ldr	r3, [pc, #216]	@ (8000d44 <main+0x16c>)
 8000c6c:	2273      	movs	r2, #115	@ 0x73
 8000c6e:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(&txMessage);
 8000c70:	4834      	ldr	r0, [pc, #208]	@ (8000d44 <main+0x16c>)
 8000c72:	f7ff fd05 	bl	8000680 <CANSPI_Transmit>

		HAL_Delay(100);
 8000c76:	2064      	movs	r0, #100	@ 0x64
 8000c78:	f001 f834 	bl	8001ce4 <HAL_Delay>

		if(CANSPI_Receive(&rxMessage))
 8000c7c:	4832      	ldr	r0, [pc, #200]	@ (8000d48 <main+0x170>)
 8000c7e:	f7ff fd93 	bl	80007a8 <CANSPI_Receive>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0cf      	beq.n	8000c28 <main+0x50>
		{
			uCAN_MSG orangeMessage = rxMessage;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <main+0x170>)
 8000c8a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000c8e:	461d      	mov	r5, r3
 8000c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c94:	682b      	ldr	r3, [r5, #0]
 8000c96:	6023      	str	r3, [r4, #0]
			uCAN_MSG ppMesage;
			ppMesage.frame.idType = rxMessage.frame.idType;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <main+0x170>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	763b      	strb	r3, [r7, #24]
			ppMesage.frame.id = rxMessage.frame.id;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d48 <main+0x170>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	61fb      	str	r3, [r7, #28]
			ppMesage.frame.dlc = rxMessage.frame.dlc;
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <main+0x170>)
 8000ca6:	7a1b      	ldrb	r3, [r3, #8]
 8000ca8:	f887 3020 	strb.w	r3, [r7, #32]
			ppMesage.frame.data0 = rxMessage.frame.data0 | 0xAA;
 8000cac:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <main+0x170>)
 8000cae:	7a5b      	ldrb	r3, [r3, #9]
 8000cb0:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ppMesage.frame.data1 = rxMessage.frame.data1 | 0xAA;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <main+0x170>)
 8000cbc:	7a9b      	ldrb	r3, [r3, #10]
 8000cbe:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			ppMesage.frame.data2 = rxMessage.frame.data2 | 0xAA;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <main+0x170>)
 8000cca:	7adb      	ldrb	r3, [r3, #11]
 8000ccc:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			ppMesage.frame.data3 = rxMessage.frame.data3 | 0xAA;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <main+0x170>)
 8000cd8:	7b1b      	ldrb	r3, [r3, #12]
 8000cda:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			ppMesage.frame.data4 = rxMessage.frame.data4 | 0xAA;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <main+0x170>)
 8000ce6:	7b5b      	ldrb	r3, [r3, #13]
 8000ce8:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			ppMesage.frame.data5 = rxMessage.frame.data5 | 0xAA;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <main+0x170>)
 8000cf4:	7b9b      	ldrb	r3, [r3, #14]
 8000cf6:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			ppMesage.frame.data6 = rxMessage.frame.data6 | 0xAA;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <main+0x170>)
 8000d02:	7bdb      	ldrb	r3, [r3, #15]
 8000d04:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			ppMesage.frame.data7 = rxMessage.frame.data7 | 0xAA;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <main+0x170>)
 8000d10:	7c1b      	ldrb	r3, [r3, #16]
 8000d12:	f063 0355 	orn	r3, r3, #85	@ 0x55
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			uCAN_MSG ppMessage2 = ppMesage;
 8000d1c:	1d3c      	adds	r4, r7, #4
 8000d1e:	f107 0518 	add.w	r5, r7, #24
 8000d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	6023      	str	r3, [r4, #0]

			CANSPI_Transmit(&ppMesage);
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fca6 	bl	8000680 <CANSPI_Transmit>
			readFromCAN();
 8000d34:	e778      	b.n	8000c28 <main+0x50>
 8000d36:	bf00      	nop
 8000d38:	200001d8 	.word	0x200001d8
 8000d3c:	20000290 	.word	0x20000290
 8000d40:	2000029c 	.word	0x2000029c
 8000d44:	20000268 	.word	0x20000268
 8000d48:	2000027c 	.word	0x2000027c

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	@ 0x50
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2230      	movs	r2, #48	@ 0x30
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 ff90 	bl	8005c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SystemClock_Config+0xcc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	4a27      	ldr	r2, [pc, #156]	@ (8000e18 <SystemClock_Config+0xcc>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d80:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <SystemClock_Config+0xcc>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <SystemClock_Config+0xd0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d98:	4a20      	ldr	r2, [pc, #128]	@ (8000e1c <SystemClock_Config+0xd0>)
 8000d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db4:	2310      	movs	r3, #16
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000dc4:	2354      	movs	r3, #84	@ 0x54
 8000dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fdc3 	bl	8003960 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000de0:	f000 fa92 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 f825 	bl	8003e50 <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e0c:	f000 fa7c 	bl	8001308 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	@ 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e32:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e34:	4a31      	ldr	r2, [pc, #196]	@ (8000efc <MX_ADC1_Init+0xdc>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e72:	2203      	movs	r2, #3
 8000e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000e86:	f000 ff51 	bl	8001d2c <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e90:	f000 fa3a 	bl	8001308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000ea6:	f000 ff85 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000eb0:	f000 fa2a 	bl	8001308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000ec2:	f000 ff77 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ecc:	f000 fa1c 	bl	8001308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_ADC1_Init+0xd8>)
 8000ee2:	f000 ff67 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000eec:	f000 fa0c 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000030 	.word	0x20000030
 8000efc:	40012000 	.word	0x40012000

08000f00 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f06:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <MX_I2S2_Init+0x58>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f10:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f26:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000f2a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_I2S2_Init+0x54>)
 8000f40:	f001 ff76 	bl	8002e30 <HAL_I2S_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000f4a:	f000 f9dd 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000d8 	.word	0x200000d8
 8000f58:	40003800 	.word	0x40003800

08000f5c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f62:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <MX_SPI3_Init+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000fa8:	220a      	movs	r2, #10
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <MX_SPI3_Init+0x64>)
 8000fae:	f003 fabd 	bl	800452c <HAL_SPI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000fb8:	f000 f9a6 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000180 	.word	0x20000180
 8000fc4:	40003c00 	.word	0x40003c00

08000fc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_TIM3_Init+0x94>)
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <MX_TIM3_Init+0x98>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <MX_TIM3_Init+0x94>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_TIM3_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <MX_TIM3_Init+0x94>)
 8000ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_TIM3_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_TIM3_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800100a:	4814      	ldr	r0, [pc, #80]	@ (800105c <MX_TIM3_Init+0x94>)
 800100c:	f004 f86e 	bl	80050ec <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f977 	bl	8001308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_TIM3_Init+0x94>)
 8001028:	f004 f90a 	bl	8005240 <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 f969 	bl	8001308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001036:	2320      	movs	r3, #32
 8001038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <MX_TIM3_Init+0x94>)
 8001044:	f004 faea 	bl	800561c <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800104e:	f000 f95b 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001d8 	.word	0x200001d8
 8001060:	40000400 	.word	0x40000400

08001064 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_USART2_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800109c:	f004 fb2c 	bl	80056f8 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f000 f92f 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000220 	.word	0x20000220
 80010b4:	40004400 	.word	0x40004400

080010b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_DMA_Init+0x68>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a16      	ldr	r2, [pc, #88]	@ (8001120 <MX_DMA_Init+0x68>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_DMA_Init+0x68>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MX_DMA_Init+0x68>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <MX_DMA_Init+0x68>)
 80010e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MX_DMA_Init+0x68>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	200f      	movs	r0, #15
 80010fc:	f001 f953 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001100:	200f      	movs	r0, #15
 8001102:	f001 f96c 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2038      	movs	r0, #56	@ 0x38
 800110c:	f001 f94b 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001110:	2038      	movs	r0, #56	@ 0x38
 8001112:	f001 f964 	bl	80023de <HAL_NVIC_EnableIRQ>

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b6e      	ldr	r3, [pc, #440]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a6d      	ldr	r2, [pc, #436]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b6b      	ldr	r3, [pc, #428]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b67      	ldr	r3, [pc, #412]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a66      	ldr	r2, [pc, #408]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b64      	ldr	r3, [pc, #400]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b60      	ldr	r3, [pc, #384]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a5f      	ldr	r2, [pc, #380]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b5d      	ldr	r3, [pc, #372]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b59      	ldr	r3, [pc, #356]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a58      	ldr	r2, [pc, #352]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b56      	ldr	r3, [pc, #344]	@ (80012f8 <MX_GPIO_Init+0x1d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2101      	movs	r1, #1
 80011ae:	4853      	ldr	r0, [pc, #332]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 80011b0:	f001 fe24 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	210e      	movs	r1, #14
 80011b8:	4850      	ldr	r0, [pc, #320]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 80011ba:	f001 fe1f 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	484f      	ldr	r0, [pc, #316]	@ (8001300 <MX_GPIO_Init+0x1dc>)
 80011c4:	f001 fe1a 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ce:	484c      	ldr	r0, [pc, #304]	@ (8001300 <MX_GPIO_Init+0x1dc>)
 80011d0:	f001 fe14 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2110      	movs	r1, #16
 80011d8:	484a      	ldr	r0, [pc, #296]	@ (8001304 <MX_GPIO_Init+0x1e0>)
 80011da:	f001 fe0f 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4841      	ldr	r0, [pc, #260]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 80011f6:	f001 fc7d 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80011fa:	2301      	movs	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	483a      	ldr	r0, [pc, #232]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 8001212:	f001 fc6f 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001216:	2302      	movs	r3, #2
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121e:	2301      	movs	r3, #1
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4833      	ldr	r0, [pc, #204]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 800122e:	f001 fc61 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	482c      	ldr	r0, [pc, #176]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 800124a:	f001 fc53 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800124e:	2320      	movs	r3, #32
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4826      	ldr	r0, [pc, #152]	@ (8001300 <MX_GPIO_Init+0x1dc>)
 8001266:	f001 fc45 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTD_Pin PB5 */
  GPIO_InitStruct.Pin = RTD_Pin|GPIO_PIN_5;
 800126a:	2324      	movs	r3, #36	@ 0x24
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4821      	ldr	r0, [pc, #132]	@ (8001304 <MX_GPIO_Init+0x1e0>)
 800127e:	f001 fc39 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_Pin;
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRECHARGE_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4819      	ldr	r0, [pc, #100]	@ (80012fc <MX_GPIO_Init+0x1d8>)
 8001296:	f001 fc2d 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 800129a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <MX_GPIO_Init+0x1dc>)
 80012b0:	f001 fc20 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 80012b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <MX_GPIO_Init+0x1dc>)
 80012ce:	f001 fc11 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012d2:	2310      	movs	r3, #16
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4806      	ldr	r0, [pc, #24]	@ (8001304 <MX_GPIO_Init+0x1e0>)
 80012ea:	f001 fc03 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	@ 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <Error_Handler+0x8>

08001314 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 800131a:	2201      	movs	r2, #1
 800131c:	2102      	movs	r1, #2
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <MCP2515_Initialize+0x3c>)
 8001320:	f001 fd6c 	bl	8002dfc <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8001324:	230a      	movs	r3, #10
 8001326:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001328:	480a      	ldr	r0, [pc, #40]	@ (8001354 <MCP2515_Initialize+0x40>)
 800132a:	f003 fd8e 	bl	8004e4a <HAL_SPI_GetState>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <MCP2515_Initialize+0x24>
      return true;
 8001334:	2301      	movs	r3, #1
 8001336:	e006      	b.n	8001346 <MCP2515_Initialize+0x32>
    
    loop--;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	3b01      	subs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f1      	bne.n	8001328 <MCP2515_Initialize+0x14>
      
  return false;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020800 	.word	0x40020800
 8001354:	20000180 	.word	0x20000180

08001358 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800135e:	2180      	movs	r1, #128	@ 0x80
 8001360:	200f      	movs	r0, #15
 8001362:	f000 f8a3 	bl	80014ac <MCP2515_WriteByte>
  HAL_Delay(100);
 8001366:	2064      	movs	r0, #100	@ 0x64
 8001368:	f000 fcbc 	bl	8001ce4 <HAL_Delay>
  uint8_t loop = 10;
 800136c:	230a      	movs	r3, #10
 800136e:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001370:	2180      	movs	r1, #128	@ 0x80
 8001372:	200f      	movs	r0, #15
 8001374:	f000 f89a 	bl	80014ac <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001378:	200e      	movs	r0, #14
 800137a:	f000 f84f 	bl	800141c <MCP2515_ReadByte>
 800137e:	4603      	mov	r3, r0
 8001380:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 8001382:	2030      	movs	r0, #48	@ 0x30
 8001384:	f000 f84a 	bl	800141c <MCP2515_ReadByte>
 8001388:	4603      	mov	r3, r0
 800138a:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001392:	2b80      	cmp	r3, #128	@ 0x80
 8001394:	d101      	bne.n	800139a <MCP2515_SetConfigMode+0x42>
      return true;
 8001396:	2301      	movs	r3, #1
 8001398:	e008      	b.n	80013ac <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	3b01      	subs	r3, #1
 800139e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 80013a0:	2064      	movs	r0, #100	@ 0x64
 80013a2:	f000 fc9f 	bl	8001ce4 <HAL_Delay>

  } while(loop > 0);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	e7e1      	b.n	8001370 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80013ba:	2100      	movs	r1, #0
 80013bc:	200f      	movs	r0, #15
 80013be:	f000 f875 	bl	80014ac <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80013c2:	230a      	movs	r3, #10
 80013c4:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80013c6:	200e      	movs	r0, #14
 80013c8:	f000 f828 	bl	800141c <MCP2515_ReadByte>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <MCP2515_SetNormalMode+0x26>
      return true;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e006      	b.n	80013e8 <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3b01      	subs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ef      	bne.n	80013c6 <MCP2515_SetNormalMode+0x12>
  
  return false;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 80013f4:	2200      	movs	r2, #0
 80013f6:	2102      	movs	r1, #2
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MCP2515_Reset+0x28>)
 80013fa:	f001 fcff 	bl	8002dfc <HAL_GPIO_WritePin>
 80013fe:	2001      	movs	r0, #1
 8001400:	f000 fc70 	bl	8001ce4 <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 8001404:	20c0      	movs	r0, #192	@ 0xc0
 8001406:	f000 f929 	bl	800165c <SPI_Tx>

  MCP2515_CS_HIGH();
 800140a:	2201      	movs	r2, #1
 800140c:	2102      	movs	r1, #2
 800140e:	4802      	ldr	r0, [pc, #8]	@ (8001418 <MCP2515_Reset+0x28>)
 8001410:	f001 fcf4 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020800 	.word	0x40020800

0800141c <MCP2515_ReadByte>:



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001426:	2200      	movs	r2, #0
 8001428:	2102      	movs	r1, #2
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MCP2515_ReadByte+0x44>)
 800142c:	f001 fce6 	bl	8002dfc <HAL_GPIO_WritePin>
 8001430:	2001      	movs	r0, #1
 8001432:	f000 fc57 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 8001436:	2003      	movs	r0, #3
 8001438:	f000 f910 	bl	800165c <SPI_Tx>
  SPI_Tx(address);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f90c 	bl	800165c <SPI_Tx>
  retVal = SPI_Rx();
 8001444:	f000 f930 	bl	80016a8 <SPI_Rx>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	4803      	ldr	r0, [pc, #12]	@ (8001460 <MCP2515_ReadByte+0x44>)
 8001452:	f001 fcd3 	bl	8002dfc <HAL_GPIO_WritePin>
  
  return retVal;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40020800 	.word	0x40020800

08001464 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001474:	2200      	movs	r2, #0
 8001476:	2102      	movs	r1, #2
 8001478:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <MCP2515_ReadRxSequence+0x44>)
 800147a:	f001 fcbf 	bl	8002dfc <HAL_GPIO_WritePin>
 800147e:	2001      	movs	r0, #1
 8001480:	f000 fc30 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(instruction);        
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f8e8 	bl	800165c <SPI_Tx>
  SPI_RxBuffer(data, length);
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	4619      	mov	r1, r3
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f000 f919 	bl	80016c8 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001496:	2201      	movs	r2, #1
 8001498:	2102      	movs	r1, #2
 800149a:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MCP2515_ReadRxSequence+0x44>)
 800149c:	f001 fcae 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020800 	.word	0x40020800

080014ac <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <MCP2515_WriteByte+0x48>)
 80014c2:	f001 fc9b 	bl	8002dfc <HAL_GPIO_WritePin>
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 fc0c 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 80014cc:	2002      	movs	r0, #2
 80014ce:	f000 f8c5 	bl	800165c <SPI_Tx>
  SPI_Tx(address);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f8c1 	bl	800165c <SPI_Tx>
  SPI_Tx(data);  
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f8bd 	bl	800165c <SPI_Tx>
    
  MCP2515_CS_HIGH();
 80014e2:	2201      	movs	r2, #1
 80014e4:	2102      	movs	r1, #2
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <MCP2515_WriteByte+0x48>)
 80014e8:	f001 fc88 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020800 	.word	0x40020800

080014f8 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	603a      	str	r2, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	460b      	mov	r3, r1
 8001506:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001508:	2200      	movs	r2, #0
 800150a:	2102      	movs	r1, #2
 800150c:	480f      	ldr	r0, [pc, #60]	@ (800154c <MCP2515_WriteByteSequence+0x54>)
 800150e:	f001 fc75 	bl	8002dfc <HAL_GPIO_WritePin>
 8001512:	2001      	movs	r0, #1
 8001514:	f000 fbe6 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001518:	2002      	movs	r0, #2
 800151a:	f000 f89f 	bl	800165c <SPI_Tx>
  SPI_Tx(startAddress);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f89b 	bl	800165c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001526:	79ba      	ldrb	r2, [r7, #6]
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	3301      	adds	r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f000 f8a3 	bl	8001680 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 800153a:	2201      	movs	r2, #1
 800153c:	2102      	movs	r1, #2
 800153e:	4803      	ldr	r0, [pc, #12]	@ (800154c <MCP2515_WriteByteSequence+0x54>)
 8001540:	f001 fc5c 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020800 	.word	0x40020800

08001550 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	4613      	mov	r3, r2
 8001560:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001562:	2200      	movs	r2, #0
 8001564:	2102      	movs	r1, #2
 8001566:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <MCP2515_LoadTxSequence+0x58>)
 8001568:	f001 fc48 	bl	8002dfc <HAL_GPIO_WritePin>
 800156c:	2001      	movs	r0, #1
 800156e:	f000 fbb9 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f871 	bl	800165c <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800157a:	2104      	movs	r1, #4
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f000 f87f 	bl	8001680 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f869 	bl	800165c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f876 	bl	8001680 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001594:	2201      	movs	r2, #1
 8001596:	2102      	movs	r1, #2
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MCP2515_LoadTxSequence+0x58>)
 800159a:	f001 fc2f 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020800 	.word	0x40020800

080015ac <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <MCP2515_RequestToSend+0x34>)
 80015bc:	f001 fc1e 	bl	8002dfc <HAL_GPIO_WritePin>
 80015c0:	2001      	movs	r0, #1
 80015c2:	f000 fb8f 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(instruction);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f847 	bl	800165c <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80015ce:	2201      	movs	r2, #1
 80015d0:	2102      	movs	r1, #2
 80015d2:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MCP2515_RequestToSend+0x34>)
 80015d4:	f001 fc12 	bl	8002dfc <HAL_GPIO_WritePin>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40020800 	.word	0x40020800

080015e4 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80015ea:	2200      	movs	r2, #0
 80015ec:	2102      	movs	r1, #2
 80015ee:	480b      	ldr	r0, [pc, #44]	@ (800161c <MCP2515_ReadStatus+0x38>)
 80015f0:	f001 fc04 	bl	8002dfc <HAL_GPIO_WritePin>
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fb75 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80015fa:	20a0      	movs	r0, #160	@ 0xa0
 80015fc:	f000 f82e 	bl	800165c <SPI_Tx>
  retVal = SPI_Rx();
 8001600:	f000 f852 	bl	80016a8 <SPI_Rx>
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 8001608:	2201      	movs	r2, #1
 800160a:	2102      	movs	r1, #2
 800160c:	4803      	ldr	r0, [pc, #12]	@ (800161c <MCP2515_ReadStatus+0x38>)
 800160e:	f001 fbf5 	bl	8002dfc <HAL_GPIO_WritePin>
  
  return retVal;
 8001612:	79fb      	ldrb	r3, [r7, #7]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020800 	.word	0x40020800

08001620 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001626:	2200      	movs	r2, #0
 8001628:	2102      	movs	r1, #2
 800162a:	480b      	ldr	r0, [pc, #44]	@ (8001658 <MCP2515_GetRxStatus+0x38>)
 800162c:	f001 fbe6 	bl	8002dfc <HAL_GPIO_WritePin>
 8001630:	2001      	movs	r0, #1
 8001632:	f000 fb57 	bl	8001ce4 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8001636:	20b0      	movs	r0, #176	@ 0xb0
 8001638:	f000 f810 	bl	800165c <SPI_Tx>
  retVal = SPI_Rx();
 800163c:	f000 f834 	bl	80016a8 <SPI_Rx>
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8001644:	2201      	movs	r2, #1
 8001646:	2102      	movs	r1, #2
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <MCP2515_GetRxStatus+0x38>)
 800164a:	f001 fbd7 	bl	8002dfc <HAL_GPIO_WritePin>
  
  return retVal;
 800164e:	79fb      	ldrb	r3, [r7, #7]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020800 	.word	0x40020800

0800165c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001666:	1df9      	adds	r1, r7, #7
 8001668:	230a      	movs	r3, #10
 800166a:	2201      	movs	r2, #1
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <SPI_Tx+0x20>)
 800166e:	f002 ffe6 	bl	800463e <HAL_SPI_Transmit>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000180 	.word	0x20000180

08001680 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	b29a      	uxth	r2, r3
 8001690:	230a      	movs	r3, #10
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <SPI_TxBuffer+0x24>)
 8001696:	f002 ffd2 	bl	800463e <HAL_SPI_Transmit>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000180 	.word	0x20000180

080016a8 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80016ae:	1df9      	adds	r1, r7, #7
 80016b0:	230a      	movs	r3, #10
 80016b2:	2201      	movs	r2, #1
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <SPI_Rx+0x1c>)
 80016b6:	f003 f906 	bl	80048c6 <HAL_SPI_Receive>
  return retVal;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000180 	.word	0x20000180

080016c8 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	230a      	movs	r3, #10
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <SPI_RxBuffer+0x24>)
 80016de:	f003 f8f2 	bl	80048c6 <HAL_SPI_Receive>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000180 	.word	0x20000180

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <HAL_MspInit+0x4c>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	4a08      	ldr	r2, [pc, #32]	@ (800173c <HAL_MspInit+0x4c>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	@ 0x40
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800172e:	2007      	movs	r0, #7
 8001730:	f000 fe2e 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a3b      	ldr	r2, [pc, #236]	@ (800184c <HAL_ADC_MspInit+0x10c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d170      	bne.n	8001844 <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a39      	ldr	r2, [pc, #228]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b37      	ldr	r3, [pc, #220]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <HAL_ADC_MspInit+0x110>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80017b6:	2312      	movs	r3, #18
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4822      	ldr	r0, [pc, #136]	@ (8001854 <HAL_ADC_MspInit+0x114>)
 80017ca:	f001 f993 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ce:	2310      	movs	r3, #16
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	481d      	ldr	r0, [pc, #116]	@ (8001858 <HAL_ADC_MspInit+0x118>)
 80017e2:	f001 f987 	bl	8002af4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_ADC_MspInit+0x120>)
 80017ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 8001800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001804:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 8001808:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800180c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 8001810:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001814:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 800182a:	f000 fdf3 	bl	8002414 <HAL_DMA_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001834:	f7ff fd68 	bl	8001308 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 800183c:	639a      	str	r2, [r3, #56]	@ 0x38
 800183e:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_ADC_MspInit+0x11c>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	@ 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40012000 	.word	0x40012000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020800 	.word	0x40020800
 800185c:	20000078 	.word	0x20000078
 8001860:	40026410 	.word	0x40026410

08001864 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	@ 0x38
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a3d      	ldr	r2, [pc, #244]	@ (8001988 <HAL_I2S_MspInit+0x124>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d174      	bne.n	8001980 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001896:	2301      	movs	r3, #1
 8001898:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fcf2 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80018b2:	f7ff fd29 	bl	8001308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b34      	ldr	r3, [pc, #208]	@ (800198c <HAL_I2S_MspInit+0x128>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a33      	ldr	r2, [pc, #204]	@ (800198c <HAL_I2S_MspInit+0x128>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b31      	ldr	r3, [pc, #196]	@ (800198c <HAL_I2S_MspInit+0x128>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <HAL_I2S_MspInit+0x128>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a2c      	ldr	r2, [pc, #176]	@ (800198c <HAL_I2S_MspInit+0x128>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b2a      	ldr	r3, [pc, #168]	@ (800198c <HAL_I2S_MspInit+0x128>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80018ee:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001900:	2305      	movs	r3, #5
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4821      	ldr	r0, [pc, #132]	@ (8001990 <HAL_I2S_MspInit+0x12c>)
 800190c:	f001 f8f2 	bl	8002af4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001910:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <HAL_I2S_MspInit+0x134>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 800191e:	2240      	movs	r2, #64	@ 0x40
 8001920:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 800192a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001930:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001936:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001938:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 800193a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 800194e:	2204      	movs	r2, #4
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001954:	2201      	movs	r2, #1
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001958:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001966:	f000 fd55 	bl	8002414 <HAL_DMA_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001970:	f7ff fcca 	bl	8001308 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 8001978:	639a      	str	r2, [r3, #56]	@ 0x38
 800197a:	4a06      	ldr	r2, [pc, #24]	@ (8001994 <HAL_I2S_MspInit+0x130>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001980:	bf00      	nop
 8001982:	3738      	adds	r7, #56	@ 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40003800 	.word	0x40003800
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400
 8001994:	20000120 	.word	0x20000120
 8001998:	40026070 	.word	0x40026070

0800199c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <HAL_SPI_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12c      	bne.n	8001a18 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <HAL_SPI_MspInit+0x88>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <HAL_SPI_MspInit+0x88>)
 80019c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_SPI_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_SPI_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	4a10      	ldr	r2, [pc, #64]	@ (8001a24 <HAL_SPI_MspInit+0x88>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_SPI_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <HAL_SPI_MspInit+0x8c>)
 8001a14:	f001 f86e 	bl	8002af4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	@ 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40003c00 	.word	0x40003c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020800 	.word	0x40020800

08001a2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_TIM_Base_MspInit+0x3c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10d      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_TIM_Base_MspInit+0x40>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_TIM_Base_MspInit+0x40>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <HAL_TIM_Base_MspInit+0x40>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_UART_MspInit+0x84>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12b      	bne.n	8001aea <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <HAL_UART_MspInit+0x88>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a17      	ldr	r2, [pc, #92]	@ (8001af8 <HAL_UART_MspInit+0x88>)
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_UART_MspInit+0x88>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <HAL_UART_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_UART_MspInit+0x88>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_UART_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aca:	230c      	movs	r3, #12
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ada:	2307      	movs	r3, #7
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <HAL_UART_MspInit+0x8c>)
 8001ae6:	f001 f805 	bl	8002af4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40004400 	.word	0x40004400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <NMI_Handler+0x4>

08001b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <MemManage_Handler+0x4>

08001b18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b56:	f000 f8a5 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <DMA1_Stream4_IRQHandler+0x10>)
 8001b66:	f000 fd5b 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000120 	.word	0x20000120

08001b74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <DMA2_Stream0_IRQHandler+0x10>)
 8001b7a:	f000 fd51 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000078 	.word	0x20000078

08001b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <SystemInit+0x20>)
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <SystemInit+0x20>)
 8001b94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bb0:	f7ff ffea 	bl	8001b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bb6:	490d      	ldr	r1, [pc, #52]	@ (8001bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f004 f859 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7fe fffb 	bl	8000bd8 <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bf0:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 8001bf4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bf8:	200002b4 	.word	0x200002b4

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	@ (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 fbb1 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fd5c 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fbc9 	bl	80023fa <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 fb91 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	@ (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	200002b0 	.word	0x200002b0

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200002b0 	.word	0x200002b0

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008

08001d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e033      	b.n	8001daa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fcf8 	bl	8001740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d72:	f023 0302 	bic.w	r3, r3, #2
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f93a 	bl	8001ff8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d9a:	e001      	b.n	8001da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1c>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e105      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x228>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d925      	bls.n	8001e2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	3b1e      	subs	r3, #30
 8001df6:	2207      	movs	r2, #7
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68d9      	ldr	r1, [r3, #12]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4403      	add	r3, r0
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	409a      	lsls	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	e022      	b.n	8001e72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	2207      	movs	r2, #7
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6919      	ldr	r1, [r3, #16]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4403      	add	r3, r0
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d824      	bhi.n	8001ec4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	400a      	ands	r2, r1
 8001e9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b05      	subs	r3, #5
 8001eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec2:	e04c      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d824      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b23      	subs	r3, #35	@ 0x23
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b23      	subs	r3, #35	@ 0x23
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f14:	e023      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b41      	subs	r3, #65	@ 0x41
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b41      	subs	r3, #65	@ 0x41
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x234>)
 8001f60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <HAL_ADC_ConfigChannel+0x238>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1cc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <HAL_ADC_ConfigChannel+0x238>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d123      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x1e6>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d11b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x23c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x240>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9a      	lsrs	r2, r3, #18
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f9      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	40012000 	.word	0x40012000
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	431bde83 	.word	0x431bde83

08001ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002000:	4b79      	ldr	r3, [pc, #484]	@ (80021e8 <ADC_Init+0x1f0>)
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800202c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	021a      	lsls	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	4a58      	ldr	r2, [pc, #352]	@ (80021ec <ADC_Init+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800209e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e00f      	b.n	80020f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0202 	bic.w	r2, r2, #2
 8002104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	005a      	lsls	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002132:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002142:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	035a      	lsls	r2, r3, #13
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e007      	b.n	800216c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800216a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	3b01      	subs	r3, #1
 8002188:	051a      	lsls	r2, r3, #20
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021ae:	025a      	lsls	r2, r3, #9
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	029a      	lsls	r2, r3, #10
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40012300 	.word	0x40012300
 80021ec:	0f000001 	.word	0x0f000001

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	@ (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff fc54 	bl	8001ccc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e099      	b.n	8002564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002450:	e00f      	b.n	8002472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002452:	f7ff fc3b 	bl	8001ccc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b05      	cmp	r3, #5
 800245e:	d908      	bls.n	8002472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2203      	movs	r2, #3
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e078      	b.n	8002564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e8      	bne.n	8002452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4b38      	ldr	r3, [pc, #224]	@ (800256c <HAL_DMA_Init+0x158>)
 800248c:	4013      	ands	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	4313      	orrs	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	2b04      	cmp	r3, #4
 8002504:	d117      	bne.n	8002536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fa6f 	bl	80029fc <DMA_CheckFifoParam>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	@ 0x40
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002532:	2301      	movs	r3, #1
 8002534:	e016      	b.n	8002564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa26 	bl	8002990 <DMA_CalcBaseAndBitshift>
 8002544:	4603      	mov	r3, r0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	223f      	movs	r2, #63	@ 0x3f
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	f010803f 	.word	0xf010803f

08002570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Start_IT+0x26>
 8002592:	2302      	movs	r3, #2
 8002594:	e040      	b.n	8002618 <HAL_DMA_Start_IT+0xa8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d12f      	bne.n	800260a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f9b8 	bl	8002934 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	223f      	movs	r2, #63	@ 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0216 	orr.w	r2, r2, #22
 80025de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0208 	orr.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e005      	b.n	8002616 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800262c:	4b8e      	ldr	r3, [pc, #568]	@ (8002868 <HAL_DMA_IRQHandler+0x248>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a8e      	ldr	r2, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x24c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	2208      	movs	r2, #8
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01a      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2208      	movs	r2, #8
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	2204      	movs	r2, #4
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2204      	movs	r2, #4
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2210      	movs	r2, #16
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d043      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03c      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	2210      	movs	r2, #16
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d018      	beq.n	8002762 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e01f      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e016      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	2220      	movs	r2, #32
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 808f 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8087 	beq.w	80028c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	2220      	movs	r2, #32
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d136      	bne.n	8002838 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0216 	bic.w	r2, r2, #22
 80027d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_DMA_IRQHandler+0x1da>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0208 	bic.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	223f      	movs	r2, #63	@ 0x3f
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07e      	beq.n	800292c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
        }
        return;
 8002836:	e079      	b.n	800292c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	2b00      	cmp	r3, #0
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e02c      	b.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000
 800286c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	4798      	blx	r3
 8002880:	e01e      	b.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0210 	bic.w	r2, r2, #16
 800289e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d022      	beq.n	800291a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2205      	movs	r2, #5
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3301      	adds	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d307      	bcc.n	8002908 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f2      	bne.n	80028ec <HAL_DMA_IRQHandler+0x2cc>
 8002906:	e000      	b.n	800290a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002908:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e000      	b.n	800292e <HAL_DMA_IRQHandler+0x30e>
        return;
 800292c:	bf00      	nop
    }
  }
}
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002950:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b40      	cmp	r3, #64	@ 0x40
 8002960:	d108      	bne.n	8002974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002972:	e007      	b.n	8002984 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3b10      	subs	r3, #16
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <DMA_CalcBaseAndBitshift+0x64>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029aa:	4a13      	ldr	r2, [pc, #76]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x68>)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d909      	bls.n	80029d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d0:	e007      	b.n	80029e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	aaaaaaab 	.word	0xaaaaaaab
 80029f8:	08005d08 	.word	0x08005d08

080029fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d11f      	bne.n	8002a56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d856      	bhi.n	8002aca <DMA_CheckFifoParam+0xce>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <DMA_CheckFifoParam+0x28>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a47 	.word	0x08002a47
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002acb 	.word	0x08002acb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d046      	beq.n	8002ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a44:	e043      	b.n	8002ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a4e:	d140      	bne.n	8002ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e03d      	b.n	8002ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5e:	d121      	bne.n	8002aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d837      	bhi.n	8002ad6 <DMA_CheckFifoParam+0xda>
 8002a66:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <DMA_CheckFifoParam+0x70>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a83 	.word	0x08002a83
 8002a74:	08002a7d 	.word	0x08002a7d
 8002a78:	08002a95 	.word	0x08002a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e030      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d025      	beq.n	8002ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a92:	e022      	b.n	8002ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a9c:	d11f      	bne.n	8002ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa2:	e01c      	b.n	8002ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d903      	bls.n	8002ab2 <DMA_CheckFifoParam+0xb6>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d003      	beq.n	8002ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab0:	e018      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab6:	e015      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00e      	beq.n	8002ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e00b      	b.n	8002ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aca:	bf00      	nop
 8002acc:	e00a      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e008      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e006      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e159      	b.n	8002dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 8148 	bne.w	8002dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d130      	bne.n	8002ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a2 	beq.w	8002dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b57      	ldr	r3, [pc, #348]	@ (8002ddc <HAL_GPIO_Init+0x2e8>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	4a56      	ldr	r2, [pc, #344]	@ (8002ddc <HAL_GPIO_Init+0x2e8>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8a:	4b54      	ldr	r3, [pc, #336]	@ (8002ddc <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c96:	4a52      	ldr	r2, [pc, #328]	@ (8002de0 <HAL_GPIO_Init+0x2ec>)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a49      	ldr	r2, [pc, #292]	@ (8002de4 <HAL_GPIO_Init+0x2f0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x202>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	@ (8002de8 <HAL_GPIO_Init+0x2f4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fe>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a47      	ldr	r2, [pc, #284]	@ (8002dec <HAL_GPIO_Init+0x2f8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x1fa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a46      	ldr	r2, [pc, #280]	@ (8002df0 <HAL_GPIO_Init+0x2fc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x1f6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a45      	ldr	r2, [pc, #276]	@ (8002df4 <HAL_GPIO_Init+0x300>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x1f2>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	@ (8002de0 <HAL_GPIO_Init+0x2ec>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d16:	4b38      	ldr	r3, [pc, #224]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d40:	4b2d      	ldr	r3, [pc, #180]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d64:	4a24      	ldr	r2, [pc, #144]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db8:	4a0f      	ldr	r2, [pc, #60]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f aea2 	bls.w	8002b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	@ 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e128      	b.n	8003094 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a90      	ldr	r2, [pc, #576]	@ (800309c <HAL_I2S_Init+0x26c>)
 8002e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fe fd01 	bl	8001864 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2202      	movs	r2, #2
 8002e84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d060      	beq.n	8002f50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e96:	2310      	movs	r3, #16
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e001      	b.n	8002ea0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d802      	bhi.n	8002eae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f001 fadc 	bl	800446c <HAL_RCCEx_GetPeriphCLKFreq>
 8002eb4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ebe:	d125      	bne.n	8002f0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	3305      	adds	r3, #5
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e01f      	b.n	8002f2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	3305      	adds	r3, #5
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e00e      	b.n	8002f2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	3305      	adds	r3, #5
 8002f28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4a5c      	ldr	r2, [pc, #368]	@ (80030a0 <HAL_I2S_Init+0x270>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	08db      	lsrs	r3, r3, #3
 8002f34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e003      	b.n	8002f58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002f50:	2302      	movs	r3, #2
 8002f52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d902      	bls.n	8002f64 <HAL_I2S_Init+0x134>
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2bff      	cmp	r3, #255	@ 0xff
 8002f62:	d907      	bls.n	8002f74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e08f      	b.n	8003094 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	ea42 0103 	orr.w	r1, r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f92:	f023 030f 	bic.w	r3, r3, #15
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6851      	ldr	r1, [r2, #4]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6892      	ldr	r2, [r2, #8]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68d2      	ldr	r2, [r2, #12]
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6992      	ldr	r2, [r2, #24]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d161      	bne.n	8003084 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a38      	ldr	r2, [pc, #224]	@ (80030a4 <HAL_I2S_Init+0x274>)
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a37      	ldr	r2, [pc, #220]	@ (80030a8 <HAL_I2S_Init+0x278>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_I2S_Init+0x1a4>
 8002fd0:	4b36      	ldr	r3, [pc, #216]	@ (80030ac <HAL_I2S_Init+0x27c>)
 8002fd2:	e001      	b.n	8002fd8 <HAL_I2S_Init+0x1a8>
 8002fd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4932      	ldr	r1, [pc, #200]	@ (80030a8 <HAL_I2S_Init+0x278>)
 8002fe0:	428a      	cmp	r2, r1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2S_Init+0x1b8>
 8002fe4:	4a31      	ldr	r2, [pc, #196]	@ (80030ac <HAL_I2S_Init+0x27c>)
 8002fe6:	e001      	b.n	8002fec <HAL_I2S_Init+0x1bc>
 8002fe8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002fec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ff0:	f023 030f 	bic.w	r3, r3, #15
 8002ff4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80030a8 <HAL_I2S_Init+0x278>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_I2S_Init+0x1d4>
 8003000:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <HAL_I2S_Init+0x27c>)
 8003002:	e001      	b.n	8003008 <HAL_I2S_Init+0x1d8>
 8003004:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003008:	2202      	movs	r2, #2
 800300a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a25      	ldr	r2, [pc, #148]	@ (80030a8 <HAL_I2S_Init+0x278>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_I2S_Init+0x1ea>
 8003016:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <HAL_I2S_Init+0x27c>)
 8003018:	e001      	b.n	800301e <HAL_I2S_Init+0x1ee>
 800301a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800302a:	d003      	beq.n	8003034 <HAL_I2S_Init+0x204>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d103      	bne.n	800303c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003034:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e001      	b.n	8003040 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800304a:	4313      	orrs	r3, r2
 800304c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003054:	4313      	orrs	r3, r2
 8003056:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800305e:	4313      	orrs	r3, r2
 8003060:	b29a      	uxth	r2, r3
 8003062:	897b      	ldrh	r3, [r7, #10]
 8003064:	4313      	orrs	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800306c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <HAL_I2S_Init+0x278>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_I2S_Init+0x24c>
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <HAL_I2S_Init+0x27c>)
 800307a:	e001      	b.n	8003080 <HAL_I2S_Init+0x250>
 800307c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003080:	897a      	ldrh	r2, [r7, #10]
 8003082:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	08003399 	.word	0x08003399
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	080034ad 	.word	0x080034ad
 80030a8:	40003800 	.word	0x40003800
 80030ac:	40003400 	.word	0x40003400

080030b0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_I2S_Transmit_DMA+0x1a>
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e08a      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	e082      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2S_Transmit_DMA+0x3e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e07a      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x134>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2203      	movs	r2, #3
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d002      	beq.n	8003122 <HAL_I2S_Transmit_DMA+0x72>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d10a      	bne.n	8003138 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003136:	e005      	b.n	8003144 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	4a28      	ldr	r2, [pc, #160]	@ (80031ec <HAL_I2S_Transmit_DMA+0x13c>)
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	4a27      	ldr	r2, [pc, #156]	@ (80031f0 <HAL_I2S_Transmit_DMA+0x140>)
 8003152:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	4a26      	ldr	r2, [pc, #152]	@ (80031f4 <HAL_I2S_Transmit_DMA+0x144>)
 800315a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003164:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800316c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003174:	f7ff f9fc 	bl	8002570 <HAL_DMA_Start_IT>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00f      	beq.n	800319e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f043 0208 	orr.w	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0202 	orr.w	r2, r2, #2
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031e0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	08003277 	.word	0x08003277
 80031f0:	08003235 	.word	0x08003235
 80031f4:	08003293 	.word	0x08003293

080031f8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0202 	bic.w	r2, r2, #2
 8003258:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7fd fc5b 	bl	8000b24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003282:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff ffb7 	bl	80031f8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0203 	bic.w	r2, r2, #3
 80032ae:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f043 0208 	orr.w	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff ffa5 	bl	8003220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	1c9a      	adds	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10e      	bne.n	8003332 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003322:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fbf9 	bl	8000b24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	b292      	uxth	r2, r2
 800334e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10e      	bne.n	8003390 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003380:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff3e 	bl	800320c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d13a      	bne.n	800342a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d109      	bne.n	80033d2 <I2S_IRQHandler+0x3a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d102      	bne.n	80033d2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ffb4 	bl	800333a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b40      	cmp	r3, #64	@ 0x40
 80033da:	d126      	bne.n	800342a <I2S_IRQHandler+0x92>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d11f      	bne.n	800342a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033f8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fefb 	bl	8003220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b03      	cmp	r3, #3
 8003434:	d136      	bne.n	80034a4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d109      	bne.n	8003454 <I2S_IRQHandler+0xbc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d102      	bne.n	8003454 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ff45 	bl	80032de <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d122      	bne.n	80034a4 <I2S_IRQHandler+0x10c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b20      	cmp	r3, #32
 800346a:	d11b      	bne.n	80034a4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800347a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	f043 0204 	orr.w	r2, r3, #4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff febe 	bl	8003220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a92      	ldr	r2, [pc, #584]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034c6:	4b92      	ldr	r3, [pc, #584]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034c8:	e001      	b.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a8b      	ldr	r2, [pc, #556]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034e6:	e001      	b.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f8:	d004      	beq.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 8099 	bne.w	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d107      	bne.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f925 	bl	8003768 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9c8 	bl	80038c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d13a      	bne.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d035      	beq.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6e      	ldr	r2, [pc, #440]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003556:	4b6e      	ldr	r3, [pc, #440]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003558:	e001      	b.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800355a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4969      	ldr	r1, [pc, #420]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003566:	428b      	cmp	r3, r1
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800356a:	4b69      	ldr	r3, [pc, #420]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003572:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003576:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003586:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fe34 	bl	8003220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b08      	cmp	r3, #8
 80035c0:	f040 80c3 	bne.w	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80bd 	beq.w	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80035de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a49      	ldr	r2, [pc, #292]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035ea:	4b49      	ldr	r3, [pc, #292]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ec:	e001      	b.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4944      	ldr	r1, [pc, #272]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035fa:	428b      	cmp	r3, r1
 80035fc:	d101      	bne.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035fe:	4b44      	ldr	r3, [pc, #272]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003600:	e001      	b.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003602:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003606:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800360a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fdf6 	bl	8003220 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003634:	e089      	b.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d107      	bne.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8be 	bl	80037cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8fd 	bl	8003864 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d12f      	bne.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02a      	beq.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800368c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003698:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369a:	e001      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4919      	ldr	r1, [pc, #100]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a8:	428b      	cmp	r3, r1
 80036aa:	d101      	bne.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036ac:	4b18      	ldr	r3, [pc, #96]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ae:	e001      	b.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fda6 	bl	8003220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d136      	bne.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d031      	beq.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a07      	ldr	r2, [pc, #28]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036f2:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4902      	ldr	r1, [pc, #8]	@ (800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003702:	428b      	cmp	r3, r1
 8003704:	d106      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003706:	4b02      	ldr	r3, [pc, #8]	@ (8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003708:	e006      	b.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800370a:	bf00      	nop
 800370c:	40003800 	.word	0x40003800
 8003710:	40003400 	.word	0x40003400
 8003714:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003718:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800371c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800372c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fd6c 	bl	8003220 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003748:	e000      	b.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800374a:	bf00      	nop
}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	1c99      	adds	r1, r3, #2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6251      	str	r1, [r2, #36]	@ 0x24
 800377a:	881a      	ldrh	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d113      	bne.n	80037c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ffc9 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	1c99      	adds	r1, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6251      	str	r1, [r2, #36]	@ 0x24
 80037de:	8819      	ldrh	r1, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	@ (800385c <I2SEx_TxISR_I2SExt+0x90>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <I2SEx_TxISR_I2SExt+0x22>
 80037ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <I2SEx_TxISR_I2SExt+0x94>)
 80037ec:	e001      	b.n	80037f2 <I2SEx_TxISR_I2SExt+0x26>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037f2:	460a      	mov	r2, r1
 80037f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d121      	bne.n	8003852 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a12      	ldr	r2, [pc, #72]	@ (800385c <I2SEx_TxISR_I2SExt+0x90>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <I2SEx_TxISR_I2SExt+0x50>
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <I2SEx_TxISR_I2SExt+0x94>)
 800381a:	e001      	b.n	8003820 <I2SEx_TxISR_I2SExt+0x54>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	490d      	ldr	r1, [pc, #52]	@ (800385c <I2SEx_TxISR_I2SExt+0x90>)
 8003828:	428b      	cmp	r3, r1
 800382a:	d101      	bne.n	8003830 <I2SEx_TxISR_I2SExt+0x64>
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <I2SEx_TxISR_I2SExt+0x94>)
 800382e:	e001      	b.n	8003834 <I2SEx_TxISR_I2SExt+0x68>
 8003830:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003834:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003838:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d106      	bne.n	8003852 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff81 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40003800 	.word	0x40003800
 8003860:	40003400 	.word	0x40003400

08003864 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68d8      	ldr	r0, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	1c99      	adds	r1, r3, #2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800387c:	b282      	uxth	r2, r0
 800387e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d113      	bne.n	80038c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff4a 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <I2SEx_RxISR_I2SExt+0x90>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <I2SEx_RxISR_I2SExt+0x16>
 80038da:	4b20      	ldr	r3, [pc, #128]	@ (800395c <I2SEx_RxISR_I2SExt+0x94>)
 80038dc:	e001      	b.n	80038e2 <I2SEx_RxISR_I2SExt+0x1a>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038e2:	68d8      	ldr	r0, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	1c99      	adds	r1, r3, #2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80038ee:	b282      	uxth	r2, r0
 80038f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d121      	bne.n	800394e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a12      	ldr	r2, [pc, #72]	@ (8003958 <I2SEx_RxISR_I2SExt+0x90>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <I2SEx_RxISR_I2SExt+0x50>
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <I2SEx_RxISR_I2SExt+0x94>)
 8003916:	e001      	b.n	800391c <I2SEx_RxISR_I2SExt+0x54>
 8003918:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	490d      	ldr	r1, [pc, #52]	@ (8003958 <I2SEx_RxISR_I2SExt+0x90>)
 8003924:	428b      	cmp	r3, r1
 8003926:	d101      	bne.n	800392c <I2SEx_RxISR_I2SExt+0x64>
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <I2SEx_RxISR_I2SExt+0x94>)
 800392a:	e001      	b.n	8003930 <I2SEx_RxISR_I2SExt+0x68>
 800392c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003930:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003934:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff03 	bl	8003754 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40003800 	.word	0x40003800
 800395c:	40003400 	.word	0x40003400

08003960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e267      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d075      	beq.n	8003a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800397e:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b85      	ldr	r3, [pc, #532]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003992:	2b08      	cmp	r3, #8
 8003994:	d112      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b82      	ldr	r3, [pc, #520]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a2:	d10b      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d05b      	beq.n	8003a68 <HAL_RCC_OscConfig+0x108>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d157      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e242      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x98>
 80039de:	4b70      	ldr	r3, [pc, #448]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6c      	ldr	r2, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039f8:	4b69      	ldr	r3, [pc, #420]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe f958 	bl	8001ccc <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe f954 	bl	8001ccc <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e207      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0xc0>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe f944 	bl	8001ccc <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe f940 	bl	8001ccc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1f3      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0xe8>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1c7      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe f8f9 	bl	8001ccc <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fe f8f5 	bl	8001ccc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1a8      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f8d8 	bl	8001ccc <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fe f8d4 	bl	8001ccc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e187      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fe f8b8 	bl	8001ccc <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe f8b4 	bl	8001ccc <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e167      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x200>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe f8a1 	bl	8001ccc <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fe f89d 	bl	8001ccc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e150      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b88      	ldr	r3, [pc, #544]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b81      	ldr	r3, [pc, #516]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be6:	4b7a      	ldr	r3, [pc, #488]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b77      	ldr	r3, [pc, #476]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b74      	ldr	r3, [pc, #464]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a73      	ldr	r2, [pc, #460]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f85d 	bl	8001ccc <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe f859 	bl	8001ccc <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e10c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
 8003c3c:	4b64      	ldr	r3, [pc, #400]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a63      	ldr	r2, [pc, #396]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x30c>
 8003c52:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c6c:	4b58      	ldr	r3, [pc, #352]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a57      	ldr	r2, [pc, #348]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	4b55      	ldr	r3, [pc, #340]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a54      	ldr	r2, [pc, #336]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe f81e 	bl	8001ccc <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fe f81a 	bl	8001ccc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0cb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x334>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f808 	bl	8001ccc <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe f804 	bl	8001ccc <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0b5      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	4a38      	ldr	r2, [pc, #224]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a1 	beq.w	8003e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d05c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d141      	bne.n	8003d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd ffd8 	bl	8001ccc <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd ffd4 	bl	8001ccc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e087      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	491b      	ldr	r1, [pc, #108]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd ffad 	bl	8001ccc <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd ffa9 	bl	8001ccc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e05c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x416>
 8003d94:	e054      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd ff96 	bl	8001ccc <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd ff92 	bl	8001ccc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e045      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x444>
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e038      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d028      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d121      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd fec4 	bl	8001ccc <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd fec0 	bl	8001ccc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fe24 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	08005cf0 	.word	0x08005cf0
 8004014:	20000000 	.word	0x20000000
 8004018:	20000004 	.word	0x20000004

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b094      	sub	sp, #80	@ 0x50
 8004022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004034:	4b79      	ldr	r3, [pc, #484]	@ (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x40>
 8004040:	2b08      	cmp	r3, #8
 8004042:	f200 80e1 	bhi.w	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x34>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x3a>
 800404e:	e0db      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b73      	ldr	r3, [pc, #460]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004054:	e0db      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b73      	ldr	r3, [pc, #460]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x208>)
 8004058:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800405a:	e0d8      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405c:	4b6f      	ldr	r3, [pc, #444]	@ (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004064:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004066:	4b6d      	ldr	r3, [pc, #436]	@ (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d063      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b6a      	ldr	r3, [pc, #424]	@ (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800407c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	633b      	str	r3, [r7, #48]	@ 0x30
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
 800408a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4621      	mov	r1, r4
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	6139      	str	r1, [r7, #16]
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c0:	4659      	mov	r1, fp
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ca:	4651      	mov	r1, sl
 80040cc:	018a      	lsls	r2, r1, #6
 80040ce:	4651      	mov	r1, sl
 80040d0:	ebb2 0801 	subs.w	r8, r2, r1
 80040d4:	4659      	mov	r1, fp
 80040d6:	eb63 0901 	sbc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	462b      	mov	r3, r5
 80040fc:	eb49 0303 	adc.w	r3, r9, r3
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410e:	4629      	mov	r1, r5
 8004110:	024b      	lsls	r3, r1, #9
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004118:	4621      	mov	r1, r4
 800411a:	024a      	lsls	r2, r1, #9
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800412c:	f7fc f852 	bl	80001d4 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004138:	e058      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b38      	ldr	r3, [pc, #224]	@ (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	4618      	mov	r0, r3
 8004144:	4611      	mov	r1, r2
 8004146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	f04f 0000 	mov.w	r0, #0
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	0159      	lsls	r1, r3, #5
 8004162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004166:	0150      	lsls	r0, r2, #5
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4641      	mov	r1, r8
 800416e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb63 0b01 	sbc.w	fp, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800418c:	ebb2 040a 	subs.w	r4, r2, sl
 8004190:	eb63 050b 	sbc.w	r5, r3, fp
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	18e3      	adds	r3, r4, r3
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	464b      	mov	r3, r9
 80041b0:	eb45 0303 	adc.w	r3, r5, r3
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c2:	4629      	mov	r1, r5
 80041c4:	028b      	lsls	r3, r1, #10
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041cc:	4621      	mov	r1, r4
 80041ce:	028a      	lsls	r2, r1, #10
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	61fa      	str	r2, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	f7fb fff8 	bl	80001d4 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 800420a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004210:	4618      	mov	r0, r3
 8004212:	3750      	adds	r7, #80	@ 0x50
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b03      	ldr	r3, [pc, #12]	@ (800423c <HAL_RCC_GetHCLKFreq+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000000 	.word	0x20000000

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004244:	f7ff fff0 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0a9b      	lsrs	r3, r3, #10
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	@ (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	08005d00 	.word	0x08005d00

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800426c:	f7ff ffdc 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0b5b      	lsrs	r3, r3, #13
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	@ (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	08005d00 	.word	0x08005d00

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d035      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042b8:	4b67      	ldr	r3, [pc, #412]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042be:	f7fd fd05 	bl	8001ccc <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042c6:	f7fd fd01 	bl	8001ccc <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0ba      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d8:	4b60      	ldr	r3, [pc, #384]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	019a      	lsls	r2, r3, #6
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	071b      	lsls	r3, r3, #28
 80042f0:	495a      	ldr	r1, [pc, #360]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042f8:	4b57      	ldr	r3, [pc, #348]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042fe:	f7fd fce5 	bl	8001ccc <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004306:	f7fd fce1 	bl	8001ccc <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e09a      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004318:	4b50      	ldr	r3, [pc, #320]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8083 	beq.w	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b49      	ldr	r3, [pc, #292]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	4a48      	ldr	r2, [pc, #288]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	@ 0x40
 8004342:	4b46      	ldr	r3, [pc, #280]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800434e:	4b44      	ldr	r3, [pc, #272]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a43      	ldr	r2, [pc, #268]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004358:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800435a:	f7fd fcb7 	bl	8001ccc <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fd fcb3 	bl	8001ccc <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e06c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004374:	4b3a      	ldr	r3, [pc, #232]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004380:	4b36      	ldr	r3, [pc, #216]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004388:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d02f      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	d028      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800439e:	4b2f      	ldr	r3, [pc, #188]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043b4:	4a29      	ldr	r2, [pc, #164]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043ba:	4b28      	ldr	r3, [pc, #160]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d114      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fd fc81 	bl	8001ccc <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd fc7d 	bl	8001ccc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e034      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b1d      	ldr	r3, [pc, #116]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043fc:	d10d      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043fe:	4b17      	ldr	r3, [pc, #92]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800440e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004412:	4912      	ldr	r1, [pc, #72]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]
 8004418:	e005      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4a0f      	ldr	r2, [pc, #60]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004420:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004424:	6093      	str	r3, [r2, #8]
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004428:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004432:	490a      	ldr	r1, [pc, #40]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7c1a      	ldrb	r2, [r3, #16]
 8004448:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800444a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	42470068 	.word	0x42470068
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	42470e40 	.word	0x42470e40
 8004468:	424711e0 	.word	0x424711e0

0800446c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d13f      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004492:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044a0:	d12f      	bne.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044a4:	617b      	str	r3, [r7, #20]
          break;
 80044a6:	e02f      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044a8:	4b1c      	ldr	r3, [pc, #112]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b4:	d108      	bne.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044b6:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044be:	4a19      	ldr	r2, [pc, #100]	@ (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e007      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044c8:	4b14      	ldr	r3, [pc, #80]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d0:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044d8:	4b10      	ldr	r3, [pc, #64]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044ec:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f2:	0f1b      	lsrs	r3, r3, #28
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	617b      	str	r3, [r7, #20]
          break;
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
          break;
 8004506:	bf00      	nop
        }
      }
      break;
 8004508:	e000      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800450a:	bf00      	nop
    }
  }
  return frequency;
 800450c:	697b      	ldr	r3, [r7, #20]
}
 800450e:	4618      	mov	r0, r3
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	00bb8000 	.word	0x00bb8000
 8004524:	007a1200 	.word	0x007a1200
 8004528:	00f42400 	.word	0x00f42400

0800452c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e07b      	b.n	8004636 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800454e:	d009      	beq.n	8004564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]
 8004556:	e005      	b.n	8004564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fd fa0c 	bl	800199c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800459a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e8:	ea42 0103 	orr.w	r1, r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	f003 0104 	and.w	r1, r3, #4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	f003 0210 	and.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004624:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b088      	sub	sp, #32
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800464e:	f7fd fb3d 	bl	8001ccc <HAL_GetTick>
 8004652:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
 8004666:	e12a      	b.n	80048be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_SPI_Transmit+0x36>
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e122      	b.n	80048be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_SPI_Transmit+0x48>
 8004682:	2302      	movs	r3, #2
 8004684:	e11b      	b.n	80048be <HAL_SPI_Transmit+0x280>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2203      	movs	r2, #3
 8004692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d4:	d10f      	bne.n	80046f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d007      	beq.n	8004714 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800471c:	d152      	bne.n	80047c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0xee>
 8004726:	8b7b      	ldrh	r3, [r7, #26]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d145      	bne.n	80047b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004750:	e032      	b.n	80047b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d112      	bne.n	8004786 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004784:	e018      	b.n	80047b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fd faa1 	bl	8001ccc <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_Transmit+0x160>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x166>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e082      	b.n	80048be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1c7      	bne.n	8004752 <HAL_SPI_Transmit+0x114>
 80047c2:	e053      	b.n	800486c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_SPI_Transmit+0x194>
 80047cc:	8b7b      	ldrh	r3, [r7, #26]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d147      	bne.n	8004862 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047f8:	e033      	b.n	8004862 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d113      	bne.n	8004830 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800482e:	e018      	b.n	8004862 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004830:	f7fd fa4c 	bl	8001ccc <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d803      	bhi.n	8004848 <HAL_SPI_Transmit+0x20a>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d102      	bne.n	800484e <HAL_SPI_Transmit+0x210>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e02d      	b.n	80048be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1c6      	bne.n	80047fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fbe7 	bl	8005044 <SPI_EndRxTxTransaction>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b088      	sub	sp, #32
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
 80048e4:	e104      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ee:	d112      	bne.n	8004916 <HAL_SPI_Receive+0x50>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10e      	bne.n	8004916 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2204      	movs	r2, #4
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f8f3 	bl	8004af8 <HAL_SPI_TransmitReceive>
 8004912:	4603      	mov	r3, r0
 8004914:	e0ec      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004916:	f7fd f9d9 	bl	8001ccc <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_SPI_Receive+0x62>
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0e1      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_SPI_Receive+0x74>
 8004936:	2302      	movs	r3, #2
 8004938:	e0da      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2204      	movs	r2, #4
 8004946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004988:	d10f      	bne.n	80049aa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004998:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d007      	beq.n	80049c8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d170      	bne.n	8004ab2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049d0:	e035      	b.n	8004a3e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d115      	bne.n	8004a0c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f103 020c 	add.w	r2, r3, #12
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a0a:	e018      	b.n	8004a3e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a0c:	f7fd f95e 	bl	8001ccc <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d803      	bhi.n	8004a24 <HAL_SPI_Receive+0x15e>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d102      	bne.n	8004a2a <HAL_SPI_Receive+0x164>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e058      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1c4      	bne.n	80049d2 <HAL_SPI_Receive+0x10c>
 8004a48:	e038      	b.n	8004abc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d113      	bne.n	8004a80 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	b292      	uxth	r2, r2
 8004a64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	1c9a      	adds	r2, r3, #2
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a7e:	e018      	b.n	8004ab2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a80:	f7fd f924 	bl	8001ccc <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d803      	bhi.n	8004a98 <HAL_SPI_Receive+0x1d2>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_Receive+0x1d8>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e01e      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1c6      	bne.n	8004a4a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fa59 	bl	8004f78 <SPI_EndRxTransaction>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	@ 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b06:	2301      	movs	r3, #1
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0a:	f7fd f8df 	bl	8001ccc <HAL_GetTick>
 8004b0e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b16:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b22:	7ffb      	ldrb	r3, [r7, #31]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d00c      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x4a>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b2e:	d106      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x46>
 8004b38:	7ffb      	ldrb	r3, [r7, #31]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d001      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e17f      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x5c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x5c>
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e174      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x6e>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e16d      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d003      	beq.n	8004b82 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2205      	movs	r2, #5
 8004b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	887a      	ldrh	r2, [r7, #2]
 8004b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	887a      	ldrh	r2, [r7, #2]
 8004b98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	887a      	ldrh	r2, [r7, #2]
 8004baa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d007      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bde:	d17e      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_TransmitReceive+0xf6>
 8004be8:	8afb      	ldrh	r3, [r7, #22]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d16c      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c12:	e059      	b.n	8004cc8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d11b      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x162>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d016      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x162>
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d113      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	881a      	ldrh	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d119      	bne.n	8004c9c <HAL_SPI_TransmitReceive+0x1a4>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d014      	beq.n	8004c9c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	b292      	uxth	r2, r2
 8004c7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c84:	1c9a      	adds	r2, r3, #2
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c9c:	f7fd f816 	bl	8001ccc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d80d      	bhi.n	8004cc8 <HAL_SPI_TransmitReceive+0x1d0>
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d009      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e0bc      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1a0      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x11c>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d19b      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x11c>
 8004cdc:	e082      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x1f4>
 8004ce6:	8afb      	ldrh	r3, [r7, #22]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d171      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d12:	e05d      	b.n	8004dd0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d11c      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x264>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d017      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x264>
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d114      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d119      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x2a6>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d014      	beq.n	8004d9e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d9e:	f7fc ff95 	bl	8001ccc <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d803      	bhi.n	8004db6 <HAL_SPI_TransmitReceive+0x2be>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d102      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x2c4>
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e038      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d19c      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x21c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d197      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f92b 	bl	8005044 <SPI_EndRxTxTransaction>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e01d      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3728      	adds	r7, #40	@ 0x28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e58:	b2db      	uxtb	r3, r3
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e78:	f7fc ff28 	bl	8001ccc <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e88:	f7fc ff20 	bl	8001ccc <HAL_GetTick>
 8004e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	015b      	lsls	r3, r3, #5
 8004e94:	0d1b      	lsrs	r3, r3, #20
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	fb02 f303 	mul.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9e:	e054      	b.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d050      	beq.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea8:	f7fc ff10 	bl	8001ccc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d902      	bls.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d13d      	bne.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ed6:	d111      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee0:	d004      	beq.n	8004eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d107      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f04:	d10f      	bne.n	8004f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e017      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d19b      	bne.n	8004ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000000 	.word	0x20000000

08004f78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f8c:	d111      	bne.n	8004fb2 <SPI_EndRxTransaction+0x3a>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f96:	d004      	beq.n	8004fa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa0:	d107      	bne.n	8004fb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fba:	d12a      	bne.n	8005012 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc4:	d012      	beq.n	8004fec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	@ 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff ff49 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02d      	beq.n	8005038 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe0:	f043 0220 	orr.w	r2, r3, #32
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e026      	b.n	800503a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff ff36 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e013      	b.n	800503a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2200      	movs	r2, #0
 800501a:	2101      	movs	r1, #1
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff23 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e000      	b.n	800503a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2201      	movs	r2, #1
 8005058:	2102      	movs	r1, #2
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff ff04 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e032      	b.n	80050dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005076:	4b1b      	ldr	r3, [pc, #108]	@ (80050e4 <SPI_EndRxTxTransaction+0xa0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <SPI_EndRxTxTransaction+0xa4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	0d5b      	lsrs	r3, r3, #21
 8005082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005094:	d112      	bne.n	80050bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f7ff fee1 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e00f      	b.n	80050dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b80      	cmp	r3, #128	@ 0x80
 80050d4:	d0f2      	beq.n	80050bc <SPI_EndRxTxTransaction+0x78>
 80050d6:	e000      	b.n	80050da <SPI_EndRxTxTransaction+0x96>
        break;
 80050d8:	bf00      	nop
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000000 	.word	0x20000000
 80050e8:	165e9f81 	.word	0x165e9f81

080050ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e041      	b.n	8005182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc fc8a 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f000 f950 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d001      	beq.n	80051a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e03c      	b.n	800521e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	@ (800522c <HAL_TIM_Base_Start+0xa0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_TIM_Base_Start+0x5c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051be:	d013      	beq.n	80051e8 <HAL_TIM_Base_Start+0x5c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_TIM_Base_Start+0xa4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIM_Base_Start+0x5c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a19      	ldr	r2, [pc, #100]	@ (8005234 <HAL_TIM_Base_Start+0xa8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_Base_Start+0x5c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <HAL_TIM_Base_Start+0xac>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIM_Base_Start+0x5c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_TIM_Base_Start+0xb0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d111      	bne.n	800520c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d010      	beq.n	800521c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e007      	b.n	800521c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40014000 	.word	0x40014000

08005240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIM_ConfigClockSource+0x1c>
 8005258:	2302      	movs	r3, #2
 800525a:	e0b4      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x186>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800527a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005294:	d03e      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0xd4>
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529a:	f200 8087 	bhi.w	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a2:	f000 8086 	beq.w	80053b2 <HAL_TIM_ConfigClockSource+0x172>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	d87f      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052ac:	2b70      	cmp	r3, #112	@ 0x70
 80052ae:	d01a      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0xa6>
 80052b0:	2b70      	cmp	r3, #112	@ 0x70
 80052b2:	d87b      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052b4:	2b60      	cmp	r3, #96	@ 0x60
 80052b6:	d050      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x11a>
 80052b8:	2b60      	cmp	r3, #96	@ 0x60
 80052ba:	d877      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052bc:	2b50      	cmp	r3, #80	@ 0x50
 80052be:	d03c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0xfa>
 80052c0:	2b50      	cmp	r3, #80	@ 0x50
 80052c2:	d873      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052c4:	2b40      	cmp	r3, #64	@ 0x40
 80052c6:	d058      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x13a>
 80052c8:	2b40      	cmp	r3, #64	@ 0x40
 80052ca:	d86f      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052cc:	2b30      	cmp	r3, #48	@ 0x30
 80052ce:	d064      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x15a>
 80052d0:	2b30      	cmp	r3, #48	@ 0x30
 80052d2:	d86b      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d060      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x15a>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d867      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05c      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x15a>
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d05a      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x15a>
 80052e4:	e062      	b.n	80053ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052f6:	f000 f971 	bl	80055dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	609a      	str	r2, [r3, #8]
      break;
 8005312:	e04f      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005324:	f000 f95a 	bl	80055dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005336:	609a      	str	r2, [r3, #8]
      break;
 8005338:	e03c      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005346:	461a      	mov	r2, r3
 8005348:	f000 f8ce 	bl	80054e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2150      	movs	r1, #80	@ 0x50
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f927 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005358:	e02c      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005366:	461a      	mov	r2, r3
 8005368:	f000 f8ed 	bl	8005546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2160      	movs	r1, #96	@ 0x60
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f917 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005378:	e01c      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005386:	461a      	mov	r2, r3
 8005388:	f000 f8ae 	bl	80054e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2140      	movs	r1, #64	@ 0x40
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f907 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005398:	e00c      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f000 f8fe 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 80053aa:	e003      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      break;
 80053b0:	e000      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3a      	ldr	r2, [pc, #232]	@ (80054cc <TIM_Base_SetConfig+0xfc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a37      	ldr	r2, [pc, #220]	@ (80054d0 <TIM_Base_SetConfig+0x100>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a36      	ldr	r2, [pc, #216]	@ (80054d4 <TIM_Base_SetConfig+0x104>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a35      	ldr	r2, [pc, #212]	@ (80054d8 <TIM_Base_SetConfig+0x108>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2b      	ldr	r2, [pc, #172]	@ (80054cc <TIM_Base_SetConfig+0xfc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01b      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d017      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a28      	ldr	r2, [pc, #160]	@ (80054d0 <TIM_Base_SetConfig+0x100>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a27      	ldr	r2, [pc, #156]	@ (80054d4 <TIM_Base_SetConfig+0x104>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00f      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a26      	ldr	r2, [pc, #152]	@ (80054d8 <TIM_Base_SetConfig+0x108>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a25      	ldr	r2, [pc, #148]	@ (80054dc <TIM_Base_SetConfig+0x10c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a24      	ldr	r2, [pc, #144]	@ (80054e0 <TIM_Base_SetConfig+0x110>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a23      	ldr	r2, [pc, #140]	@ (80054e4 <TIM_Base_SetConfig+0x114>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a0e      	ldr	r2, [pc, #56]	@ (80054cc <TIM_Base_SetConfig+0xfc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d103      	bne.n	80054a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]
  }
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40014400 	.word	0x40014400
 80054e4:	40014800 	.word	0x40014800

080054e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 030a 	bic.w	r3, r3, #10
 8005524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005546:	b480      	push	{r7}
 8005548:	b087      	sub	sp, #28
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f023 0210 	bic.w	r2, r3, #16
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	031b      	lsls	r3, r3, #12
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f043 0307 	orr.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	431a      	orrs	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005630:	2302      	movs	r3, #2
 8005632:	e050      	b.n	80056d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1c      	ldr	r2, [pc, #112]	@ (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d013      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a16      	ldr	r2, [pc, #88]	@ (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a15      	ldr	r2, [pc, #84]	@ (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a13      	ldr	r2, [pc, #76]	@ (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d10c      	bne.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40014000 	.word	0x40014000

080056f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e042      	b.n	8005790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fc f9a6 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	@ 0x24
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800573a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f82b 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b0c0      	sub	sp, #256	@ 0x100
 800579e:	af00      	add	r7, sp, #0
 80057a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	ea40 0301 	orr.w	r3, r0, r1
 80057c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057f0:	f021 010c 	bic.w	r1, r1, #12
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057fe:	430b      	orrs	r3, r1
 8005800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	ea40 0301 	orr.w	r3, r0, r1
 800581e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8f      	ldr	r3, [pc, #572]	@ (8005a64 <UART_SetConfig+0x2cc>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0xa0>
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b8d      	ldr	r3, [pc, #564]	@ (8005a68 <UART_SetConfig+0x2d0>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fe fd16 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 800583c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005840:	e003      	b.n	800584a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fe fcfd 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 8005846:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005854:	f040 810c 	bne.w	8005a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005862:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	1891      	adds	r1, r2, r2
 8005870:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005872:	415b      	adcs	r3, r3
 8005874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800587a:	4621      	mov	r1, r4
 800587c:	eb12 0801 	adds.w	r8, r2, r1
 8005880:	4629      	mov	r1, r5
 8005882:	eb43 0901 	adc.w	r9, r3, r1
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589a:	4690      	mov	r8, r2
 800589c:	4699      	mov	r9, r3
 800589e:	4623      	mov	r3, r4
 80058a0:	eb18 0303 	adds.w	r3, r8, r3
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb49 0303 	adc.w	r3, r9, r3
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058c6:	460b      	mov	r3, r1
 80058c8:	18db      	adds	r3, r3, r3
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80058cc:	4613      	mov	r3, r2
 80058ce:	eb42 0303 	adc.w	r3, r2, r3
 80058d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80058d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058dc:	f7fa fc7a 	bl	80001d4 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b61      	ldr	r3, [pc, #388]	@ (8005a6c <UART_SetConfig+0x2d4>)
 80058e6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	011c      	lsls	r4, r3, #4
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005908:	415b      	adcs	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005910:	4641      	mov	r1, r8
 8005912:	eb12 0a01 	adds.w	sl, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0b01 	adc.w	fp, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800592c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005930:	4692      	mov	sl, r2
 8005932:	469b      	mov	fp, r3
 8005934:	4643      	mov	r3, r8
 8005936:	eb1a 0303 	adds.w	r3, sl, r3
 800593a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800593e:	464b      	mov	r3, r9
 8005940:	eb4b 0303 	adc.w	r3, fp, r3
 8005944:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005954:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800595c:	460b      	mov	r3, r1
 800595e:	18db      	adds	r3, r3, r3
 8005960:	643b      	str	r3, [r7, #64]	@ 0x40
 8005962:	4613      	mov	r3, r2
 8005964:	eb42 0303 	adc.w	r3, r2, r3
 8005968:	647b      	str	r3, [r7, #68]	@ 0x44
 800596a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800596e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005972:	f7fa fc2f 	bl	80001d4 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a6c <UART_SetConfig+0x2d4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	@ 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005992:	4b36      	ldr	r3, [pc, #216]	@ (8005a6c <UART_SetConfig+0x2d4>)
 8005994:	fba3 2302 	umull	r2, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059a0:	441c      	add	r4, r3
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059bc:	415b      	adcs	r3, r3
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a2e:	f7fa fbd1 	bl	80001d4 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <UART_SetConfig+0x2d4>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	@ 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3332      	adds	r3, #50	@ 0x32
 8005a4a:	4a08      	ldr	r2, [pc, #32]	@ (8005a6c <UART_SetConfig+0x2d4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4422      	add	r2, r4
 8005a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a60:	e106      	b.n	8005c70 <UART_SetConfig+0x4d8>
 8005a62:	bf00      	nop
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	6239      	str	r1, [r7, #32]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a92:	4641      	mov	r1, r8
 8005a94:	1854      	adds	r4, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0501 	adc.w	r5, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	18e3      	adds	r3, r4, r3
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ab8:	464b      	mov	r3, r9
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ace:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ade:	4629      	mov	r1, r5
 8005ae0:	008b      	lsls	r3, r1, #2
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae8:	4621      	mov	r1, r4
 8005aea:	008a      	lsls	r2, r1, #2
 8005aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005af0:	f7fa fb70 	bl	80001d4 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4b60      	ldr	r3, [pc, #384]	@ (8005c7c <UART_SetConfig+0x4e4>)
 8005afa:	fba3 2302 	umull	r2, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	011c      	lsls	r4, r3, #4
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	61b9      	str	r1, [r7, #24]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6139      	str	r1, [r7, #16]
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	008b      	lsls	r3, r1, #2
 8005b80:	4641      	mov	r1, r8
 8005b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b86:	4641      	mov	r1, r8
 8005b88:	008a      	lsls	r2, r1, #2
 8005b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b8e:	f7fa fb21 	bl	80001d4 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	4b38      	ldr	r3, [pc, #224]	@ (8005c7c <UART_SetConfig+0x4e4>)
 8005b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2264      	movs	r2, #100	@ 0x64
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	1acb      	subs	r3, r1, r3
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	3332      	adds	r3, #50	@ 0x32
 8005bac:	4a33      	ldr	r2, [pc, #204]	@ (8005c7c <UART_SetConfig+0x4e4>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bb8:	441c      	add	r4, r3
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	1891      	adds	r1, r2, r2
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	415b      	adcs	r3, r3
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd8:	4641      	mov	r1, r8
 8005bda:	1851      	adds	r1, r2, r1
 8005bdc:	6039      	str	r1, [r7, #0]
 8005bde:	4649      	mov	r1, r9
 8005be0:	414b      	adcs	r3, r1
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	00cb      	lsls	r3, r1, #3
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	00ca      	lsls	r2, r1, #3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	4642      	mov	r2, r8
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	460a      	mov	r2, r1
 8005c0e:	eb42 0303 	adc.w	r3, r2, r3
 8005c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	008b      	lsls	r3, r1, #2
 8005c30:	4641      	mov	r1, r8
 8005c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c36:	4641      	mov	r1, r8
 8005c38:	008a      	lsls	r2, r1, #2
 8005c3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c3e:	f7fa fac9 	bl	80001d4 <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <UART_SetConfig+0x4e4>)
 8005c48:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	2164      	movs	r1, #100	@ 0x64
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	3332      	adds	r3, #50	@ 0x32
 8005c5a:	4a08      	ldr	r2, [pc, #32]	@ (8005c7c <UART_SetConfig+0x4e4>)
 8005c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	f003 020f 	and.w	r2, r3, #15
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4422      	add	r2, r4
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7c:	51eb851f 	.word	0x51eb851f

08005c80 <memset>:
 8005c80:	4402      	add	r2, r0
 8005c82:	4603      	mov	r3, r0
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memset+0xa>
 8005c88:	4770      	bx	lr
 8005c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8e:	e7f9      	b.n	8005c84 <memset+0x4>

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4d0d      	ldr	r5, [pc, #52]	@ (8005cc8 <__libc_init_array+0x38>)
 8005c94:	4c0d      	ldr	r4, [pc, #52]	@ (8005ccc <__libc_init_array+0x3c>)
 8005c96:	1b64      	subs	r4, r4, r5
 8005c98:	10a4      	asrs	r4, r4, #2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	42a6      	cmp	r6, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd0 <__libc_init_array+0x40>)
 8005ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8005cd4 <__libc_init_array+0x44>)
 8005ca4:	f000 f818 	bl	8005cd8 <_init>
 8005ca8:	1b64      	subs	r4, r4, r5
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	2600      	movs	r6, #0
 8005cae:	42a6      	cmp	r6, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb8:	4798      	blx	r3
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc2:	4798      	blx	r3
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	08005d18 	.word	0x08005d18
 8005ccc:	08005d18 	.word	0x08005d18
 8005cd0:	08005d18 	.word	0x08005d18
 8005cd4:	08005d1c 	.word	0x08005d1c

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
