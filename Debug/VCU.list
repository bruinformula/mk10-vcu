
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050100  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080561c8  080561c8  00058014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080561c8  080561c8  000571c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080561d0  080561d0  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080561d0  080561d0  000571d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080561d4  080561d4  000571d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080561d8  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000018  080561ec  00058018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080561ec  000582e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138b5  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c17  00000000  00000000  0006b8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0006e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8e  00000000  00000000  0006f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a84  00000000  00000000  00070626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156e6  00000000  00000000  000890aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eeff  00000000  00000000  0009e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e60  00000000  00000000  0013d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00142534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080060b0 	.word	0x080060b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080060b0 	.word	0x080060b0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <updateBMSDiagnostics>:
/* USER CODE END PFP */

/* -- Private user code -- */
/* USER CODE BEGIN 0 */

void updateBMSDiagnostics(void){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
    // do nothing for now
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <readAPPSandBSE>:

void readAPPSandBSE(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    // Start ADC DMA read
    HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <readAPPSandBSE+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4917      	ldr	r1, [pc, #92]	@ (8000578 <readAPPSandBSE+0x68>)
 800051c:	4817      	ldr	r0, [pc, #92]	@ (800057c <readAPPSandBSE+0x6c>)
 800051e:	f001 ff53 	bl	80023c8 <HAL_ADC_Start_DMA>
    if(HAL_GetTick() - millis_since_dma_read > DMA_READ_TIMEOUT){
 8000522:	f001 fedd 	bl	80022e0 <HAL_GetTick>
 8000526:	4602      	mov	r2, r0
 8000528:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <readAPPSandBSE+0x70>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	220a      	movs	r2, #10
 8000530:	4293      	cmp	r3, r2
 8000532:	d91c      	bls.n	800056e <readAPPSandBSE+0x5e>
        apps1Value = ADC_Reads[APPS1_RANK];
 8000534:	2300      	movs	r3, #0
 8000536:	461a      	mov	r2, r3
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <readAPPSandBSE+0x68>)
 800053a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <readAPPSandBSE+0x74>)
 8000542:	801a      	strh	r2, [r3, #0]
        apps2Value = ADC_Reads[APPS2_RANK];
 8000544:	2301      	movs	r3, #1
 8000546:	461a      	mov	r2, r3
 8000548:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <readAPPSandBSE+0x68>)
 800054a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <readAPPSandBSE+0x78>)
 8000552:	801a      	strh	r2, [r3, #0]
        bseValue   = ADC_Reads[BSE_RANK];
 8000554:	2302      	movs	r3, #2
 8000556:	461a      	mov	r2, r3
 8000558:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <readAPPSandBSE+0x68>)
 800055a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <readAPPSandBSE+0x7c>)
 8000562:	801a      	strh	r2, [r3, #0]
        millis_since_dma_read = HAL_GetTick();
 8000564:	f001 febc 	bl	80022e0 <HAL_GetTick>
 8000568:	4603      	mov	r3, r0
 800056a:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <readAPPSandBSE+0x70>)
 800056c:	6013      	str	r3, [r2, #0]
    }
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	20000288 	.word	0x20000288
 800057c:	20000034 	.word	0x20000034
 8000580:	20000284 	.word	0x20000284
 8000584:	2000026c 	.word	0x2000026c
 8000588:	2000026e 	.word	0x2000026e
 800058c:	20000270 	.word	0x20000270

08000590 <calculateTorqueRequest>:

void calculateTorqueRequest(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
    float apps1p = ((float)apps1Value - APPS_1_ADC_MIN_VAL)
 8000596:	4b45      	ldr	r3, [pc, #276]	@ (80006ac <calculateTorqueRequest+0x11c>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005a2:	230a      	movs	r3, #10
 80005a4:	ee07 3a90 	vmov	s15, r3
 80005a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ac:	ee77 6a67 	vsub.f32	s13, s14, s15
                   /(APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL);
 80005b0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005b4:	461a      	mov	r2, r3
 80005b6:	230a      	movs	r3, #10
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float apps1p = ((float)apps1Value - APPS_1_ADC_MIN_VAL)
 80005c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]
    float apps2p = ((float)apps2Value - APPS_2_ADC_MIN_VAL)
 80005ca:	4b39      	ldr	r3, [pc, #228]	@ (80006b0 <calculateTorqueRequest+0x120>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005d6:	230a      	movs	r3, #10
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e0:	ee77 6a67 	vsub.f32	s13, s14, s15
                   /(APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL);
 80005e4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005e8:	461a      	mov	r2, r3
 80005ea:	230a      	movs	r3, #10
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float apps2p = ((float)apps2Value - APPS_2_ADC_MIN_VAL)
 80005f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005fa:	edc7 7a02 	vstr	s15, [r7, #8]

    float appsValue = (apps1p + apps2p)/2.0f;
 80005fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000602:	edd7 7a02 	vldr	s15, [r7, #8]
 8000606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800060a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800060e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000612:	edc7 7a01 	vstr	s15, [r7, #4]
    if (appsValue >= 0.0f) {
 8000616:	edd7 7a01 	vldr	s15, [r7, #4]
 800061a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000622:	db11      	blt.n	8000648 <calculateTorqueRequest+0xb8>
        requestedTorque = ((float)(MAX_TORQUE - MIN_TORQUE)) * appsValue + MIN_TORQUE;
 8000624:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80006b4 <calculateTorqueRequest+0x124>
 8000628:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80006b8 <calculateTorqueRequest+0x128>
 800062c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000630:	edd7 7a01 	vldr	s15, [r7, #4]
 8000634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000638:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80006b8 <calculateTorqueRequest+0x128>
 800063c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <calculateTorqueRequest+0x12c>)
 8000642:	edc3 7a00 	vstr	s15, [r3]
        float bseRatio = ((float)bseValue - BSE_ADC_MIN_VAL)
                         /(BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL);
        requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
                          * bseRatio + REGEN_BASELINE_TORQUE;
    }
}
 8000646:	e02a      	b.n	800069e <calculateTorqueRequest+0x10e>
        float bseRatio = ((float)bseValue - BSE_ADC_MIN_VAL)
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <calculateTorqueRequest+0x130>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	ee07 3a90 	vmov	s15, r3
 8000650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000654:	2300      	movs	r3, #0
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ee77 6a67 	vsub.f32	s13, s14, s15
                         /(BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL);
 8000662:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000666:	461a      	mov	r2, r3
 8000668:	2300      	movs	r3, #0
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        float bseRatio = ((float)bseValue - BSE_ADC_MIN_VAL)
 8000674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000678:	edc7 7a00 	vstr	s15, [r7]
        requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 800067c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000680:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80006b8 <calculateTorqueRequest+0x128>
 8000684:	ee37 7a67 	vsub.f32	s14, s14, s15
                          * bseRatio + REGEN_BASELINE_TORQUE;
 8000688:	edd7 7a00 	vldr	s15, [r7]
 800068c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000690:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80006b8 <calculateTorqueRequest+0x128>
 8000694:	ee77 7a87 	vadd.f32	s15, s15, s14
        requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <calculateTorqueRequest+0x12c>)
 800069a:	edc3 7a00 	vstr	s15, [r3]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	2000026c 	.word	0x2000026c
 80006b0:	2000026e 	.word	0x2000026e
 80006b4:	42d80000 	.word	0x42d80000
 80006b8:	00000000 	.word	0x00000000
 80006bc:	20000274 	.word	0x20000274
 80006c0:	20000270 	.word	0x20000270

080006c4 <checkAPPSPlausibility>:

void checkAPPSPlausibility(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    apps1_as_percent = ((float)apps1Value - APPS_1_ADC_MIN_VAL)
 80006c8:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <checkAPPSPlausibility+0xf0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006d4:	230a      	movs	r3, #10
 80006d6:	ee07 3a90 	vmov	s15, r3
 80006da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006de:	ee77 6a67 	vsub.f32	s13, s14, s15
                      /(APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL)*100.0f;
 80006e2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80006e6:	461a      	mov	r2, r3
 80006e8:	230a      	movs	r3, #10
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80007b8 <checkAPPSPlausibility+0xf4>
 80006fc:	ee67 7a87 	vmul.f32	s15, s15, s14
    apps1_as_percent = ((float)apps1Value - APPS_1_ADC_MIN_VAL)
 8000700:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <checkAPPSPlausibility+0xf8>)
 8000702:	edc3 7a00 	vstr	s15, [r3]
    apps2_as_percent = ((float)apps2Value - APPS_2_ADC_MIN_VAL)
 8000706:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <checkAPPSPlausibility+0xfc>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	ee07 3a90 	vmov	s15, r3
 800070e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000712:	230a      	movs	r3, #10
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071c:	ee77 6a67 	vsub.f32	s13, s14, s15
                      /(APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL)*100.0f;
 8000720:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000724:	461a      	mov	r2, r3
 8000726:	230a      	movs	r3, #10
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000736:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80007b8 <checkAPPSPlausibility+0xf4>
 800073a:	ee67 7a87 	vmul.f32	s15, s15, s14
    apps2_as_percent = ((float)apps2Value - APPS_2_ADC_MIN_VAL)
 800073e:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <checkAPPSPlausibility+0x100>)
 8000740:	edc3 7a00 	vstr	s15, [r3]

    // use fabsf() for float
    if(fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE){
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <checkAPPSPlausibility+0xf8>)
 8000746:	ed93 7a00 	vldr	s14, [r3]
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <checkAPPSPlausibility+0x100>)
 800074c:	edd3 7a00 	vldr	s15, [r3]
 8000750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000754:	eeb0 7ae7 	vabs.f32	s14, s15
 8000758:	230a      	movs	r3, #10
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	dd0c      	ble.n	8000786 <checkAPPSPlausibility+0xc2>
        millis_since_apps_implausible = HAL_GetTick();
 800076c:	f001 fdb8 	bl	80022e0 <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <checkAPPSPlausibility+0x104>)
 8000774:	6013      	str	r3, [r2, #0]
        apps_plausible = 0; // false
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <checkAPPSPlausibility+0x108>)
 8000778:	2200      	movs	r2, #0
 800077a:	801a      	strh	r2, [r3, #0]
        requestedTorque = 0;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <checkAPPSPlausibility+0x10c>)
 800077e:	f04f 0200 	mov.w	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
        requestedTorque = 0;
    }
    else {
        apps_plausible = 1; // true
    }
}
 8000784:	e014      	b.n	80007b0 <checkAPPSPlausibility+0xec>
    else if(!apps_plausible && (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)){
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <checkAPPSPlausibility+0x108>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10d      	bne.n	80007aa <checkAPPSPlausibility+0xe6>
 800078e:	f001 fda7 	bl	80022e0 <HAL_GetTick>
 8000792:	4602      	mov	r2, r0
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <checkAPPSPlausibility+0x104>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2264      	movs	r2, #100	@ 0x64
 800079c:	4293      	cmp	r3, r2
 800079e:	d204      	bcs.n	80007aa <checkAPPSPlausibility+0xe6>
        requestedTorque = 0;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <checkAPPSPlausibility+0x10c>)
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	e002      	b.n	80007b0 <checkAPPSPlausibility+0xec>
        apps_plausible = 1; // true
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <checkAPPSPlausibility+0x108>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	801a      	strh	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000026c 	.word	0x2000026c
 80007b8:	42c80000 	.word	0x42c80000
 80007bc:	20000294 	.word	0x20000294
 80007c0:	2000026e 	.word	0x2000026e
 80007c4:	20000298 	.word	0x20000298
 80007c8:	20000280 	.word	0x20000280
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000274 	.word	0x20000274

080007d4 <checkCrossCheck>:

void checkCrossCheck(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
    bse_as_percent = ((float)bseValue - BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL)*100.0f;
 80007da:	4b4f      	ldr	r3, [pc, #316]	@ (8000918 <checkCrossCheck+0x144>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	ee07 3a90 	vmov	s15, r3
 80007e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007e6:	2300      	movs	r3, #0
 80007e8:	ee07 3a90 	vmov	s15, r3
 80007ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80007f4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80007f8:	461a      	mov	r2, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800080a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800091c <checkCrossCheck+0x148>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <checkCrossCheck+0x14c>)
 8000814:	edc3 7a00 	vstr	s15, [r3]

    float apps1p = ((float)apps1Value - APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL)*100.0f;
 8000818:	4b42      	ldr	r3, [pc, #264]	@ (8000924 <checkCrossCheck+0x150>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	ee07 3a90 	vmov	s15, r3
 8000820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000824:	230a      	movs	r3, #10
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000832:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000836:	461a      	mov	r2, r3
 8000838:	230a      	movs	r3, #10
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000848:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800091c <checkCrossCheck+0x148>
 800084c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000850:	edc7 7a03 	vstr	s15, [r7, #12]
    float apps2p = ((float)apps2Value - APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL)*100.0f;
 8000854:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <checkCrossCheck+0x154>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	ee07 3a90 	vmov	s15, r3
 800085c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000860:	230a      	movs	r3, #10
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800086e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000872:	461a      	mov	r2, r3
 8000874:	230a      	movs	r3, #10
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000884:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800091c <checkCrossCheck+0x148>
 8000888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088c:	edc7 7a02 	vstr	s15, [r7, #8]
    float apps_as_percent = (apps1p + apps2p)/2.0f;
 8000890:	ed97 7a03 	vldr	s14, [r7, #12]
 8000894:	edd7 7a02 	vldr	s15, [r7, #8]
 8000898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800089c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80008a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008a4:	edc7 7a01 	vstr	s15, [r7, #4]

    if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT && bseValue > BRAKE_ACTIVATED_ADC_VAL){
 80008a8:	2319      	movs	r3, #25
 80008aa:	ee07 3a90 	vmov	s15, r3
 80008ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80008b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	dd0c      	ble.n	80008da <checkCrossCheck+0x106>
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <checkCrossCheck+0x144>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	2264      	movs	r2, #100	@ 0x64
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d907      	bls.n	80008da <checkCrossCheck+0x106>
        cross_check_plausible = 0;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <checkCrossCheck+0x158>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]
        requestedTorque = 0;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <checkCrossCheck+0x15c>)
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e018      	b.n	800090c <checkCrossCheck+0x138>
    }
    else if(!cross_check_plausible && apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT){
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <checkCrossCheck+0x158>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d110      	bne.n	8000904 <checkCrossCheck+0x130>
 80008e2:	2305      	movs	r3, #5
 80008e4:	ee07 3a90 	vmov	s15, r3
 80008e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80008f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	dd04      	ble.n	8000904 <checkCrossCheck+0x130>
        requestedTorque = 0;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <checkCrossCheck+0x15c>)
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e003      	b.n	800090c <checkCrossCheck+0x138>
    }
    else {
        cross_check_plausible = 1;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <checkCrossCheck+0x158>)
 8000906:	2201      	movs	r2, #1
 8000908:	801a      	strh	r2, [r3, #0]
    }
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20000270 	.word	0x20000270
 800091c:	42c80000 	.word	0x42c80000
 8000920:	2000029c 	.word	0x2000029c
 8000924:	2000026c 	.word	0x2000026c
 8000928:	2000026e 	.word	0x2000026e
 800092c:	20000002 	.word	0x20000002
 8000930:	20000274 	.word	0x20000274

08000934 <checkReadyToDrive>:

void checkReadyToDrive(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
    uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5); // example
 800093a:	2120      	movs	r1, #32
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <checkReadyToDrive+0x30>)
 800093e:	f002 fef7 	bl	8003730 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d107      	bne.n	800095c <checkReadyToDrive+0x28>
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <checkReadyToDrive+0x34>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2264      	movs	r2, #100	@ 0x64
 8000952:	4293      	cmp	r3, r2
 8000954:	d902      	bls.n	800095c <checkReadyToDrive+0x28>
        readyToDrive = 1;
 8000956:	4b05      	ldr	r3, [pc, #20]	@ (800096c <checkReadyToDrive+0x38>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
    }
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40020000 	.word	0x40020000
 8000968:	20000270 	.word	0x20000270
 800096c:	200002a0 	.word	0x200002a0

08000970 <sendTorqueCommand>:

void sendTorqueCommand(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
    int torqueValue = (int)(requestedTorque*10); // multiply by 10?
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <sendTorqueCommand+0x60>)
 8000978:	edd3 7a00 	vldr	s15, [r3]
 800097c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000988:	ee17 3a90 	vmov	r3, s15
 800098c:	617b      	str	r3, [r7, #20]

    // break into 2 bytes
    char msg0 = torqueValue & 0xFF;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	74fb      	strb	r3, [r7, #19]
    char msg1 = (torqueValue >> 8) & 0xFF;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	121b      	asrs	r3, r3, #8
 8000996:	74bb      	strb	r3, [r7, #18]

    struct can_frame torqueCommand;
    torqueCommand.can_id  = 0x0C0;
 8000998:	23c0      	movs	r3, #192	@ 0xc0
 800099a:	603b      	str	r3, [r7, #0]
    torqueCommand.can_dlc = 8;
 800099c:	2308      	movs	r3, #8
 800099e:	713b      	strb	r3, [r7, #4]
    torqueCommand.data[0] = msg0;
 80009a0:	7cfb      	ldrb	r3, [r7, #19]
 80009a2:	723b      	strb	r3, [r7, #8]
    torqueCommand.data[1] = msg1;
 80009a4:	7cbb      	ldrb	r3, [r7, #18]
 80009a6:	727b      	strb	r3, [r7, #9]
    // fill the rest with 0
    torqueCommand.data[2] = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	72bb      	strb	r3, [r7, #10]
    torqueCommand.data[3] = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	72fb      	strb	r3, [r7, #11]
    torqueCommand.data[4] = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	733b      	strb	r3, [r7, #12]
    torqueCommand.data[5] = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	737b      	strb	r3, [r7, #13]
    torqueCommand.data[6] = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
    torqueCommand.data[7] = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]

    MCP_sendMessage(&torqueCommand);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f8ac 	bl	8001b20 <MCP_sendMessage>
}
 80009c8:	bf00      	nop
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000274 	.word	0x20000274

080009d4 <HAL_I2S_TxCpltCallback>:
//-----------------------------------------------
/**
  * @brief Called by HAL when a DMA transmission completes (for one chunk).
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI2 && !waveFinished)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <HAL_I2S_TxCpltCallback+0x3c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10f      	bne.n	8000a06 <HAL_I2S_TxCpltCallback+0x32>
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_I2S_TxCpltCallback+0x40>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10b      	bne.n	8000a06 <HAL_I2S_TxCpltCallback+0x32>
    {
        // finished one chunk
        if (wavPos < halfwordCount)
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_I2S_TxCpltCallback+0x44>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_I2S_TxCpltCallback+0x48>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d202      	bcs.n	8000a00 <HAL_I2S_TxCpltCallback+0x2c>
        {
            StartNextChunk();
 80009fa:	f000 f811 	bl	8000a20 <StartNextChunk>
        {
            // entire wave is done
            waveFinished = 1;
        }
    }
}
 80009fe:	e002      	b.n	8000a06 <HAL_I2S_TxCpltCallback+0x32>
            waveFinished = 1;
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <HAL_I2S_TxCpltCallback+0x40>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40003800 	.word	0x40003800
 8000a14:	200002d8 	.word	0x200002d8
 8000a18:	200002cc 	.word	0x200002cc
 8000a1c:	200002d4 	.word	0x200002d4

08000a20 <StartNextChunk>:

/**
  * @brief Start the next chunk of PCM in Normal DMA mode
  */
static void StartNextChunk(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
    // how many halfwords remain
    uint32_t remain = halfwordCount - wavPos;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <StartNextChunk+0x58>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <StartNextChunk+0x5c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	60fb      	str	r3, [r7, #12]
    // pick chunk
    uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d802      	bhi.n	8000a42 <StartNextChunk+0x22>
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	e001      	b.n	8000a46 <StartNextChunk+0x26>
 8000a42:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000a46:	817b      	strh	r3, [r7, #10]
                        ? CHUNK_SIZE_HALFWORDS
                        : (uint16_t)remain;

    const uint16_t* chunkPtr = wavePCM + wavPos;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <StartNextChunk+0x60>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <StartNextChunk+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	607b      	str	r3, [r7, #4]
    wavPos += thisChunk;
 8000a56:	897a      	ldrh	r2, [r7, #10]
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <StartNextChunk+0x5c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a07      	ldr	r2, [pc, #28]	@ (8000a7c <StartNextChunk+0x5c>)
 8000a60:	6013      	str	r3, [r2, #0]

    // Fire the DMA
    HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)chunkPtr, thisChunk);
 8000a62:	897b      	ldrh	r3, [r7, #10]
 8000a64:	461a      	mov	r2, r3
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <StartNextChunk+0x64>)
 8000a6a:	f002 ffd3 	bl	8003a14 <HAL_I2S_Transmit_DMA>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200002d4 	.word	0x200002d4
 8000a7c:	200002cc 	.word	0x200002cc
 8000a80:	200002d0 	.word	0x200002d0
 8000a84:	200000dc 	.word	0x200000dc

08000a88 <PlayStartupSoundOnce>:

/**
  * @brief Public function to play the wave from beginning exactly once
  */
void PlayStartupSoundOnce(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    wavePCM       = (const uint16_t*)&startup_sound[WAV_HEADER_SIZE];
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <PlayStartupSoundOnce+0x28>)
 8000a8e:	4a09      	ldr	r2, [pc, #36]	@ (8000ab4 <PlayStartupSoundOnce+0x2c>)
 8000a90:	601a      	str	r2, [r3, #0]
    halfwordCount = TOTAL_HALFWORDS;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <PlayStartupSoundOnce+0x30>)
 8000a94:	3b2c      	subs	r3, #44	@ 0x2c
 8000a96:	085b      	lsrs	r3, r3, #1
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <PlayStartupSoundOnce+0x34>)
 8000a9a:	6013      	str	r3, [r2, #0]
    wavPos        = 0;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <PlayStartupSoundOnce+0x38>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
    waveFinished  = 0;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <PlayStartupSoundOnce+0x3c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]

    // Start the first chunk
    StartNextChunk();
 8000aa8:	f7ff ffba 	bl	8000a20 <StartNextChunk>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002d0 	.word	0x200002d0
 8000ab4:	080060fc 	.word	0x080060fc
 8000ab8:	000500d8 	.word	0x000500d8
 8000abc:	200002d4 	.word	0x200002d4
 8000ac0:	200002cc 	.word	0x200002cc
 8000ac4:	200002d8 	.word	0x200002d8

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* MCU Configuration-------------------------------------------*/
  HAL_Init();
 8000acc:	f001 fba2 	bl	8002214 <HAL_Init>
  SystemClock_Config();
 8000ad0:	f000 f84a 	bl	8000b68 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 fa36 	bl	8000f44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad8:	f000 f9fe 	bl	8000ed8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 f9d2 	bl	8000e84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ae0:	f000 f8ae 	bl	8000c40 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae4:	f000 f980 	bl	8000de8 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000ae8:	f000 f948 	bl	8000d7c <MX_SPI3_Init>
  MX_I2S2_Init();
 8000aec:	f000 f918 	bl	8000d20 <MX_I2S2_Init>

  /* USER CODE BEGIN 2 */
  // Start TIM3
  HAL_TIM_Base_Start(&htim3);
 8000af0:	4816      	ldr	r0, [pc, #88]	@ (8000b4c <main+0x84>)
 8000af2:	f004 fd37 	bl	8005564 <HAL_TIM_Base_Start>

  // init MCP2515
  MCP_reset();
 8000af6:	f000 fcf1 	bl	80014dc <MCP_reset>
  MCP_setBitrate(CAN_125KBPS);
 8000afa:	200b      	movs	r0, #11
 8000afc:	f000 ff5e 	bl	80019bc <MCP_setBitrate>
  MCP_setNormalMode();
 8000b00:	f000 fd8a 	bl	8001618 <MCP_setNormalMode>

  diagnostics.inverterActive = 0; // example usage
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <main+0x88>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]

  // If you want the wave to play once at startup:
  PlayStartupSoundOnce();
 8000b0a:	f7ff ffbd 	bl	8000a88 <PlayStartupSoundOnce>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // read CAN
    MCP_readMessage(&driveCriticalCANRead);
 8000b0e:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <main+0x8c>)
 8000b10:	f001 f8d1 	bl	8001cb6 <MCP_readMessage>

    // pedal logic
    readAPPSandBSE();
 8000b14:	f7ff fcfc 	bl	8000510 <readAPPSandBSE>
    calculateTorqueRequest();
 8000b18:	f7ff fd3a 	bl	8000590 <calculateTorqueRequest>
    checkAPPSPlausibility();
 8000b1c:	f7ff fdd2 	bl	80006c4 <checkAPPSPlausibility>
    checkCrossCheck();
 8000b20:	f7ff fe58 	bl	80007d4 <checkCrossCheck>
    checkReadyToDrive();
 8000b24:	f7ff ff06 	bl	8000934 <checkReadyToDrive>
    updateBMSDiagnostics();
 8000b28:	f7ff fcea 	bl	8000500 <updateBMSDiagnostics>

    finalTorqueRequest   = requestedTorque;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <main+0x90>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <main+0x94>)
 8000b32:	6013      	str	r3, [r2, #0]
    lastRequestedTorque  = requestedTorque;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <main+0x90>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <main+0x98>)
 8000b3a:	6013      	str	r3, [r2, #0]

    if (readyToDrive){
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <main+0x9c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0e4      	beq.n	8000b0e <main+0x46>
      sendTorqueCommand();
 8000b44:	f7ff ff14 	bl	8000970 <sendTorqueCommand>
    MCP_readMessage(&driveCriticalCANRead);
 8000b48:	e7e1      	b.n	8000b0e <main+0x46>
 8000b4a:	bf00      	nop
 8000b4c:	200001dc 	.word	0x200001dc
 8000b50:	200002b8 	.word	0x200002b8
 8000b54:	200002a8 	.word	0x200002a8
 8000b58:	20000274 	.word	0x20000274
 8000b5c:	2000027c 	.word	0x2000027c
 8000b60:	20000278 	.word	0x20000278
 8000b64:	200002a0 	.word	0x200002a0

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	@ 0x50
 8000b6c:	af00      	add	r7, sp, #0
    // The same config from your "main branch" code that sets up 84 MHz
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2230      	movs	r2, #48	@ 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f005 fa6e 	bl	8006058 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <SystemClock_Config+0xd0>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a28      	ldr	r2, [pc, #160]	@ (8000c38 <SystemClock_Config+0xd0>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <SystemClock_Config+0xd0>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	4b23      	ldr	r3, [pc, #140]	@ (8000c3c <SystemClock_Config+0xd4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb4:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <SystemClock_Config+0xd4>)
 8000bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <SystemClock_Config+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState           = RCC_HSI_ON;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue= RCC_HSICALIBRATION_DEFAULT;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState       = RCC_PLL_ON;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource      = RCC_PLLSOURCE_HSI;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM           = 16;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN           = 336;
 8000be0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000be4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP           = RCC_PLLP_DIV4;
 8000be6:	2304      	movs	r3, #4
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ           = 7;
 8000bea:	2307      	movs	r3, #7
 8000bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fb6a 	bl	80042cc <HAL_RCC_OscConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x9a>
    {
      Error_Handler();
 8000bfe:	f000 fa27 	bl	8001050 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK
 8000c02:	230f      	movs	r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]
                                     | RCC_CLOCKTYPE_SYSCLK
                                     | RCC_CLOCKTYPE_PCLK1
                                     | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	2302      	movs	r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c12:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fdcc 	bl	80047bc <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xc6>
    {
      Error_Handler();
 8000c2a:	f000 fa11 	bl	8001050 <Error_Handler>
    }
}
 8000c2e:	bf00      	nop
 8000c30:	3750      	adds	r7, #80	@ 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40007000 	.word	0x40007000

08000c40 <MX_ADC1_Init>:

/**
  * @brief ADC1 Initialization Function
  */
static void MX_ADC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]

  hadc1.Instance                   = ADC1;
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c54:	4a31      	ldr	r2, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xdc>)
 8000c56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8000c60:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode          = ENABLE;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c72:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000c82:	4b25      	ldr	r3, [pc, #148]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000c8a:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion       = 3;
 8000c90:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c92:	2203      	movs	r2, #3
 8000c94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection          = ADC_EOC_SEQ_CONV;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca4:	481c      	ldr	r0, [pc, #112]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000ca6:	f001 fb4b 	bl	8002340 <HAL_ADC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000cb0:	f000 f9ce 	bl	8001050 <Error_Handler>
  }

  // Channel 1: rank=2
  sConfig.Channel      = ADC_CHANNEL_1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank         = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4814      	ldr	r0, [pc, #80]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000cc6:	f001 fc8d 	bl	80025e4 <HAL_ADC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f9be 	bl	8001050 <Error_Handler>
  }

  // Channel 4: rank=3
  sConfig.Channel = ADC_CHANNEL_4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank    = 3;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000ce2:	f001 fc7f 	bl	80025e4 <HAL_ADC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000cec:	f000 f9b0 	bl	8001050 <Error_Handler>
  }

  // Channel 8: rank=1
  sConfig.Channel      = ADC_CHANNEL_8;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank         = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_ADC1_Init+0xd8>)
 8000d02:	f001 fc6f 	bl	80025e4 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000d0c:	f000 f9a0 	bl	8001050 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000034 	.word	0x20000034
 8000d1c:	40012000 	.word	0x40012000

08000d20 <MX_I2S2_Init>:

/**
  * @brief I2S2 Initialization Function
  */
static void MX_I2S2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  hi2s2.Instance         = SPI2;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <MX_I2S2_Init+0x58>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode        = I2S_MODE_MASTER_TX;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d30:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard    = I2S_STANDARD_PHILIPS;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput  = I2S_MCLKOUTPUT_DISABLE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq   = I2S_AUDIOFREQ_44K;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d46:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000d4a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL        = I2S_CPOL_LOW;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_I2S2_Init+0x54>)
 8000d60:	f002 fd18 	bl	8003794 <HAL_I2S_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000d6a:	f000 f971 	bl	8001050 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000dc 	.word	0x200000dc
 8000d78:	40003800 	.word	0x40003800

08000d7c <MX_SPI3_Init>:

/**
  * @brief SPI3 Initialization Function
  */
static void MX_SPI3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  hspi3.Instance               = SPI3;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000d82:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <MX_SPI3_Init+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode              = SPI_MODE_MASTER;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000d88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction         = SPI_DIRECTION_2LINES;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize          = SPI_DATASIZE_8BIT;
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS               = SPI_NSS_SOFT;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode            = SPI_TIMODE_DISABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial     = 10;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000dc8:	220a      	movs	r2, #10
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_SPI3_Init+0x64>)
 8000dce:	f004 f863 	bl	8004e98 <HAL_SPI_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000dd8:	f000 f93a 	bl	8001050 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000184 	.word	0x20000184
 8000de4:	40003c00 	.word	0x40003c00

08000de8 <MX_TIM3_Init>:

/**
  * @brief TIM3 Initialization
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig     = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  htim3.Instance               = TIM3;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e06:	4a1e      	ldr	r2, [pc, #120]	@ (8000e80 <MX_TIM3_Init+0x98>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler         = 4;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period            = 5000;
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2a:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e2c:	f004 fb4a 	bl	80054c4 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 f90b 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource= TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e48:	f004 fbe6 	bl	8005618 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f8fd 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger= TIM_TRGO_UPDATE;
 8000e56:	2320      	movs	r3, #32
 8000e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode    = TIM_MASTERSLAVEMODE_ENABLE;
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_TIM3_Init+0x94>)
 8000e64:	f004 fdc6 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 f8ef 	bl	8001050 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001dc 	.word	0x200001dc
 8000e80:	40000400 	.word	0x40000400

08000e84 <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  huart2.Instance          = USART2;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <MX_USART2_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 115200;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f004 fe08 	bl	8005ad0 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f000 f8c3 	bl	8001050 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000224 	.word	0x20000224
 8000ed4:	40004400 	.word	0x40004400

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_DMA_Init+0x68>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <MX_DMA_Init+0x68>)
 8000ee8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_DMA_Init+0x68>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <MX_DMA_Init+0x68>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <MX_DMA_Init+0x68>)
 8000f04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <MX_DMA_Init+0x68>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  // for I2S2 TX:
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f001 fedd 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f20:	200f      	movs	r0, #15
 8000f22:	f001 fef6 	bl	8002d12 <HAL_NVIC_EnableIRQ>

  // for ADC1 on DMA2 Stream0:
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2038      	movs	r0, #56	@ 0x38
 8000f2c:	f001 fed5 	bl	8002cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f30:	2038      	movs	r0, #56	@ 0x38
 8000f32:	f001 feee 	bl	8002d12 <HAL_NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /* Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a37      	ldr	r2, [pc, #220]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a30      	ldr	r2, [pc, #192]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a29      	ldr	r2, [pc, #164]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <MX_GPIO_Init+0xfc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  // Configure B1_Pin = PC13
  GPIO_InitStruct.Pin  = B1_Pin;
 8000fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4818      	ldr	r0, [pc, #96]	@ (8001044 <MX_GPIO_Init+0x100>)
 8000fe2:	f002 fa21 	bl	8003428 <HAL_GPIO_Init>

  // LD2_Pin = PA5 output
  GPIO_InitStruct.Pin   = LD2_Pin;
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4812      	ldr	r0, [pc, #72]	@ (8001048 <MX_GPIO_Init+0x104>)
 8000ffe:	f002 fa13 	bl	8003428 <HAL_GPIO_Init>

  // PB4 as output, PB5 as input, etc., from your original code
  GPIO_InitStruct.Pin   = GPIO_PIN_4;
 8001002:	2310      	movs	r3, #16
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_GPIO_Init+0x108>)
 800101a:	f002 fa05 	bl	8003428 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin   = GPIO_PIN_5;
 800101e:	2320      	movs	r3, #32
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <MX_GPIO_Init+0x108>)
 8001032:	f002 f9f9 	bl	8003428 <HAL_GPIO_Init>

  // If your I2S2 WS is on PB12, CK on PB13, SD on PB15,
  // that is handled automatically by Cube if your .ioc sets them.
  // If your hardware uses PA15 for WS, you'd configure it here similarly.
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400

08001050 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <startSPI>:
#define SPI_CAN                 &hspi3
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET)

void startSPI() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2110      	movs	r1, #16
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <startSPI+0x14>)
 8001066:	f002 fb7b 	bl	8003760 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <endSPI>:

void endSPI() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2110      	movs	r1, #16
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <endSPI+0x14>)
 800107e:	f002 fb6f 	bl	8003760 <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <SPI_transfer>:

uint8_t SPI_transfer(uint8_t txByte){
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af02      	add	r7, sp, #8
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	uint8_t rxByte;
	HAL_SPI_TransmitReceive(SPI_CAN, &txByte, &rxByte, 1, SPI_TIMEOUT);
 8001096:	f107 020f 	add.w	r2, r7, #15
 800109a:	1df9      	adds	r1, r7, #7
 800109c:	230a      	movs	r3, #10
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <SPI_transfer+0x28>)
 80010a4:	f003 ff81 	bl	8004faa <HAL_SPI_TransmitReceive>
	return rxByte;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000184 	.word	0x20000184

080010b8 <setRegister>:

void setRegister(uint8_t reg, uint8_t value)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
    startSPI();
 80010c8:	f7ff ffc8 	bl	800105c <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f7ff ffdd 	bl	800108c <SPI_transfer>
    SPI_transfer(reg);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffd9 	bl	800108c <SPI_transfer>
    SPI_transfer(value);
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffd5 	bl	800108c <SPI_transfer>
    endSPI();
 80010e2:	f7ff ffc7 	bl	8001074 <endSPI>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <setRegisters>:

void setRegisters(uint8_t reg, uint8_t values[], uint8_t n)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	6039      	str	r1, [r7, #0]
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	4613      	mov	r3, r2
 80010fc:	71bb      	strb	r3, [r7, #6]
    startSPI();
 80010fe:	f7ff ffad 	bl	800105c <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff ffc2 	bl	800108c <SPI_transfer>
    SPI_transfer(reg);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffbe 	bl	800108c <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e009      	b.n	800112a <setRegisters+0x3c>
        SPI_transfer(values[i]);
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffb4 	bl	800108c <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	3301      	adds	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3f1      	bcc.n	8001116 <setRegisters+0x28>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 8001132:	f7ff ff9f 	bl	8001074 <endSPI>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <loadTx>:

void loadTx(uint8_t reg, uint8_t values[], uint8_t n){
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	6039      	str	r1, [r7, #0]
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
    startSPI();
 800114e:	f7ff ff85 	bl	800105c <startSPI>
    //SPI_transfer(INSTRUCTION_WRITE);
    SPI_transfer(reg);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff99 	bl	800108c <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e009      	b.n	8001174 <loadTx+0x36>
        SPI_transfer(values[i]);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff8f 	bl	800108c <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3f1      	bcc.n	8001160 <loadTx+0x22>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 800117c:	f7ff ff7a 	bl	8001074 <endSPI>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <modifyRegister>:

void modifyRegister(uint8_t reg, uint8_t mask, uint8_t data)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	460b      	mov	r3, r1
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	4613      	mov	r3, r2
 8001198:	717b      	strb	r3, [r7, #5]
    startSPI();
 800119a:	f7ff ff5f 	bl	800105c <startSPI>
    SPI_transfer(INSTRUCTION_BITMOD);
 800119e:	2005      	movs	r0, #5
 80011a0:	f7ff ff74 	bl	800108c <SPI_transfer>
    SPI_transfer(reg);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff70 	bl	800108c <SPI_transfer>
    SPI_transfer(mask);
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff6c 	bl	800108c <SPI_transfer>
    SPI_transfer(data);
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff68 	bl	800108c <SPI_transfer>
    endSPI();
 80011bc:	f7ff ff5a 	bl	8001074 <endSPI>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <readRegister>:




uint8_t readRegister(REGISTER reg)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    startSPI();
 80011d2:	f7ff ff43 	bl	800105c <startSPI>
    SPI_transfer(INSTRUCTION_READ);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f7ff ff58 	bl	800108c <SPI_transfer>
    SPI_transfer(reg);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff54 	bl	800108c <SPI_transfer>
    uint8_t ret = SPI_transfer(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff ff51 	bl	800108c <SPI_transfer>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
    endSPI();
 80011ee:	f7ff ff41 	bl	8001074 <endSPI>

    return ret;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <readRx>:
    	//HAL_SPI_Receive(&hspi3, values, n, SPI_TIMEOUT);  //Todo, check if the 0x00 from above is needed
    }
    	endSPI();
}

void readRx(REGISTER reg, uint8_t values[], uint8_t n){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	71bb      	strb	r3, [r7, #6]
    startSPI();
 800120c:	f7ff ff26 	bl	800105c <startSPI>
    SPI_transfer(reg);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff3a 	bl	800108c <SPI_transfer>
    // mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e00a      	b.n	8001234 <readRx+0x38>
        values[i] = SPI_transfer(0x00);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	18d4      	adds	r4, r2, r3
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ff31 	bl	800108c <SPI_transfer>
 800122a:	4603      	mov	r3, r0
 800122c:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	429a      	cmp	r2, r3
 800123a:	d3f0      	bcc.n	800121e <readRx+0x22>
    	//HAL_SPI_Receive(&hspi3, values, n, SPI_TIMEOUT);  //Todo, check if the 0x00 from above is needed
    }
    endSPI();
 800123c:	f7ff ff1a 	bl	8001074 <endSPI>
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}

08001248 <setMode>:

CAN_Error setMode(CANCTRL_REQOP_MODE mode)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]

    unsigned long endTime = HAL_GetTick() + 10;
 8001252:	f001 f845 	bl	80022e0 <HAL_GetTick>
 8001256:	4603      	mov	r3, r0
 8001258:	330a      	adds	r3, #10
 800125a:	613b      	str	r3, [r7, #16]
    uint8_t modeMatch = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8001260:	e019      	b.n	8001296 <setMode+0x4e>
    	modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8001262:	21e0      	movs	r1, #224	@ 0xe0
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	461a      	mov	r2, r3
 8001268:	200f      	movs	r0, #15
 800126a:	f7ff ff8d 	bl	8001188 <modifyRegister>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 800126e:	200e      	movs	r0, #14
 8001270:	f7ff ffaa 	bl	80011c8 <readRegister>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8001278:	22e0      	movs	r2, #224	@ 0xe0
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	4013      	ands	r3, r2
 800127e:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	429a      	cmp	r2, r3
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <setMode+0x5c>
    while (HAL_GetTick() < endTime) {
 8001296:	f001 f823 	bl	80022e0 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4293      	cmp	r3, r2
 80012a0:	d8df      	bhi.n	8001262 <setMode+0x1a>
 80012a2:	e000      	b.n	80012a6 <setMode+0x5e>
            break;
 80012a4:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3

}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <setConfigMode>:

CAN_Error setConfigMode()
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_CONFIG);
 80012be:	2080      	movs	r0, #128	@ 0x80
 80012c0:	f7ff ffc2 	bl	8001248 <setMode>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}

080012ca <prepareId>:

void prepareId(uint8_t *buffer, uint8_t ext, uint32_t id)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b087      	sub	sp, #28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	460b      	mov	r3, r1
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	72fb      	strb	r3, [r7, #11]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	82fb      	strh	r3, [r7, #22]

    if(ext) {
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d046      	beq.n	8001370 <prepareId+0xa6>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 80012e2:	2303      	movs	r3, #3
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	8afa      	ldrh	r2, [r7, #22]
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 80012f0:	8afb      	ldrh	r3, [r7, #22]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	2302      	movs	r3, #2
 80012f8:	4619      	mov	r1, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	440b      	add	r3, r1
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	0c1b      	lsrs	r3, r3, #16
 8001306:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	2301      	movs	r3, #1
 800130e:	4619      	mov	r1, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	440b      	add	r3, r1
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 800131c:	2301      	movs	r3, #1
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	7819      	ldrb	r1, [r3, #0]
 8001326:	8afb      	ldrh	r3, [r7, #22]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f023 031f 	bic.w	r3, r3, #31
 8001332:	b2da      	uxtb	r2, r3
 8001334:	2301      	movs	r3, #1
 8001336:	4618      	mov	r0, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4403      	add	r3, r0
 800133c:	440a      	add	r2, r1
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8001342:	2301      	movs	r3, #1
 8001344:	461a      	mov	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	2108      	movs	r1, #8
 800134e:	2301      	movs	r3, #1
 8001350:	4618      	mov	r0, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4403      	add	r3, r0
 8001356:	430a      	orrs	r2, r1
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	b29a      	uxth	r2, r3
 8001362:	2300      	movs	r3, #0
 8001364:	4619      	mov	r1, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	440b      	add	r3, r1
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 800136e:	e01d      	b.n	80013ac <prepareId+0xe2>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	b29a      	uxth	r2, r3
 8001376:	2300      	movs	r3, #0
 8001378:	4619      	mov	r1, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	440b      	add	r3, r1
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8001382:	8afb      	ldrh	r3, [r7, #22]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	2301      	movs	r3, #1
 8001388:	4619      	mov	r1, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	440b      	add	r3, r1
 800138e:	0152      	lsls	r2, r2, #5
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8001394:	2303      	movs	r3, #3
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80013a0:	2302      	movs	r3, #2
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <getStatus>:

uint8_t getStatus(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
    startSPI();
 80013be:	f7ff fe4d 	bl	800105c <startSPI>
    SPI_transfer(INSTRUCTION_READ_STATUS);
 80013c2:	20a0      	movs	r0, #160	@ 0xa0
 80013c4:	f7ff fe62 	bl	800108c <SPI_transfer>
    uint8_t i = SPI_transfer(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fe5f 	bl	800108c <SPI_transfer>
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    endSPI();
 80013d2:	f7ff fe4f 	bl	8001074 <endSPI>
    return i;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MCP_setFilterMask>:

CAN_Error MCP_setFilterMask(MASK mask, uint8_t ext, uint32_t ulData)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	603a      	str	r2, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	460b      	mov	r3, r1
 80013ee:	71bb      	strb	r3, [r7, #6]
	CAN_Error res = setConfigMode();
 80013f0:	f7ff ff63 	bl	80012ba <setConfigMode>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MCP_setFilterMask+0x22>
        return res;
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	e01c      	b.n	800143c <MCP_setFilterMask+0x5c>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8001402:	79b9      	ldrb	r1, [r7, #6]
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff5d 	bl	80012ca <prepareId>

    REGISTER reg;
    switch (mask) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <MCP_setFilterMask+0x3c>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d003      	beq.n	8001422 <MCP_setFilterMask+0x42>
 800141a:	e005      	b.n	8001428 <MCP_setFilterMask+0x48>
        case MASK0: reg = MCP_RXM0SIDH; break;
 800141c:	2320      	movs	r3, #32
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e004      	b.n	800142c <MCP_setFilterMask+0x4c>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8001422:	2324      	movs	r3, #36	@ 0x24
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e001      	b.n	800142c <MCP_setFilterMask+0x4c>
        default:
            return ERROR_FAIL;
 8001428:	2301      	movs	r3, #1
 800142a:	e007      	b.n	800143c <MCP_setFilterMask+0x5c>
    }

    setRegisters(reg, tbufdata, 4);
 800142c:	f107 0108 	add.w	r1, r7, #8
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2204      	movs	r2, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe5a 	bl	80010ee <setRegisters>

    return ERROR_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <MCP_setFilter>:

CAN_Error MCP_setFilter(RXF num, uint8_t ext, uint32_t ulData)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	71bb      	strb	r3, [r7, #6]
    CAN_Error res = setConfigMode();
 8001454:	f7ff ff31 	bl	80012ba <setConfigMode>
 8001458:	4603      	mov	r3, r0
 800145a:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MCP_setFilter+0x22>
        return res;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	e035      	b.n	80014d2 <MCP_setFilter+0x8e>
    }

    REGISTER reg;

    switch (num) {
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b05      	cmp	r3, #5
 800146a:	d821      	bhi.n	80014b0 <MCP_setFilter+0x6c>
 800146c:	a201      	add	r2, pc, #4	@ (adr r2, 8001474 <MCP_setFilter+0x30>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	0800148d 	.word	0x0800148d
 8001478:	08001493 	.word	0x08001493
 800147c:	08001499 	.word	0x08001499
 8001480:	0800149f 	.word	0x0800149f
 8001484:	080014a5 	.word	0x080014a5
 8001488:	080014ab 	.word	0x080014ab
        case RXF0: reg = MCP_RXF0SIDH; break;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e010      	b.n	80014b4 <MCP_setFilter+0x70>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8001492:	2304      	movs	r3, #4
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e00d      	b.n	80014b4 <MCP_setFilter+0x70>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8001498:	2308      	movs	r3, #8
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e00a      	b.n	80014b4 <MCP_setFilter+0x70>
        case RXF3: reg = MCP_RXF3SIDH; break;
 800149e:	2310      	movs	r3, #16
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e007      	b.n	80014b4 <MCP_setFilter+0x70>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80014a4:	2314      	movs	r3, #20
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e004      	b.n	80014b4 <MCP_setFilter+0x70>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80014aa:	2318      	movs	r3, #24
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e001      	b.n	80014b4 <MCP_setFilter+0x70>
        default:
            return ERROR_FAIL;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e00e      	b.n	80014d2 <MCP_setFilter+0x8e>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80014b4:	79b9      	ldrb	r1, [r7, #6]
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff04 	bl	80012ca <prepareId>
    setRegisters(reg, tbufdata, 4);
 80014c2:	f107 0108 	add.w	r1, r7, #8
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2204      	movs	r2, #4
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe0f 	bl	80010ee <setRegisters>

    return ERROR_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop

080014dc <MCP_reset>:
//
//    return ERROR_OK;
//}

CAN_Error MCP_reset(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
    startSPI();
 80014e2:	f7ff fdbb 	bl	800105c <startSPI>
    SPI_transfer(INSTRUCTION_RESET);
 80014e6:	20c0      	movs	r0, #192	@ 0xc0
 80014e8:	f7ff fdd0 	bl	800108c <SPI_transfer>
    endSPI();
 80014ec:	f7ff fdc2 	bl	8001074 <endSPI>

    HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f000 ff01 	bl	80022f8 <HAL_Delay>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	220e      	movs	r2, #14
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 fdaa 	bl	8006058 <memset>
    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	220e      	movs	r2, #14
 800150a:	4619      	mov	r1, r3
 800150c:	2030      	movs	r0, #48	@ 0x30
 800150e:	f7ff fdee 	bl	80010ee <setRegisters>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	220e      	movs	r2, #14
 8001518:	4619      	mov	r1, r3
 800151a:	2040      	movs	r0, #64	@ 0x40
 800151c:	f7ff fde7 	bl	80010ee <setRegisters>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	220e      	movs	r2, #14
 8001526:	4619      	mov	r1, r3
 8001528:	2050      	movs	r0, #80	@ 0x50
 800152a:	f7ff fde0 	bl	80010ee <setRegisters>

    setRegister(MCP_RXB0CTRL, 0);
 800152e:	2100      	movs	r1, #0
 8001530:	2060      	movs	r0, #96	@ 0x60
 8001532:	f7ff fdc1 	bl	80010b8 <setRegister>
    setRegister(MCP_RXB1CTRL, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	2070      	movs	r0, #112	@ 0x70
 800153a:	f7ff fdbd 	bl	80010b8 <setRegister>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 800153e:	21a3      	movs	r1, #163	@ 0xa3
 8001540:	202b      	movs	r0, #43	@ 0x2b
 8001542:	f7ff fdb9 	bl	80010b8 <setRegister>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8001546:	2260      	movs	r2, #96	@ 0x60
 8001548:	2304      	movs	r3, #4
 800154a:	4313      	orrs	r3, r2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2203      	movs	r2, #3
 8001550:	4313      	orrs	r3, r2
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	2200      	movs	r2, #0
 8001556:	2304      	movs	r3, #4
 8001558:	4313      	orrs	r3, r2
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2200      	movs	r2, #0
 800155e:	4313      	orrs	r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	2060      	movs	r0, #96	@ 0x60
 8001566:	f7ff fe0f 	bl	8001188 <modifyRegister>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 800156a:	2260      	movs	r2, #96	@ 0x60
 800156c:	2307      	movs	r3, #7
 800156e:	4313      	orrs	r3, r2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2100      	movs	r1, #0
 8001574:	2201      	movs	r2, #1
 8001576:	430a      	orrs	r2, r1
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	4619      	mov	r1, r3
 800157c:	2070      	movs	r0, #112	@ 0x70
 800157e:	f7ff fe03 	bl	8001188 <modifyRegister>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8001582:	4a24      	ldr	r2, [pc, #144]	@ (8001614 <MCP_reset+0x138>)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158a:	6018      	str	r0, [r3, #0]
 800158c:	3304      	adds	r3, #4
 800158e:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
 8001594:	e019      	b.n	80015ca <MCP_reset+0xee>
        uint8_t ext = (i == 1);
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	2b01      	cmp	r3, #1
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	77bb      	strb	r3, [r7, #30]
        CAN_Error result = MCP_setFilter(filters[i], ext, 0);
 80015a4:	1d3a      	adds	r2, r7, #4
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	7fb9      	ldrb	r1, [r7, #30]
 80015ae:	2200      	movs	r2, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff47 	bl	8001444 <MCP_setFilter>
 80015b6:	4603      	mov	r3, r0
 80015b8:	777b      	strb	r3, [r7, #29]
        if (result != ERROR_OK) {
 80015ba:	7f7b      	ldrb	r3, [r7, #29]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MCP_reset+0xe8>
            return result;
 80015c0:	7f7b      	ldrb	r3, [r7, #29]
 80015c2:	e023      	b.n	800160c <MCP_reset+0x130>
    for (int i=0; i<6; i++) {
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	3301      	adds	r3, #1
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	dde2      	ble.n	8001596 <MCP_reset+0xba>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 80015d0:	2300      	movs	r3, #0
 80015d2:	703b      	strb	r3, [r7, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	707b      	strb	r3, [r7, #1]
    for (int i=0; i<2; i++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	e012      	b.n	8001604 <MCP_reset+0x128>
    	CAN_Error result = MCP_setFilterMask(masks[i], 1, 0);
 80015de:	463a      	mov	r2, r7
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fef8 	bl	80013e0 <MCP_setFilterMask>
 80015f0:	4603      	mov	r3, r0
 80015f2:	77fb      	strb	r3, [r7, #31]
        if (result != ERROR_OK) {
 80015f4:	7ffb      	ldrb	r3, [r7, #31]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MCP_reset+0x122>
            return result;
 80015fa:	7ffb      	ldrb	r3, [r7, #31]
 80015fc:	e006      	b.n	800160c <MCP_reset+0x130>
    for (int i=0; i<2; i++) {
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	3301      	adds	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	2b01      	cmp	r3, #1
 8001608:	dde9      	ble.n	80015de <MCP_reset+0x102>
        }
    }

    return ERROR_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3728      	adds	r7, #40	@ 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	080060c8 	.word	0x080060c8

08001618 <MCP_setNormalMode>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

CAN_Error MCP_setNormalMode()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_NORMAL);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fe13 	bl	8001248 <setMode>
 8001622:	4603      	mov	r3, r0
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}

08001628 <MCP_setBitrateClock>:

CAN_Error MCP_setBitrateClock(CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
	CAN_Error error = setConfigMode();
 8001638:	f7ff fe3f 	bl	80012ba <setConfigMode>
 800163c:	4603      	mov	r3, r0
 800163e:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MCP_setBitrateClock+0x22>
        return error;
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	e1b3      	b.n	80019b2 <MCP_setBitrateClock+0x38a>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d009      	beq.n	8001668 <MCP_setBitrateClock+0x40>
 8001654:	2b02      	cmp	r3, #2
 8001656:	f300 8194 	bgt.w	8001982 <MCP_setBitrateClock+0x35a>
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8120 	beq.w	80018a0 <MCP_setBitrateClock+0x278>
 8001660:	2b01      	cmp	r3, #1
 8001662:	f000 808f 	beq.w	8001784 <MCP_setBitrateClock+0x15c>
 8001666:	e18c      	b.n	8001982 <MCP_setBitrateClock+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f200 8086 	bhi.w	800177c <MCP_setBitrateClock+0x154>
 8001670:	a201      	add	r2, pc, #4	@ (adr r2, 8001678 <MCP_setBitrateClock+0x50>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	080016b9 	.word	0x080016b9
 800167c:	080016c7 	.word	0x080016c7
 8001680:	080016d5 	.word	0x080016d5
 8001684:	080016e3 	.word	0x080016e3
 8001688:	080016f1 	.word	0x080016f1
 800168c:	080016ff 	.word	0x080016ff
 8001690:	0800170d 	.word	0x0800170d
 8001694:	0800171b 	.word	0x0800171b
 8001698:	0800177d 	.word	0x0800177d
 800169c:	0800177d 	.word	0x0800177d
 80016a0:	08001729 	.word	0x08001729
 80016a4:	08001737 	.word	0x08001737
 80016a8:	08001745 	.word	0x08001745
 80016ac:	08001753 	.word	0x08001753
 80016b0:	08001761 	.word	0x08001761
 80016b4:	0800176f 	.word	0x0800176f
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80016b8:	231f      	movs	r3, #31
 80016ba:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80016bc:	23bf      	movs	r3, #191	@ 0xbf
 80016be:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 80016c0:	2387      	movs	r3, #135	@ 0x87
 80016c2:	733b      	strb	r3, [r7, #12]
            break;
 80016c4:	e05d      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 80016c6:	230f      	movs	r3, #15
 80016c8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 80016ca:	23bf      	movs	r3, #191	@ 0xbf
 80016cc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 80016ce:	2387      	movs	r3, #135	@ 0x87
 80016d0:	733b      	strb	r3, [r7, #12]
            break;
 80016d2:	e056      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 80016d4:	2307      	movs	r3, #7
 80016d6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 80016d8:	23bf      	movs	r3, #191	@ 0xbf
 80016da:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 80016dc:	2387      	movs	r3, #135	@ 0x87
 80016de:	733b      	strb	r3, [r7, #12]
            break;
 80016e0:	e04f      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 80016e2:	2307      	movs	r3, #7
 80016e4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 80016e6:	23a4      	movs	r3, #164	@ 0xa4
 80016e8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 80016ea:	2384      	movs	r3, #132	@ 0x84
 80016ec:	733b      	strb	r3, [r7, #12]
            break;
 80016ee:	e048      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 80016f0:	2347      	movs	r3, #71	@ 0x47
 80016f2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 80016f4:	23e2      	movs	r3, #226	@ 0xe2
 80016f6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 80016f8:	2385      	movs	r3, #133	@ 0x85
 80016fa:	733b      	strb	r3, [r7, #12]
            break;
 80016fc:	e041      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 80016fe:	2303      	movs	r3, #3
 8001700:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8001702:	23bf      	movs	r3, #191	@ 0xbf
 8001704:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8001706:	2387      	movs	r3, #135	@ 0x87
 8001708:	733b      	strb	r3, [r7, #12]
            break;
 800170a:	e03a      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 800170c:	2303      	movs	r3, #3
 800170e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8001710:	23b4      	movs	r3, #180	@ 0xb4
 8001712:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8001714:	2386      	movs	r3, #134	@ 0x86
 8001716:	733b      	strb	r3, [r7, #12]
            break;
 8001718:	e033      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 800171a:	2301      	movs	r3, #1
 800171c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 800171e:	23bf      	movs	r3, #191	@ 0xbf
 8001720:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8001722:	2387      	movs	r3, #135	@ 0x87
 8001724:	733b      	strb	r3, [r7, #12]
            break;
 8001726:	e02c      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8001728:	2301      	movs	r3, #1
 800172a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 800172c:	23b4      	movs	r3, #180	@ 0xb4
 800172e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8001730:	2386      	movs	r3, #134	@ 0x86
 8001732:	733b      	strb	r3, [r7, #12]
            break;
 8001734:	e025      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8001736:	2301      	movs	r3, #1
 8001738:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 800173a:	23b1      	movs	r3, #177	@ 0xb1
 800173c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 800173e:	2385      	movs	r3, #133	@ 0x85
 8001740:	733b      	strb	r3, [r7, #12]
            break;
 8001742:	e01e      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8001744:	2300      	movs	r3, #0
 8001746:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8001748:	23b4      	movs	r3, #180	@ 0xb4
 800174a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 800174c:	2386      	movs	r3, #134	@ 0x86
 800174e:	733b      	strb	r3, [r7, #12]
            break;
 8001750:	e017      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8001756:	23b1      	movs	r3, #177	@ 0xb1
 8001758:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 800175a:	2385      	movs	r3, #133	@ 0x85
 800175c:	733b      	strb	r3, [r7, #12]
            break;
 800175e:	e010      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8001760:	2300      	movs	r3, #0
 8001762:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8001764:	2390      	movs	r3, #144	@ 0x90
 8001766:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8001768:	2382      	movs	r3, #130	@ 0x82
 800176a:	733b      	strb	r3, [r7, #12]
            break;
 800176c:	e009      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 800176e:	2300      	movs	r3, #0
 8001770:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8001776:	2380      	movs	r3, #128	@ 0x80
 8001778:	733b      	strb	r3, [r7, #12]
            break;
 800177a:	e002      	b.n	8001782 <MCP_setBitrateClock+0x15a>

            default:
            set = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
            break;
 8001780:	bf00      	nop
        }
        break;
 8001782:	e101      	b.n	8001988 <MCP_setBitrateClock+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	f200 8086 	bhi.w	8001898 <MCP_setBitrateClock+0x270>
 800178c:	a201      	add	r2, pc, #4	@ (adr r2, 8001794 <MCP_setBitrateClock+0x16c>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017d5 	.word	0x080017d5
 8001798:	080017e3 	.word	0x080017e3
 800179c:	080017f1 	.word	0x080017f1
 80017a0:	08001899 	.word	0x08001899
 80017a4:	080017ff 	.word	0x080017ff
 80017a8:	0800180d 	.word	0x0800180d
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	08001829 	.word	0x08001829
 80017b4:	08001837 	.word	0x08001837
 80017b8:	08001899 	.word	0x08001899
 80017bc:	08001845 	.word	0x08001845
 80017c0:	08001853 	.word	0x08001853
 80017c4:	08001861 	.word	0x08001861
 80017c8:	0800186f 	.word	0x0800186f
 80017cc:	0800187d 	.word	0x0800187d
 80017d0:	0800188b 	.word	0x0800188b
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 80017d4:	233f      	movs	r3, #63	@ 0x3f
 80017d6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 80017d8:	23ff      	movs	r3, #255	@ 0xff
 80017da:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 80017dc:	2387      	movs	r3, #135	@ 0x87
 80017de:	733b      	strb	r3, [r7, #12]
            break;
 80017e0:	e05d      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 80017e2:	231f      	movs	r3, #31
 80017e4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 80017e6:	23ff      	movs	r3, #255	@ 0xff
 80017e8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 80017ea:	2387      	movs	r3, #135	@ 0x87
 80017ec:	733b      	strb	r3, [r7, #12]
            break;
 80017ee:	e056      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 80017f0:	230f      	movs	r3, #15
 80017f2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 80017f4:	23ff      	movs	r3, #255	@ 0xff
 80017f6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 80017f8:	2387      	movs	r3, #135	@ 0x87
 80017fa:	733b      	strb	r3, [r7, #12]
            break;
 80017fc:	e04f      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 80017fe:	234e      	movs	r3, #78	@ 0x4e
 8001800:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8001802:	23f1      	movs	r3, #241	@ 0xf1
 8001804:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8001806:	2385      	movs	r3, #133	@ 0x85
 8001808:	733b      	strb	r3, [r7, #12]
            break;
 800180a:	e048      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 800180c:	2307      	movs	r3, #7
 800180e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8001810:	23ff      	movs	r3, #255	@ 0xff
 8001812:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8001814:	2387      	movs	r3, #135	@ 0x87
 8001816:	733b      	strb	r3, [r7, #12]
            break;
 8001818:	e041      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 800181a:	2307      	movs	r3, #7
 800181c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800181e:	23fa      	movs	r3, #250	@ 0xfa
 8001820:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8001822:	2387      	movs	r3, #135	@ 0x87
 8001824:	733b      	strb	r3, [r7, #12]
            break;
 8001826:	e03a      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8001828:	2303      	movs	r3, #3
 800182a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 800182c:	23ff      	movs	r3, #255	@ 0xff
 800182e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8001830:	2387      	movs	r3, #135	@ 0x87
 8001832:	733b      	strb	r3, [r7, #12]
            break;
 8001834:	e033      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8001836:	2303      	movs	r3, #3
 8001838:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 800183a:	23be      	movs	r3, #190	@ 0xbe
 800183c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 800183e:	2307      	movs	r3, #7
 8001840:	733b      	strb	r3, [r7, #12]
            break;
 8001842:	e02c      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8001844:	2303      	movs	r3, #3
 8001846:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8001848:	23fa      	movs	r3, #250	@ 0xfa
 800184a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 800184c:	2387      	movs	r3, #135	@ 0x87
 800184e:	733b      	strb	r3, [r7, #12]
            break;
 8001850:	e025      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8001852:	2303      	movs	r3, #3
 8001854:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8001856:	23f0      	movs	r3, #240	@ 0xf0
 8001858:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 800185a:	2386      	movs	r3, #134	@ 0x86
 800185c:	733b      	strb	r3, [r7, #12]
            break;
 800185e:	e01e      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8001860:	2301      	movs	r3, #1
 8001862:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8001864:	23fa      	movs	r3, #250	@ 0xfa
 8001866:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8001868:	2387      	movs	r3, #135	@ 0x87
 800186a:	733b      	strb	r3, [r7, #12]
            break;
 800186c:	e017      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 800186e:	2341      	movs	r3, #65	@ 0x41
 8001870:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8001872:	23f1      	movs	r3, #241	@ 0xf1
 8001874:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8001876:	2385      	movs	r3, #133	@ 0x85
 8001878:	733b      	strb	r3, [r7, #12]
            break;
 800187a:	e010      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 800187c:	2300      	movs	r3, #0
 800187e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8001880:	23f0      	movs	r3, #240	@ 0xf0
 8001882:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8001884:	2386      	movs	r3, #134	@ 0x86
 8001886:	733b      	strb	r3, [r7, #12]
            break;
 8001888:	e009      	b.n	800189e <MCP_setBitrateClock+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 800188e:	23d0      	movs	r3, #208	@ 0xd0
 8001890:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8001892:	2382      	movs	r3, #130	@ 0x82
 8001894:	733b      	strb	r3, [r7, #12]
            break;
 8001896:	e002      	b.n	800189e <MCP_setBitrateClock+0x276>

            default:
            set = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
            break;
 800189c:	bf00      	nop
        }
        break;
 800189e:	e073      	b.n	8001988 <MCP_setBitrateClock+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	3b04      	subs	r3, #4
 80018a4:	2b0b      	cmp	r3, #11
 80018a6:	d868      	bhi.n	800197a <MCP_setBitrateClock+0x352>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <MCP_setBitrateClock+0x288>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018e1 	.word	0x080018e1
 80018b4:	080018ef 	.word	0x080018ef
 80018b8:	080018fd 	.word	0x080018fd
 80018bc:	0800190b 	.word	0x0800190b
 80018c0:	08001919 	.word	0x08001919
 80018c4:	0800197b 	.word	0x0800197b
 80018c8:	08001927 	.word	0x08001927
 80018cc:	08001935 	.word	0x08001935
 80018d0:	08001943 	.word	0x08001943
 80018d4:	08001951 	.word	0x08001951
 80018d8:	0800195f 	.word	0x0800195f
 80018dc:	0800196d 	.word	0x0800196d
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 80018e0:	230b      	movs	r3, #11
 80018e2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 80018e4:	23ff      	movs	r3, #255	@ 0xff
 80018e6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 80018e8:	2387      	movs	r3, #135	@ 0x87
 80018ea:	733b      	strb	r3, [r7, #12]
	    break;
 80018ec:	e048      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 80018ee:	2309      	movs	r3, #9
 80018f0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 80018f2:	23ff      	movs	r3, #255	@ 0xff
 80018f4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 80018f6:	2387      	movs	r3, #135	@ 0x87
 80018f8:	733b      	strb	r3, [r7, #12]
            break;
 80018fa:	e041      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 80018fc:	2309      	movs	r3, #9
 80018fe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8001900:	23fa      	movs	r3, #250	@ 0xfa
 8001902:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8001904:	2387      	movs	r3, #135	@ 0x87
 8001906:	733b      	strb	r3, [r7, #12]
            break;
 8001908:	e03a      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800190a:	2304      	movs	r3, #4
 800190c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800190e:	23ff      	movs	r3, #255	@ 0xff
 8001910:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8001912:	2387      	movs	r3, #135	@ 0x87
 8001914:	733b      	strb	r3, [r7, #12]
            break;
 8001916:	e033      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8001918:	2304      	movs	r3, #4
 800191a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 800191c:	23fe      	movs	r3, #254	@ 0xfe
 800191e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8001920:	2387      	movs	r3, #135	@ 0x87
 8001922:	733b      	strb	r3, [r7, #12]
	    break;
 8001924:	e02c      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8001926:	2304      	movs	r3, #4
 8001928:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800192a:	23fa      	movs	r3, #250	@ 0xfa
 800192c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800192e:	2387      	movs	r3, #135	@ 0x87
 8001930:	733b      	strb	r3, [r7, #12]
            break;
 8001932:	e025      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8001934:	2303      	movs	r3, #3
 8001936:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8001938:	23fa      	movs	r3, #250	@ 0xfa
 800193a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 800193c:	2387      	movs	r3, #135	@ 0x87
 800193e:	733b      	strb	r3, [r7, #12]
            break;
 8001940:	e01e      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8001942:	2301      	movs	r3, #1
 8001944:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8001946:	23ff      	movs	r3, #255	@ 0xff
 8001948:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 800194a:	2387      	movs	r3, #135	@ 0x87
 800194c:	733b      	strb	r3, [r7, #12]
            break;
 800194e:	e017      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8001950:	2341      	movs	r3, #65	@ 0x41
 8001952:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8001954:	23fb      	movs	r3, #251	@ 0xfb
 8001956:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8001958:	2386      	movs	r3, #134	@ 0x86
 800195a:	733b      	strb	r3, [r7, #12]
            break;
 800195c:	e010      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 800195e:	2300      	movs	r3, #0
 8001960:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8001962:	23fa      	movs	r3, #250	@ 0xfa
 8001964:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8001966:	2387      	movs	r3, #135	@ 0x87
 8001968:	733b      	strb	r3, [r7, #12]
            break;
 800196a:	e009      	b.n	8001980 <MCP_setBitrateClock+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 800196c:	2300      	movs	r3, #0
 800196e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8001970:	23d9      	movs	r3, #217	@ 0xd9
 8001972:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8001974:	2382      	movs	r3, #130	@ 0x82
 8001976:	733b      	strb	r3, [r7, #12]
            break;
 8001978:	e002      	b.n	8001980 <MCP_setBitrateClock+0x358>

            default:
            set = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
            break;
 800197e:	bf00      	nop
        }
        break;
 8001980:	e002      	b.n	8001988 <MCP_setBitrateClock+0x360>

        default:
        set = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
        break;
 8001986:	bf00      	nop
    }

    if (set) {
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <MCP_setBitrateClock+0x388>
        setRegister(MCP_CNF1, cfg1);
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	4619      	mov	r1, r3
 8001992:	202a      	movs	r0, #42	@ 0x2a
 8001994:	f7ff fb90 	bl	80010b8 <setRegister>
        setRegister(MCP_CNF2, cfg2);
 8001998:	7b7b      	ldrb	r3, [r7, #13]
 800199a:	4619      	mov	r1, r3
 800199c:	2029      	movs	r0, #41	@ 0x29
 800199e:	f7ff fb8b 	bl	80010b8 <setRegister>
        setRegister(MCP_CNF3, cfg3);
 80019a2:	7b3b      	ldrb	r3, [r7, #12]
 80019a4:	4619      	mov	r1, r3
 80019a6:	2028      	movs	r0, #40	@ 0x28
 80019a8:	f7ff fb86 	bl	80010b8 <setRegister>
        return ERROR_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e000      	b.n	80019b2 <MCP_setBitrateClock+0x38a>
    }
    else {
        return ERROR_FAIL;
 80019b0:	2301      	movs	r3, #1
    }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop

080019bc <MCP_setBitrate>:

CAN_Error MCP_setBitrate( CAN_SPEED canSpeed)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
    return MCP_setBitrateClock(canSpeed, MCP_16MHZ);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2101      	movs	r1, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe2c 	bl	8001628 <MCP_setBitrateClock>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <MCP_RequestToSend>:


void MCP_RequestToSend(uint8_t instruction)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
    startSPI();
 80019e4:	f7ff fb3a 	bl	800105c <startSPI>
    SPI_transfer(instruction);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb4e 	bl	800108c <SPI_transfer>
    endSPI();
 80019f0:	f7ff fb40 	bl	8001074 <endSPI>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <MCP_sendMessageTo>:

CAN_Error MCP_sendMessageTo(TXBn txbn, struct can_frame *frame)
//TXBm is just 0,1,2 for txbox number
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d901      	bls.n	8001a14 <MCP_sendMessageTo+0x18>
        return ERROR_FAILTX;
 8001a10:	2304      	movs	r3, #4
 8001a12:	e081      	b.n	8001b18 <MCP_sendMessageTo+0x11c>
    }

    //Todo, fix these magic numbers, but not with something as awful as the og arduino library
    uint8_t load_addr = (2 * txbn) | 0x40;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    uint8_t rts_addr = (1 << txbn) | 0x80;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint8_t data[13];

    uint8_t ext = !!(frame->can_id & CAN_EFF_FLAG);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0fdb      	lsrs	r3, r3, #31
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    uint8_t rtr = !!(frame->can_id & CAN_RTR_FLAG);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f887 3020 	strb.w	r3, [r7, #32]
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d002      	beq.n	8001a6e <MCP_sendMessageTo+0x72>
 8001a68:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001a6c:	e001      	b.n	8001a72 <MCP_sendMessageTo+0x76>
 8001a6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001a72:	4013      	ands	r3, r2
 8001a74:	61fb      	str	r3, [r7, #28]

    prepareId(data, ext, id);
 8001a76:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc22 	bl	80012ca <prepareId>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 8001a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <MCP_sendMessageTo+0x9e>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	791b      	ldrb	r3, [r3, #4]
 8001a92:	2240      	movs	r2, #64	@ 0x40
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	e001      	b.n	8001a9e <MCP_sendMessageTo+0xa2>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	3228      	adds	r2, #40	@ 0x28
 8001aa2:	443a      	add	r2, r7
 8001aa4:	f802 3c1c 	strb.w	r3, [r2, #-28]

    for(int i = 0; i < frame->can_dlc; i++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e00f      	b.n	8001ace <MCP_sendMessageTo+0xd2>
    	data[MCP_DATA+i]=frame->data[i];
 8001aae:	2305      	movs	r3, #5
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	4413      	add	r3, r2
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aba:	440a      	add	r2, r1
 8001abc:	3208      	adds	r2, #8
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	3328      	adds	r3, #40	@ 0x28
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for(int i = 0; i < frame->can_dlc; i++){
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	dbe9      	blt.n	8001aae <MCP_sendMessageTo+0xb2>
    }

   // memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);

    loadTx(load_addr, data, 5 + frame->can_dlc);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	f107 010c 	add.w	r1, r7, #12
 8001ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fb27 	bl	800113e <loadTx>
    //setRegisters(load_addr, data, 5 + frame->can_dlc);

    //modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    //modifyRegister(rts_addr, TXB_TXREQ, TXB_TXREQ);
    MCP_RequestToSend(rts_addr);
 8001af0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff70 	bl	80019da <MCP_RequestToSend>
    //setRegister(rts_addr, TXB_TXREQ);

    uint8_t ctrl = readRegister(rts_addr);
 8001afa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb62 	bl	80011c8 <readRegister>
 8001b04:	4603      	mov	r3, r0
 8001b06:	76fb      	strb	r3, [r7, #27]
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 8001b08:	7efb      	ldrb	r3, [r7, #27]
 8001b0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MCP_sendMessageTo+0x11a>
        return ERROR_FAILTX;
 8001b12:	2304      	movs	r3, #4
 8001b14:	e000      	b.n	8001b18 <MCP_sendMessageTo+0x11c>
    }
    return ERROR_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <MCP_sendMessage>:

CAN_Error MCP_sendMessage(struct can_frame *frame)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	791b      	ldrb	r3, [r3, #4]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d901      	bls.n	8001b34 <MCP_sendMessage+0x14>
        return ERROR_FAILTX;
 8001b30:	2304      	movs	r3, #4
 8001b32:	e020      	b.n	8001b76 <MCP_sendMessage+0x56>
    }


    for (uint8_t i=0; i<N_TXBUFFERS; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e018      	b.n	8001b6c <MCP_sendMessage+0x4c>
        uint8_t ctrlval = readRegister((i+3)<<4);
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fb3f 	bl	80011c8 <readRegister>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73bb      	strb	r3, [r7, #14]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d106      	bne.n	8001b66 <MCP_sendMessage+0x46>
            return MCP_sendMessageTo(i, frame);
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff4d 	bl	80019fc <MCP_sendMessageTo>
 8001b62:	4603      	mov	r3, r0
 8001b64:	e007      	b.n	8001b76 <MCP_sendMessage+0x56>
    for (uint8_t i=0; i<N_TXBUFFERS; i++) {
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d3e2      	bcc.n	8001b3a <MCP_sendMessage+0x1a>
        }
    }

    return ERROR_ALLTXBUSY;
 8001b74:	2302      	movs	r3, #2
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <MCP_readMessageFrom>:

CAN_Error MCP_readMessageFrom(RXBn rxbn, struct can_frame *frame)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	6039      	str	r1, [r7, #0]
 8001b88:	71fb      	strb	r3, [r7, #7]


    uint8_t readCommand = (rxbn << 2) | 0x90;
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	76fb      	strb	r3, [r7, #27]

    rx_reg_t rxReg;

    readRx(readCommand, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001b9a:	f107 010c 	add.w	r1, r7, #12
 8001b9e:	7efb      	ldrb	r3, [r7, #27]
 8001ba0:	220d      	movs	r2, #13
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb2a 	bl	80011fc <readRx>

    uint32_t id = (rxReg.rx_reg_array[MCP_SIDH]<<3) + (rxReg.rx_reg_array[MCP_SIDL]>>5);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	3320      	adds	r3, #32
 8001bac:	443b      	add	r3, r7
 8001bae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	3220      	adds	r2, #32
 8001bb8:	443a      	add	r2, r7
 8001bba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001bbe:	0952      	lsrs	r2, r2, #5
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	61fb      	str	r3, [r7, #28]

    if ( (rxReg.rx_reg_array[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	3320      	adds	r3, #32
 8001bca:	443b      	add	r3, r7
 8001bcc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d120      	bne.n	8001c1e <MCP_readMessageFrom+0xa0>
        id = (id<<2) + (rxReg.rx_reg_array[MCP_SIDL] & 0x03);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	009a      	lsls	r2, r3, #2
 8001be0:	2301      	movs	r3, #1
 8001be2:	3320      	adds	r3, #32
 8001be4:	443b      	add	r3, r7
 8001be6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + rxReg.rx_reg_array[MCP_EID8];
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	3220      	adds	r2, #32
 8001bfa:	443a      	add	r2, r7
 8001bfc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001c00:	4413      	add	r3, r2
 8001c02:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + rxReg.rx_reg_array[MCP_EID0];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	2203      	movs	r2, #3
 8001c0a:	3220      	adds	r2, #32
 8001c0c:	443a      	add	r2, r7
 8001c0e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001c12:	4413      	add	r3, r2
 8001c14:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c1c:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (rxReg.rx_reg_array[MCP_DLC] & DLC_MASK);
 8001c1e:	2304      	movs	r3, #4
 8001c20:	3320      	adds	r3, #32
 8001c22:	443b      	add	r3, r7
 8001c24:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001c28:	220f      	movs	r2, #15
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	76bb      	strb	r3, [r7, #26]
    if (dlc > CAN_MAX_DLEN) {
 8001c2e:	7ebb      	ldrb	r3, [r7, #26]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d901      	bls.n	8001c38 <MCP_readMessageFrom+0xba>
        return ERROR_FAIL;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e03a      	b.n	8001cae <MCP_readMessageFrom+0x130>
    }


    //0x60 or 0x70
    uint8_t ctrl = readRegister((rxbn + 6) << 4);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	3306      	adds	r3, #6
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fac0 	bl	80011c8 <readRegister>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	767b      	strb	r3, [r7, #25]
    if (ctrl & RXBnCTRL_RTR) {
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	7e7b      	ldrb	r3, [r7, #25]
 8001c50:	4013      	ands	r3, r2
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <MCP_readMessageFrom+0xe2>
        id |= CAN_RTR_FLAG;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c5e:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7eba      	ldrb	r2, [r7, #26]
 8001c6a:	711a      	strb	r2, [r3, #4]

    frame->data[0] = rxReg.RXBnD0;
 8001c6c:	7c7a      	ldrb	r2, [r7, #17]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	721a      	strb	r2, [r3, #8]
    frame->data[1] = rxReg.RXBnD1;
 8001c72:	7cba      	ldrb	r2, [r7, #18]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	725a      	strb	r2, [r3, #9]
    frame->data[2] = rxReg.RXBnD2;
 8001c78:	7cfa      	ldrb	r2, [r7, #19]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	729a      	strb	r2, [r3, #10]
    frame->data[3] = rxReg.RXBnD3;
 8001c7e:	7d3a      	ldrb	r2, [r7, #20]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	72da      	strb	r2, [r3, #11]
    frame->data[4] = rxReg.RXBnD4;
 8001c84:	7d7a      	ldrb	r2, [r7, #21]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	731a      	strb	r2, [r3, #12]
    frame->data[5] = rxReg.RXBnD5;
 8001c8a:	7dba      	ldrb	r2, [r7, #22]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	735a      	strb	r2, [r3, #13]
    frame->data[6] = rxReg.RXBnD6;
 8001c90:	7dfa      	ldrb	r2, [r7, #23]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	739a      	strb	r2, [r3, #14]
    frame->data[7] = rxReg.RXBnD7;
 8001c96:	7e3a      	ldrb	r2, [r7, #24]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	73da      	strb	r2, [r3, #15]


    //Clear the inbox interrupt, 0x1 or 0x2
    modifyRegister(MCP_CANINTF, rxbn + 1, 0);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	202c      	movs	r0, #44	@ 0x2c
 8001ca8:	f7ff fa6e 	bl	8001188 <modifyRegister>

    return ERROR_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <MCP_readMessage>:

CAN_Error MCP_readMessage(struct can_frame *frame)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	CAN_Error rc;
    uint8_t stat = getStatus();
 8001cbe:	f7ff fb7b 	bl	80013b8 <getStatus>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <MCP_readMessage+0x28>
        rc = MCP_readMessageFrom(RXB0, frame);
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff ff53 	bl	8001b7e <MCP_readMessageFrom>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e00d      	b.n	8001cfa <MCP_readMessage+0x44>
    } else if ( stat & STAT_RX1IF ) {
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <MCP_readMessage+0x40>
        rc = MCP_readMessageFrom(RXB1, frame);
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff ff47 	bl	8001b7e <MCP_readMessageFrom>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <MCP_readMessage+0x44>
    } else {
        rc = ERROR_NOMSG;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f000 ffbe 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a3b      	ldr	r2, [pc, #236]	@ (8001e60 <HAL_ADC_MspInit+0x10c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d170      	bne.n	8001e58 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a39      	ldr	r2, [pc, #228]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a32      	ldr	r2, [pc, #200]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a2b      	ldr	r2, [pc, #172]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <HAL_ADC_MspInit+0x110>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001dca:	2312      	movs	r3, #18
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4822      	ldr	r0, [pc, #136]	@ (8001e68 <HAL_ADC_MspInit+0x114>)
 8001dde:	f001 fb23 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001de2:	2301      	movs	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de6:	2303      	movs	r3, #3
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	481d      	ldr	r0, [pc, #116]	@ (8001e6c <HAL_ADC_MspInit+0x118>)
 8001df6:	f001 fb17 	bl	8003428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_ADC_MspInit+0x120>)
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e3e:	f000 ff83 	bl	8002d48 <HAL_DMA_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001e48:	f7ff f902 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e50:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e52:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_ADC_MspInit+0x11c>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40012000 	.word	0x40012000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	2000007c 	.word	0x2000007c
 8001e74:	40026410 	.word	0x40026410

08001e78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	@ 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8001f9c <HAL_I2S_MspInit+0x124>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d174      	bne.n	8001f94 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001eae:	23c0      	movs	r3, #192	@ 0xc0
 8001eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fe9e 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001ec6:	f7ff f8c3 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_I2S_MspInit+0x128>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a33      	ldr	r2, [pc, #204]	@ (8001fa0 <HAL_I2S_MspInit+0x128>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_I2S_MspInit+0x128>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_I2S_MspInit+0x128>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa0 <HAL_I2S_MspInit+0x128>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <HAL_I2S_MspInit+0x128>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001f02:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f14:	2305      	movs	r3, #5
 8001f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4821      	ldr	r0, [pc, #132]	@ (8001fa4 <HAL_I2S_MspInit+0x12c>)
 8001f20:	f001 fa82 	bl	8003428 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001f24:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f26:	4a21      	ldr	r2, [pc, #132]	@ (8001fac <HAL_I2S_MspInit+0x134>)
 8001f28:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f32:	2240      	movs	r2, #64	@ 0x40
 8001f34:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f42:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f52:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f62:	2204      	movs	r2, #4
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f78:	480b      	ldr	r0, [pc, #44]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f7a:	f000 fee5 	bl	8002d48 <HAL_DMA_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001f84:	f7ff f864 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f8e:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_I2S_MspInit+0x130>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001f94:	bf00      	nop
 8001f96:	3738      	adds	r7, #56	@ 0x38
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40003800 	.word	0x40003800
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	20000124 	.word	0x20000124
 8001fac:	40026070 	.word	0x40026070

08001fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_SPI_MspInit+0x84>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12c      	bne.n	800202c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a10      	ldr	r2, [pc, #64]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_SPI_MspInit+0x88>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800200a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800201c:	2306      	movs	r3, #6
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <HAL_SPI_MspInit+0x8c>)
 8002028:	f001 f9fe 	bl	8003428 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	@ 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40003c00 	.word	0x40003c00
 8002038:	40023800 	.word	0x40023800
 800203c:	40020800 	.word	0x40020800

08002040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_TIM_Base_MspInit+0x3c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10d      	bne.n	800206e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_TIM_Base_MspInit+0x40>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_TIM_Base_MspInit+0x40>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6413      	str	r3, [r2, #64]	@ 0x40
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <HAL_TIM_Base_MspInit+0x40>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_UART_MspInit+0x84>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12b      	bne.n	80020fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <HAL_UART_MspInit+0x88>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	4a17      	ldr	r2, [pc, #92]	@ (800210c <HAL_UART_MspInit+0x88>)
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <HAL_UART_MspInit+0x88>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_UART_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a10      	ldr	r2, [pc, #64]	@ (800210c <HAL_UART_MspInit+0x88>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_UART_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020de:	230c      	movs	r3, #12
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ee:	2307      	movs	r3, #7
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	@ (8002110 <HAL_UART_MspInit+0x8c>)
 80020fa:	f001 f995 	bl	8003428 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40004400 	.word	0x40004400
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <NMI_Handler+0x4>

0800211c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <MemManage_Handler+0x4>

0800212c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <UsageFault_Handler+0x4>

0800213c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f8a5 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <DMA1_Stream4_IRQHandler+0x10>)
 800217a:	f000 feeb 	bl	8002f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000124 	.word	0x20000124

08002188 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <DMA2_Stream0_IRQHandler+0x10>)
 800218e:	f000 fee1 	bl	8002f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000007c 	.word	0x2000007c

0800219c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c4:	f7ff ffea 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	@ (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	@ (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f003 ff3b 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7fe fc69 	bl	8000ac8 <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002204:	080561d8 	.word	0x080561d8
  ldr r2, =_sbss
 8002208:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800220c:	200002e0 	.word	0x200002e0

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_Init+0x40>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_Init+0x40>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_Init+0x40>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 fd41 	bl	8002cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f808 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fd5c 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_InitTick+0x54>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_InitTick+0x58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fd59 	bl	8002d2e <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d80a      	bhi.n	80022a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228c:	2200      	movs	r2, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f000 fd21 	bl	8002cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002298:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <HAL_InitTick+0x5c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000010 	.word	0x20000010
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x20>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x24>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <HAL_IncTick+0x24>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000010 	.word	0x20000010
 80022dc:	200002dc 	.word	0x200002dc

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200002dc 	.word	0x200002dc

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff ffee 	bl	80022e0 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d005      	beq.n	800231e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_Delay+0x44>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231e:	bf00      	nop
 8002320:	f7ff ffde 	bl	80022e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d8f7      	bhi.n	8002320 <HAL_Delay+0x28>
  {
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000010 	.word	0x20000010

08002340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e033      	b.n	80023be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fcf8 	bl	8001d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002386:	f023 0302 	bic.w	r3, r3, #2
 800238a:	f043 0202 	orr.w	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa48 	bl	8002828 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80023ae:	e001      	b.n	80023b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x1e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0ce      	b.n	8002584 <HAL_ADC_Start_DMA+0x1bc>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d018      	beq.n	800242e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240c:	4b5f      	ldr	r3, [pc, #380]	@ (800258c <HAL_ADC_Start_DMA+0x1c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5f      	ldr	r2, [pc, #380]	@ (8002590 <HAL_ADC_Start_DMA+0x1c8>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9a      	lsrs	r2, r3, #18
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002420:	e002      	b.n	8002428 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	3b01      	subs	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f9      	bne.n	8002422 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800243c:	d107      	bne.n	800244e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800244c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 8086 	bne.w	800256a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002488:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249c:	d106      	bne.n	80024ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f023 0206 	bic.w	r2, r3, #6
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80024aa:	e002      	b.n	80024b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ba:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_ADC_Start_DMA+0x1cc>)
 80024bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c2:	4a35      	ldr	r2, [pc, #212]	@ (8002598 <HAL_ADC_Start_DMA+0x1d0>)
 80024c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	4a34      	ldr	r2, [pc, #208]	@ (800259c <HAL_ADC_Start_DMA+0x1d4>)
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	4a33      	ldr	r2, [pc, #204]	@ (80025a0 <HAL_ADC_Start_DMA+0x1d8>)
 80024d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024ee:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024fe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	334c      	adds	r3, #76	@ 0x4c
 800250a:	4619      	mov	r1, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f000 fcc8 	bl	8002ea4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d129      	bne.n	8002582 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	e020      	b.n	8002582 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <HAL_ADC_Start_DMA+0x1dc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11b      	bne.n	8002582 <HAL_ADC_Start_DMA+0x1ba>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d114      	bne.n	8002582 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	e00b      	b.n	8002582 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f043 0210 	orr.w	r2, r3, #16
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000008 	.word	0x20000008
 8002590:	431bde83 	.word	0x431bde83
 8002594:	40012300 	.word	0x40012300
 8002598:	08002a21 	.word	0x08002a21
 800259c:	08002adb 	.word	0x08002adb
 80025a0:	08002af7 	.word	0x08002af7
 80025a4:	40012000 	.word	0x40012000

080025a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e105      	b.n	800280c <HAL_ADC_ConfigChannel+0x228>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d925      	bls.n	800265c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68d9      	ldr	r1, [r3, #12]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	3b1e      	subs	r3, #30
 8002626:	2207      	movs	r2, #7
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43da      	mvns	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	400a      	ands	r2, r1
 8002634:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68d9      	ldr	r1, [r3, #12]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	4603      	mov	r3, r0
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4403      	add	r3, r0
 800264e:	3b1e      	subs	r3, #30
 8002650:	409a      	lsls	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	e022      	b.n	80026a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6919      	ldr	r1, [r3, #16]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	2207      	movs	r2, #7
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	400a      	ands	r2, r1
 800267e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	4618      	mov	r0, r3
 8002692:	4603      	mov	r3, r0
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4403      	add	r3, r0
 8002698:	409a      	lsls	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d824      	bhi.n	80026f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3b05      	subs	r3, #5
 80026bc:	221f      	movs	r2, #31
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b05      	subs	r3, #5
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80026f2:	e04c      	b.n	800278e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d824      	bhi.n	8002746 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b23      	subs	r3, #35	@ 0x23
 800270e:	221f      	movs	r2, #31
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43da      	mvns	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	400a      	ands	r2, r1
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b23      	subs	r3, #35	@ 0x23
 8002738:	fa00 f203 	lsl.w	r2, r0, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
 8002744:	e023      	b.n	800278e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b41      	subs	r3, #65	@ 0x41
 8002758:	221f      	movs	r2, #31
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	400a      	ands	r2, r1
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	4618      	mov	r0, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b41      	subs	r3, #65	@ 0x41
 8002782:	fa00 f203 	lsl.w	r2, r0, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <HAL_ADC_ConfigChannel+0x234>)
 8002790:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a21      	ldr	r2, [pc, #132]	@ (800281c <HAL_ADC_ConfigChannel+0x238>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d109      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1cc>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b12      	cmp	r3, #18
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	@ (800281c <HAL_ADC_ConfigChannel+0x238>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d123      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d003      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x1e6>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b11      	cmp	r3, #17
 80027c8:	d11b      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d111      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_ADC_ConfigChannel+0x23c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a10      	ldr	r2, [pc, #64]	@ (8002824 <HAL_ADC_ConfigChannel+0x240>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9a      	lsrs	r2, r3, #18
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027f4:	e002      	b.n	80027fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f9      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40012300 	.word	0x40012300
 800281c:	40012000 	.word	0x40012000
 8002820:	20000008 	.word	0x20000008
 8002824:	431bde83 	.word	0x431bde83

08002828 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002830:	4b79      	ldr	r3, [pc, #484]	@ (8002a18 <ADC_Init+0x1f0>)
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800285c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	4a58      	ldr	r2, [pc, #352]	@ (8002a1c <ADC_Init+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6899      	ldr	r1, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	e00f      	b.n	8002926 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002924:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0202 	bic.w	r2, r2, #2
 8002934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e1b      	ldrb	r3, [r3, #24]
 8002940:	005a      	lsls	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002962:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002972:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	035a      	lsls	r2, r3, #13
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e007      	b.n	800299c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	051a      	lsls	r2, r3, #20
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029de:	025a      	lsls	r2, r3, #9
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	029a      	lsls	r2, r3, #10
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	0f000001 	.word	0x0f000001

08002a20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d13c      	bne.n	8002ab4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d12b      	bne.n	8002aac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d127      	bne.n	8002aac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d119      	bne.n	8002aac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0220 	bic.w	r2, r2, #32
 8002a86:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff fd7b 	bl	80025a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ab2:	e00e      	b.n	8002ad2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7ff fd85 	bl	80025d0 <HAL_ADC_ErrorCallback>
}
 8002ac6:	e004      	b.n	8002ad2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff fd67 	bl	80025bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b02:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	f043 0204 	orr.w	r2, r3, #4
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fd5a 	bl	80025d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	@ (8002bc0 <__NVIC_EnableIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	db0a      	blt.n	8002bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	490c      	ldr	r1, [pc, #48]	@ (8002c10 <__NVIC_SetPriority+0x4c>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	440b      	add	r3, r1
 8002be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bec:	e00a      	b.n	8002c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4908      	ldr	r1, [pc, #32]	@ (8002c14 <__NVIC_SetPriority+0x50>)
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	0112      	lsls	r2, r2, #4
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	440b      	add	r3, r1
 8002c02:	761a      	strb	r2, [r3, #24]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	@ 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f1c3 0307 	rsb	r3, r3, #7
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf28      	it	cs
 8002c36:	2304      	movcs	r3, #4
 8002c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <NVIC_EncodePriority+0x30>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3b03      	subs	r3, #3
 8002c46:	e000      	b.n	8002c4a <NVIC_EncodePriority+0x32>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c60:	f04f 31ff 	mov.w	r1, #4294967295
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43d9      	mvns	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	4313      	orrs	r3, r2
         );
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c90:	d301      	bcc.n	8002c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00f      	b.n	8002cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <SysTick_Config+0x40>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f7ff ff8e 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <SysTick_Config+0x40>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cae:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <SysTick_Config+0x40>)
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000e010 	.word	0xe000e010

08002cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff29 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cec:	f7ff ff3e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff8e 	bl	8002c18 <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff31 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa2 	bl	8002c80 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff fac4 	bl	80022e0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e099      	b.n	8002e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d84:	e00f      	b.n	8002da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d86:	f7ff faab 	bl	80022e0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d908      	bls.n	8002da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e078      	b.n	8002e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e8      	bne.n	8002d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <HAL_DMA_Init+0x158>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d107      	bne.n	8002e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0307 	bic.w	r3, r3, #7
 8002e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d117      	bne.n	8002e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fa6f 	bl	8003330 <DMA_CheckFifoParam>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2240      	movs	r2, #64	@ 0x40
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e66:	2301      	movs	r3, #1
 8002e68:	e016      	b.n	8002e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa26 	bl	80032c4 <DMA_CalcBaseAndBitshift>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	223f      	movs	r2, #63	@ 0x3f
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	f010803f 	.word	0xf010803f

08002ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_DMA_Start_IT+0x26>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e040      	b.n	8002f4c <HAL_DMA_Start_IT+0xa8>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d12f      	bne.n	8002f3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9b8 	bl	8003268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	223f      	movs	r2, #63	@ 0x3f
 8002efe:	409a      	lsls	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0216 	orr.w	r2, r2, #22
 8002f12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e005      	b.n	8002f4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f60:	4b8e      	ldr	r3, [pc, #568]	@ (800319c <HAL_DMA_IRQHandler+0x248>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a8e      	ldr	r2, [pc, #568]	@ (80031a0 <HAL_DMA_IRQHandler+0x24c>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0a9b      	lsrs	r3, r3, #10
 8002f6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7e:	2208      	movs	r2, #8
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01a      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	2208      	movs	r2, #8
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d012      	beq.n	800302c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	2204      	movs	r2, #4
 800301a:	409a      	lsls	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	2210      	movs	r2, #16
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d043      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03c      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2210      	movs	r2, #16
 8003050:	409a      	lsls	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d018      	beq.n	8003096 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d108      	bne.n	8003084 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d024      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
 8003082:	e01f      	b.n	80030c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01b      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
 8003094:	e016      	b.n	80030c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0208 	bic.w	r2, r2, #8
 80030b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	2220      	movs	r2, #32
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 808f 	beq.w	80031f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8087 	beq.w	80031f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	2220      	movs	r2, #32
 80030ec:	409a      	lsls	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d136      	bne.n	800316c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0216 	bic.w	r2, r2, #22
 800310c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800311c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_DMA_IRQHandler+0x1da>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0208 	bic.w	r2, r2, #8
 800313c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	223f      	movs	r2, #63	@ 0x3f
 8003144:	409a      	lsls	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315e:	2b00      	cmp	r3, #0
 8003160:	d07e      	beq.n	8003260 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
        }
        return;
 800316a:	e079      	b.n	8003260 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01d      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10d      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318c:	2b00      	cmp	r3, #0
 800318e:	d031      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
 8003198:	e02c      	b.n	80031f4 <HAL_DMA_IRQHandler+0x2a0>
 800319a:	bf00      	nop
 800319c:	20000008 	.word	0x20000008
 80031a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d023      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
 80031b4:	e01e      	b.n	80031f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0210 	bic.w	r2, r2, #16
 80031d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d032      	beq.n	8003262 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d022      	beq.n	800324e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2205      	movs	r2, #5
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3301      	adds	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	d307      	bcc.n	800323c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f2      	bne.n	8003220 <HAL_DMA_IRQHandler+0x2cc>
 800323a:	e000      	b.n	800323e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800323c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
 800325e:	e000      	b.n	8003262 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003260:	bf00      	nop
    }
  }
}
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	d108      	bne.n	80032a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032a6:	e007      	b.n	80032b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	3b10      	subs	r3, #16
 80032d4:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <DMA_CalcBaseAndBitshift+0x64>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032de:	4a13      	ldr	r2, [pc, #76]	@ (800332c <DMA_CalcBaseAndBitshift+0x68>)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d909      	bls.n	8003306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	659a      	str	r2, [r3, #88]	@ 0x58
 8003304:	e007      	b.n	8003316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	aaaaaaab 	.word	0xaaaaaaab
 800332c:	080561c0 	.word	0x080561c0

08003330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11f      	bne.n	800338a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d856      	bhi.n	80033fe <DMA_CheckFifoParam+0xce>
 8003350:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <DMA_CheckFifoParam+0x28>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	08003369 	.word	0x08003369
 800335c:	0800337b 	.word	0x0800337b
 8003360:	08003369 	.word	0x08003369
 8003364:	080033ff 	.word	0x080033ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d046      	beq.n	8003402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003378:	e043      	b.n	8003402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003382:	d140      	bne.n	8003406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003388:	e03d      	b.n	8003406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003392:	d121      	bne.n	80033d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d837      	bhi.n	800340a <DMA_CheckFifoParam+0xda>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <DMA_CheckFifoParam+0x70>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033b7 	.word	0x080033b7
 80033a8:	080033b1 	.word	0x080033b1
 80033ac:	080033c9 	.word	0x080033c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e030      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d025      	beq.n	800340e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c6:	e022      	b.n	800340e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033d0:	d11f      	bne.n	8003412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033d6:	e01c      	b.n	8003412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d903      	bls.n	80033e6 <DMA_CheckFifoParam+0xb6>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d003      	beq.n	80033ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033e4:	e018      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ea:	e015      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e00b      	b.n	8003416 <DMA_CheckFifoParam+0xe6>
      break;
 80033fe:	bf00      	nop
 8003400:	e00a      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e008      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 8003406:	bf00      	nop
 8003408:	e006      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e004      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;   
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
    }
  } 
  
  return status; 
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e159      	b.n	80036f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 8148 	bne.w	80036f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d005      	beq.n	800347a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	2b02      	cmp	r3, #2
 8003478:	d130      	bne.n	80034dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b0:	2201      	movs	r2, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 0201 	and.w	r2, r3, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d017      	beq.n	8003518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a2 	beq.w	80036f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b57      	ldr	r3, [pc, #348]	@ (8003710 <HAL_GPIO_Init+0x2e8>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	4a56      	ldr	r2, [pc, #344]	@ (8003710 <HAL_GPIO_Init+0x2e8>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035be:	4b54      	ldr	r3, [pc, #336]	@ (8003710 <HAL_GPIO_Init+0x2e8>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ca:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_GPIO_Init+0x2ec>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a49      	ldr	r2, [pc, #292]	@ (8003718 <HAL_GPIO_Init+0x2f0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x202>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a48      	ldr	r2, [pc, #288]	@ (800371c <HAL_GPIO_Init+0x2f4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x1fe>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a47      	ldr	r2, [pc, #284]	@ (8003720 <HAL_GPIO_Init+0x2f8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x1fa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a46      	ldr	r2, [pc, #280]	@ (8003724 <HAL_GPIO_Init+0x2fc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x1f6>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a45      	ldr	r2, [pc, #276]	@ (8003728 <HAL_GPIO_Init+0x300>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x1f2>
 8003616:	2304      	movs	r3, #4
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x204>
 800361a:	2307      	movs	r3, #7
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x204>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x204>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x204>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x204>
 800362a:	2300      	movs	r3, #0
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f002 0203 	and.w	r2, r2, #3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800363c:	4935      	ldr	r1, [pc, #212]	@ (8003714 <HAL_GPIO_Init+0x2ec>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <HAL_GPIO_Init+0x304>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366e:	4a2f      	ldr	r2, [pc, #188]	@ (800372c <HAL_GPIO_Init+0x304>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003674:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <HAL_GPIO_Init+0x304>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003698:	4a24      	ldr	r2, [pc, #144]	@ (800372c <HAL_GPIO_Init+0x304>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800369e:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_GPIO_Init+0x304>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <HAL_GPIO_Init+0x304>)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <HAL_GPIO_Init+0x304>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ec:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <HAL_GPIO_Init+0x304>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3301      	adds	r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	f67f aea2 	bls.w	8003444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3724      	adds	r7, #36	@ 0x24
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40013800 	.word	0x40013800
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400
 8003720:	40020800 	.word	0x40020800
 8003724:	40020c00 	.word	0x40020c00
 8003728:	40021000 	.word	0x40021000
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e001      	b.n	8003752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e128      	b.n	80039f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a90      	ldr	r2, [pc, #576]	@ (8003a00 <HAL_I2S_Init+0x26c>)
 80037be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe fb59 	bl	8001e78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80037dc:	f023 030f 	bic.w	r3, r3, #15
 80037e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2202      	movs	r2, #2
 80037e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d060      	beq.n	80038b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037fa:	2310      	movs	r3, #16
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e001      	b.n	8003804 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003800:	2320      	movs	r3, #32
 8003802:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b20      	cmp	r3, #32
 800380a:	d802      	bhi.n	8003812 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003812:	2001      	movs	r0, #1
 8003814:	f001 fae0 	bl	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003818:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003822:	d125      	bne.n	8003870 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d010      	beq.n	800384e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	fbb2 f2f3 	udiv	r2, r2, r3
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	3305      	adds	r3, #5
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e01f      	b.n	800388e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	fbb2 f2f3 	udiv	r2, r2, r3
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	461a      	mov	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	3305      	adds	r3, #5
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e00e      	b.n	800388e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fbb2 f2f3 	udiv	r2, r2, r3
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	461a      	mov	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	3305      	adds	r3, #5
 800388c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4a5c      	ldr	r2, [pc, #368]	@ (8003a04 <HAL_I2S_Init+0x270>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038b4:	2302      	movs	r3, #2
 80038b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d902      	bls.n	80038c8 <HAL_I2S_Init+0x134>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2bff      	cmp	r3, #255	@ 0xff
 80038c6:	d907      	bls.n	80038d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e08f      	b.n	80039f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	ea42 0103 	orr.w	r1, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80038f6:	f023 030f 	bic.w	r3, r3, #15
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6851      	ldr	r1, [r2, #4]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6892      	ldr	r2, [r2, #8]
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6992      	ldr	r2, [r2, #24]
 800390e:	430a      	orrs	r2, r1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d161      	bne.n	80039e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a38      	ldr	r2, [pc, #224]	@ (8003a08 <HAL_I2S_Init+0x274>)
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a37      	ldr	r2, [pc, #220]	@ (8003a0c <HAL_I2S_Init+0x278>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_I2S_Init+0x1a4>
 8003934:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <HAL_I2S_Init+0x27c>)
 8003936:	e001      	b.n	800393c <HAL_I2S_Init+0x1a8>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4932      	ldr	r1, [pc, #200]	@ (8003a0c <HAL_I2S_Init+0x278>)
 8003944:	428a      	cmp	r2, r1
 8003946:	d101      	bne.n	800394c <HAL_I2S_Init+0x1b8>
 8003948:	4a31      	ldr	r2, [pc, #196]	@ (8003a10 <HAL_I2S_Init+0x27c>)
 800394a:	e001      	b.n	8003950 <HAL_I2S_Init+0x1bc>
 800394c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003950:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003954:	f023 030f 	bic.w	r3, r3, #15
 8003958:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2b      	ldr	r2, [pc, #172]	@ (8003a0c <HAL_I2S_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_I2S_Init+0x1d4>
 8003964:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <HAL_I2S_Init+0x27c>)
 8003966:	e001      	b.n	800396c <HAL_I2S_Init+0x1d8>
 8003968:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800396c:	2202      	movs	r2, #2
 800396e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a25      	ldr	r2, [pc, #148]	@ (8003a0c <HAL_I2S_Init+0x278>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_I2S_Init+0x1ea>
 800397a:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <HAL_I2S_Init+0x27c>)
 800397c:	e001      	b.n	8003982 <HAL_I2S_Init+0x1ee>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800398e:	d003      	beq.n	8003998 <HAL_I2S_Init+0x204>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e001      	b.n	80039a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039ae:	4313      	orrs	r3, r2
 80039b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a0d      	ldr	r2, [pc, #52]	@ (8003a0c <HAL_I2S_Init+0x278>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d101      	bne.n	80039e0 <HAL_I2S_Init+0x24c>
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <HAL_I2S_Init+0x27c>)
 80039de:	e001      	b.n	80039e4 <HAL_I2S_Init+0x250>
 80039e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e4:	897a      	ldrh	r2, [r7, #10]
 80039e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	08003d05 	.word	0x08003d05
 8003a04:	cccccccd 	.word	0xcccccccd
 8003a08:	08003e19 	.word	0x08003e19
 8003a0c:	40003800 	.word	0x40003800
 8003a10:	40003400 	.word	0x40003400

08003a14 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_I2S_Transmit_DMA+0x1a>
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e08e      	b.n	8003b50 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2S_Transmit_DMA+0x2e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e086      	b.n	8003b50 <HAL_I2S_Transmit_DMA+0x13c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d005      	beq.n	8003a62 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e076      	b.n	8003b50 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d002      	beq.n	8003a8e <HAL_I2S_Transmit_DMA+0x7a>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa2:	e005      	b.n	8003ab0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab4:	4a28      	ldr	r2, [pc, #160]	@ (8003b58 <HAL_I2S_Transmit_DMA+0x144>)
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <HAL_I2S_Transmit_DMA+0x148>)
 8003abe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <HAL_I2S_Transmit_DMA+0x14c>)
 8003ac6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ad0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ad8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ade:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ae0:	f7ff f9e0 	bl	8002ea4 <HAL_DMA_Start_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00f      	beq.n	8003b0a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	f043 0208 	orr.w	r2, r3, #8
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e022      	b.n	8003b50 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b26:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0202 	orr.w	r2, r2, #2
 8003b44:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08003be3 	.word	0x08003be3
 8003b5c:	08003ba1 	.word	0x08003ba1
 8003b60:	08003bff 	.word	0x08003bff

08003b64 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10e      	bne.n	8003bd4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0202 	bic.w	r2, r2, #2
 8003bc4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7fc fefd 	bl	80009d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ffb7 	bl	8003b64 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0203 	bic.w	r2, r2, #3
 8003c1a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c34:	f043 0208 	orr.w	r2, r3, #8
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f7ff ffa5 	bl	8003b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	881a      	ldrh	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	1c9a      	adds	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fc fe9b 	bl	80009d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	1c9a      	adds	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff3e 	bl	8003b78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d13a      	bne.n	8003d96 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d109      	bne.n	8003d3e <I2S_IRQHandler+0x3a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	d102      	bne.n	8003d3e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ffb4 	bl	8003ca6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d44:	2b40      	cmp	r3, #64	@ 0x40
 8003d46:	d126      	bne.n	8003d96 <I2S_IRQHandler+0x92>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d11f      	bne.n	8003d96 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d64:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d88:	f043 0202 	orr.w	r2, r3, #2
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fefb 	bl	8003b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d136      	bne.n	8003e10 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d109      	bne.n	8003dc0 <I2S_IRQHandler+0xbc>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d102      	bne.n	8003dc0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ff45 	bl	8003c4a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d122      	bne.n	8003e10 <I2S_IRQHandler+0x10c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d11b      	bne.n	8003e10 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003de6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f043 0204 	orr.w	r2, r3, #4
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff febe 	bl	8003b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e10:	bf00      	nop
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a92      	ldr	r2, [pc, #584]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e32:	4b92      	ldr	r3, [pc, #584]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e34:	e001      	b.n	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a8b      	ldr	r2, [pc, #556]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e50:	4b8a      	ldr	r3, [pc, #552]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e52:	e001      	b.n	8003e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e64:	d004      	beq.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 8099 	bne.w	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d107      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f925 	bl	80040d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d107      	bne.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9c8 	bl	8004234 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	2b40      	cmp	r3, #64	@ 0x40
 8003eac:	d13a      	bne.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d035      	beq.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec4:	e001      	b.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ec6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4969      	ldr	r1, [pc, #420]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed2:	428b      	cmp	r3, r1
 8003ed4:	d101      	bne.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ed6:	4b69      	ldr	r3, [pc, #420]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed8:	e001      	b.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ede:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ee2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ef2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f043 0202 	orr.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fe34 	bl	8003b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	f040 80c3 	bne.w	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80bd 	beq.w	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a49      	ldr	r2, [pc, #292]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f56:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4944      	ldr	r1, [pc, #272]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f66:	428b      	cmp	r3, r1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f6a:	4b44      	ldr	r3, [pc, #272]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6c:	e001      	b.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fdf6 	bl	8003b8c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa0:	e089      	b.n	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d107      	bne.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8be 	bl	8004138 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d107      	bne.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8fd 	bl	80041d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d12f      	bne.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02a      	beq.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ff8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004004:	4b1d      	ldr	r3, [pc, #116]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004006:	e001      	b.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004008:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4919      	ldr	r1, [pc, #100]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004014:	428b      	cmp	r3, r1
 8004016:	d101      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004018:	4b18      	ldr	r3, [pc, #96]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800401a:	e001      	b.n	8004020 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800401c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004020:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004024:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f043 0202 	orr.w	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fda6 	bl	8003b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	d136      	bne.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d031      	beq.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a07      	ldr	r2, [pc, #28]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800405e:	4b07      	ldr	r3, [pc, #28]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004060:	e001      	b.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004062:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4902      	ldr	r1, [pc, #8]	@ (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800406e:	428b      	cmp	r3, r1
 8004070:	d106      	bne.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004072:	4b02      	ldr	r3, [pc, #8]	@ (800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004074:	e006      	b.n	8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004076:	bf00      	nop
 8004078:	40003800 	.word	0x40003800
 800407c:	40003400 	.word	0x40003400
 8004080:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004084:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004088:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004098:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fd6c 	bl	8003b8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b4:	e000      	b.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040b6:	bf00      	nop
}
 80040b8:	bf00      	nop
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	1c99      	adds	r1, r3, #2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d113      	bne.n	800412e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004114:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ffc9 	bl	80040c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	1c99      	adds	r1, r3, #2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6251      	str	r1, [r2, #36]	@ 0x24
 800414a:	8819      	ldrh	r1, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <I2SEx_TxISR_I2SExt+0x22>
 8004156:	4b1d      	ldr	r3, [pc, #116]	@ (80041cc <I2SEx_TxISR_I2SExt+0x94>)
 8004158:	e001      	b.n	800415e <I2SEx_TxISR_I2SExt+0x26>
 800415a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415e:	460a      	mov	r2, r1
 8004160:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d121      	bne.n	80041be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a12      	ldr	r2, [pc, #72]	@ (80041c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <I2SEx_TxISR_I2SExt+0x50>
 8004184:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <I2SEx_TxISR_I2SExt+0x94>)
 8004186:	e001      	b.n	800418c <I2SEx_TxISR_I2SExt+0x54>
 8004188:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	490d      	ldr	r1, [pc, #52]	@ (80041c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004194:	428b      	cmp	r3, r1
 8004196:	d101      	bne.n	800419c <I2SEx_TxISR_I2SExt+0x64>
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <I2SEx_TxISR_I2SExt+0x94>)
 800419a:	e001      	b.n	80041a0 <I2SEx_TxISR_I2SExt+0x68>
 800419c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff81 	bl	80040c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40003800 	.word	0x40003800
 80041cc:	40003400 	.word	0x40003400

080041d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68d8      	ldr	r0, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	1c99      	adds	r1, r3, #2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041e8:	b282      	uxth	r2, r0
 80041ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d113      	bne.n	800422c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004212:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ff4a 	bl	80040c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a20      	ldr	r2, [pc, #128]	@ (80042c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <I2SEx_RxISR_I2SExt+0x16>
 8004246:	4b20      	ldr	r3, [pc, #128]	@ (80042c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004248:	e001      	b.n	800424e <I2SEx_RxISR_I2SExt+0x1a>
 800424a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800424e:	68d8      	ldr	r0, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	1c99      	adds	r1, r3, #2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800425a:	b282      	uxth	r2, r0
 800425c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d121      	bne.n	80042ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a12      	ldr	r2, [pc, #72]	@ (80042c4 <I2SEx_RxISR_I2SExt+0x90>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <I2SEx_RxISR_I2SExt+0x50>
 8004280:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004282:	e001      	b.n	8004288 <I2SEx_RxISR_I2SExt+0x54>
 8004284:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	490d      	ldr	r1, [pc, #52]	@ (80042c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004290:	428b      	cmp	r3, r1
 8004292:	d101      	bne.n	8004298 <I2SEx_RxISR_I2SExt+0x64>
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004296:	e001      	b.n	800429c <I2SEx_RxISR_I2SExt+0x68>
 8004298:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800429c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff03 	bl	80040c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40003800 	.word	0x40003800
 80042c8:	40003400 	.word	0x40003400

080042cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e267      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d075      	beq.n	80043d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ea:	4b88      	ldr	r3, [pc, #544]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d00c      	beq.n	8004310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b85      	ldr	r3, [pc, #532]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d112      	bne.n	8004328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004302:	4b82      	ldr	r3, [pc, #520]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800430e:	d10b      	bne.n	8004328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	4b7e      	ldr	r3, [pc, #504]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d05b      	beq.n	80043d4 <HAL_RCC_OscConfig+0x108>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d157      	bne.n	80043d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e242      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004330:	d106      	bne.n	8004340 <HAL_RCC_OscConfig+0x74>
 8004332:	4b76      	ldr	r3, [pc, #472]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a75      	ldr	r2, [pc, #468]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e01d      	b.n	800437c <HAL_RCC_OscConfig+0xb0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x98>
 800434a:	4b70      	ldr	r3, [pc, #448]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6f      	ldr	r2, [pc, #444]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b6d      	ldr	r3, [pc, #436]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6c      	ldr	r2, [pc, #432]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0xb0>
 8004364:	4b69      	ldr	r3, [pc, #420]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a68      	ldr	r2, [pc, #416]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b66      	ldr	r3, [pc, #408]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a65      	ldr	r2, [pc, #404]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd ffac 	bl	80022e0 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438c:	f7fd ffa8 	bl	80022e0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e207      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b5b      	ldr	r3, [pc, #364]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0xc0>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fd ff98 	bl	80022e0 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fd ff94 	bl	80022e0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1f3      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	4b51      	ldr	r3, [pc, #324]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0xe8>
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d063      	beq.n	80044aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e2:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b47      	ldr	r3, [pc, #284]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d11c      	bne.n	8004434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fa:	4b44      	ldr	r3, [pc, #272]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d116      	bne.n	8004434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004406:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x152>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e1c7      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b3b      	ldr	r3, [pc, #236]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4937      	ldr	r1, [pc, #220]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004432:	e03a      	b.n	80044aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800443c:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <HAL_RCC_OscConfig+0x244>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fd ff4d 	bl	80022e0 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444a:	f7fd ff49 	bl	80022e0 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e1a8      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	4b2b      	ldr	r3, [pc, #172]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b28      	ldr	r3, [pc, #160]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4925      	ldr	r1, [pc, #148]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]
 800447c:	e015      	b.n	80044aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447e:	4b24      	ldr	r3, [pc, #144]	@ (8004510 <HAL_RCC_OscConfig+0x244>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd ff2c 	bl	80022e0 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800448c:	f7fd ff28 	bl	80022e0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e187      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	4b1b      	ldr	r3, [pc, #108]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d036      	beq.n	8004524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <HAL_RCC_OscConfig+0x248>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd ff0c 	bl	80022e0 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fd ff08 	bl	80022e0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e167      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCC_OscConfig+0x240>)
 80044e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x200>
 80044ea:	e01b      	b.n	8004524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ec:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <HAL_RCC_OscConfig+0x248>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f2:	f7fd fef5 	bl	80022e0 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	e00e      	b.n	8004518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044fa:	f7fd fef1 	bl	80022e0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d907      	bls.n	8004518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e150      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
 800450c:	40023800 	.word	0x40023800
 8004510:	42470000 	.word	0x42470000
 8004514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b88      	ldr	r3, [pc, #544]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800451a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ea      	bne.n	80044fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8097 	beq.w	8004660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b81      	ldr	r3, [pc, #516]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b7d      	ldr	r3, [pc, #500]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	4a7c      	ldr	r2, [pc, #496]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	@ 0x40
 8004552:	4b7a      	ldr	r3, [pc, #488]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b77      	ldr	r3, [pc, #476]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d118      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b74      	ldr	r3, [pc, #464]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a73      	ldr	r2, [pc, #460]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fd feb1 	bl	80022e0 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004582:	f7fd fead 	bl	80022e0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e10c      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b6a      	ldr	r3, [pc, #424]	@ (8004740 <HAL_RCC_OscConfig+0x474>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2ea>
 80045a8:	4b64      	ldr	r3, [pc, #400]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	4a63      	ldr	r2, [pc, #396]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b4:	e01c      	b.n	80045f0 <HAL_RCC_OscConfig+0x324>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x30c>
 80045be:	4b5f      	ldr	r3, [pc, #380]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	4a5e      	ldr	r2, [pc, #376]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ca:	4b5c      	ldr	r3, [pc, #368]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	4a5b      	ldr	r2, [pc, #364]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0x324>
 80045d8:	4b58      	ldr	r3, [pc, #352]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a57      	ldr	r2, [pc, #348]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e4:	4b55      	ldr	r3, [pc, #340]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a54      	ldr	r2, [pc, #336]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80045ea:	f023 0304 	bic.w	r3, r3, #4
 80045ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fd fe72 	bl	80022e0 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004600:	f7fd fe6e 	bl	80022e0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0cb      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	4b49      	ldr	r3, [pc, #292]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ee      	beq.n	8004600 <HAL_RCC_OscConfig+0x334>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fd fe5c 	bl	80022e0 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	e00a      	b.n	8004642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462c:	f7fd fe58 	bl	80022e0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e0b5      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004642:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ee      	bne.n	800462c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004654:	4b39      	ldr	r3, [pc, #228]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	4a38      	ldr	r2, [pc, #224]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80a1 	beq.w	80047ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800466a:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b08      	cmp	r3, #8
 8004674:	d05c      	beq.n	8004730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d141      	bne.n	8004702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <HAL_RCC_OscConfig+0x478>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd fe2c 	bl	80022e0 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fd fe28 	bl	80022e0 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e087      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	4b27      	ldr	r3, [pc, #156]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	3b01      	subs	r3, #1
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	491b      	ldr	r1, [pc, #108]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <HAL_RCC_OscConfig+0x478>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fd fe01 	bl	80022e0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fd fdfd 	bl	80022e0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e05c      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f4:	4b11      	ldr	r3, [pc, #68]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x416>
 8004700:	e054      	b.n	80047ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <HAL_RCC_OscConfig+0x478>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fd fdea 	bl	80022e0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004710:	f7fd fde6 	bl	80022e0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e045      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_RCC_OscConfig+0x470>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x444>
 800472e:	e03d      	b.n	80047ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e038      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
 800473c:	40023800 	.word	0x40023800
 8004740:	40007000 	.word	0x40007000
 8004744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_RCC_OscConfig+0x4ec>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d028      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d121      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d11a      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004778:	4013      	ands	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800477e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004780:	4293      	cmp	r3, r2
 8004782:	d111      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	3b01      	subs	r3, #1
 8004792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800

080047bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0cc      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b68      	ldr	r3, [pc, #416]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d90c      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b65      	ldr	r3, [pc, #404]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b63      	ldr	r3, [pc, #396]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0b8      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004810:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a58      	ldr	r2, [pc, #352]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800481a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004828:	4b53      	ldr	r3, [pc, #332]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a52      	ldr	r2, [pc, #328]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004834:	4b50      	ldr	r3, [pc, #320]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	494d      	ldr	r1, [pc, #308]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d044      	beq.n	80048dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b47      	ldr	r3, [pc, #284]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d119      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e07f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d003      	beq.n	800487a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004876:	2b03      	cmp	r3, #3
 8004878:	d107      	bne.n	800488a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b3f      	ldr	r3, [pc, #252]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b3b      	ldr	r3, [pc, #236]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e067      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489a:	4b37      	ldr	r3, [pc, #220]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4934      	ldr	r1, [pc, #208]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fd fd18 	bl	80022e0 <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fd fd14 	bl	80022e0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e04f      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 020c 	and.w	r2, r3, #12
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1eb      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048dc:	4b25      	ldr	r3, [pc, #148]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d20c      	bcs.n	8004904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b22      	ldr	r3, [pc, #136]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f2:	4b20      	ldr	r3, [pc, #128]	@ (8004974 <HAL_RCC_ClockConfig+0x1b8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e032      	b.n	800496a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4916      	ldr	r1, [pc, #88]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800492e:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	490e      	ldr	r1, [pc, #56]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004942:	f000 f821 	bl	8004988 <HAL_RCC_GetSysClockFreq>
 8004946:	4602      	mov	r2, r0
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	490a      	ldr	r1, [pc, #40]	@ (800497c <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	5ccb      	ldrb	r3, [r1, r3]
 8004956:	fa22 f303 	lsr.w	r3, r2, r3
 800495a:	4a09      	ldr	r2, [pc, #36]	@ (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800495e:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd fc78 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40023c00 	.word	0x40023c00
 8004978:	40023800 	.word	0x40023800
 800497c:	080561a8 	.word	0x080561a8
 8004980:	20000008 	.word	0x20000008
 8004984:	2000000c 	.word	0x2000000c

08004988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b094      	sub	sp, #80	@ 0x50
 800498e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	647b      	str	r3, [r7, #68]	@ 0x44
 8004994:	2300      	movs	r3, #0
 8004996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004998:	2300      	movs	r3, #0
 800499a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049a0:	4b79      	ldr	r3, [pc, #484]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d00d      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x40>
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	f200 80e1 	bhi.w	8004b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x34>
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d003      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ba:	e0db      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b73      	ldr	r3, [pc, #460]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80049be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80049c0:	e0db      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049c2:	4b73      	ldr	r3, [pc, #460]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049c6:	e0d8      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d063      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049de:	4b6a      	ldr	r3, [pc, #424]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	2200      	movs	r2, #0
 80049e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049f2:	2300      	movs	r3, #0
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049fa:	4622      	mov	r2, r4
 80049fc:	462b      	mov	r3, r5
 80049fe:	f04f 0000 	mov.w	r0, #0
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	0159      	lsls	r1, r3, #5
 8004a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a0c:	0150      	lsls	r0, r2, #5
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4621      	mov	r1, r4
 8004a14:	1a51      	subs	r1, r2, r1
 8004a16:	6139      	str	r1, [r7, #16]
 8004a18:	4629      	mov	r1, r5
 8004a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	018b      	lsls	r3, r1, #6
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a36:	4651      	mov	r1, sl
 8004a38:	018a      	lsls	r2, r1, #6
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a40:	4659      	mov	r1, fp
 8004a42:	eb63 0901 	sbc.w	r9, r3, r1
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5a:	4690      	mov	r8, r2
 8004a5c:	4699      	mov	r9, r3
 8004a5e:	4623      	mov	r3, r4
 8004a60:	eb18 0303 	adds.w	r3, r8, r3
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	462b      	mov	r3, r5
 8004a68:	eb49 0303 	adc.w	r3, r9, r3
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	024b      	lsls	r3, r1, #9
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a84:	4621      	mov	r1, r4
 8004a86:	024a      	lsls	r2, r1, #9
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a8e:	2200      	movs	r2, #0
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a98:	f7fb fb9c 	bl	80001d4 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa4:	e058      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa6:	4b38      	ldr	r3, [pc, #224]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	2200      	movs	r2, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	0159      	lsls	r1, r3, #5
 8004ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad2:	0150      	lsls	r0, r2, #5
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4641      	mov	r1, r8
 8004ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ade:	4649      	mov	r1, r9
 8004ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004af8:	ebb2 040a 	subs.w	r4, r2, sl
 8004afc:	eb63 050b 	sbc.w	r5, r3, fp
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	00eb      	lsls	r3, r5, #3
 8004b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b0e:	00e2      	lsls	r2, r4, #3
 8004b10:	4614      	mov	r4, r2
 8004b12:	461d      	mov	r5, r3
 8004b14:	4643      	mov	r3, r8
 8004b16:	18e3      	adds	r3, r4, r3
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	eb45 0303 	adc.w	r3, r5, r3
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b2e:	4629      	mov	r1, r5
 8004b30:	028b      	lsls	r3, r1, #10
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b38:	4621      	mov	r1, r4
 8004b3a:	028a      	lsls	r2, r1, #10
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b42:	2200      	movs	r2, #0
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	61fa      	str	r2, [r7, #28]
 8004b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b4c:	f7fb fb42 	bl	80001d4 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3750      	adds	r7, #80	@ 0x50
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	007a1200 	.word	0x007a1200

08004b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000008 	.word	0x20000008

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a9b      	lsrs	r3, r3, #10
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	080561b8 	.word	0x080561b8

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd8:	f7ff ffdc 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0b5b      	lsrs	r3, r3, #13
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4903      	ldr	r1, [pc, #12]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	080561b8 	.word	0x080561b8

08004bfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d035      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c24:	4b67      	ldr	r3, [pc, #412]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c2a:	f7fd fb59 	bl	80022e0 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c32:	f7fd fb55 	bl	80022e0 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e0ba      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c44:	4b60      	ldr	r3, [pc, #384]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	019a      	lsls	r2, r3, #6
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	071b      	lsls	r3, r3, #28
 8004c5c:	495a      	ldr	r1, [pc, #360]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c64:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c6a:	f7fd fb39 	bl	80022e0 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c72:	f7fd fb35 	bl	80022e0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e09a      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c84:	4b50      	ldr	r3, [pc, #320]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8083 	beq.w	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	4b49      	ldr	r3, [pc, #292]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	4a48      	ldr	r2, [pc, #288]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cae:	4b46      	ldr	r3, [pc, #280]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cba:	4b44      	ldr	r3, [pc, #272]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a43      	ldr	r2, [pc, #268]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cc6:	f7fd fb0b 	bl	80022e0 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cce:	f7fd fb07 	bl	80022e0 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e06c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cec:	4b36      	ldr	r3, [pc, #216]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d028      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d14:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d20:	4a29      	ldr	r2, [pc, #164]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d26:	4b28      	ldr	r3, [pc, #160]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d114      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fd fad5 	bl	80022e0 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fd fad1 	bl	80022e0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e034      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ee      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d68:	d10d      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d6a:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7e:	4912      	ldr	r1, [pc, #72]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
 8004d84:	e005      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d86:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d90:	6093      	str	r3, [r2, #8]
 8004d92:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	490a      	ldr	r1, [pc, #40]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7c1a      	ldrb	r2, [r3, #16]
 8004db4:	4b07      	ldr	r3, [pc, #28]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004db6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	42470068 	.word	0x42470068
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42470e40 	.word	0x42470e40
 8004dd4:	424711e0 	.word	0x424711e0

08004dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d13f      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dfe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e0c:	d12f      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e10:	617b      	str	r3, [r7, #20]
          break;
 8004e12:	e02f      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e14:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e20:	d108      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e22:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e2a:	4a19      	ldr	r2, [pc, #100]	@ (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	e007      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e34:	4b14      	ldr	r3, [pc, #80]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e3c:	4a15      	ldr	r2, [pc, #84]	@ (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e44:	4b10      	ldr	r3, [pc, #64]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e58:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e5e:	0f1b      	lsrs	r3, r3, #28
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	617b      	str	r3, [r7, #20]
          break;
 8004e6c:	e002      	b.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
          break;
 8004e72:	bf00      	nop
        }
      }
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e76:	bf00      	nop
    }
  }
  return frequency;
 8004e78:	697b      	ldr	r3, [r7, #20]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	00bb8000 	.word	0x00bb8000
 8004e90:	007a1200 	.word	0x007a1200
 8004e94:	00f42400 	.word	0x00f42400

08004e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07b      	b.n	8004fa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d108      	bne.n	8004ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eba:	d009      	beq.n	8004ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	61da      	str	r2, [r3, #28]
 8004ec2:	e005      	b.n	8004ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd f860 	bl	8001fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f54:	ea42 0103 	orr.w	r1, r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f003 0104 	and.w	r1, r3, #4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	f003 0210 	and.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08c      	sub	sp, #48	@ 0x30
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x26>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e198      	b.n	8005302 <HAL_SPI_TransmitReceive+0x358>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd8:	f7fd f982 	bl	80022e0 <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d00f      	beq.n	800501a <HAL_SPI_TransmitReceive+0x70>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005000:	d107      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x68>
 800500a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800500e:	2b04      	cmp	r3, #4
 8005010:	d003      	beq.n	800501a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005012:	2302      	movs	r3, #2
 8005014:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005018:	e16d      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_SPI_TransmitReceive+0x82>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_SPI_TransmitReceive+0x82>
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005032:	e160      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b04      	cmp	r3, #4
 800503e:	d003      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2205      	movs	r2, #5
 8005044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	d007      	beq.n	800509c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a4:	d17c      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x10a>
 80050ae:	8b7b      	ldrh	r3, [r7, #26]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d16a      	bne.n	800518a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d8:	e057      	b.n	800518a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d11b      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x176>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x176>
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d113      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d119      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x1b8>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d014      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	b292      	uxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800515e:	2301      	movs	r3, #1
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005162:	f7fd f8bd 	bl	80022e0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800516e:	429a      	cmp	r2, r3
 8005170:	d80b      	bhi.n	800518a <HAL_SPI_TransmitReceive+0x1e0>
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d007      	beq.n	800518a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005188:	e0b5      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1a2      	bne.n	80050da <HAL_SPI_TransmitReceive+0x130>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d19d      	bne.n	80050da <HAL_SPI_TransmitReceive+0x130>
 800519e:	e080      	b.n	80052a2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_SPI_TransmitReceive+0x204>
 80051a8:	8b7b      	ldrh	r3, [r7, #26]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d16f      	bne.n	800528e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d4:	e05b      	b.n	800528e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d11c      	bne.n	800521e <HAL_SPI_TransmitReceive+0x274>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d017      	beq.n	800521e <HAL_SPI_TransmitReceive+0x274>
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d114      	bne.n	800521e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d119      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x2b6>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d014      	beq.n	8005260 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800525c:	2301      	movs	r3, #1
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005260:	f7fd f83e 	bl	80022e0 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800526c:	429a      	cmp	r2, r3
 800526e:	d803      	bhi.n	8005278 <HAL_SPI_TransmitReceive+0x2ce>
 8005270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d102      	bne.n	800527e <HAL_SPI_TransmitReceive+0x2d4>
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d107      	bne.n	800528e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800528c:	e033      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d19e      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x22c>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d199      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8b8 	bl	800541c <SPI_EndRxTxTransaction>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80052be:	e01a      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ec:	e003      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80052fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005302:	4618      	mov	r0, r3
 8005304:	3730      	adds	r7, #48	@ 0x30
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800531c:	f7fc ffe0 	bl	80022e0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800532c:	f7fc ffd8 	bl	80022e0 <HAL_GetTick>
 8005330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005332:	4b39      	ldr	r3, [pc, #228]	@ (8005418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	015b      	lsls	r3, r3, #5
 8005338:	0d1b      	lsrs	r3, r3, #20
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	e054      	b.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d050      	beq.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800534c:	f7fc ffc8 	bl	80022e0 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	429a      	cmp	r2, r3
 800535a:	d902      	bls.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13d      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800537a:	d111      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005384:	d004      	beq.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538e:	d107      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800539e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a8:	d10f      	bne.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e017      	b.n	800540e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d19b      	bne.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000008 	.word	0x20000008

0800541c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2201      	movs	r2, #1
 8005430:	2102      	movs	r1, #2
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff ff6a 	bl	800530c <SPI_WaitFlagStateUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e032      	b.n	80054b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800544e:	4b1b      	ldr	r3, [pc, #108]	@ (80054bc <SPI_EndRxTxTransaction+0xa0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <SPI_EndRxTxTransaction+0xa4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	0d5b      	lsrs	r3, r3, #21
 800545a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800546c:	d112      	bne.n	8005494 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	2180      	movs	r1, #128	@ 0x80
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff ff47 	bl	800530c <SPI_WaitFlagStateUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d016      	beq.n	80054b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e00f      	b.n	80054b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3b01      	subs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054aa:	2b80      	cmp	r3, #128	@ 0x80
 80054ac:	d0f2      	beq.n	8005494 <SPI_EndRxTxTransaction+0x78>
 80054ae:	e000      	b.n	80054b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80054b0:	bf00      	nop
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20000008 	.word	0x20000008
 80054c0:	165e9f81 	.word	0x165e9f81

080054c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e041      	b.n	800555a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fc fda8 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f000 f950 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e03c      	b.n	80055f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <HAL_TIM_Base_Start+0xa0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_Base_Start+0x5c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_Base_Start+0x5c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1a      	ldr	r2, [pc, #104]	@ (8005608 <HAL_TIM_Base_Start+0xa4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_Base_Start+0x5c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a19      	ldr	r2, [pc, #100]	@ (800560c <HAL_TIM_Base_Start+0xa8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_Base_Start+0x5c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a17      	ldr	r2, [pc, #92]	@ (8005610 <HAL_TIM_Base_Start+0xac>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_Base_Start+0x5c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a16      	ldr	r2, [pc, #88]	@ (8005614 <HAL_TIM_Base_Start+0xb0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d111      	bne.n	80055e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d010      	beq.n	80055f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e2:	e007      	b.n	80055f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40014000 	.word	0x40014000

08005618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_TIM_ConfigClockSource+0x1c>
 8005630:	2302      	movs	r3, #2
 8005632:	e0b4      	b.n	800579e <HAL_TIM_ConfigClockSource+0x186>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800565a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800566c:	d03e      	beq.n	80056ec <HAL_TIM_ConfigClockSource+0xd4>
 800566e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005672:	f200 8087 	bhi.w	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 8005676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567a:	f000 8086 	beq.w	800578a <HAL_TIM_ConfigClockSource+0x172>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005682:	d87f      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b70      	cmp	r3, #112	@ 0x70
 8005686:	d01a      	beq.n	80056be <HAL_TIM_ConfigClockSource+0xa6>
 8005688:	2b70      	cmp	r3, #112	@ 0x70
 800568a:	d87b      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b60      	cmp	r3, #96	@ 0x60
 800568e:	d050      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x11a>
 8005690:	2b60      	cmp	r3, #96	@ 0x60
 8005692:	d877      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b50      	cmp	r3, #80	@ 0x50
 8005696:	d03c      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0xfa>
 8005698:	2b50      	cmp	r3, #80	@ 0x50
 800569a:	d873      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b40      	cmp	r3, #64	@ 0x40
 800569e:	d058      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x13a>
 80056a0:	2b40      	cmp	r3, #64	@ 0x40
 80056a2:	d86f      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b30      	cmp	r3, #48	@ 0x30
 80056a6:	d064      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056a8:	2b30      	cmp	r3, #48	@ 0x30
 80056aa:	d86b      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d060      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d867      	bhi.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d05c      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d05a      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x15a>
 80056bc:	e062      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ce:	f000 f971 	bl	80059b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	609a      	str	r2, [r3, #8]
      break;
 80056ea:	e04f      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056fc:	f000 f95a 	bl	80059b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800570e:	609a      	str	r2, [r3, #8]
      break;
 8005710:	e03c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	461a      	mov	r2, r3
 8005720:	f000 f8ce 	bl	80058c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2150      	movs	r1, #80	@ 0x50
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f927 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005730:	e02c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800573e:	461a      	mov	r2, r3
 8005740:	f000 f8ed 	bl	800591e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2160      	movs	r1, #96	@ 0x60
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f917 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005750:	e01c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575e:	461a      	mov	r2, r3
 8005760:	f000 f8ae 	bl	80058c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2140      	movs	r1, #64	@ 0x40
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f907 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005770:	e00c      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f000 f8fe 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005782:	e003      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e000      	b.n	800578c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800578a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800579c:	7bfb      	ldrb	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3a      	ldr	r2, [pc, #232]	@ (80058a4 <TIM_Base_SetConfig+0xfc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00f      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d00b      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a37      	ldr	r2, [pc, #220]	@ (80058a8 <TIM_Base_SetConfig+0x100>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a36      	ldr	r2, [pc, #216]	@ (80058ac <TIM_Base_SetConfig+0x104>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0x38>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a35      	ldr	r2, [pc, #212]	@ (80058b0 <TIM_Base_SetConfig+0x108>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d108      	bne.n	80057f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2b      	ldr	r2, [pc, #172]	@ (80058a4 <TIM_Base_SetConfig+0xfc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01b      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005800:	d017      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a28      	ldr	r2, [pc, #160]	@ (80058a8 <TIM_Base_SetConfig+0x100>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a27      	ldr	r2, [pc, #156]	@ (80058ac <TIM_Base_SetConfig+0x104>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a26      	ldr	r2, [pc, #152]	@ (80058b0 <TIM_Base_SetConfig+0x108>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <TIM_Base_SetConfig+0x10c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a24      	ldr	r2, [pc, #144]	@ (80058b8 <TIM_Base_SetConfig+0x110>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a23      	ldr	r2, [pc, #140]	@ (80058bc <TIM_Base_SetConfig+0x114>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a0e      	ldr	r2, [pc, #56]	@ (80058a4 <TIM_Base_SetConfig+0xfc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d103      	bne.n	8005878 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	611a      	str	r2, [r3, #16]
  }
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800

080058c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 030a 	bic.w	r3, r3, #10
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 0210 	bic.w	r2, r3, #16
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800595a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	f043 0307 	orr.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e050      	b.n	8005aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a58:	d013      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a15      	ldr	r2, [pc, #84]	@ (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	@ (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10c      	bne.n	8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40014000 	.word	0x40014000

08005ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e042      	b.n	8005b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fc fac4 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2224      	movs	r2, #36	@ 0x24
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f82b 	bl	8005b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b74:	b0c0      	sub	sp, #256	@ 0x100
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	68d9      	ldr	r1, [r3, #12]
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	ea40 0301 	orr.w	r3, r0, r1
 8005b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bc8:	f021 010c 	bic.w	r1, r1, #12
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	6999      	ldr	r1, [r3, #24]
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	ea40 0301 	orr.w	r3, r0, r1
 8005bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8005e3c <UART_SetConfig+0x2cc>)
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d005      	beq.n	8005c10 <UART_SetConfig+0xa0>
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e40 <UART_SetConfig+0x2d0>)
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d104      	bne.n	8005c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7fe ffe0 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8005c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c18:	e003      	b.n	8005c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c1a:	f7fe ffc7 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8005c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2c:	f040 810c 	bne.w	8005e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	1891      	adds	r1, r2, r2
 8005c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c4a:	415b      	adcs	r3, r3
 8005c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c52:	4621      	mov	r1, r4
 8005c54:	eb12 0801 	adds.w	r8, r2, r1
 8005c58:	4629      	mov	r1, r5
 8005c5a:	eb43 0901 	adc.w	r9, r3, r1
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c72:	4690      	mov	r8, r2
 8005c74:	4699      	mov	r9, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	eb18 0303 	adds.w	r3, r8, r3
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c80:	462b      	mov	r3, r5
 8005c82:	eb49 0303 	adc.w	r3, r9, r3
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	18db      	adds	r3, r3, r3
 8005ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	eb42 0303 	adc.w	r3, r2, r3
 8005caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cb4:	f7fa fa8e 	bl	80001d4 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4b61      	ldr	r3, [pc, #388]	@ (8005e44 <UART_SetConfig+0x2d4>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	011c      	lsls	r4, r3, #4
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ce8:	4641      	mov	r1, r8
 8005cea:	eb12 0a01 	adds.w	sl, r2, r1
 8005cee:	4649      	mov	r1, r9
 8005cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d08:	4692      	mov	sl, r2
 8005d0a:	469b      	mov	fp, r3
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d16:	464b      	mov	r3, r9
 8005d18:	eb4b 0303 	adc.w	r3, fp, r3
 8005d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d34:	460b      	mov	r3, r1
 8005d36:	18db      	adds	r3, r3, r3
 8005d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d4a:	f7fa fa43 	bl	80001d4 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	4b3b      	ldr	r3, [pc, #236]	@ (8005e44 <UART_SetConfig+0x2d4>)
 8005d56:	fba3 2301 	umull	r2, r3, r3, r1
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2264      	movs	r2, #100	@ 0x64
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	1acb      	subs	r3, r1, r3
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d6a:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <UART_SetConfig+0x2d4>)
 8005d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d78:	441c      	add	r4, r3
 8005d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	1891      	adds	r1, r2, r2
 8005d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d94:	415b      	adcs	r3, r3
 8005d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	1851      	adds	r1, r2, r1
 8005da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005da2:	4649      	mov	r1, r9
 8005da4:	414b      	adcs	r3, r1
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005db4:	4659      	mov	r1, fp
 8005db6:	00cb      	lsls	r3, r1, #3
 8005db8:	4651      	mov	r1, sl
 8005dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	00ca      	lsls	r2, r1, #3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4642      	mov	r2, r8
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	eb42 0303 	adc.w	r3, r2, r3
 8005dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005df0:	460b      	mov	r3, r1
 8005df2:	18db      	adds	r3, r3, r3
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df6:	4613      	mov	r3, r2
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e06:	f7fa f9e5 	bl	80001d4 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <UART_SetConfig+0x2d4>)
 8005e10:	fba3 1302 	umull	r1, r3, r3, r2
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	2164      	movs	r1, #100	@ 0x64
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	3332      	adds	r3, #50	@ 0x32
 8005e22:	4a08      	ldr	r2, [pc, #32]	@ (8005e44 <UART_SetConfig+0x2d4>)
 8005e24:	fba2 2303 	umull	r2, r3, r2, r3
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	f003 0207 	and.w	r2, r3, #7
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4422      	add	r2, r4
 8005e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e38:	e106      	b.n	8006048 <UART_SetConfig+0x4d8>
 8005e3a:	bf00      	nop
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	40011400 	.word	0x40011400
 8005e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	1891      	adds	r1, r2, r2
 8005e60:	6239      	str	r1, [r7, #32]
 8005e62:	415b      	adcs	r3, r3
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	1854      	adds	r4, r2, r1
 8005e6e:	4649      	mov	r1, r9
 8005e70:	eb43 0501 	adc.w	r5, r3, r1
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	00eb      	lsls	r3, r5, #3
 8005e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e82:	00e2      	lsls	r2, r4, #3
 8005e84:	4614      	mov	r4, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	4643      	mov	r3, r8
 8005e8a:	18e3      	adds	r3, r4, r3
 8005e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e90:	464b      	mov	r3, r9
 8005e92:	eb45 0303 	adc.w	r3, r5, r3
 8005e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	008b      	lsls	r3, r1, #2
 8005eba:	4621      	mov	r1, r4
 8005ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	008a      	lsls	r2, r1, #2
 8005ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ec8:	f7fa f984 	bl	80001d4 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4b60      	ldr	r3, [pc, #384]	@ (8006054 <UART_SetConfig+0x4e4>)
 8005ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	011c      	lsls	r4, r3, #4
 8005eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	61b9      	str	r1, [r7, #24]
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	6139      	str	r1, [r7, #16]
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f30:	464b      	mov	r3, r9
 8005f32:	460a      	mov	r2, r1
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f54:	4649      	mov	r1, r9
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	4641      	mov	r1, r8
 8005f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5e:	4641      	mov	r1, r8
 8005f60:	008a      	lsls	r2, r1, #2
 8005f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f66:	f7fa f935 	bl	80001d4 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4b38      	ldr	r3, [pc, #224]	@ (8006054 <UART_SetConfig+0x4e4>)
 8005f72:	fba3 2301 	umull	r2, r3, r3, r1
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	2264      	movs	r2, #100	@ 0x64
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	1acb      	subs	r3, r1, r3
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	3332      	adds	r3, #50	@ 0x32
 8005f84:	4a33      	ldr	r2, [pc, #204]	@ (8006054 <UART_SetConfig+0x4e4>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f90:	441c      	add	r4, r3
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	1851      	adds	r1, r2, r1
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	414b      	adcs	r3, r1
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fc8:	4659      	mov	r1, fp
 8005fca:	00cb      	lsls	r3, r1, #3
 8005fcc:	4651      	mov	r1, sl
 8005fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd2:	4651      	mov	r1, sl
 8005fd4:	00ca      	lsls	r2, r1, #3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4642      	mov	r2, r8
 8005fde:	189b      	adds	r3, r3, r2
 8005fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	460a      	mov	r2, r1
 8005fe6:	eb42 0303 	adc.w	r3, r2, r3
 8005fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006004:	4649      	mov	r1, r9
 8006006:	008b      	lsls	r3, r1, #2
 8006008:	4641      	mov	r1, r8
 800600a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600e:	4641      	mov	r1, r8
 8006010:	008a      	lsls	r2, r1, #2
 8006012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006016:	f7fa f8dd 	bl	80001d4 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <UART_SetConfig+0x4e4>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	@ 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	3332      	adds	r3, #50	@ 0x32
 8006032:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <UART_SetConfig+0x4e4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4422      	add	r2, r4
 8006046:	609a      	str	r2, [r3, #8]
}
 8006048:	bf00      	nop
 800604a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800604e:	46bd      	mov	sp, r7
 8006050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006054:	51eb851f 	.word	0x51eb851f

08006058 <memset>:
 8006058:	4402      	add	r2, r0
 800605a:	4603      	mov	r3, r0
 800605c:	4293      	cmp	r3, r2
 800605e:	d100      	bne.n	8006062 <memset+0xa>
 8006060:	4770      	bx	lr
 8006062:	f803 1b01 	strb.w	r1, [r3], #1
 8006066:	e7f9      	b.n	800605c <memset+0x4>

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	@ (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	@ (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	@ (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	@ (80060ac <__libc_init_array+0x44>)
 800607c:	f000 f818 	bl	80060b0 <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	080561d0 	.word	0x080561d0
 80060a4:	080561d0 	.word	0x080561d0
 80060a8:	080561d0 	.word	0x080561d0
 80060ac:	080561d4 	.word	0x080561d4

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
