
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e08  08005e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e10  08005e10  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e14  08005e14  00006e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005e18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000014  08005e2c  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005e2c  000072f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012664  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c49  00000000  00000000  000196a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db7  00000000  00000000  0001d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001982a  00000000  00000000  0001e237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001526e  00000000  00000000  00037a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd21  00000000  00000000  0004cccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e99f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004848  00000000  00000000  000e9a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000450  00000000  00000000  000ee27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000ee6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005dd8 	.word	0x08005dd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08005dd8 	.word	0x08005dd8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
    MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
    MCP2515_Reset();
 8000506:	f000 fe31 	bl	800116c <MCP2515_Reset>
    HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 fa1a 	bl	8001944 <HAL_Delay>
    RXF5 RXF5reg;
    RXM0 RXM0reg;
    RXM1 RXM1reg;

    /* Initialize Rx Mask values */
    RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	723b      	strb	r3, [r7, #8]
    RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	727b      	strb	r3, [r7, #9]
    RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	72bb      	strb	r3, [r7, #10]
    RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	713b      	strb	r3, [r7, #4]
    RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
    RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	71bb      	strb	r3, [r7, #6]
    RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]

    /* Initialize Rx Filter values */
    RXF0reg.RXF0SIDH = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3020 	strb.w	r3, [r7, #32]
    RXF0reg.RXF0SIDL = 0x00;      // Standard Filter
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    RXF0reg.RXF0EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    RXF0reg.RXF0EID0 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    RXF1reg.RXF1SIDH = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	773b      	strb	r3, [r7, #28]
    RXF1reg.RXF1SIDL = 0x08;      // Extended Filter
 800054c:	2308      	movs	r3, #8
 800054e:	777b      	strb	r3, [r7, #29]
    RXF1reg.RXF1EID8 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	77bb      	strb	r3, [r7, #30]
    RXF1reg.RXF1EID0 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	77fb      	strb	r3, [r7, #31]

    RXF2reg.RXF2SIDH = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	763b      	strb	r3, [r7, #24]
    RXF2reg.RXF2SIDL = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
    RXF2reg.RXF2EID8 = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	76bb      	strb	r3, [r7, #26]
    RXF2reg.RXF2EID0 = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	76fb      	strb	r3, [r7, #27]

    RXF3reg.RXF3SIDH = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	753b      	strb	r3, [r7, #20]
    RXF3reg.RXF3SIDL = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
    RXF3reg.RXF3EID8 = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
    RXF3reg.RXF3EID0 = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]

    RXF4reg.RXF4SIDH = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	743b      	strb	r3, [r7, #16]
    RXF4reg.RXF4SIDL = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
    RXF4reg.RXF4EID8 = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
    RXF4reg.RXF4EID0 = 0x00;
 8000584:	2300      	movs	r3, #0
 8000586:	74fb      	strb	r3, [r7, #19]

    RXF5reg.RXF5SIDH = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	733b      	strb	r3, [r7, #12]
    RXF5reg.RXF5SIDL = 0x08;
 800058c:	2308      	movs	r3, #8
 800058e:	737b      	strb	r3, [r7, #13]
    RXF5reg.RXF5EID8 = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
    RXF5reg.RXF5EID0 = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]

    /* Initialize MCP2515, check SPI */
    if(!MCP2515_Initialize())
 8000598:	f000 fd78 	bl	800108c <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
    {
        return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e065      	b.n	8000678 <CANSPI_Initialize+0x178>
    }

    /* Change mode to configuration mode */
    if(!MCP2515_SetConfigMode())
 80005ac:	f000 fd90 	bl	80010d0 <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
    {
        return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e05b      	b.n	8000678 <CANSPI_Initialize+0x178>
    }

    /* Configure filter & mask */
    MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f000 fe35 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f000 fe2f 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fe28 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f000 fe21 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f000 fe1a 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f000 fe13 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f000 fe0c 	bl	8001238 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f000 fe05 	bl	8001238 <MCP2515_WriteByteSequence>

    /* Just for debugging, read back one filter register */
    uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f000 fdb4 	bl	800119c <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    (void)rxf4sidh; // Mark as used to avoid "unused variable" warning

    /* Accept All (Standard + Extended) */
    MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04); //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f000 fdd3 	bl	80011e8 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01); //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f000 fdcf 	bl	80011e8 <MCP2515_WriteByte>
     * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
     * 16tq = 2us = 500kbps
     */

    /* 00(SJW 1tq) 000000 */
    MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f000 fdcb 	bl	80011e8 <MCP2515_WriteByte>

    /* 1 1 100(5tq) 101(6tq) => 0xE5 */
    MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f000 fdc7 	bl	80011e8 <MCP2515_WriteByte>

    /* 1 0 000 011(4tq) => 0x83 */
    MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f000 fdc3 	bl	80011e8 <MCP2515_WriteByte>

    /* Normal mode */
    if(!MCP2515_SetNormalMode())
 8000662:	f000 fd64 	bl	800112e <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
        return false;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <CANSPI_Initialize+0x178>

    return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000684:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	2400      	movs	r4, #0
 8000688:	9405      	str	r4, [sp, #20]
 800068a:	9406      	str	r4, [sp, #24]
 800068c:	9407      	str	r4, [sp, #28]
 800068e:	9408      	str	r4, [sp, #32]
 8000690:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	9400      	str	r4, [sp, #0]
 8000694:	4b67      	ldr	r3, [pc, #412]	@ (8000834 <MX_GPIO_Init+0x1b4>)
 8000696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000698:	f042 0204 	orr.w	r2, r2, #4
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
 800069e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006a0:	f002 0204 	and.w	r2, r2, #4
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a8:	9401      	str	r4, [sp, #4]
 80006aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80006b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006b4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	9402      	str	r4, [sp, #8]
 80006be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c0:	f042 0201 	orr.w	r2, r2, #1
 80006c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80006c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c8:	f002 0201 	and.w	r2, r2, #1
 80006cc:	9202      	str	r2, [sp, #8]
 80006ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	9403      	str	r4, [sp, #12]
 80006d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006d4:	f042 0202 	orr.w	r2, r2, #2
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80006da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006dc:	f002 0202 	and.w	r2, r2, #2
 80006e0:	9203      	str	r2, [sp, #12]
 80006e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	9404      	str	r4, [sp, #16]
 80006e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006e8:	f042 0208 	orr.w	r2, r2, #8
 80006ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80006ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	9304      	str	r3, [sp, #16]
 80006f6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 80006f8:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8000840 <MX_GPIO_Init+0x1c0>
 80006fc:	4622      	mov	r2, r4
 80006fe:	f240 3181 	movw	r1, #897	@ 0x381
 8000702:	4640      	mov	r0, r8
 8000704:	f002 fc54 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	210e      	movs	r1, #14
 800070c:	4640      	mov	r0, r8
 800070e:	f002 fc4f 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000712:	4f49      	ldr	r7, [pc, #292]	@ (8000838 <MX_GPIO_Init+0x1b8>)
 8000714:	4622      	mov	r2, r4
 8000716:	2120      	movs	r1, #32
 8000718:	4638      	mov	r0, r7
 800071a:	f002 fc49 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800071e:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 8000844 <MX_GPIO_Init+0x1c4>
 8000722:	2201      	movs	r2, #1
 8000724:	2102      	movs	r1, #2
 8000726:	4648      	mov	r0, r9
 8000728:	f002 fc42 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000732:	4638      	mov	r0, r7
 8000734:	f002 fc3c 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000738:	4622      	mov	r2, r4
 800073a:	2170      	movs	r1, #112	@ 0x70
 800073c:	4648      	mov	r0, r9
 800073e:	f002 fc37 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000742:	2501      	movs	r5, #1
 8000744:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800074c:	a905      	add	r1, sp, #20
 800074e:	4640      	mov	r0, r8
 8000750:	f002 faaa 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000754:	2602      	movs	r6, #2
 8000756:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	f04f 0a03 	mov.w	sl, #3
 8000760:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000764:	a905      	add	r1, sp, #20
 8000766:	4640      	mov	r0, r8
 8000768:	f002 fa9e 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 800076c:	f04f 0b0c 	mov.w	fp, #12
 8000770:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077a:	a905      	add	r1, sp, #20
 800077c:	4640      	mov	r0, r8
 800077e:	f002 fa93 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000782:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078e:	2307      	movs	r3, #7
 8000790:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	a905      	add	r1, sp, #20
 8000794:	4638      	mov	r0, r7
 8000796:	f002 fa87 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800079a:	2320      	movs	r3, #32
 800079c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007a4:	a905      	add	r1, sp, #20
 80007a6:	4638      	mov	r0, r7
 80007a8:	f002 fa7e 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ac:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	a905      	add	r1, sp, #20
 80007b6:	4648      	mov	r0, r9
 80007b8:	f002 fa76 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTD_BTN_Pin */
  GPIO_InitStruct.Pin = RTD_BTN_Pin;
 80007bc:	f04f 0b04 	mov.w	fp, #4
 80007c0:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(RTD_BTN_GPIO_Port, &GPIO_InitStruct);
 80007c8:	a905      	add	r1, sp, #20
 80007ca:	4648      	mov	r0, r9
 80007cc:	f002 fa6c 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCHG_RLY_CTRL_Pin AIR_P_CTRL_Pin AIR_N_CTRL_Pin */
  GPIO_InitStruct.Pin = PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin;
 80007d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80007d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d8:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	a905      	add	r1, sp, #20
 80007de:	4640      	mov	r0, r8
 80007e0:	f002 fa62 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_BTN_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_BTN_Pin;
 80007e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PRECHARGE_BTN_GPIO_Port, &GPIO_InitStruct);
 80007ee:	a905      	add	r1, sp, #20
 80007f0:	4638      	mov	r0, r7
 80007f2:	f002 fa59 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 80007f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007fa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000804:	a905      	add	r1, sp, #20
 8000806:	4638      	mov	r0, r7
 8000808:	f002 fa4e 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 800080c:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000812:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000814:	a905      	add	r1, sp, #20
 8000816:	4809      	ldr	r0, [pc, #36]	@ (800083c <MX_GPIO_Init+0x1bc>)
 8000818:	f002 fa46 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800081c:	2370      	movs	r3, #112	@ 0x70
 800081e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000822:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	a905      	add	r1, sp, #20
 8000828:	4648      	mov	r0, r9
 800082a:	f002 fa3d 	bl	8002ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	b00b      	add	sp, #44	@ 0x2c
 8000830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40020800 	.word	0x40020800
 8000844:	40020400 	.word	0x40020400

08000848 <MX_DMA_Init>:
{
 8000848:	b510      	push	{r4, lr}
 800084a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084c:	2400      	movs	r4, #0
 800084e:	9400      	str	r4, [sp, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_DMA_Init+0x54>)
 8000852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000854:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000858:	631a      	str	r2, [r3, #48]	@ 0x30
 800085a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800085c:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000860:	9200      	str	r2, [sp, #0]
 8000862:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000864:	9401      	str	r4, [sp, #4]
 8000866:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000868:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800086c:	631a      	str	r2, [r3, #48]	@ 0x30
 800086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000878:	4622      	mov	r2, r4
 800087a:	4621      	mov	r1, r4
 800087c:	200f      	movs	r0, #15
 800087e:	f001 fe6c 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000882:	200f      	movs	r0, #15
 8000884:	f001 fe85 	bl	8002592 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000888:	4622      	mov	r2, r4
 800088a:	4621      	mov	r1, r4
 800088c:	2038      	movs	r0, #56	@ 0x38
 800088e:	f001 fe64 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f001 fe7d 	bl	8002592 <HAL_NVIC_EnableIRQ>
}
 8000898:	b002      	add	sp, #8
 800089a:	bd10      	pop	{r4, pc}
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_ADC_ConvCpltCallback>:
	apps1Value = ADC_Reads[APPS1_RANK-1];
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <HAL_ADC_ConvCpltCallback+0x94>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4924      	ldr	r1, [pc, #144]	@ (8000938 <HAL_ADC_ConvCpltCallback+0x98>)
 80008a6:	600a      	str	r2, [r1, #0]
	apps2Value = ADC_Reads[APPS2_RANK-1];
 80008a8:	6858      	ldr	r0, [r3, #4]
 80008aa:	4a24      	ldr	r2, [pc, #144]	@ (800093c <HAL_ADC_ConvCpltCallback+0x9c>)
 80008ac:	6010      	str	r0, [r2, #0]
	bseValue   = ADC_Reads[BSE_RANK-1];
 80008ae:	6898      	ldr	r0, [r3, #8]
 80008b0:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <HAL_ADC_ConvCpltCallback+0xa0>)
 80008b2:	6018      	str	r0, [r3, #0]
	apps1Filt += 0.25f * ((float)apps1Value - apps1Filt);
 80008b4:	edd1 7a00 	vldr	s15, [r1]
 80008b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008bc:	4821      	ldr	r0, [pc, #132]	@ (8000944 <HAL_ADC_ConvCpltCallback+0xa4>)
 80008be:	edd0 6a00 	vldr	s13, [r0]
 80008c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80008c6:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 80008ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80008ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80008d2:	edc0 6a00 	vstr	s13, [r0]
	apps2Filt += 0.25f * ((float)apps2Value - apps2Filt);
 80008d6:	edd2 7a00 	vldr	s15, [r2]
 80008da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008de:	481a      	ldr	r0, [pc, #104]	@ (8000948 <HAL_ADC_ConvCpltCallback+0xa8>)
 80008e0:	ed90 7a00 	vldr	s14, [r0]
 80008e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80008ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f0:	ed80 7a00 	vstr	s14, [r0]
	bseFilt   += 0.25f * ((float)bseValue   - bseFilt);
 80008f4:	ed93 6a00 	vldr	s12, [r3]
 80008f8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <HAL_ADC_ConvCpltCallback+0xac>)
 80008fe:	edd0 7a00 	vldr	s15, [r0]
 8000902:	ee36 6a67 	vsub.f32	s12, s12, s15
 8000906:	ee26 6a25 	vmul.f32	s12, s12, s11
 800090a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800090e:	edc0 7a00 	vstr	s15, [r0]
	apps1Value = (uint32_t)apps1Filt;
 8000912:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8000916:	edc1 6a00 	vstr	s13, [r1]
	apps2Value = (uint32_t)apps2Filt;
 800091a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800091e:	ed82 7a00 	vstr	s14, [r2]
	bseValue   = (uint32_t)bseFilt;
 8000922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000926:	edc3 7a00 	vstr	s15, [r3]
	dma_read_complete = 1;
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <HAL_ADC_ConvCpltCallback+0xb0>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	2000007c 	.word	0x2000007c
 8000938:	2000009c 	.word	0x2000009c
 800093c:	20000098 	.word	0x20000098
 8000940:	20000094 	.word	0x20000094
 8000944:	2000006c 	.word	0x2000006c
 8000948:	20000068 	.word	0x20000068
 800094c:	20000064 	.word	0x20000064
 8000950:	20000002 	.word	0x20000002

08000954 <calculateTorqueRequest>:
	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 8000954:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <calculateTorqueRequest+0xd4>)
 8000956:	ed93 7a00 	vldr	s14, [r3]
 800095a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800095e:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8000a2c <calculateTorqueRequest+0xd8>
 8000962:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000966:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000a30 <calculateTorqueRequest+0xdc>
 800096a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 800096e:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <calculateTorqueRequest+0xe0>)
 8000970:	ed93 7a00 	vldr	s14, [r3]
 8000974:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000978:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000a38 <calculateTorqueRequest+0xe4>
 800097c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000980:	ed9f 6a2e 	vldr	s12, [pc, #184]	@ 8000a3c <calculateTorqueRequest+0xe8>
 8000984:	eec7 6a06 	vdiv.f32	s13, s14, s12
	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 8000988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800098c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000990:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (!apps_plausible && !cross_check_plausible) {
 8000994:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <calculateTorqueRequest+0xec>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b92b      	cbnz	r3, 80009a6 <calculateTorqueRequest+0x52>
 800099a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a44 <calculateTorqueRequest+0xf0>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b913      	cbnz	r3, 80009a6 <calculateTorqueRequest+0x52>
		requestedTorque = 0;
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <calculateTorqueRequest+0xf4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		if(appsValue >= 0){ //apps travel is in range for forward torque
 80009a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ae:	db14      	blt.n	80009da <calculateTorqueRequest+0x86>
			requestedTorque = ((float)(MAX_TORQUE-MIN_TORQUE)) * appsValue + MIN_TORQUE;
 80009b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000a4c <calculateTorqueRequest+0xf8>
 80009b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009c0:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <calculateTorqueRequest+0xf4>)
 80009c2:	edc3 7a00 	vstr	s15, [r3]
			if (requestedTorque >= MAX_TORQUE) {
 80009c6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000a50 <calculateTorqueRequest+0xfc>
 80009ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	db28      	blt.n	8000a26 <calculateTorqueRequest+0xd2>
				requestedTorque = MAX_TORQUE;
 80009d4:	ed83 7a00 	vstr	s14, [r3]
 80009d8:	4770      	bx	lr
			if (inverter_diagnostics.carSpeed < 5.0f) {
 80009da:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <calculateTorqueRequest+0x100>)
 80009dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80009e0:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 80009e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	d503      	bpl.n	80009f6 <calculateTorqueRequest+0xa2>
				requestedTorque = 0;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <calculateTorqueRequest+0xf4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	4770      	bx	lr
				float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <calculateTorqueRequest+0x104>)
 80009f8:	ed93 7a00 	vldr	s14, [r3]
 80009fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000a00:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8000a5c <calculateTorqueRequest+0x108>
 8000a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a08:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000a60 <calculateTorqueRequest+0x10c>
 8000a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000a10:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a18:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000a64 <calculateTorqueRequest+0x110>
 8000a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <calculateTorqueRequest+0xf4>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]
}
 8000a26:	4770      	bx	lr
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	439c0000 	.word	0x439c0000
 8000a30:	452f4000 	.word	0x452f4000
 8000a34:	20000098 	.word	0x20000098
 8000a38:	43ba0000 	.word	0x43ba0000
 8000a3c:	45512000 	.word	0x45512000
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	43070000 	.word	0x43070000
 8000a50:	42fa0000 	.word	0x42fa0000
 8000a54:	20000058 	.word	0x20000058
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	43b98000 	.word	0x43b98000
 8000a60:	45682000 	.word	0x45682000
 8000a64:	00000000 	.word	0x00000000

08000a68 <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000a68:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <checkAPPSPlausibility+0xa0>)
 8000a6c:	ed93 7a00 	vldr	s14, [r3]
 8000a70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000a74:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8000b0c <checkAPPSPlausibility+0xa4>
 8000a78:	ee37 7a67 	vsub.f32	s14, s14, s15
							/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000a7c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000b10 <checkAPPSPlausibility+0xa8>
 8000a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a84:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8000b14 <checkAPPSPlausibility+0xac>
 8000a88:	ee67 7a86 	vmul.f32	s15, s15, s12
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000a8c:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <checkAPPSPlausibility+0xb0>)
 8000a8e:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <checkAPPSPlausibility+0xb4>)
 8000a94:	ed93 7a00 	vldr	s14, [r3]
 8000a98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000a9c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000b20 <checkAPPSPlausibility+0xb8>
 8000aa0:	ee37 7a66 	vsub.f32	s14, s14, s13
							/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000aa4:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 8000b24 <checkAPPSPlausibility+0xbc>
 8000aa8:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8000aac:	ee26 7a86 	vmul.f32	s14, s13, s12
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <checkAPPSPlausibility+0xc0>)
 8000ab2:	ed83 7a00 	vstr	s14, [r3]
	float paininmyass = fabsf(apps1_as_percent - apps2_as_percent);
 8000ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
	if (apps_plausible && fabsf(apps1_as_percent - apps2_as_percent)
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <checkAPPSPlausibility+0xc4>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	b143      	cbz	r3, 8000ad2 <checkAPPSPlausibility+0x6a>
 8000ac0:	eef0 7ae7 	vabs.f32	s15, s15
 8000ac4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad0:	dc04      	bgt.n	8000adc <checkAPPSPlausibility+0x74>
	else if (!apps_plausible && (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000ad2:	b173      	cbz	r3, 8000af2 <checkAPPSPlausibility+0x8a>
		apps_plausible = 1;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <checkAPPSPlausibility+0xc4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	801a      	strh	r2, [r3, #0]
}
 8000ada:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8000adc:	f000 ff26 	bl	800192c <HAL_GetTick>
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <checkAPPSPlausibility+0xc8>)
 8000ae2:	6018      	str	r0, [r3, #0]
		apps_plausible = 0;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <checkAPPSPlausibility+0xc4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <checkAPPSPlausibility+0xcc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	e7f3      	b.n	8000ada <checkAPPSPlausibility+0x72>
	else if (!apps_plausible && (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000af2:	f000 ff1b 	bl	800192c <HAL_GetTick>
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <checkAPPSPlausibility+0xc8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1ac0      	subs	r0, r0, r3
 8000afc:	286d      	cmp	r0, #109	@ 0x6d
 8000afe:	d8e9      	bhi.n	8000ad4 <checkAPPSPlausibility+0x6c>
		requestedTorque = 0;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <checkAPPSPlausibility+0xcc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e7e8      	b.n	8000ada <checkAPPSPlausibility+0x72>
 8000b08:	2000009c 	.word	0x2000009c
 8000b0c:	439c0000 	.word	0x439c0000
 8000b10:	452f4000 	.word	0x452f4000
 8000b14:	42c80000 	.word	0x42c80000
 8000b18:	20000078 	.word	0x20000078
 8000b1c:	20000098 	.word	0x20000098
 8000b20:	43ba0000 	.word	0x43ba0000
 8000b24:	45512000 	.word	0x45512000
 8000b28:	20000074 	.word	0x20000074
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	20000090 	.word	0x20000090

08000b38 <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000b38:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf4 <checkCrossCheck+0xbc>)
 8000b3a:	edd3 7a00 	vldr	s15, [r3]
 8000b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b42:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000bf8 <checkCrossCheck+0xc0>
 8000b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
							/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000b4a:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000bfc <checkCrossCheck+0xc4>
 8000b4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b52:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8000c00 <checkCrossCheck+0xc8>
 8000b56:	ee67 7a06 	vmul.f32	s15, s14, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <checkCrossCheck+0xcc>)
 8000b5c:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000b60:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <checkCrossCheck+0xd0>)
 8000b62:	ed93 7a00 	vldr	s14, [r3]
 8000b66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000b6a:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8000c0c <checkCrossCheck+0xd4>
 8000b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
							/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000b72:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8000c10 <checkCrossCheck+0xd8>
 8000b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000b7a:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <checkCrossCheck+0xdc>)
 8000b80:	ed93 7a00 	vldr	s14, [r3]
 8000b84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000b88:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000c18 <checkCrossCheck+0xe0>
 8000b8c:	ee37 7a66 	vsub.f32	s14, s14, s13
							/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000b90:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8000c1c <checkCrossCheck+0xe4>
 8000b94:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000b98:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ba0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT &&
 8000ba8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	dd0b      	ble.n	8000bce <checkCrossCheck+0x96>
			bseValue > BRAKE_ACTIVATED_ADC_VAL)
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <checkCrossCheck+0xbc>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT &&
 8000bba:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000bbe:	d906      	bls.n	8000bce <checkCrossCheck+0x96>
		cross_check_plausible = 0;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <checkCrossCheck+0xe8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <checkCrossCheck+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	4770      	bx	lr
	else if (!cross_check_plausible &&
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <checkCrossCheck+0xe8>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b953      	cbnz	r3, 8000bea <checkCrossCheck+0xb2>
 8000bd4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be0:	dd03      	ble.n	8000bea <checkCrossCheck+0xb2>
		requestedTorque = 0;
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <checkCrossCheck+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	4770      	bx	lr
		cross_check_plausible = 1;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <checkCrossCheck+0xe8>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	801a      	strh	r2, [r3, #0]
}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	43b98000 	.word	0x43b98000
 8000bfc:	45682000 	.word	0x45682000
 8000c00:	42c80000 	.word	0x42c80000
 8000c04:	20000070 	.word	0x20000070
 8000c08:	2000009c 	.word	0x2000009c
 8000c0c:	439c0000 	.word	0x439c0000
 8000c10:	452f4000 	.word	0x452f4000
 8000c14:	20000098 	.word	0x20000098
 8000c18:	43ba0000 	.word	0x43ba0000
 8000c1c:	45512000 	.word	0x45512000
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000090 	.word	0x20000090

08000c28 <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8000c28:	6802      	ldr	r2, [r0, #0]
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_I2S_TxCpltCallback+0x50>)
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d000      	beq.n	8000c32 <HAL_I2S_TxCpltCallback+0xa>
 8000c30:	4770      	bx	lr
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_I2S_TxCpltCallback+0x54>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1fa      	bne.n	8000c30 <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_I2S_TxCpltCallback+0x58>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <HAL_I2S_TxCpltCallback+0x5c>)
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d214      	bcs.n	8000c70 <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000c46:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 8000c48:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS)
 8000c4a:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000c4e:	428a      	cmp	r2, r1
 8000c50:	d80b      	bhi.n	8000c6a <HAL_I2S_TxCpltCallback+0x42>
 8000c52:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 8000c54:	490c      	ldr	r1, [pc, #48]	@ (8000c88 <HAL_I2S_TxCpltCallback+0x60>)
 8000c56:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 8000c58:	18d4      	adds	r4, r2, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <HAL_I2S_TxCpltCallback+0x58>)
 8000c5c:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)chunkPtr, thisChunk);
 8000c5e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000c62:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <HAL_I2S_TxCpltCallback+0x64>)
 8000c64:	f002 fafe 	bl	8003264 <HAL_I2S_Transmit_DMA>
}
 8000c68:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS)
 8000c6a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000c6e:	e7f1      	b.n	8000c54 <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 8000c70:	4b02      	ldr	r3, [pc, #8]	@ (8000c7c <HAL_I2S_TxCpltCallback+0x54>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	4770      	bx	lr
 8000c78:	40003800 	.word	0x40003800
 8000c7c:	20000048 	.word	0x20000048
 8000c80:	20000054 	.word	0x20000054
 8000c84:	2000004c 	.word	0x2000004c
 8000c88:	20000050 	.word	0x20000050
 8000c8c:	200001fc 	.word	0x200001fc

08000c90 <calibratePedalsMain>:
void calibratePedalsMain(void) {
 8000c90:	b508      	push	{r3, lr}
	APPS1Bounds.min = 4096;
 8000c92:	492e      	ldr	r1, [pc, #184]	@ (8000d4c <calibratePedalsMain+0xbc>)
 8000c94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c98:	600a      	str	r2, [r1, #0]
	APPS1Bounds.max = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	604b      	str	r3, [r1, #4]
	APPS2Bounds.min = 4096;
 8000c9e:	492c      	ldr	r1, [pc, #176]	@ (8000d50 <calibratePedalsMain+0xc0>)
 8000ca0:	600a      	str	r2, [r1, #0]
	APPS2Bounds.max = 0;
 8000ca2:	604b      	str	r3, [r1, #4]
	BSEBounds.min = 4096;
 8000ca4:	492b      	ldr	r1, [pc, #172]	@ (8000d54 <calibratePedalsMain+0xc4>)
 8000ca6:	600a      	str	r2, [r1, #0]
	BSEBounds.max = 0;
 8000ca8:	604b      	str	r3, [r1, #4]
 8000caa:	e025      	b.n	8000cf8 <calibratePedalsMain+0x68>
			else if (apps1Value < APPS1Bounds.min) APPS1Bounds.min = apps1Value;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <calibratePedalsMain+0xbc>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <calibratePedalsMain+0xc8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d934      	bls.n	8000d22 <calibratePedalsMain+0x92>
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <calibratePedalsMain+0xc8>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <calibratePedalsMain+0xbc>)
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e02f      	b.n	8000d22 <calibratePedalsMain+0x92>
			else if (apps2Value < APPS2Bounds.min) APPS2Bounds.min = apps2Value;
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <calibratePedalsMain+0xc0>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <calibratePedalsMain+0xcc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d933      	bls.n	8000d36 <calibratePedalsMain+0xa6>
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <calibratePedalsMain+0xcc>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <calibratePedalsMain+0xc0>)
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e02e      	b.n	8000d36 <calibratePedalsMain+0xa6>
			else if (bseValue < BSEBounds.min) BSEBounds.min = bseValue;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <calibratePedalsMain+0xc4>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <calibratePedalsMain+0xd0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d903      	bls.n	8000cec <calibratePedalsMain+0x5c>
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <calibratePedalsMain+0xd0>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <calibratePedalsMain+0xc4>)
 8000cea:	601a      	str	r2, [r3, #0]
			calculateTorqueRequest();
 8000cec:	f7ff fe32 	bl	8000954 <calculateTorqueRequest>
			checkAPPSPlausibility();
 8000cf0:	f7ff feba 	bl	8000a68 <checkAPPSPlausibility>
			checkCrossCheck();
 8000cf4:	f7ff ff20 	bl	8000b38 <checkCrossCheck>
		if(dma_read_complete){
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <calibratePedalsMain+0xd4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0fb      	beq.n	8000cf8 <calibratePedalsMain+0x68>
			dma_read_complete = 0;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <calibratePedalsMain+0xd4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			millis_since_dma_read = HAL_GetTick();
 8000d06:	f000 fe11 	bl	800192c <HAL_GetTick>
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <calibratePedalsMain+0xd8>)
 8000d0c:	6018      	str	r0, [r3, #0]
			if (apps1Value > APPS1Bounds.max) APPS1Bounds.max = apps1Value;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <calibratePedalsMain+0xbc>)
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <calibratePedalsMain+0xc8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d2c8      	bcs.n	8000cac <calibratePedalsMain+0x1c>
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <calibratePedalsMain+0xc8>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <calibratePedalsMain+0xbc>)
 8000d20:	605a      	str	r2, [r3, #4]
			if (apps2Value > APPS2Bounds.max) APPS2Bounds.max = apps2Value;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <calibratePedalsMain+0xc0>)
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <calibratePedalsMain+0xcc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d2c9      	bcs.n	8000cc2 <calibratePedalsMain+0x32>
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <calibratePedalsMain+0xcc>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <calibratePedalsMain+0xc0>)
 8000d34:	605a      	str	r2, [r3, #4]
			if (bseValue > BSEBounds.max) BSEBounds.max = bseValue;
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <calibratePedalsMain+0xc4>)
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <calibratePedalsMain+0xd0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d2ca      	bcs.n	8000cd8 <calibratePedalsMain+0x48>
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <calibratePedalsMain+0xd0>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <calibratePedalsMain+0xc4>)
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	e7cf      	b.n	8000cec <calibratePedalsMain+0x5c>
 8000d4c:	20000040 	.word	0x20000040
 8000d50:	20000038 	.word	0x20000038
 8000d54:	20000030 	.word	0x20000030
 8000d58:	2000009c 	.word	0x2000009c
 8000d5c:	20000098 	.word	0x20000098
 8000d60:	20000094 	.word	0x20000094
 8000d64:	20000002 	.word	0x20000002
 8000d68:	20000088 	.word	0x20000088

08000d6c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d6e:	e7fe      	b.n	8000d6e <Error_Handler+0x2>

08000d70 <MX_ADC1_Init>:
{
 8000d70:	b500      	push	{lr}
 8000d72:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d74:	2300      	movs	r3, #0
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000d7e:	4823      	ldr	r0, [pc, #140]	@ (8000e0c <MX_ADC1_Init+0x9c>)
 8000d80:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <MX_ADC1_Init+0xa0>)
 8000d82:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d88:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d90:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d92:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d9a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d9c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000da0:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000da4:	2203      	movs	r2, #3
 8000da6:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da8:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dac:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dae:	f000 fded 	bl	800198c <HAL_ADC_Init>
 8000db2:	bb18      	cbnz	r0, 8000dfc <MX_ADC1_Init+0x8c>
  sConfig.Channel = ADC_CHANNEL_14;
 8000db4:	230e      	movs	r3, #14
 8000db6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc0:	4669      	mov	r1, sp
 8000dc2:	4812      	ldr	r0, [pc, #72]	@ (8000e0c <MX_ADC1_Init+0x9c>)
 8000dc4:	f001 f844 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000dc8:	b9d0      	cbnz	r0, 8000e00 <MX_ADC1_Init+0x90>
  sConfig.Channel = ADC_CHANNEL_15;
 8000dca:	230f      	movs	r3, #15
 8000dcc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	4669      	mov	r1, sp
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <MX_ADC1_Init+0x9c>)
 8000dd6:	f001 f83b 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000dda:	b998      	cbnz	r0, 8000e04 <MX_ADC1_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000de0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	4669      	mov	r1, sp
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <MX_ADC1_Init+0x9c>)
 8000de6:	f001 f833 	bl	8001e50 <HAL_ADC_ConfigChannel>
 8000dea:	b968      	cbnz	r0, 8000e08 <MX_ADC1_Init+0x98>
	HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8000dec:	2203      	movs	r2, #3
 8000dee:	4909      	ldr	r1, [pc, #36]	@ (8000e14 <MX_ADC1_Init+0xa4>)
 8000df0:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <MX_ADC1_Init+0x9c>)
 8000df2:	f000 ff1f 	bl	8001c34 <HAL_ADC_Start_DMA>
}
 8000df6:	b005      	add	sp, #20
 8000df8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dfc:	f7ff ffb6 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000e00:	f7ff ffb4 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000e04:	f7ff ffb2 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000e08:	f7ff ffb0 	bl	8000d6c <Error_Handler>
 8000e0c:	200002a4 	.word	0x200002a4
 8000e10:	40012000 	.word	0x40012000
 8000e14:	2000007c 	.word	0x2000007c

08000e18 <MX_SPI3_Init>:
{
 8000e18:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <MX_SPI3_Init+0x38>)
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <MX_SPI3_Init+0x3c>)
 8000e1e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e20:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000e24:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	2300      	movs	r3, #0
 8000e28:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2a:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2e:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e34:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e36:	2210      	movs	r2, #16
 8000e38:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3a:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e40:	230a      	movs	r3, #10
 8000e42:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e44:	f003 fc18 	bl	8004678 <HAL_SPI_Init>
 8000e48:	b900      	cbnz	r0, 8000e4c <MX_SPI3_Init+0x34>
}
 8000e4a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e4c:	f7ff ff8e 	bl	8000d6c <Error_Handler>
 8000e50:	20000144 	.word	0x20000144
 8000e54:	40003c00 	.word	0x40003c00

08000e58 <MX_I2S2_Init>:
{
 8000e58:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <MX_I2S2_Init+0x30>)
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <MX_I2S2_Init+0x34>)
 8000e5e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e64:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e66:	2300      	movs	r3, #0
 8000e68:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e6a:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e6c:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000e6e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000e72:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000e74:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000e76:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e78:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e7a:	f002 f8b3 	bl	8002fe4 <HAL_I2S_Init>
 8000e7e:	b900      	cbnz	r0, 8000e82 <MX_I2S2_Init+0x2a>
}
 8000e80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e82:	f7ff ff73 	bl	8000d6c <Error_Handler>
 8000e86:	bf00      	nop
 8000e88:	200001fc 	.word	0x200001fc
 8000e8c:	40003800 	.word	0x40003800

08000e90 <MX_TIM4_Init>:
{
 8000e90:	b500      	push	{lr}
 8000e92:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	2300      	movs	r3, #0
 8000e96:	9308      	str	r3, [sp, #32]
 8000e98:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9304      	str	r3, [sp, #16]
 8000ea2:	9305      	str	r3, [sp, #20]
 8000ea4:	9306      	str	r3, [sp, #24]
 8000ea6:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8000ea8:	4817      	ldr	r0, [pc, #92]	@ (8000f08 <MX_TIM4_Init+0x78>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <MX_TIM4_Init+0x7c>)
 8000eac:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 3360;
 8000eae:	f44f 6252 	mov.w	r2, #3360	@ 0xd20
 8000eb2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 255;
 8000eb6:	22ff      	movs	r2, #255	@ 0xff
 8000eb8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ebe:	f004 fa65 	bl	800538c <HAL_TIM_PWM_Init>
 8000ec2:	b9d0      	cbnz	r0, 8000efa <MX_TIM4_Init+0x6a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eca:	a908      	add	r1, sp, #32
 8000ecc:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_TIM4_Init+0x78>)
 8000ece:	f004 fee9 	bl	8005ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	b9a0      	cbnz	r0, 8000efe <MX_TIM4_Init+0x6e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed4:	2360      	movs	r3, #96	@ 0x60
 8000ed6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 127;
 8000ed8:	237f      	movs	r3, #127	@ 0x7f
 8000eda:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	a901      	add	r1, sp, #4
 8000ee6:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <MX_TIM4_Init+0x78>)
 8000ee8:	f004 faa0 	bl	800542c <HAL_TIM_PWM_ConfigChannel>
 8000eec:	b948      	cbnz	r0, 8000f02 <MX_TIM4_Init+0x72>
  HAL_TIM_MspPostInit(&htim4);
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <MX_TIM4_Init+0x78>)
 8000ef0:	f000 fbf2 	bl	80016d8 <HAL_TIM_MspPostInit>
}
 8000ef4:	b00b      	add	sp, #44	@ 0x2c
 8000ef6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000efa:	f7ff ff37 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000efe:	f7ff ff35 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000f02:	f7ff ff33 	bl	8000d6c <Error_Handler>
 8000f06:	bf00      	nop
 8000f08:	200000b4 	.word	0x200000b4
 8000f0c:	40000800 	.word	0x40000800

08000f10 <MX_TIM3_Init>:
{
 8000f10:	b500      	push	{lr}
 8000f12:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f14:	2300      	movs	r3, #0
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	9304      	str	r3, [sp, #16]
 8000f1c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8000f22:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <MX_TIM3_Init+0x64>)
 8000f24:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <MX_TIM3_Init+0x68>)
 8000f26:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 8000f28:	2204      	movs	r2, #4
 8000f2a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 10001;
 8000f2e:	f242 7211 	movw	r2, #10001	@ 0x2711
 8000f32:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f38:	f004 f97e 	bl	8005238 <HAL_TIM_Base_Init>
 8000f3c:	b998      	cbnz	r0, 8000f66 <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f44:	a902      	add	r1, sp, #8
 8000f46:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <MX_TIM3_Init+0x64>)
 8000f48:	f004 fb32 	bl	80055b0 <HAL_TIM_ConfigClockSource>
 8000f4c:	b968      	cbnz	r0, 8000f6a <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f56:	4669      	mov	r1, sp
 8000f58:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM3_Init+0x64>)
 8000f5a:	f004 fea3 	bl	8005ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	b930      	cbnz	r0, 8000f6e <MX_TIM3_Init+0x5e>
}
 8000f60:	b007      	add	sp, #28
 8000f62:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f66:	f7ff ff01 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000f6a:	f7ff feff 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8000f6e:	f7ff fefd 	bl	8000d6c <Error_Handler>
 8000f72:	bf00      	nop
 8000f74:	200000fc 	.word	0x200000fc
 8000f78:	40000400 	.word	0x40000400

08000f7c <SystemClock_Config>:
{
 8000f7c:	b500      	push	{lr}
 8000f7e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f80:	2230      	movs	r2, #48	@ 0x30
 8000f82:	2100      	movs	r1, #0
 8000f84:	a808      	add	r0, sp, #32
 8000f86:	f004 fefb 	bl	8005d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9303      	str	r3, [sp, #12]
 8000f8e:	9304      	str	r3, [sp, #16]
 8000f90:	9305      	str	r3, [sp, #20]
 8000f92:	9306      	str	r3, [sp, #24]
 8000f94:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <SystemClock_Config+0x9c>)
 8000f9a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000f9c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000fa0:	6411      	str	r1, [r2, #64]	@ 0x40
 8000fa2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000fa4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	491b      	ldr	r1, [pc, #108]	@ (800101c <SystemClock_Config+0xa0>)
 8000fb0:	680a      	ldr	r2, [r1, #0]
 8000fb2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000fba:	600a      	str	r2, [r1, #0]
 8000fbc:	680a      	ldr	r2, [r1, #0]
 8000fbe:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000fc2:	9202      	str	r2, [sp, #8]
 8000fc4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fca:	2101      	movs	r1, #1
 8000fcc:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fce:	2110      	movs	r1, #16
 8000fd0:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fda:	2354      	movs	r3, #84	@ 0x54
 8000fdc:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fde:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	a808      	add	r0, sp, #32
 8000fe6:	f002 fd95 	bl	8003b14 <HAL_RCC_OscConfig>
 8000fea:	b980      	cbnz	r0, 800100e <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ffc:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001000:	a803      	add	r0, sp, #12
 8001002:	f002 ffff 	bl	8004004 <HAL_RCC_ClockConfig>
 8001006:	b920      	cbnz	r0, 8001012 <SystemClock_Config+0x96>
}
 8001008:	b015      	add	sp, #84	@ 0x54
 800100a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800100e:	f7ff fead 	bl	8000d6c <Error_Handler>
    Error_Handler();
 8001012:	f7ff feab 	bl	8000d6c <Error_Handler>
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <main>:
{
 8001020:	b508      	push	{r3, lr}
  HAL_Init();
 8001022:	f000 fc1d 	bl	8001860 <HAL_Init>
  SystemClock_Config();
 8001026:	f7ff ffa9 	bl	8000f7c <SystemClock_Config>
  MX_GPIO_Init();
 800102a:	f7ff fb29 	bl	8000680 <MX_GPIO_Init>
  MX_DMA_Init();
 800102e:	f7ff fc0b 	bl	8000848 <MX_DMA_Init>
  MX_ADC1_Init();
 8001032:	f7ff fe9d 	bl	8000d70 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001036:	f7ff feef 	bl	8000e18 <MX_SPI3_Init>
  MX_I2S2_Init();
 800103a:	f7ff ff0d 	bl	8000e58 <MX_I2S2_Init>
  MX_TIM4_Init();
 800103e:	f7ff ff27 	bl	8000e90 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001042:	f7ff ff65 	bl	8000f10 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 8001046:	480e      	ldr	r0, [pc, #56]	@ (8001080 <main+0x60>)
 8001048:	f004 f946 	bl	80052d8 <HAL_TIM_Base_Start>
	if (CANSPI_Initialize() != true) {
 800104c:	f7ff fa58 	bl	8000500 <CANSPI_Initialize>
 8001050:	b908      	cbnz	r0, 8001056 <main+0x36>
		Error_Handler();
 8001052:	f7ff fe8b 	bl	8000d6c <Error_Handler>
	inverter_diagnostics.motorRpm   = 1;
 8001056:	2201      	movs	r2, #1
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <main+0x64>)
 800105a:	601a      	str	r2, [r3, #0]
	diagMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <main+0x68>)
 800105e:	701a      	strb	r2, [r3, #0]
	diagMessage.frame.id = 0x500;
 8001060:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001064:	605a      	str	r2, [r3, #4]
	diagMessage.frame.dlc = 8;
 8001066:	2208      	movs	r2, #8
 8001068:	721a      	strb	r2, [r3, #8]
	diagMessage.frame.data0 = 0x00;
 800106a:	2200      	movs	r2, #0
 800106c:	725a      	strb	r2, [r3, #9]
	diagMessage.frame.data1 = 0x00;
 800106e:	729a      	strb	r2, [r3, #10]
	diagMessage.frame.data2 = 0x00;
 8001070:	72da      	strb	r2, [r3, #11]
	diagMessage.frame.data3 = 0x00;
 8001072:	731a      	strb	r2, [r3, #12]
	diagMessage.frame.data4 = 0x00;
 8001074:	735a      	strb	r2, [r3, #13]
	diagMessage.frame.data5 = 0x00;
 8001076:	739a      	strb	r2, [r3, #14]
	diagMessage.frame.data6 = 0x00;
 8001078:	73da      	strb	r2, [r3, #15]
	diagMessage.frame.data7 = 0x00;
 800107a:	741a      	strb	r2, [r3, #16]
	calibratePedalsMain();
 800107c:	f7ff fe08 	bl	8000c90 <calibratePedalsMain>
 8001080:	200000fc 	.word	0x200000fc
 8001084:	20000058 	.word	0x20000058
 8001088:	200000a0 	.word	0x200000a0

0800108c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void    SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    MCP2515_CS_HIGH();
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <MCP2515_Initialize+0x3c>)
 800109a:	f001 ff89 	bl	8002fb0 <HAL_GPIO_WritePin>

    uint8_t loop = 10;
 800109e:	230a      	movs	r3, #10
 80010a0:	71fb      	strb	r3, [r7, #7]
    do {
        /* check SPI Ready */
        if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80010a2:	480a      	ldr	r0, [pc, #40]	@ (80010cc <MCP2515_Initialize+0x40>)
 80010a4:	f003 ff77 	bl	8004f96 <HAL_SPI_GetState>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <MCP2515_Initialize+0x26>
            return true;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e006      	b.n	80010c0 <MCP2515_Initialize+0x34>

        loop--;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	71fb      	strb	r3, [r7, #7]
    } while(loop > 0);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f1      	bne.n	80010a2 <MCP2515_Initialize+0x16>

    return false;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020000 	.word	0x40020000
 80010cc:	20000144 	.word	0x20000144

080010d0 <MCP2515_SetConfigMode>:

/* change mode to configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    /* configure CANCTRL Register */
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	200f      	movs	r0, #15
 80010da:	f000 f885 	bl	80011e8 <MCP2515_WriteByte>
    HAL_Delay(100);
 80010de:	2064      	movs	r0, #100	@ 0x64
 80010e0:	f000 fc30 	bl	8001944 <HAL_Delay>

    uint8_t loop = 10;
 80010e4:	230a      	movs	r3, #10
 80010e6:	71fb      	strb	r3, [r7, #7]
    do {
        // Force config again
        MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f87c 	bl	80011e8 <MCP2515_WriteByte>

        uint8_t canstat      = MCP2515_ReadByte(MCP2515_CANSTAT);
 80010f0:	200e      	movs	r0, #14
 80010f2:	f000 f853 	bl	800119c <MCP2515_ReadByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	71bb      	strb	r3, [r7, #6]
        uint8_t SOMETHINGELSE= MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80010fa:	2030      	movs	r0, #48	@ 0x30
 80010fc:	f000 f84e 	bl	800119c <MCP2515_ReadByte>
 8001100:	4603      	mov	r3, r0
 8001102:	717b      	strb	r3, [r7, #5]
        (void)SOMETHINGELSE; // avoid "unused variable" warning

        if((canstat & 0xE0) == 0x80)
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800110a:	2b80      	cmp	r3, #128	@ 0x80
 800110c:	d101      	bne.n	8001112 <MCP2515_SetConfigMode+0x42>
            return true;
 800110e:	2301      	movs	r3, #1
 8001110:	e009      	b.n	8001126 <MCP2515_SetConfigMode+0x56>

        loop--;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3b01      	subs	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(100);
 8001118:	2064      	movs	r0, #100	@ 0x64
 800111a:	f000 fc13 	bl	8001944 <HAL_Delay>

    } while(loop > 0);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e1      	bne.n	80010e8 <MCP2515_SetConfigMode+0x18>

    return false;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <MCP2515_SetNormalMode>:

/* change mode to normal mode */
bool MCP2515_SetNormalMode(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
    /* configure CANCTRL Register */
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001134:	2100      	movs	r1, #0
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f856 	bl	80011e8 <MCP2515_WriteByte>

    uint8_t loop = 10;
 800113c:	230a      	movs	r3, #10
 800113e:	71fb      	strb	r3, [r7, #7]
    do {
        /* confirm mode configuration */
        if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001140:	200e      	movs	r0, #14
 8001142:	f000 f82b 	bl	800119c <MCP2515_ReadByte>
 8001146:	4603      	mov	r3, r0
 8001148:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <MCP2515_SetNormalMode+0x26>
            return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e006      	b.n	8001162 <MCP2515_SetNormalMode+0x34>

        loop--;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	3b01      	subs	r3, #1
 8001158:	71fb      	strb	r3, [r7, #7]
    } while(loop > 0);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ef      	bne.n	8001140 <MCP2515_SetNormalMode+0x12>

    return false;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MCP2515_Reset>:
    return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    MCP2515_CS_LOW();
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <MCP2515_Reset+0x2c>)
 8001178:	f001 ff1a 	bl	8002fb0 <HAL_GPIO_WritePin>
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fbe1 	bl	8001944 <HAL_Delay>
    SPI_Tx(MCP2515_RESET);
 8001182:	20c0      	movs	r0, #192	@ 0xc0
 8001184:	f000 f886 	bl	8001294 <SPI_Tx>
    MCP2515_CS_HIGH();
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118e:	4802      	ldr	r0, [pc, #8]	@ (8001198 <MCP2515_Reset+0x2c>)
 8001190:	f001 ff0e 	bl	8002fb0 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020000 	.word	0x40020000

0800119c <MCP2515_ReadByte>:

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal;

    MCP2515_CS_LOW();
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MCP2515_ReadByte+0x48>)
 80011ae:	f001 feff 	bl	8002fb0 <HAL_GPIO_WritePin>
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fbc6 	bl	8001944 <HAL_Delay>
    SPI_Tx(MCP2515_READ);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f86b 	bl	8001294 <SPI_Tx>
    SPI_Tx(address);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f867 	bl	8001294 <SPI_Tx>
    retVal = SPI_Rx();
 80011c6:	f000 f88b 	bl	80012e0 <SPI_Rx>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73fb      	strb	r3, [r7, #15]
    MCP2515_CS_HIGH();
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MCP2515_ReadByte+0x48>)
 80011d6:	f001 feeb 	bl	8002fb0 <HAL_GPIO_WritePin>

    return retVal;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020000 	.word	0x40020000

080011e8 <MCP2515_WriteByte>:
    MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_LOW();
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011fe:	480d      	ldr	r0, [pc, #52]	@ (8001234 <MCP2515_WriteByte+0x4c>)
 8001200:	f001 fed6 	bl	8002fb0 <HAL_GPIO_WritePin>
 8001204:	2001      	movs	r0, #1
 8001206:	f000 fb9d 	bl	8001944 <HAL_Delay>
    SPI_Tx(MCP2515_WRITE);
 800120a:	2002      	movs	r0, #2
 800120c:	f000 f842 	bl	8001294 <SPI_Tx>
    SPI_Tx(address);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f83e 	bl	8001294 <SPI_Tx>
    SPI_Tx(data);
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f83a 	bl	8001294 <SPI_Tx>
    MCP2515_CS_HIGH();
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001226:	4803      	ldr	r0, [pc, #12]	@ (8001234 <MCP2515_WriteByte+0x4c>)
 8001228:	f001 fec2 	bl	8002fb0 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020000 	.word	0x40020000

08001238 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	603a      	str	r2, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	460b      	mov	r3, r1
 8001246:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_LOW();
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800124e:	4810      	ldr	r0, [pc, #64]	@ (8001290 <MCP2515_WriteByteSequence+0x58>)
 8001250:	f001 feae 	bl	8002fb0 <HAL_GPIO_WritePin>
 8001254:	2001      	movs	r0, #1
 8001256:	f000 fb75 	bl	8001944 <HAL_Delay>
    SPI_Tx(MCP2515_WRITE);
 800125a:	2002      	movs	r0, #2
 800125c:	f000 f81a 	bl	8001294 <SPI_Tx>
    SPI_Tx(startAddress);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f816 	bl	8001294 <SPI_Tx>
    SPI_TxBuffer(data, (uint8_t)(endAddress - startAddress + 1));
 8001268:	79ba      	ldrb	r2, [r7, #6]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f000 f81e 	bl	80012b8 <SPI_TxBuffer>
    MCP2515_CS_HIGH();
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001282:	4803      	ldr	r0, [pc, #12]	@ (8001290 <MCP2515_WriteByteSequence+0x58>)
 8001284:	f001 fe94 	bl	8002fb0 <HAL_GPIO_WritePin>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020000 	.word	0x40020000

08001294 <SPI_Tx>:
    MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 800129e:	1df9      	adds	r1, r7, #7
 80012a0:	230a      	movs	r3, #10
 80012a2:	2201      	movs	r2, #1
 80012a4:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <SPI_Tx+0x20>)
 80012a6:	f003 fa70 	bl	800478a <HAL_SPI_Transmit>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000144 	.word	0x20000144

080012b8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	230a      	movs	r3, #10
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <SPI_TxBuffer+0x24>)
 80012ce:	f003 fa5c 	bl	800478a <HAL_SPI_Transmit>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000144 	.word	0x20000144

080012e0 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
    uint8_t retVal;
    HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80012e6:	1df9      	adds	r1, r7, #7
 80012e8:	230a      	movs	r3, #10
 80012ea:	2201      	movs	r2, #1
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <SPI_Rx+0x1c>)
 80012ee:	f003 fb90 	bl	8004a12 <HAL_SPI_Receive>
    return retVal;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000144 	.word	0x20000144

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001314:	6453      	str	r3, [r2, #68]	@ 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133e:	2007      	movs	r0, #7
 8001340:	f001 f900 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a40      	ldr	r2, [pc, #256]	@ (8001470 <HAL_ADC_MspInit+0x120>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d179      	bne.n	8001466 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a3e      	ldr	r2, [pc, #248]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b3c      	ldr	r3, [pc, #240]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b38      	ldr	r3, [pc, #224]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a37      	ldr	r2, [pc, #220]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b35      	ldr	r3, [pc, #212]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b31      	ldr	r3, [pc, #196]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a30      	ldr	r2, [pc, #192]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_ADC_MspInit+0x124>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ca:	2303      	movs	r3, #3
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4827      	ldr	r0, [pc, #156]	@ (8001478 <HAL_ADC_MspInit+0x128>)
 80013da:	f001 fc65 	bl	8002ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013de:	2330      	movs	r3, #48	@ 0x30
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4822      	ldr	r0, [pc, #136]	@ (800147c <HAL_ADC_MspInit+0x12c>)
 80013f2:	f001 fc59 	bl	8002ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013f8:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <HAL_ADC_MspInit+0x134>)
 80013fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013fc:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001410:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001414:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001418:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800141c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001420:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001424:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 800142e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001432:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800143a:	4811      	ldr	r0, [pc, #68]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 800143c:	f001 f8c4 	bl	80025c8 <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001446:	f7ff fc91 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0c      	ldr	r2, [pc, #48]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 800144e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_ADC_MspInit+0x130>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2012      	movs	r0, #18
 800145c:	f001 f87d 	bl	800255a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001460:	2012      	movs	r0, #18
 8001462:	f001 f896 	bl	8002592 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012000 	.word	0x40012000
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020800 	.word	0x40020800
 8001480:	20000244 	.word	0x20000244
 8001484:	40026410 	.word	0x40026410

08001488 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	@ 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a3d      	ldr	r2, [pc, #244]	@ (80015ac <HAL_I2S_MspInit+0x124>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d174      	bne.n	80015a4 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014be:	23c0      	movs	r3, #192	@ 0xc0
 80014c0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 ff86 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80014d6:	f7ff fc49 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <HAL_I2S_MspInit+0x128>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a33      	ldr	r2, [pc, #204]	@ (80015b0 <HAL_I2S_MspInit+0x128>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <HAL_I2S_MspInit+0x128>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <HAL_I2S_MspInit+0x128>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <HAL_I2S_MspInit+0x128>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <HAL_I2S_MspInit+0x128>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001512:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001524:	2305      	movs	r3, #5
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	4821      	ldr	r0, [pc, #132]	@ (80015b4 <HAL_I2S_MspInit+0x12c>)
 8001530:	f001 fbba 	bl	8002ca8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001536:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <HAL_I2S_MspInit+0x134>)
 8001538:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001542:	2240      	movs	r2, #64	@ 0x40
 8001544:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800154e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001552:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800155a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800155e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001562:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001572:	2204      	movs	r2, #4
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001578:	2201      	movs	r2, #1
 800157a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800157e:	2200      	movs	r2, #0
 8001580:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 8001584:	2200      	movs	r2, #0
 8001586:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800158a:	f001 f81d 	bl	80025c8 <HAL_DMA_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001594:	f7ff fbea 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 800159c:	639a      	str	r2, [r3, #56]	@ 0x38
 800159e:	4a06      	ldr	r2, [pc, #24]	@ (80015b8 <HAL_I2S_MspInit+0x130>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80015a4:	bf00      	nop
 80015a6:	3738      	adds	r7, #56	@ 0x38
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40003800 	.word	0x40003800
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020400 	.word	0x40020400
 80015b8:	2000019c 	.word	0x2000019c
 80015bc:	40026070 	.word	0x40026070

080015c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	@ (8001644 <HAL_SPI_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 80015ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_SPI_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800161a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800162c:	2306      	movs	r3, #6
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <HAL_SPI_MspInit+0x8c>)
 8001638:	f001 fb36 	bl	8002ca8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	@ 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40003c00 	.word	0x40003c00
 8001648:	40023800 	.word	0x40023800
 800164c:	40020800 	.word	0x40020800

08001650 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <HAL_TIM_Base_MspInit+0x3c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10d      	bne.n	800167e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_TIM_Base_MspInit+0x40>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a09      	ldr	r2, [pc, #36]	@ (8001690 <HAL_TIM_Base_MspInit+0x40>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <HAL_TIM_Base_MspInit+0x40>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40000400 	.word	0x40000400
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10d      	bne.n	80016c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x40>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x40>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <HAL_TIM_PWM_MspInit+0x40>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40000800 	.word	0x40000800
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <HAL_TIM_MspPostInit+0x68>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11e      	bne.n	8001738 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800171a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001728:	2302      	movs	r3, #2
 800172a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_TIM_MspPostInit+0x70>)
 8001734:	f001 fab8 	bl	8002ca8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40000800 	.word	0x40000800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <MemManage_Handler+0x4>

08001764 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <UsageFault_Handler+0x4>

08001774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a2:	f000 f8af 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Stream4_IRQHandler+0x10>)
 80017b2:	f001 f80f 	bl	80027d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000019c 	.word	0x2000019c

080017c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <ADC_IRQHandler+0x10>)
 80017c6:	f000 f924 	bl	8001a12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002a4 	.word	0x200002a4

080017d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <DMA2_Stream0_IRQHandler+0x10>)
 80017da:	f000 fffb 	bl	80027d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000244 	.word	0x20000244

080017e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack    		 /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001810:	f7ff ffea 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	@ (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800183a:	f004 faa9 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff fbef 	bl	8001020 <main>
  bx  lr    
 8001842:	4770      	bx	lr
	  ldr   sp, =_estack    		 /* set stack pointer */
 8001844:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001850:	08005e18 	.word	0x08005e18
  ldr r2, =_sbss
 8001854:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001858:	200002f0 	.word	0x200002f0

0800185c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <DMA1_Stream0_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <HAL_Init+0x40>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <HAL_Init+0x40>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800187a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <HAL_Init+0x40>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 fe5b 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fd34 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fe73 	bl	80025ae <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 fe3b 	bl	800255a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000010 	.word	0x20000010
 8001900:	2000000c 	.word	0x2000000c

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000010 	.word	0x20000010
 8001928:	200002ec 	.word	0x200002ec

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200002ec 	.word	0x200002ec

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000010 	.word	0x20000010

0800198c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e033      	b.n	8001a0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fcd0 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019d2:	f023 0302 	bic.w	r3, r3, #2
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fb58 	bl	8002094 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019fa:	e001      	b.n	8001a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d049      	beq.n	8001adc <HAL_ADC_IRQHandler+0xca>
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d046      	beq.n	8001adc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d12b      	bne.n	8001acc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d127      	bne.n	8001acc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d119      	bne.n	8001acc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0220 	bic.w	r2, r2, #32
 8001aa6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7fe fee7 	bl	80008a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0212 	mvn.w	r2, #18
 8001ada:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aea:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d057      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x190>
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d054      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d139      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b24:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d12b      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d124      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11d      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d119      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b6c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f043 0201 	orr.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fbfc 	bl	8002390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 020c 	mvn.w	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x1d6>
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10d      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f925 	bl	8001e28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0201 	mvn.w	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bf6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <HAL_ADC_IRQHandler+0x218>
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c08:	f043 0202 	orr.w	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0220 	mvn.w	r2, #32
 8001c18:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f90e 	bl	8001e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0220 	mvn.w	r2, #32
 8001c28:	601a      	str	r2, [r3, #0]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Start_DMA+0x1e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e0ce      	b.n	8001df0 <HAL_ADC_Start_DMA+0x1bc>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d018      	beq.n	8001c9a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c78:	4b5f      	ldr	r3, [pc, #380]	@ (8001df8 <HAL_ADC_Start_DMA+0x1c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8001dfc <HAL_ADC_Start_DMA+0x1c8>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9a      	lsrs	r2, r3, #18
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001c8c:	e002      	b.n	8001c94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f9      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ca8:	d107      	bne.n	8001cba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	f040 8086 	bne.w	8001dd6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cf4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d08:	d106      	bne.n	8001d18 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f023 0206 	bic.w	r2, r3, #6
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d16:	e002      	b.n	8001d1e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <HAL_ADC_Start_DMA+0x1cc>)
 8001d28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2e:	4a35      	ldr	r2, [pc, #212]	@ (8001e04 <HAL_ADC_Start_DMA+0x1d0>)
 8001d30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d36:	4a34      	ldr	r2, [pc, #208]	@ (8001e08 <HAL_ADC_Start_DMA+0x1d4>)
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3e:	4a33      	ldr	r2, [pc, #204]	@ (8001e0c <HAL_ADC_Start_DMA+0x1d8>)
 8001d40:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d5a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d6a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	334c      	adds	r3, #76	@ 0x4c
 8001d76:	4619      	mov	r1, r3
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f000 fcd2 	bl	8002724 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10f      	bne.n	8001dac <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d129      	bne.n	8001dee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	e020      	b.n	8001dee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_ADC_Start_DMA+0x1dc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11b      	bne.n	8001dee <HAL_ADC_Start_DMA+0x1ba>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d114      	bne.n	8001dee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	e00b      	b.n	8001dee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f043 0210 	orr.w	r2, r3, #16
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	40012300 	.word	0x40012300
 8001e04:	0800228d 	.word	0x0800228d
 8001e08:	08002347 	.word	0x08002347
 8001e0c:	08002363 	.word	0x08002363
 8001e10:	40012000 	.word	0x40012000

08001e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1c>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e105      	b.n	8002078 <HAL_ADC_ConfigChannel+0x228>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	d925      	bls.n	8001ec8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b1e      	subs	r3, #30
 8001e92:	2207      	movs	r2, #7
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4403      	add	r3, r0
 8001eba:	3b1e      	subs	r3, #30
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	e022      	b.n	8001f0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	2207      	movs	r2, #7
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	400a      	ands	r2, r1
 8001eea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4403      	add	r3, r0
 8001f04:	409a      	lsls	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d824      	bhi.n	8001f60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b05      	subs	r3, #5
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b05      	subs	r3, #5
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f5e:	e04c      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d824      	bhi.n	8001fb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b23      	subs	r3, #35	@ 0x23
 8001f7a:	221f      	movs	r2, #31
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43da      	mvns	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	400a      	ands	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b23      	subs	r3, #35	@ 0x23
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb0:	e023      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b41      	subs	r3, #65	@ 0x41
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b41      	subs	r3, #65	@ 0x41
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <HAL_ADC_ConfigChannel+0x234>)
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_ADC_ConfigChannel+0x238>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d109      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1cc>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d105      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	@ (8002088 <HAL_ADC_ConfigChannel+0x238>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d123      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b10      	cmp	r3, #16
 800202c:	d003      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x1e6>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b11      	cmp	r3, #17
 8002034:	d11b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <HAL_ADC_ConfigChannel+0x23c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_ADC_ConfigChannel+0x240>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9a      	lsrs	r2, r3, #18
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40012300 	.word	0x40012300
 8002088:	40012000 	.word	0x40012000
 800208c:	20000008 	.word	0x20000008
 8002090:	431bde83 	.word	0x431bde83

08002094 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209c:	4b79      	ldr	r3, [pc, #484]	@ (8002284 <ADC_Init+0x1f0>)
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	021a      	lsls	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800210e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	4a58      	ldr	r2, [pc, #352]	@ (8002288 <ADC_Init+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800213a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800215c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e00f      	b.n	8002192 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0202 	bic.w	r2, r2, #2
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e1b      	ldrb	r3, [r3, #24]
 80021ac:	005a      	lsls	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01b      	beq.n	80021f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	035a      	lsls	r2, r3, #13
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e007      	b.n	8002208 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002206:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	3b01      	subs	r3, #1
 8002224:	051a      	lsls	r2, r3, #20
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800223c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800224a:	025a      	lsls	r2, r3, #9
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	029a      	lsls	r2, r3, #10
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40012300 	.word	0x40012300
 8002288:	0f000001 	.word	0x0f000001

0800228c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002298:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d13c      	bne.n	8002320 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12b      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d127      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d119      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0220 	bic.w	r2, r2, #32
 80022f2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7fe fac1 	bl	80008a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800231e:	e00e      	b.n	800233e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd85 	bl	8001e3c <HAL_ADC_ErrorCallback>
}
 8002332:	e004      	b.n	800233e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff fd5d 	bl	8001e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2240      	movs	r2, #64	@ 0x40
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fd5a 	bl	8001e3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	@ (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	@ (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	@ (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	@ 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002510:	d301      	bcc.n	8002516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2301      	movs	r3, #1
 8002514:	e00f      	b.n	8002536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <SysTick_Config+0x40>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251e:	210f      	movs	r1, #15
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f7ff ff8e 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <SysTick_Config+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <SysTick_Config+0x40>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff29 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff3e 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff8e 	bl	8002498 <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5d 	bl	8002444 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff31 	bl	8002408 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffa2 	bl	8002500 <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff f9aa 	bl	800192c <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e099      	b.n	8002718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	e00f      	b.n	8002626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002606:	f7ff f991 	bl	800192c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b05      	cmp	r3, #5
 8002612:	d908      	bls.n	8002626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e078      	b.n	8002718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e8      	bne.n	8002606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4b38      	ldr	r3, [pc, #224]	@ (8002720 <HAL_DMA_Init+0x158>)
 8002640:	4013      	ands	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2b04      	cmp	r3, #4
 800267e:	d107      	bne.n	8002690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	4313      	orrs	r3, r2
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d117      	bne.n	80026ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa6f 	bl	8002bb0 <DMA_CheckFifoParam>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2240      	movs	r2, #64	@ 0x40
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026e6:	2301      	movs	r3, #1
 80026e8:	e016      	b.n	8002718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa26 	bl	8002b44 <DMA_CalcBaseAndBitshift>
 80026f8:	4603      	mov	r3, r0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	223f      	movs	r2, #63	@ 0x3f
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	f010803f 	.word	0xf010803f

08002724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_DMA_Start_IT+0x26>
 8002746:	2302      	movs	r3, #2
 8002748:	e040      	b.n	80027cc <HAL_DMA_Start_IT+0xa8>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d12f      	bne.n	80027be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f9b8 	bl	8002ae8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	223f      	movs	r2, #63	@ 0x3f
 800277e:	409a      	lsls	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0216 	orr.w	r2, r2, #22
 8002792:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0208 	orr.w	r2, r2, #8
 80027aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e005      	b.n	80027ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e0:	4b8e      	ldr	r3, [pc, #568]	@ (8002a1c <HAL_DMA_IRQHandler+0x248>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002a20 <HAL_DMA_IRQHandler+0x24c>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	2208      	movs	r2, #8
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01a      	beq.n	8002840 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	2208      	movs	r2, #8
 800282e:	409a      	lsls	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2210      	movs	r2, #16
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d043      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03c      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	2210      	movs	r2, #16
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d024      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e01f      	b.n	8002944 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e016      	b.n	8002944 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0208 	bic.w	r2, r2, #8
 8002932:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	2220      	movs	r2, #32
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 808f 	beq.w	8002a74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8087 	beq.w	8002a74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296a:	2220      	movs	r2, #32
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d136      	bne.n	80029ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0216 	bic.w	r2, r2, #22
 800298c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_DMA_IRQHandler+0x1da>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0208 	bic.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	223f      	movs	r2, #63	@ 0x3f
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07e      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
        }
        return;
 80029ea:	e079      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e02c      	b.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008
 8002a20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d023      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
 8002a34:	e01e      	b.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0210 	bic.w	r2, r2, #16
 8002a52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d032      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d307      	bcc.n	8002abc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f2      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x2cc>
 8002aba:	e000      	b.n	8002abe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002abc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	e000      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ae0:	bf00      	nop
    }
  }
}
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b40      	cmp	r3, #64	@ 0x40
 8002b14:	d108      	bne.n	8002b28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b26:	e007      	b.n	8002b38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3b10      	subs	r3, #16
 8002b54:	4a14      	ldr	r2, [pc, #80]	@ (8002ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b5e:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <DMA_CalcBaseAndBitshift+0x68>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d909      	bls.n	8002b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b84:	e007      	b.n	8002b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	08005e00 	.word	0x08005e00

08002bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11f      	bne.n	8002c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d856      	bhi.n	8002c7e <DMA_CheckFifoParam+0xce>
 8002bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <DMA_CheckFifoParam+0x28>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bfb 	.word	0x08002bfb
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c7f 	.word	0x08002c7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d046      	beq.n	8002c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e043      	b.n	8002c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c02:	d140      	bne.n	8002c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e03d      	b.n	8002c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c12:	d121      	bne.n	8002c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d837      	bhi.n	8002c8a <DMA_CheckFifoParam+0xda>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <DMA_CheckFifoParam+0x70>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c37 	.word	0x08002c37
 8002c28:	08002c31 	.word	0x08002c31
 8002c2c:	08002c49 	.word	0x08002c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e030      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d025      	beq.n	8002c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c46:	e022      	b.n	8002c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c50:	d11f      	bne.n	8002c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c56:	e01c      	b.n	8002c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d903      	bls.n	8002c66 <DMA_CheckFifoParam+0xb6>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d003      	beq.n	8002c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c64:	e018      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6a:	e015      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7c:	e00b      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e00a      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
 8002c84:	e008      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e006      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e004      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
    }
  } 
  
  return status; 
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e159      	b.n	8002f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8148 	bne.w	8002f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d005      	beq.n	8002cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d130      	bne.n	8002d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0201 	and.w	r2, r3, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d017      	beq.n	8002d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a2 	beq.w	8002f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b57      	ldr	r3, [pc, #348]	@ (8002f90 <HAL_GPIO_Init+0x2e8>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_GPIO_Init+0x2e8>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b54      	ldr	r3, [pc, #336]	@ (8002f90 <HAL_GPIO_Init+0x2e8>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a52      	ldr	r2, [pc, #328]	@ (8002f94 <HAL_GPIO_Init+0x2ec>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a49      	ldr	r2, [pc, #292]	@ (8002f98 <HAL_GPIO_Init+0x2f0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d019      	beq.n	8002eaa <HAL_GPIO_Init+0x202>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a48      	ldr	r2, [pc, #288]	@ (8002f9c <HAL_GPIO_Init+0x2f4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x1fe>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a47      	ldr	r2, [pc, #284]	@ (8002fa0 <HAL_GPIO_Init+0x2f8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x1fa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a46      	ldr	r2, [pc, #280]	@ (8002fa4 <HAL_GPIO_Init+0x2fc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x1f6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a45      	ldr	r2, [pc, #276]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x1f2>
 8002e96:	2304      	movs	r3, #4
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x204>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ebc:	4935      	ldr	r1, [pc, #212]	@ (8002f94 <HAL_GPIO_Init+0x2ec>)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eca:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eee:	4a2f      	ldr	r2, [pc, #188]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f18:	4a24      	ldr	r2, [pc, #144]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f1e:	4b23      	ldr	r3, [pc, #140]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f42:	4a1a      	ldr	r2, [pc, #104]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f48:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	f67f aea2 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40020000 	.word	0x40020000
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc0:	787b      	ldrb	r3, [r7, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e128      	b.n	8003248 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a90      	ldr	r2, [pc, #576]	@ (8003250 <HAL_I2S_Init+0x26c>)
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fe fa39 	bl	8001488 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800302c:	f023 030f 	bic.w	r3, r3, #15
 8003030:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2202      	movs	r2, #2
 8003038:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d060      	beq.n	8003104 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800304a:	2310      	movs	r3, #16
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e001      	b.n	8003054 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b20      	cmp	r3, #32
 800305a:	d802      	bhi.n	8003062 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003062:	2001      	movs	r0, #1
 8003064:	f001 faa8 	bl	80045b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003068:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003072:	d125      	bne.n	80030c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	fbb2 f2f3 	udiv	r2, r2, r3
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	3305      	adds	r3, #5
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e01f      	b.n	80030de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	3305      	adds	r3, #5
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	e00e      	b.n	80030de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	3305      	adds	r3, #5
 80030dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003254 <HAL_I2S_Init+0x270>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e003      	b.n	800310c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003104:	2302      	movs	r3, #2
 8003106:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d902      	bls.n	8003118 <HAL_I2S_Init+0x134>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2bff      	cmp	r3, #255	@ 0xff
 8003116:	d907      	bls.n	8003128 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e08f      	b.n	8003248 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	ea42 0103 	orr.w	r1, r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	430a      	orrs	r2, r1
 800313a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003146:	f023 030f 	bic.w	r3, r3, #15
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6851      	ldr	r1, [r2, #4]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6892      	ldr	r2, [r2, #8]
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68d2      	ldr	r2, [r2, #12]
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6992      	ldr	r2, [r2, #24]
 800315e:	430a      	orrs	r2, r1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800316a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d161      	bne.n	8003238 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a38      	ldr	r2, [pc, #224]	@ (8003258 <HAL_I2S_Init+0x274>)
 8003178:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a37      	ldr	r2, [pc, #220]	@ (800325c <HAL_I2S_Init+0x278>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_I2S_Init+0x1a4>
 8003184:	4b36      	ldr	r3, [pc, #216]	@ (8003260 <HAL_I2S_Init+0x27c>)
 8003186:	e001      	b.n	800318c <HAL_I2S_Init+0x1a8>
 8003188:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4932      	ldr	r1, [pc, #200]	@ (800325c <HAL_I2S_Init+0x278>)
 8003194:	428a      	cmp	r2, r1
 8003196:	d101      	bne.n	800319c <HAL_I2S_Init+0x1b8>
 8003198:	4a31      	ldr	r2, [pc, #196]	@ (8003260 <HAL_I2S_Init+0x27c>)
 800319a:	e001      	b.n	80031a0 <HAL_I2S_Init+0x1bc>
 800319c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80031a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80031a4:	f023 030f 	bic.w	r3, r3, #15
 80031a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2b      	ldr	r2, [pc, #172]	@ (800325c <HAL_I2S_Init+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_I2S_Init+0x1d4>
 80031b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <HAL_I2S_Init+0x27c>)
 80031b6:	e001      	b.n	80031bc <HAL_I2S_Init+0x1d8>
 80031b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031bc:	2202      	movs	r2, #2
 80031be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a25      	ldr	r2, [pc, #148]	@ (800325c <HAL_I2S_Init+0x278>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_I2S_Init+0x1ea>
 80031ca:	4b25      	ldr	r3, [pc, #148]	@ (8003260 <HAL_I2S_Init+0x27c>)
 80031cc:	e001      	b.n	80031d2 <HAL_I2S_Init+0x1ee>
 80031ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031de:	d003      	beq.n	80031e8 <HAL_I2S_Init+0x204>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80031e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	e001      	b.n	80031f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80031fe:	4313      	orrs	r3, r2
 8003200:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003208:	4313      	orrs	r3, r2
 800320a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003212:	4313      	orrs	r3, r2
 8003214:	b29a      	uxth	r2, r3
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	4313      	orrs	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003220:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <HAL_I2S_Init+0x278>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_I2S_Init+0x24c>
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <HAL_I2S_Init+0x27c>)
 800322e:	e001      	b.n	8003234 <HAL_I2S_Init+0x250>
 8003230:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003234:	897a      	ldrh	r2, [r7, #10]
 8003236:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	0800354d 	.word	0x0800354d
 8003254:	cccccccd 	.word	0xcccccccd
 8003258:	08003661 	.word	0x08003661
 800325c:	40003800 	.word	0x40003800
 8003260:	40003400 	.word	0x40003400

08003264 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_I2S_Transmit_DMA+0x1a>
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e08a      	b.n	8003398 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	e082      	b.n	8003398 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_I2S_Transmit_DMA+0x3e>
 800329e:	2302      	movs	r3, #2
 80032a0:	e07a      	b.n	8003398 <HAL_I2S_Transmit_DMA+0x134>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d002      	beq.n	80032d6 <HAL_I2S_Transmit_DMA+0x72>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d10a      	bne.n	80032ec <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032ea:	e005      	b.n	80032f8 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	4a28      	ldr	r2, [pc, #160]	@ (80033a0 <HAL_I2S_Transmit_DMA+0x13c>)
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	4a27      	ldr	r2, [pc, #156]	@ (80033a4 <HAL_I2S_Transmit_DMA+0x140>)
 8003306:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	4a26      	ldr	r2, [pc, #152]	@ (80033a8 <HAL_I2S_Transmit_DMA+0x144>)
 800330e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003318:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003320:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003328:	f7ff f9fc 	bl	8002724 <HAL_DMA_Start_IT>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00f      	beq.n	8003352 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f043 0208 	orr.w	r2, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e022      	b.n	8003398 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0202 	orr.w	r2, r2, #2
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003394:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	0800342b 	.word	0x0800342b
 80033a4:	080033e9 	.word	0x080033e9
 80033a8:	08003447 	.word	0x08003447

080033ac <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10e      	bne.n	800341c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0202 	bic.w	r2, r2, #2
 800340c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7fd fc03 	bl	8000c28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003436:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7ff ffb7 	bl	80033ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003452:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0203 	bic.w	r2, r2, #3
 8003462:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347c:	f043 0208 	orr.w	r2, r3, #8
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ffa5 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	1c9a      	adds	r2, r3, #2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10e      	bne.n	80034e6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80034d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fd fba1 	bl	8000c28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	b292      	uxth	r2, r2
 8003502:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003534:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff3e 	bl	80033c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b04      	cmp	r3, #4
 8003566:	d13a      	bne.n	80035de <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d109      	bne.n	8003586 <I2S_IRQHandler+0x3a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d102      	bne.n	8003586 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ffb4 	bl	80034ee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d126      	bne.n	80035de <I2S_IRQHandler+0x92>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d11f      	bne.n	80035de <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035ac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d0:	f043 0202 	orr.w	r2, r3, #2
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fefb 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d136      	bne.n	8003658 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d109      	bne.n	8003608 <I2S_IRQHandler+0xbc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b80      	cmp	r3, #128	@ 0x80
 8003600:	d102      	bne.n	8003608 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff45 	bl	8003492 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b08      	cmp	r3, #8
 8003610:	d122      	bne.n	8003658 <I2S_IRQHandler+0x10c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b20      	cmp	r3, #32
 800361e:	d11b      	bne.n	8003658 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800362e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f043 0204 	orr.w	r2, r3, #4
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff febe 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a92      	ldr	r2, [pc, #584]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800367a:	4b92      	ldr	r3, [pc, #584]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800367c:	e001      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800367e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a8b      	ldr	r2, [pc, #556]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003698:	4b8a      	ldr	r3, [pc, #552]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800369a:	e001      	b.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ac:	d004      	beq.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 8099 	bne.w	80037ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d107      	bne.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f925 	bl	800391c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9c8 	bl	8003a7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f2:	2b40      	cmp	r3, #64	@ 0x40
 80036f4:	d13a      	bne.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d035      	beq.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800370a:	4b6e      	ldr	r3, [pc, #440]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800370c:	e001      	b.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4969      	ldr	r1, [pc, #420]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371a:	428b      	cmp	r3, r1
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800371e:	4b69      	ldr	r3, [pc, #420]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003726:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800372a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800373a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fe34 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	f040 80c3 	bne.w	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80bd 	beq.w	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003792:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a49      	ldr	r2, [pc, #292]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800379e:	4b49      	ldr	r3, [pc, #292]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4944      	ldr	r1, [pc, #272]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ae:	428b      	cmp	r3, r1
 80037b0:	d101      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037b2:	4b44      	ldr	r3, [pc, #272]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b4:	e001      	b.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0204 	orr.w	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fdf6 	bl	80033d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e8:	e089      	b.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d107      	bne.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8be 	bl	8003980 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d107      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8fd 	bl	8003a18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d12f      	bne.n	8003888 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d02a      	beq.n	8003888 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003840:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800384c:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800384e:	e001      	b.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4919      	ldr	r1, [pc, #100]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d101      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003860:	4b18      	ldr	r3, [pc, #96]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003862:	e001      	b.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003864:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003868:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800386c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff fda6 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d136      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d031      	beq.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038a6:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a8:	e001      	b.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4902      	ldr	r1, [pc, #8]	@ (80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b6:	428b      	cmp	r3, r1
 80038b8:	d106      	bne.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038ba:	4b02      	ldr	r3, [pc, #8]	@ (80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038bc:	e006      	b.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038be:	bf00      	nop
 80038c0:	40003800 	.word	0x40003800
 80038c4:	40003400 	.word	0x40003400
 80038c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fd6c 	bl	80033d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038fc:	e000      	b.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038fe:	bf00      	nop
}
 8003900:	bf00      	nop
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c99      	adds	r1, r3, #2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6251      	str	r1, [r2, #36]	@ 0x24
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800395c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ffc9 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	1c99      	adds	r1, r3, #2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6251      	str	r1, [r2, #36]	@ 0x24
 8003992:	8819      	ldrh	r1, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <I2SEx_TxISR_I2SExt+0x90>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <I2SEx_TxISR_I2SExt+0x22>
 800399e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <I2SEx_TxISR_I2SExt+0x94>)
 80039a0:	e001      	b.n	80039a6 <I2SEx_TxISR_I2SExt+0x26>
 80039a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039a6:	460a      	mov	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <I2SEx_TxISR_I2SExt+0x90>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <I2SEx_TxISR_I2SExt+0x50>
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <I2SEx_TxISR_I2SExt+0x94>)
 80039ce:	e001      	b.n	80039d4 <I2SEx_TxISR_I2SExt+0x54>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	490d      	ldr	r1, [pc, #52]	@ (8003a10 <I2SEx_TxISR_I2SExt+0x90>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d101      	bne.n	80039e4 <I2SEx_TxISR_I2SExt+0x64>
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <I2SEx_TxISR_I2SExt+0x94>)
 80039e2:	e001      	b.n	80039e8 <I2SEx_TxISR_I2SExt+0x68>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff81 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40003800 	.word	0x40003800
 8003a14:	40003400 	.word	0x40003400

08003a18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68d8      	ldr	r0, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	1c99      	adds	r1, r3, #2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003a30:	b282      	uxth	r2, r0
 8003a32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff4a 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a20      	ldr	r2, [pc, #128]	@ (8003b0c <I2SEx_RxISR_I2SExt+0x90>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <I2SEx_RxISR_I2SExt+0x16>
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <I2SEx_RxISR_I2SExt+0x94>)
 8003a90:	e001      	b.n	8003a96 <I2SEx_RxISR_I2SExt+0x1a>
 8003a92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a96:	68d8      	ldr	r0, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	1c99      	adds	r1, r3, #2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003aa2:	b282      	uxth	r2, r0
 8003aa4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d121      	bne.n	8003b02 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <I2SEx_RxISR_I2SExt+0x90>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <I2SEx_RxISR_I2SExt+0x50>
 8003ac8:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <I2SEx_RxISR_I2SExt+0x94>)
 8003aca:	e001      	b.n	8003ad0 <I2SEx_RxISR_I2SExt+0x54>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	490d      	ldr	r1, [pc, #52]	@ (8003b0c <I2SEx_RxISR_I2SExt+0x90>)
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	d101      	bne.n	8003ae0 <I2SEx_RxISR_I2SExt+0x64>
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <I2SEx_RxISR_I2SExt+0x94>)
 8003ade:	e001      	b.n	8003ae4 <I2SEx_RxISR_I2SExt+0x68>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ae8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff03 	bl	8003908 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40003800 	.word	0x40003800
 8003b10:	40003400 	.word	0x40003400

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e267      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d075      	beq.n	8003c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b32:	4b88      	ldr	r3, [pc, #544]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d00c      	beq.n	8003b58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3e:	4b85      	ldr	r3, [pc, #532]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d112      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b82      	ldr	r3, [pc, #520]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b56:	d10b      	bne.n	8003b70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	4b7e      	ldr	r3, [pc, #504]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d05b      	beq.n	8003c1c <HAL_RCC_OscConfig+0x108>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d157      	bne.n	8003c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e242      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_OscConfig+0x74>
 8003b7a:	4b76      	ldr	r3, [pc, #472]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a75      	ldr	r2, [pc, #468]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e01d      	b.n	8003bc4 <HAL_RCC_OscConfig+0xb0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x98>
 8003b92:	4b70      	ldr	r3, [pc, #448]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6f      	ldr	r2, [pc, #444]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCC_OscConfig+0xb0>
 8003bac:	4b69      	ldr	r3, [pc, #420]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a68      	ldr	r2, [pc, #416]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b66      	ldr	r3, [pc, #408]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a65      	ldr	r2, [pc, #404]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d013      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd feae 	bl	800192c <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd4:	f7fd feaa 	bl	800192c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	@ 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e207      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xc0>
 8003bf2:	e014      	b.n	8003c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fe9a 	bl	800192c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fe96 	bl	800192c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	@ 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e1f3      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	4b51      	ldr	r3, [pc, #324]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0xe8>
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d063      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c36:	4b47      	ldr	r3, [pc, #284]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d11c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b44      	ldr	r3, [pc, #272]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d116      	bne.n	8003c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_RCC_OscConfig+0x152>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e1c7      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	4b3b      	ldr	r3, [pc, #236]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4937      	ldr	r1, [pc, #220]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	e03a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c84:	4b34      	ldr	r3, [pc, #208]	@ (8003d58 <HAL_RCC_OscConfig+0x244>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fe4f 	bl	800192c <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fd fe4b 	bl	800192c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e1a8      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb0:	4b28      	ldr	r3, [pc, #160]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4925      	ldr	r1, [pc, #148]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	4b24      	ldr	r3, [pc, #144]	@ (8003d58 <HAL_RCC_OscConfig+0x244>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fe2e 	bl	800192c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fe2a 	bl	800192c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e187      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d036      	beq.n	8003d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d06:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <HAL_RCC_OscConfig+0x248>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fd fe0e 	bl	800192c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fd fe0a 	bl	800192c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e167      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_OscConfig+0x240>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x200>
 8003d32:	e01b      	b.n	8003d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d34:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_RCC_OscConfig+0x248>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fdf7 	bl	800192c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	e00e      	b.n	8003d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd fdf3 	bl	800192c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d907      	bls.n	8003d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e150      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
 8003d54:	40023800 	.word	0x40023800
 8003d58:	42470000 	.word	0x42470000
 8003d5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	4b88      	ldr	r3, [pc, #544]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ea      	bne.n	8003d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8097 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7e:	4b81      	ldr	r3, [pc, #516]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10f      	bne.n	8003daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	4a7c      	ldr	r2, [pc, #496]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b77      	ldr	r3, [pc, #476]	@ (8003f88 <HAL_RCC_OscConfig+0x474>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db6:	4b74      	ldr	r3, [pc, #464]	@ (8003f88 <HAL_RCC_OscConfig+0x474>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a73      	ldr	r2, [pc, #460]	@ (8003f88 <HAL_RCC_OscConfig+0x474>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fdb3 	bl	800192c <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd fdaf 	bl	800192c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e10c      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f88 <HAL_RCC_OscConfig+0x474>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2ea>
 8003df0:	4b64      	ldr	r3, [pc, #400]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a63      	ldr	r2, [pc, #396]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	e01c      	b.n	8003e38 <HAL_RCC_OscConfig+0x324>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x30c>
 8003e06:	4b5f      	ldr	r3, [pc, #380]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e12:	4b5c      	ldr	r3, [pc, #368]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4a5b      	ldr	r2, [pc, #364]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0x324>
 8003e20:	4b58      	ldr	r3, [pc, #352]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a57      	ldr	r2, [pc, #348]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	4b55      	ldr	r3, [pc, #340]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a54      	ldr	r2, [pc, #336]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 0304 	bic.w	r3, r3, #4
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fd74 	bl	800192c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd fd70 	bl	800192c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0cb      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	4b49      	ldr	r3, [pc, #292]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0ee      	beq.n	8003e48 <HAL_RCC_OscConfig+0x334>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fd5e 	bl	800192c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e74:	f7fd fd5a 	bl	800192c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0b5      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ee      	bne.n	8003e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9c:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	4a38      	ldr	r2, [pc, #224]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a1 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb2:	4b34      	ldr	r3, [pc, #208]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d05c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d141      	bne.n	8003f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b31      	ldr	r3, [pc, #196]	@ (8003f8c <HAL_RCC_OscConfig+0x478>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fd2e 	bl	800192c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd fd2a 	bl	800192c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e087      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	491b      	ldr	r1, [pc, #108]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <HAL_RCC_OscConfig+0x478>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7fd fd03 	bl	800192c <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2a:	f7fd fcff 	bl	800192c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e05c      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x416>
 8003f48:	e054      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <HAL_RCC_OscConfig+0x478>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fd fcec 	bl	800192c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fd fce8 	bl	800192c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e045      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x444>
 8003f76:	e03d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e038      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f90:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <HAL_RCC_OscConfig+0x4ec>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d028      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d121      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d11a      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d111      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800

08004004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0cc      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b68      	ldr	r3, [pc, #416]	@ (80041bc <HAL_RCC_ClockConfig+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d90c      	bls.n	8004040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b65      	ldr	r3, [pc, #404]	@ (80041bc <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b63      	ldr	r3, [pc, #396]	@ (80041bc <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0b8      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004058:	4b59      	ldr	r3, [pc, #356]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a58      	ldr	r2, [pc, #352]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004070:	4b53      	ldr	r3, [pc, #332]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a52      	ldr	r2, [pc, #328]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800407a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b50      	ldr	r3, [pc, #320]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	494d      	ldr	r1, [pc, #308]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d044      	beq.n	8004124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b47      	ldr	r3, [pc, #284]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d119      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e07f      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b3f      	ldr	r3, [pc, #252]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e06f      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	4b3b      	ldr	r3, [pc, #236]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e067      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	4b37      	ldr	r3, [pc, #220]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4934      	ldr	r1, [pc, #208]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f4:	f7fd fc1a 	bl	800192c <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7fd fc16 	bl	800192c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e04f      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b2b      	ldr	r3, [pc, #172]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 020c 	and.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d1eb      	bne.n	80040fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_RCC_ClockConfig+0x1b8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d20c      	bcs.n	800414c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b22      	ldr	r3, [pc, #136]	@ (80041bc <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e032      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4916      	ldr	r1, [pc, #88]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004176:	4b12      	ldr	r3, [pc, #72]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	490e      	ldr	r1, [pc, #56]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800418a:	f000 f821 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	490a      	ldr	r1, [pc, #40]	@ (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041a6:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fb7a 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023c00 	.word	0x40023c00
 80041c0:	40023800 	.word	0x40023800
 80041c4:	08005df0 	.word	0x08005df0
 80041c8:	20000008 	.word	0x20000008
 80041cc:	2000000c 	.word	0x2000000c

080041d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b094      	sub	sp, #80	@ 0x50
 80041d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e8:	4b79      	ldr	r3, [pc, #484]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d00d      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x40>
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	f200 80e1 	bhi.w	80043bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x34>
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d003      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x3a>
 8004202:	e0db      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b73      	ldr	r3, [pc, #460]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004206:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004208:	e0db      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800420a:	4b73      	ldr	r3, [pc, #460]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800420c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800420e:	e0d8      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004210:	4b6f      	ldr	r3, [pc, #444]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004218:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800421a:	4b6d      	ldr	r3, [pc, #436]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d063      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004226:	4b6a      	ldr	r3, [pc, #424]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	2200      	movs	r2, #0
 800422e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004230:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004238:	633b      	str	r3, [r7, #48]	@ 0x30
 800423a:	2300      	movs	r3, #0
 800423c:	637b      	str	r3, [r7, #52]	@ 0x34
 800423e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	f04f 0000 	mov.w	r0, #0
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	0159      	lsls	r1, r3, #5
 8004250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004254:	0150      	lsls	r0, r2, #5
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4621      	mov	r1, r4
 800425c:	1a51      	subs	r1, r2, r1
 800425e:	6139      	str	r1, [r7, #16]
 8004260:	4629      	mov	r1, r5
 8004262:	eb63 0301 	sbc.w	r3, r3, r1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004274:	4659      	mov	r1, fp
 8004276:	018b      	lsls	r3, r1, #6
 8004278:	4651      	mov	r1, sl
 800427a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800427e:	4651      	mov	r1, sl
 8004280:	018a      	lsls	r2, r1, #6
 8004282:	4651      	mov	r1, sl
 8004284:	ebb2 0801 	subs.w	r8, r2, r1
 8004288:	4659      	mov	r1, fp
 800428a:	eb63 0901 	sbc.w	r9, r3, r1
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800429a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800429e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042a2:	4690      	mov	r8, r2
 80042a4:	4699      	mov	r9, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	eb18 0303 	adds.w	r3, r8, r3
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	462b      	mov	r3, r5
 80042b0:	eb49 0303 	adc.w	r3, r9, r3
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042c2:	4629      	mov	r1, r5
 80042c4:	024b      	lsls	r3, r1, #9
 80042c6:	4621      	mov	r1, r4
 80042c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042cc:	4621      	mov	r1, r4
 80042ce:	024a      	lsls	r2, r1, #9
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d6:	2200      	movs	r2, #0
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042e0:	f7fb ff78 	bl	80001d4 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4613      	mov	r3, r2
 80042ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ec:	e058      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b38      	ldr	r3, [pc, #224]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	4611      	mov	r1, r2
 80042fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
 8004304:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004308:	4642      	mov	r2, r8
 800430a:	464b      	mov	r3, r9
 800430c:	f04f 0000 	mov.w	r0, #0
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	0159      	lsls	r1, r3, #5
 8004316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431a:	0150      	lsls	r0, r2, #5
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4641      	mov	r1, r8
 8004322:	ebb2 0a01 	subs.w	sl, r2, r1
 8004326:	4649      	mov	r1, r9
 8004328:	eb63 0b01 	sbc.w	fp, r3, r1
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800433c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004340:	ebb2 040a 	subs.w	r4, r2, sl
 8004344:	eb63 050b 	sbc.w	r5, r3, fp
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	00eb      	lsls	r3, r5, #3
 8004352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	4643      	mov	r3, r8
 800435e:	18e3      	adds	r3, r4, r3
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	464b      	mov	r3, r9
 8004364:	eb45 0303 	adc.w	r3, r5, r3
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004376:	4629      	mov	r1, r5
 8004378:	028b      	lsls	r3, r1, #10
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004380:	4621      	mov	r1, r4
 8004382:	028a      	lsls	r2, r1, #10
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438a:	2200      	movs	r2, #0
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	61fa      	str	r2, [r7, #28]
 8004390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004394:	f7fb ff1e 	bl	80001d4 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3750      	adds	r7, #80	@ 0x50
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	007a1200 	.word	0x007a1200

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004400:	2b00      	cmp	r3, #0
 8004402:	d035      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004404:	4b67      	ldr	r3, [pc, #412]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800440a:	f7fd fa8f 	bl	800192c <HAL_GetTick>
 800440e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004412:	f7fd fa8b 	bl	800192c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e0ba      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004424:	4b60      	ldr	r3, [pc, #384]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	019a      	lsls	r2, r3, #6
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	071b      	lsls	r3, r3, #28
 800443c:	495a      	ldr	r1, [pc, #360]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004444:	4b57      	ldr	r3, [pc, #348]	@ (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800444a:	f7fd fa6f 	bl	800192c <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004452:	f7fd fa6b 	bl	800192c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e09a      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8083 	beq.w	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4b49      	ldr	r3, [pc, #292]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	4a48      	ldr	r2, [pc, #288]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	@ 0x40
 800448e:	4b46      	ldr	r3, [pc, #280]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800449a:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a43      	ldr	r2, [pc, #268]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044a6:	f7fd fa41 	bl	800192c <HAL_GetTick>
 80044aa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ae:	f7fd fa3d 	bl	800192c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e06c      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80044c0:	4b3a      	ldr	r3, [pc, #232]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044cc:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02f      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d028      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ea:	4b2f      	ldr	r3, [pc, #188]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f4:	4b2e      	ldr	r3, [pc, #184]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fa:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004500:	4a29      	ldr	r2, [pc, #164]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004506:	4b28      	ldr	r3, [pc, #160]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d114      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004512:	f7fd fa0b 	bl	800192c <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fd fa07 	bl	800192c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e034      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004548:	d10d      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800454a:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800455a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800455e:	4912      	ldr	r1, [pc, #72]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
 8004564:	e005      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4a0f      	ldr	r2, [pc, #60]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800456c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004570:	6093      	str	r3, [r2, #8]
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004574:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457e:	490a      	ldr	r1, [pc, #40]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004580:	4313      	orrs	r3, r2
 8004582:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7c1a      	ldrb	r2, [r3, #16]
 8004594:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004596:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	42470068 	.word	0x42470068
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42470e40 	.word	0x42470e40
 80045b4:	424711e0 	.word	0x424711e0

080045b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d13f      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045d6:	4b24      	ldr	r3, [pc, #144]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045de:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045ec:	d12f      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045ee:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045f0:	617b      	str	r3, [r7, #20]
          break;
 80045f2:	e02f      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004600:	d108      	bne.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004602:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800460a:	4a19      	ldr	r2, [pc, #100]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e007      	b.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004614:	4b14      	ldr	r3, [pc, #80]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800461c:	4a15      	ldr	r2, [pc, #84]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004624:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800463a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463e:	0f1b      	lsrs	r3, r3, #28
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	617b      	str	r3, [r7, #20]
          break;
 800464c:	e002      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
          break;
 8004652:	bf00      	nop
        }
      }
      break;
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004656:	bf00      	nop
    }
  }
  return frequency;
 8004658:	697b      	ldr	r3, [r7, #20]
}
 800465a:	4618      	mov	r0, r3
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800
 800466c:	00bb8000 	.word	0x00bb8000
 8004670:	007a1200 	.word	0x007a1200
 8004674:	00f42400 	.word	0x00f42400

08004678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07b      	b.n	8004782 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	2b00      	cmp	r3, #0
 8004690:	d108      	bne.n	80046a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800469a:	d009      	beq.n	80046b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	61da      	str	r2, [r3, #28]
 80046a2:	e005      	b.n	80046b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc ff78 	bl	80015c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	ea42 0103 	orr.w	r1, r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0104 	and.w	r1, r3, #4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f003 0210 	and.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004770:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479a:	f7fd f8c7 	bl	800192c <HAL_GetTick>
 800479e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d001      	beq.n	80047b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
 80047b2:	e12a      	b.n	8004a0a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x36>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e122      	b.n	8004a0a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_SPI_Transmit+0x48>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e11b      	b.n	8004a0a <HAL_SPI_Transmit+0x280>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2203      	movs	r2, #3
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004820:	d10f      	bne.n	8004842 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484c:	2b40      	cmp	r3, #64	@ 0x40
 800484e:	d007      	beq.n	8004860 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800485e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004868:	d152      	bne.n	8004910 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Transmit+0xee>
 8004872:	8b7b      	ldrh	r3, [r7, #26]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d145      	bne.n	8004904 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800489c:	e032      	b.n	8004904 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d112      	bne.n	80048d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	881a      	ldrh	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	1c9a      	adds	r2, r3, #2
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048d0:	e018      	b.n	8004904 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d2:	f7fd f82b 	bl	800192c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d803      	bhi.n	80048ea <HAL_SPI_Transmit+0x160>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d102      	bne.n	80048f0 <HAL_SPI_Transmit+0x166>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e082      	b.n	8004a0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1c7      	bne.n	800489e <HAL_SPI_Transmit+0x114>
 800490e:	e053      	b.n	80049b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0x194>
 8004918:	8b7b      	ldrh	r3, [r7, #26]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d147      	bne.n	80049ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004944:	e033      	b.n	80049ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d113      	bne.n	800497c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	86da      	strh	r2, [r3, #54]	@ 0x36
 800497a:	e018      	b.n	80049ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497c:	f7fc ffd6 	bl	800192c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d803      	bhi.n	8004994 <HAL_SPI_Transmit+0x20a>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d102      	bne.n	800499a <HAL_SPI_Transmit+0x210>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e02d      	b.n	8004a0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1c6      	bne.n	8004946 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fbe7 	bl	8005190 <SPI_EndRxTxTransaction>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b088      	sub	sp, #32
 8004a16:	af02      	add	r7, sp, #8
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d001      	beq.n	8004a32 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e104      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a3a:	d112      	bne.n	8004a62 <HAL_SPI_Receive+0x50>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10e      	bne.n	8004a62 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2204      	movs	r2, #4
 8004a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a4c:	88fa      	ldrh	r2, [r7, #6]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f8f3 	bl	8004c44 <HAL_SPI_TransmitReceive>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	e0ec      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a62:	f7fc ff63 	bl	800192c <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Receive+0x62>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0e1      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_SPI_Receive+0x74>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e0da      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2204      	movs	r2, #4
 8004a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad4:	d10f      	bne.n	8004af6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d007      	beq.n	8004b14 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d170      	bne.n	8004bfe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b1c:	e035      	b.n	8004b8a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d115      	bne.n	8004b58 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f103 020c 	add.w	r2, r3, #12
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b56:	e018      	b.n	8004b8a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b58:	f7fc fee8 	bl	800192c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d803      	bhi.n	8004b70 <HAL_SPI_Receive+0x15e>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_Receive+0x164>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e058      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1c4      	bne.n	8004b1e <HAL_SPI_Receive+0x10c>
 8004b94:	e038      	b.n	8004c08 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d113      	bne.n	8004bcc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	1c9a      	adds	r2, r3, #2
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bca:	e018      	b.n	8004bfe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bcc:	f7fc feae 	bl	800192c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d803      	bhi.n	8004be4 <HAL_SPI_Receive+0x1d2>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Receive+0x1d8>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e01e      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1c6      	bne.n	8004b96 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	6839      	ldr	r1, [r7, #0]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fa59 	bl	80050c4 <SPI_EndRxTransaction>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	@ 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c52:	2301      	movs	r3, #1
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c56:	f7fc fe69 	bl	800192c <HAL_GetTick>
 8004c5a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c62:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6e:	7ffb      	ldrb	r3, [r7, #31]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d00c      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0x4a>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7a:	d106      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x46>
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d001      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e17f      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x5c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x5c>
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e174      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x6e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e16d      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d003      	beq.n	8004cce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2205      	movs	r2, #5
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	887a      	ldrh	r2, [r7, #2]
 8004cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	887a      	ldrh	r2, [r7, #2]
 8004cf6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0e:	2b40      	cmp	r3, #64	@ 0x40
 8004d10:	d007      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2a:	d17e      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0xf6>
 8004d34:	8afb      	ldrh	r3, [r7, #22]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d16c      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5e:	e059      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d11b      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x162>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d016      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x162>
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d113      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d119      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x1a4>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d014      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc8:	b292      	uxth	r2, r2
 8004dca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	1c9a      	adds	r2, r3, #2
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de4:	2301      	movs	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004de8:	f7fc fda0 	bl	800192c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d80d      	bhi.n	8004e14 <HAL_SPI_TransmitReceive+0x1d0>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d009      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0bc      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1a0      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x11c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d19b      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x11c>
 8004e28:	e082      	b.n	8004f30 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x1f4>
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d171      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5e:	e05d      	b.n	8004f1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x264>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x264>
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d114      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d119      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x2a6>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d014      	beq.n	8004eea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eea:	f7fc fd1f 	bl	800192c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d803      	bhi.n	8004f02 <HAL_SPI_TransmitReceive+0x2be>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d102      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x2c4>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e038      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d19c      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x21c>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d197      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f92b 	bl	8005190 <SPI_EndRxTxTransaction>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e01d      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	@ 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fa4:	b2db      	uxtb	r3, r3
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fc4:	f7fc fcb2 	bl	800192c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fd4:	f7fc fcaa 	bl	800192c <HAL_GetTick>
 8004fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fda:	4b39      	ldr	r3, [pc, #228]	@ (80050c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	015b      	lsls	r3, r3, #5
 8004fe0:	0d1b      	lsrs	r3, r3, #20
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fea:	e054      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d050      	beq.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ff4:	f7fc fc9a 	bl	800192c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	429a      	cmp	r2, r3
 8005002:	d902      	bls.n	800500a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d13d      	bne.n	8005086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005022:	d111      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800502c:	d004      	beq.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005036:	d107      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005050:	d10f      	bne.n	8005072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e017      	b.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3b01      	subs	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d19b      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000008 	.word	0x20000008

080050c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050d8:	d111      	bne.n	80050fe <SPI_EndRxTransaction+0x3a>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e2:	d004      	beq.n	80050ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ec:	d107      	bne.n	80050fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005106:	d12a      	bne.n	800515e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005110:	d012      	beq.n	8005138 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	2180      	movs	r1, #128	@ 0x80
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff ff49 	bl	8004fb4 <SPI_WaitFlagStateUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02d      	beq.n	8005184 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512c:	f043 0220 	orr.w	r2, r3, #32
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e026      	b.n	8005186 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	2101      	movs	r1, #1
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff ff36 	bl	8004fb4 <SPI_WaitFlagStateUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01a      	beq.n	8005184 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e013      	b.n	8005186 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	2101      	movs	r1, #1
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff ff23 	bl	8004fb4 <SPI_WaitFlagStateUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f043 0220 	orr.w	r2, r3, #32
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e000      	b.n	8005186 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2201      	movs	r2, #1
 80051a4:	2102      	movs	r1, #2
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ff04 	bl	8004fb4 <SPI_WaitFlagStateUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b6:	f043 0220 	orr.w	r2, r3, #32
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e032      	b.n	8005228 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005230 <SPI_EndRxTxTransaction+0xa0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005234 <SPI_EndRxTxTransaction+0xa4>)
 80051c8:	fba2 2303 	umull	r2, r3, r2, r3
 80051cc:	0d5b      	lsrs	r3, r3, #21
 80051ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051e0:	d112      	bne.n	8005208 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	@ 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff fee1 	bl	8004fb4 <SPI_WaitFlagStateUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d016      	beq.n	8005226 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e00f      	b.n	8005228 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3b01      	subs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521e:	2b80      	cmp	r3, #128	@ 0x80
 8005220:	d0f2      	beq.n	8005208 <SPI_EndRxTxTransaction+0x78>
 8005222:	e000      	b.n	8005226 <SPI_EndRxTxTransaction+0x96>
        break;
 8005224:	bf00      	nop
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000008 	.word	0x20000008
 8005234:	165e9f81 	.word	0x165e9f81

08005238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e041      	b.n	80052ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc f9f6 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 fa62 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d001      	beq.n	80052f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e03c      	b.n	800536a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005378 <HAL_TIM_Base_Start+0xa0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <HAL_TIM_Base_Start+0x5c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530a:	d013      	beq.n	8005334 <HAL_TIM_Base_Start+0x5c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <HAL_TIM_Base_Start+0xa4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <HAL_TIM_Base_Start+0x5c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a19      	ldr	r2, [pc, #100]	@ (8005380 <HAL_TIM_Base_Start+0xa8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_TIM_Base_Start+0x5c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a17      	ldr	r2, [pc, #92]	@ (8005384 <HAL_TIM_Base_Start+0xac>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_TIM_Base_Start+0x5c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <HAL_TIM_Base_Start+0xb0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d111      	bne.n	8005358 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b06      	cmp	r3, #6
 8005344:	d010      	beq.n	8005368 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005356:	e007      	b.n	8005368 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40014000 	.word	0x40014000

0800538c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e041      	b.n	8005422 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc f96e 	bl	8001694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f000 f9b8 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005446:	2302      	movs	r3, #2
 8005448:	e0ae      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b0c      	cmp	r3, #12
 8005456:	f200 809f 	bhi.w	8005598 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800545a:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005495 	.word	0x08005495
 8005464:	08005599 	.word	0x08005599
 8005468:	08005599 	.word	0x08005599
 800546c:	08005599 	.word	0x08005599
 8005470:	080054d5 	.word	0x080054d5
 8005474:	08005599 	.word	0x08005599
 8005478:	08005599 	.word	0x08005599
 800547c:	08005599 	.word	0x08005599
 8005480:	08005517 	.word	0x08005517
 8005484:	08005599 	.word	0x08005599
 8005488:	08005599 	.word	0x08005599
 800548c:	08005599 	.word	0x08005599
 8005490:	08005557 	.word	0x08005557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f9dc 	bl	8005858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	619a      	str	r2, [r3, #24]
      break;
 80054d2:	e064      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fa22 	bl	8005924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6999      	ldr	r1, [r3, #24]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	619a      	str	r2, [r3, #24]
      break;
 8005514:	e043      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fa6d 	bl	80059fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0208 	orr.w	r2, r2, #8
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0204 	bic.w	r2, r2, #4
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	61da      	str	r2, [r3, #28]
      break;
 8005554:	e023      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fab7 	bl	8005ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	021a      	lsls	r2, r3, #8
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	61da      	str	r2, [r3, #28]
      break;
 8005596:	e002      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_ConfigClockSource+0x1c>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e0b4      	b.n	8005736 <HAL_TIM_ConfigClockSource+0x186>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005604:	d03e      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0xd4>
 8005606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560a:	f200 8087 	bhi.w	800571c <HAL_TIM_ConfigClockSource+0x16c>
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005612:	f000 8086 	beq.w	8005722 <HAL_TIM_ConfigClockSource+0x172>
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561a:	d87f      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 800561c:	2b70      	cmp	r3, #112	@ 0x70
 800561e:	d01a      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0xa6>
 8005620:	2b70      	cmp	r3, #112	@ 0x70
 8005622:	d87b      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 8005624:	2b60      	cmp	r3, #96	@ 0x60
 8005626:	d050      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x11a>
 8005628:	2b60      	cmp	r3, #96	@ 0x60
 800562a:	d877      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 800562c:	2b50      	cmp	r3, #80	@ 0x50
 800562e:	d03c      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xfa>
 8005630:	2b50      	cmp	r3, #80	@ 0x50
 8005632:	d873      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	d058      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x13a>
 8005638:	2b40      	cmp	r3, #64	@ 0x40
 800563a:	d86f      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 800563c:	2b30      	cmp	r3, #48	@ 0x30
 800563e:	d064      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	2b30      	cmp	r3, #48	@ 0x30
 8005642:	d86b      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d060      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15a>
 8005648:	2b20      	cmp	r3, #32
 800564a:	d867      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d05c      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15a>
 8005650:	2b10      	cmp	r3, #16
 8005652:	d05a      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x15a>
 8005654:	e062      	b.n	800571c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005666:	f000 fafd 	bl	8005c64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	609a      	str	r2, [r3, #8]
      break;
 8005682:	e04f      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	f000 fae6 	bl	8005c64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a6:	609a      	str	r2, [r3, #8]
      break;
 80056a8:	e03c      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 fa5a 	bl	8005b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2150      	movs	r1, #80	@ 0x50
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fab3 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 80056c8:	e02c      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d6:	461a      	mov	r2, r3
 80056d8:	f000 fa79 	bl	8005bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2160      	movs	r1, #96	@ 0x60
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 faa3 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 80056e8:	e01c      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 fa3a 	bl	8005b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2140      	movs	r1, #64	@ 0x40
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fa93 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005708:	e00c      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 fa8a 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 800571a:	e003      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	e000      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3a      	ldr	r2, [pc, #232]	@ (800583c <TIM_Base_SetConfig+0xfc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a37      	ldr	r2, [pc, #220]	@ (8005840 <TIM_Base_SetConfig+0x100>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a36      	ldr	r2, [pc, #216]	@ (8005844 <TIM_Base_SetConfig+0x104>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a35      	ldr	r2, [pc, #212]	@ (8005848 <TIM_Base_SetConfig+0x108>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2b      	ldr	r2, [pc, #172]	@ (800583c <TIM_Base_SetConfig+0xfc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005798:	d017      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a28      	ldr	r2, [pc, #160]	@ (8005840 <TIM_Base_SetConfig+0x100>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a27      	ldr	r2, [pc, #156]	@ (8005844 <TIM_Base_SetConfig+0x104>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00f      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a26      	ldr	r2, [pc, #152]	@ (8005848 <TIM_Base_SetConfig+0x108>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00b      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a25      	ldr	r2, [pc, #148]	@ (800584c <TIM_Base_SetConfig+0x10c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a24      	ldr	r2, [pc, #144]	@ (8005850 <TIM_Base_SetConfig+0x110>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a23      	ldr	r2, [pc, #140]	@ (8005854 <TIM_Base_SetConfig+0x114>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d108      	bne.n	80057dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a0e      	ldr	r2, [pc, #56]	@ (800583c <TIM_Base_SetConfig+0xfc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d103      	bne.n	8005810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f023 0201 	bic.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]
  }
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800

08005858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 0201 	bic.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 0302 	bic.w	r3, r3, #2
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005920 <TIM_OC1_SetConfig+0xc8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10c      	bne.n	80058ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0308 	bic.w	r3, r3, #8
 80058ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a13      	ldr	r2, [pc, #76]	@ (8005920 <TIM_OC1_SetConfig+0xc8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d111      	bne.n	80058fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40010000 	.word	0x40010000

08005924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f023 0210 	bic.w	r2, r3, #16
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0320 	bic.w	r3, r3, #32
 800596e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1e      	ldr	r2, [pc, #120]	@ (80059f8 <TIM_OC2_SetConfig+0xd4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d10d      	bne.n	80059a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800599e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a15      	ldr	r2, [pc, #84]	@ (80059f8 <TIM_OC2_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d113      	bne.n	80059d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000

080059fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	@ (8005acc <TIM_OC3_SetConfig+0xd0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10d      	bne.n	8005a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <TIM_OC3_SetConfig+0xd0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d113      	bne.n	8005aa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40010000 	.word	0x40010000

08005ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	031b      	lsls	r3, r3, #12
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a10      	ldr	r2, [pc, #64]	@ (8005b6c <TIM_OC4_SetConfig+0x9c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d109      	bne.n	8005b44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	019b      	lsls	r3, r3, #6
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40010000 	.word	0x40010000

08005b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 030a 	bic.w	r3, r3, #10
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0210 	bic.w	r2, r3, #16
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f043 0307 	orr.w	r3, r3, #7
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e050      	b.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d013      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a16      	ldr	r2, [pc, #88]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10c      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40000c00 	.word	0x40000c00
 8005d7c:	40014000 	.word	0x40014000

08005d80 <memset>:
 8005d80:	4402      	add	r2, r0
 8005d82:	4603      	mov	r3, r0
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d100      	bne.n	8005d8a <memset+0xa>
 8005d88:	4770      	bx	lr
 8005d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8e:	e7f9      	b.n	8005d84 <memset+0x4>

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	@ (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1b64      	subs	r4, r4, r5
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	42a6      	cmp	r6, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4d0b      	ldr	r5, [pc, #44]	@ (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	@ (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f000 f818 	bl	8005dd8 <_init>
 8005da8:	1b64      	subs	r4, r4, r5
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2600      	movs	r6, #0
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db8:	4798      	blx	r3
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc2:	4798      	blx	r3
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08005e10 	.word	0x08005e10
 8005dcc:	08005e10 	.word	0x08005e10
 8005dd0:	08005e10 	.word	0x08005e10
 8005dd4:	08005e14 	.word	0x08005e14

08005dd8 <_init>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr

08005de4 <_fini>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	bf00      	nop
 8005de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dea:	bc08      	pop	{r3}
 8005dec:	469e      	mov	lr, r3
 8005dee:	4770      	bx	lr
