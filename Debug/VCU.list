
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004fe8  08004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005010  08005010  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005010  08005010  00006010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005018  08005018  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005020  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000018  08005034  00007018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005034  00007224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113f2  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253c  00000000  00000000  00018436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf8  00000000  00000000  0001b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e6b  00000000  00000000  0001c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f1a  00000000  00000000  00034553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c683  00000000  00000000  0004646d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e8  00000000  00000000  000e2b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e711c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fd0 	.word	0x08004fd0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08004fd0 	.word	0x08004fd0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <updateBMSDiagnostics>:

/*            VCU Method Declarations  end         */



void updateBMSDiagnostics(void){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <readAPPSandBSE>:

void readAPPSandBSE(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

	// ADC Read Code
	HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 80004d8:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <readAPPSandBSE+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4917      	ldr	r1, [pc, #92]	@ (800053c <readAPPSandBSE+0x68>)
 80004e0:	4817      	ldr	r0, [pc, #92]	@ (8000540 <readAPPSandBSE+0x6c>)
 80004e2:	f001 fdeb 	bl	80020bc <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - millis_since_dma_read >DMA_READ_TIMEOUT){
 80004e6:	f001 fd75 	bl	8001fd4 <HAL_GetTick>
 80004ea:	4602      	mov	r2, r0
 80004ec:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <readAPPSandBSE+0x70>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	220a      	movs	r2, #10
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d91c      	bls.n	8000532 <readAPPSandBSE+0x5e>
		apps1Value = ADC_Reads[APPS1_RANK];
 80004f8:	2300      	movs	r3, #0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <readAPPSandBSE+0x68>)
 80004fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <readAPPSandBSE+0x74>)
 8000506:	801a      	strh	r2, [r3, #0]
		apps2Value = ADC_Reads[APPS2_RANK];
 8000508:	2301      	movs	r3, #1
 800050a:	461a      	mov	r2, r3
 800050c:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <readAPPSandBSE+0x68>)
 800050e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <readAPPSandBSE+0x78>)
 8000516:	801a      	strh	r2, [r3, #0]
		bseValue = ADC_Reads[BSE_RANK];
 8000518:	2302      	movs	r3, #2
 800051a:	461a      	mov	r2, r3
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <readAPPSandBSE+0x68>)
 800051e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000522:	b29a      	uxth	r2, r3
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <readAPPSandBSE+0x7c>)
 8000526:	801a      	strh	r2, [r3, #0]

		millis_since_dma_read = HAL_GetTick();
 8000528:	f001 fd54 	bl	8001fd4 <HAL_GetTick>
 800052c:	4603      	mov	r3, r0
 800052e:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <readAPPSandBSE+0x70>)
 8000530:	6013      	str	r3, [r2, #0]
	}

//	HAL_ADC_Stop_DMA(&hadc1);


}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000004 	.word	0x20000004
 800053c:	200001e0 	.word	0x200001e0
 8000540:	20000034 	.word	0x20000034
 8000544:	200001dc 	.word	0x200001dc
 8000548:	200001c4 	.word	0x200001c4
 800054c:	200001c6 	.word	0x200001c6
 8000550:	200001c8 	.word	0x200001c8

08000554 <calculateTorqueRequest>:

void calculateTorqueRequest(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0

	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 800055a:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <calculateTorqueRequest+0x11c>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	ee07 3a90 	vmov	s15, r3
 8000562:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000566:	230a      	movs	r3, #10
 8000568:	ee07 3a90 	vmov	s15, r3
 800056c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000570:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000574:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000578:	461a      	mov	r2, r3
 800057a:	230a      	movs	r3, #10
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	ee07 3a90 	vmov	s15, r3
 8000582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800058a:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <calculateTorqueRequest+0x120>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	ee07 3a90 	vmov	s15, r3
 8000596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800059a:	230a      	movs	r3, #10
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80005a8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005ac:	461a      	mov	r2, r3
 80005ae:	230a      	movs	r3, #10
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	ee07 3a90 	vmov	s15, r3
 80005b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005be:	edc7 7a02 	vstr	s15, [r7, #8]
	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 80005c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80005c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80005ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80005d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d6:	edc7 7a01 	vstr	s15, [r7, #4]
	if(appsValue >= 0){
 80005da:	edd7 7a01 	vldr	s15, [r7, #4]
 80005de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e6:	db11      	blt.n	800060c <calculateTorqueRequest+0xb8>
		requestedTorque = ((float)(MAX_TORQUE-MIN_TORQUE)) * appsValue + MIN_TORQUE;
 80005e8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000678 <calculateTorqueRequest+0x124>
 80005ec:	eddf 7a23 	vldr	s15, [pc, #140]	@ 800067c <calculateTorqueRequest+0x128>
 80005f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800067c <calculateTorqueRequest+0x128>
 8000600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <calculateTorqueRequest+0x12c>)
 8000606:	edc3 7a00 	vstr	s15, [r3]
	}else{
		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
	}
}
 800060a:	e02a      	b.n	8000662 <calculateTorqueRequest+0x10e>
		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <calculateTorqueRequest+0x130>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000618:	2300      	movs	r3, #0
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000622:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000626:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800062a:	461a      	mov	r2, r3
 800062c:	2300      	movs	r3, #0
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800063c:	edc7 7a00 	vstr	s15, [r7]
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000640:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000644:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800067c <calculateTorqueRequest+0x128>
 8000648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800064c:	edd7 7a00 	vldr	s15, [r7]
 8000650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000654:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800067c <calculateTorqueRequest+0x128>
 8000658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <calculateTorqueRequest+0x12c>)
 800065e:	edc3 7a00 	vstr	s15, [r3]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200001c4 	.word	0x200001c4
 8000674:	200001c6 	.word	0x200001c6
 8000678:	42d80000 	.word	0x42d80000
 800067c:	00000000 	.word	0x00000000
 8000680:	200001cc 	.word	0x200001cc
 8000684:	200001c8 	.word	0x200001c8

08000688 <checkAPPSPlausibility>:

void checkAPPSPlausibility(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL) * 100;
 800068c:	4b39      	ldr	r3, [pc, #228]	@ (8000774 <checkAPPSPlausibility+0xec>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	ee07 3a90 	vmov	s15, r3
 8000694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000698:	230a      	movs	r3, #10
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006a6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80006aa:	461a      	mov	r2, r3
 80006ac:	230a      	movs	r3, #10
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006bc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000778 <checkAPPSPlausibility+0xf0>
 80006c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c4:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <checkAPPSPlausibility+0xf4>)
 80006c6:	edc3 7a00 	vstr	s15, [r3]
  apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL) * 100;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000780 <checkAPPSPlausibility+0xf8>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	ee07 3a90 	vmov	s15, r3
 80006d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006d6:	230a      	movs	r3, #10
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006e4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80006e8:	461a      	mov	r2, r3
 80006ea:	230a      	movs	r3, #10
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000778 <checkAPPSPlausibility+0xf0>
 80006fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <checkAPPSPlausibility+0xfc>)
 8000704:	edc3 7a00 	vstr	s15, [r3]

  if(abs(apps1_as_percent-apps2_as_percent)> APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE){
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <checkAPPSPlausibility+0xf4>)
 800070a:	ed93 7a00 	vldr	s14, [r3]
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <checkAPPSPlausibility+0xfc>)
 8000710:	edd3 7a00 	vldr	s15, [r3]
 8000714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	2b00      	cmp	r3, #0
 8000722:	bfb8      	it	lt
 8000724:	425b      	neglt	r3, r3
 8000726:	220a      	movs	r2, #10
 8000728:	4293      	cmp	r3, r2
 800072a:	dd0c      	ble.n	8000746 <checkAPPSPlausibility+0xbe>
	  millis_since_apps_implausible = HAL_GetTick();
 800072c:	f001 fc52 	bl	8001fd4 <HAL_GetTick>
 8000730:	4603      	mov	r3, r0
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <checkAPPSPlausibility+0x100>)
 8000734:	6013      	str	r3, [r2, #0]
	  apps_plausible = false;
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <checkAPPSPlausibility+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	801a      	strh	r2, [r3, #0]
	  requestedTorque = 0;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <checkAPPSPlausibility+0x108>)
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
  }else if(!apps_plausible && HAL_GetTick()-millis_since_apps_implausible<APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS){
	  requestedTorque = 0;
  }else{
	  apps_plausible = true;
  }
}
 8000744:	e014      	b.n	8000770 <checkAPPSPlausibility+0xe8>
  }else if(!apps_plausible && HAL_GetTick()-millis_since_apps_implausible<APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS){
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <checkAPPSPlausibility+0x104>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10d      	bne.n	800076a <checkAPPSPlausibility+0xe2>
 800074e:	f001 fc41 	bl	8001fd4 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <checkAPPSPlausibility+0x100>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	2264      	movs	r2, #100	@ 0x64
 800075c:	4293      	cmp	r3, r2
 800075e:	d204      	bcs.n	800076a <checkAPPSPlausibility+0xe2>
	  requestedTorque = 0;
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <checkAPPSPlausibility+0x108>)
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
}
 8000768:	e002      	b.n	8000770 <checkAPPSPlausibility+0xe8>
	  apps_plausible = true;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <checkAPPSPlausibility+0x104>)
 800076c:	2201      	movs	r2, #1
 800076e:	801a      	strh	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200001c4 	.word	0x200001c4
 8000778:	42c80000 	.word	0x42c80000
 800077c:	200001ec 	.word	0x200001ec
 8000780:	200001c6 	.word	0x200001c6
 8000784:	200001f0 	.word	0x200001f0
 8000788:	200001d8 	.word	0x200001d8
 800078c:	20000000 	.word	0x20000000
 8000790:	200001cc 	.word	0x200001cc

08000794 <checkCrossCheck>:

void checkCrossCheck(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0

	bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL) * 100;
 800079a:	4b4f      	ldr	r3, [pc, #316]	@ (80008d8 <checkCrossCheck+0x144>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007a6:	2300      	movs	r3, #0
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80007b4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80007b8:	461a      	mov	r2, r3
 80007ba:	2300      	movs	r3, #0
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	ee07 3a90 	vmov	s15, r3
 80007c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007ca:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80008dc <checkCrossCheck+0x148>
 80007ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007d2:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <checkCrossCheck+0x14c>)
 80007d4:	edc3 7a00 	vstr	s15, [r3]
	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL) * 100;
 80007d8:	4b42      	ldr	r3, [pc, #264]	@ (80008e4 <checkCrossCheck+0x150>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	ee07 3a90 	vmov	s15, r3
 80007e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007e4:	230a      	movs	r3, #10
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80007f2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80007f6:	461a      	mov	r2, r3
 80007f8:	230a      	movs	r3, #10
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	ee07 3a90 	vmov	s15, r3
 8000800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000808:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80008dc <checkCrossCheck+0x148>
 800080c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000810:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL) * 100;
 8000814:	4b34      	ldr	r3, [pc, #208]	@ (80008e8 <checkCrossCheck+0x154>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000820:	230a      	movs	r3, #10
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800082e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000832:	461a      	mov	r2, r3
 8000834:	230a      	movs	r3, #10
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	ee07 3a90 	vmov	s15, r3
 800083c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000844:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80008dc <checkCrossCheck+0x148>
 8000848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084c:	edc7 7a02 	vstr	s15, [r7, #8]
	float apps_as_percent = ((float)apps1_as_percent+apps2_as_percent)/2;
 8000850:	ed97 7a03 	vldr	s14, [r7, #12]
 8000854:	edd7 7a02 	vldr	s15, [r7, #8]
 8000858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800085c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000864:	edc7 7a01 	vstr	s15, [r7, #4]

	if(apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT && bseValue > BRAKE_ACTIVATED_ADC_VAL){
 8000868:	2319      	movs	r3, #25
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000872:	ed97 7a01 	vldr	s14, [r7, #4]
 8000876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800087a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087e:	dd0c      	ble.n	800089a <checkCrossCheck+0x106>
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <checkCrossCheck+0x144>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	2264      	movs	r2, #100	@ 0x64
 8000886:	4293      	cmp	r3, r2
 8000888:	d907      	bls.n	800089a <checkCrossCheck+0x106>
	  cross_check_plausible = false;
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <checkCrossCheck+0x158>)
 800088c:	2200      	movs	r2, #0
 800088e:	801a      	strh	r2, [r3, #0]
	  requestedTorque = 0;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <checkCrossCheck+0x15c>)
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e018      	b.n	80008cc <checkCrossCheck+0x138>
	}else if(!cross_check_plausible && apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT){
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <checkCrossCheck+0x158>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d110      	bne.n	80008c4 <checkCrossCheck+0x130>
 80008a2:	2305      	movs	r3, #5
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80008b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b8:	dd04      	ble.n	80008c4 <checkCrossCheck+0x130>
		requestedTorque = 0;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <checkCrossCheck+0x15c>)
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e003      	b.n	80008cc <checkCrossCheck+0x138>
	}else{
		cross_check_plausible = true;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <checkCrossCheck+0x158>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	801a      	strh	r2, [r3, #0]
	}

}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	200001c8 	.word	0x200001c8
 80008dc:	42c80000 	.word	0x42c80000
 80008e0:	200001f4 	.word	0x200001f4
 80008e4:	200001c4 	.word	0x200001c4
 80008e8:	200001c6 	.word	0x200001c6
 80008ec:	20000002 	.word	0x20000002
 80008f0:	200001cc 	.word	0x200001cc

080008f4 <sendTorqueCommand>:

void sendTorqueCommand(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0

	int torqueValue = (int)(requestedTorque * 10);  // Convert to integer, multiply by 10
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <sendTorqueCommand+0x50>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090c:	ee17 3a90 	vmov	r3, s15
 8000910:	617b      	str	r3, [r7, #20]

	// Break the torqueValue into two bytes (little-endian)
	char msg0 = torqueValue & 0xFF;  // Low byte
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	74fb      	strb	r3, [r7, #19]
	char msg1 = (torqueValue >> 8) & 0xFF;  // High byte
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	121b      	asrs	r3, r3, #8
 800091a:	74bb      	strb	r3, [r7, #18]

	struct can_frame torqueCommand;
	torqueCommand.can_id = 0x0C0;
 800091c:	23c0      	movs	r3, #192	@ 0xc0
 800091e:	603b      	str	r3, [r7, #0]
	torqueCommand.can_dlc = 8;
 8000920:	2308      	movs	r3, #8
 8000922:	713b      	strb	r3, [r7, #4]
	torqueCommand.data[0] = msg0;
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	723b      	strb	r3, [r7, #8]
	torqueCommand.data[1] = msg1;
 8000928:	7cbb      	ldrb	r3, [r7, #18]
 800092a:	727b      	strb	r3, [r7, #9]
	torqueCommand.data[4] = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	733b      	strb	r3, [r7, #12]
	torqueCommand.data[5] = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	737b      	strb	r3, [r7, #13]


	MCP_sendMessage(&torqueCommand);
 8000934:	463b      	mov	r3, r7
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f812 	bl	8001960 <MCP_sendMessage>


}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001cc 	.word	0x200001cc

08000948 <checkReadyToDrive>:

void checkReadyToDrive(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800094e:	2120      	movs	r1, #32
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <checkReadyToDrive+0x30>)
 8000952:	f002 fd67 	bl	8003424 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d107      	bne.n	8000970 <checkReadyToDrive+0x28>
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <checkReadyToDrive+0x34>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2264      	movs	r2, #100	@ 0x64
 8000966:	4293      	cmp	r3, r2
 8000968:	d902      	bls.n	8000970 <checkReadyToDrive+0x28>
	    readyToDrive = true;
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <checkReadyToDrive+0x38>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40020000 	.word	0x40020000
 800097c:	200001c8 	.word	0x200001c8
 8000980:	200001f8 	.word	0x200001f8

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f001 fabe 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f846 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 f9ee 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000994:	f000 f9cc 	bl	8000d30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000998:	f000 f9a0 	bl	8000cdc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800099c:	f000 f8aa 	bl	8000af4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80009a0:	f000 f94e 	bl	8000c40 <MX_TIM3_Init>
  MX_SPI3_Init();
 80009a4:	f000 f916 	bl	8000bd4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80009a8:	4815      	ldr	r0, [pc, #84]	@ (8000a00 <main+0x7c>)
 80009aa:	f003 fd6b 	bl	8004484 <HAL_TIM_Base_Start>

  MCP_reset();
 80009ae:	f000 fcb5 	bl	800131c <MCP_reset>
  MCP_setBitrate(CAN_125KBPS);
 80009b2:	200b      	movs	r0, #11
 80009b4:	f000 ff22 	bl	80017fc <MCP_setBitrate>
  MCP_setNormalMode();
 80009b8:	f000 fd4e 	bl	8001458 <MCP_setNormalMode>

  diagnostics.inverterActive = 0;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <main+0x80>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 MCP_readMessage(&driveCriticalCANRead);
 80009c2:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <main+0x84>)
 80009c4:	f001 f896 	bl	8001af4 <MCP_readMessage>
	 readAPPSandBSE();
 80009c8:	f7ff fd84 	bl	80004d4 <readAPPSandBSE>
	 calculateTorqueRequest();
 80009cc:	f7ff fdc2 	bl	8000554 <calculateTorqueRequest>
	 checkAPPSPlausibility();
 80009d0:	f7ff fe5a 	bl	8000688 <checkAPPSPlausibility>
	 checkCrossCheck();
 80009d4:	f7ff fede 	bl	8000794 <checkCrossCheck>
	 checkReadyToDrive();
 80009d8:	f7ff ffb6 	bl	8000948 <checkReadyToDrive>
	 updateBMSDiagnostics();
 80009dc:	f7ff fd72 	bl	80004c4 <updateBMSDiagnostics>

	 finalTorqueRequest = requestedTorque;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <main+0x88>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <main+0x8c>)
 80009e6:	6013      	str	r3, [r2, #0]
	 lastRequestedTorque = requestedTorque;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <main+0x88>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <main+0x90>)
 80009ee:	6013      	str	r3, [r2, #0]

	 if(readyToDrive){
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <main+0x94>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0e4      	beq.n	80009c2 <main+0x3e>
		 sendTorqueCommand();
 80009f8:	f7ff ff7c 	bl	80008f4 <sendTorqueCommand>
	 MCP_readMessage(&driveCriticalCANRead);
 80009fc:	e7e1      	b.n	80009c2 <main+0x3e>
 80009fe:	bf00      	nop
 8000a00:	20000134 	.word	0x20000134
 8000a04:	200001fc 	.word	0x200001fc
 8000a08:	20000210 	.word	0x20000210
 8000a0c:	200001cc 	.word	0x200001cc
 8000a10:	200001d4 	.word	0x200001d4
 8000a14:	200001d0 	.word	0x200001d0
 8000a18:	200001f8 	.word	0x200001f8

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	@ 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2230      	movs	r2, #48	@ 0x30
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f004 faa4 	bl	8004f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	4a28      	ldr	r2, [pc, #160]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a50:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <SystemClock_Config+0xd4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a68:	4a21      	ldr	r2, [pc, #132]	@ (8000af0 <SystemClock_Config+0xd4>)
 8000a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <SystemClock_Config+0xd4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2310      	movs	r3, #16
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a90:	2310      	movs	r3, #16
 8000a92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fcee 	bl	8003488 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab2:	f000 f9ed 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2302      	movs	r3, #2
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 ff50 	bl	8003978 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ade:	f000 f9d7 	bl	8000e90 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	@ 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b06:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b08:	4a31      	ldr	r2, [pc, #196]	@ (8000bd0 <MX_ADC1_Init+0xdc>)
 8000b0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b26:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b44:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b58:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b5a:	f001 fa6b 	bl	8002034 <HAL_ADC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b64:	f000 f994 	bl	8000e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000b70:	2304      	movs	r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b7a:	f001 fbad 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b84:	f000 f984 	bl	8000e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000b96:	f001 fb9f 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ba0:	f000 f976 	bl	8000e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000bac:	2301      	movs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_ADC1_Init+0xd8>)
 8000bb6:	f001 fb8f 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000bc0:	f000 f966 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000034 	.word	0x20000034
 8000bd0:	40012000 	.word	0x40012000

08000bd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000bda:	4a18      	ldr	r2, [pc, #96]	@ (8000c3c <MX_SPI3_Init+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c20:	220a      	movs	r2, #10
 8000c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_SPI3_Init+0x64>)
 8000c26:	f003 f8c7 	bl	8003db8 <HAL_SPI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c30:	f000 f92e 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000dc 	.word	0x200000dc
 8000c3c:	40003c00 	.word	0x40003c00

08000c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <MX_TIM3_Init+0x98>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c82:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000c84:	f003 fbae 	bl	80043e4 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f8ff 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000ca0:	f003 fc4a 	bl	8004538 <HAL_TIM_ConfigClockSource>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 f8f1 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <MX_TIM3_Init+0x94>)
 8000cbc:	f003 fe2a 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cc6:	f000 f8e3 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000134 	.word	0x20000134
 8000cd8:	40000400 	.word	0x40000400

08000cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <MX_USART2_UART_Init+0x50>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f003 fe6c 	bl	80049f0 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d1e:	f000 f8b7 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000017c 	.word	0x2000017c
 8000d2c:	40004400 	.word	0x40004400

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_DMA_Init+0x3c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2038      	movs	r0, #56	@ 0x38
 8000d58:	f001 fe39 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d5c:	2038      	movs	r0, #56	@ 0x38
 8000d5e:	f001 fe52 	bl	8002a06 <HAL_NVIC_EnableIRQ>

}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b3a      	ldr	r3, [pc, #232]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a35      	ldr	r2, [pc, #212]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b2c      	ldr	r3, [pc, #176]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a27      	ldr	r2, [pc, #156]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <MX_GPIO_Init+0x110>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4822      	ldr	r0, [pc, #136]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000dfc:	f002 fb2a 	bl	8003454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	4820      	ldr	r0, [pc, #128]	@ (8000e88 <MX_GPIO_Init+0x118>)
 8000e06:	f002 fb25 	bl	8003454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481a      	ldr	r0, [pc, #104]	@ (8000e8c <MX_GPIO_Init+0x11c>)
 8000e22:	f002 f97b 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e26:	2320      	movs	r3, #32
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <MX_GPIO_Init+0x114>)
 8000e3e:	f002 f96d 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e42:	2310      	movs	r3, #16
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <MX_GPIO_Init+0x118>)
 8000e5a:	f002 f95f 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_GPIO_Init+0x118>)
 8000e72:	f002 f953 	bl	800311c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020800 	.word	0x40020800

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <startSPI>:
#define SPI_CAN                 &hspi3
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET)

void startSPI() {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <startSPI+0x14>)
 8000ea6:	f002 fad5 	bl	8003454 <HAL_GPIO_WritePin>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <endSPI>:

void endSPI() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <endSPI+0x14>)
 8000ebe:	f002 fac9 	bl	8003454 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <SPI_transfer>:

uint8_t SPI_transfer(uint8_t txByte){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t rxByte;
	HAL_SPI_TransmitReceive(SPI_CAN, &txByte, &rxByte, 1, SPI_TIMEOUT);
 8000ed6:	f107 020f 	add.w	r2, r7, #15
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	230a      	movs	r3, #10
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <SPI_transfer+0x28>)
 8000ee4:	f002 fff1 	bl	8003eca <HAL_SPI_TransmitReceive>
	return rxByte;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000dc 	.word	0x200000dc

08000ef8 <setRegister>:

void setRegister(uint8_t reg, uint8_t value)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
    startSPI();
 8000f08:	f7ff ffc8 	bl	8000e9c <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f7ff ffdd 	bl	8000ecc <SPI_transfer>
    SPI_transfer(reg);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ffd9 	bl	8000ecc <SPI_transfer>
    SPI_transfer(value);
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffd5 	bl	8000ecc <SPI_transfer>
    endSPI();
 8000f22:	f7ff ffc7 	bl	8000eb4 <endSPI>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <setRegisters>:

void setRegisters(uint8_t reg, uint8_t values[], uint8_t n)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	6039      	str	r1, [r7, #0]
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71bb      	strb	r3, [r7, #6]
    startSPI();
 8000f3e:	f7ff ffad 	bl	8000e9c <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff ffc2 	bl	8000ecc <SPI_transfer>
    SPI_transfer(reg);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffbe 	bl	8000ecc <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e009      	b.n	8000f6a <setRegisters+0x3c>
        SPI_transfer(values[i]);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffb4 	bl	8000ecc <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	3301      	adds	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3f1      	bcc.n	8000f56 <setRegisters+0x28>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 8000f72:	f7ff ff9f 	bl	8000eb4 <endSPI>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <loadTx>:

void loadTx(uint8_t reg, uint8_t values[], uint8_t n){
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	6039      	str	r1, [r7, #0]
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	71bb      	strb	r3, [r7, #6]
    startSPI();
 8000f8e:	f7ff ff85 	bl	8000e9c <startSPI>
    //SPI_transfer(INSTRUCTION_WRITE);
    SPI_transfer(reg);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff99 	bl	8000ecc <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e009      	b.n	8000fb4 <loadTx+0x36>
        SPI_transfer(values[i]);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff8f 	bl	8000ecc <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f1      	bcc.n	8000fa0 <loadTx+0x22>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 8000fbc:	f7ff ff7a 	bl	8000eb4 <endSPI>
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <modifyRegister>:

void modifyRegister(uint8_t reg, uint8_t mask, uint8_t data)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	71bb      	strb	r3, [r7, #6]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	717b      	strb	r3, [r7, #5]
    startSPI();
 8000fda:	f7ff ff5f 	bl	8000e9c <startSPI>
    SPI_transfer(INSTRUCTION_BITMOD);
 8000fde:	2005      	movs	r0, #5
 8000fe0:	f7ff ff74 	bl	8000ecc <SPI_transfer>
    SPI_transfer(reg);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff70 	bl	8000ecc <SPI_transfer>
    SPI_transfer(mask);
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff6c 	bl	8000ecc <SPI_transfer>
    SPI_transfer(data);
 8000ff4:	797b      	ldrb	r3, [r7, #5]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff68 	bl	8000ecc <SPI_transfer>
    endSPI();
 8000ffc:	f7ff ff5a 	bl	8000eb4 <endSPI>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <readRegister>:




uint8_t readRegister(REGISTER reg)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    startSPI();
 8001012:	f7ff ff43 	bl	8000e9c <startSPI>
    SPI_transfer(INSTRUCTION_READ);
 8001016:	2003      	movs	r0, #3
 8001018:	f7ff ff58 	bl	8000ecc <SPI_transfer>
    SPI_transfer(reg);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff54 	bl	8000ecc <SPI_transfer>
    uint8_t ret = SPI_transfer(0x00);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ff51 	bl	8000ecc <SPI_transfer>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 800102e:	f7ff ff41 	bl	8000eb4 <endSPI>

    return ret;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <readRx>:
    	//HAL_SPI_Receive(&hspi3, values, n, SPI_TIMEOUT);  //Todo, check if the 0x00 from above is needed
    }
    	endSPI();
}

void readRx(REGISTER reg, uint8_t values[], uint8_t n){
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
    startSPI();
 800104c:	f7ff ff26 	bl	8000e9c <startSPI>
    SPI_transfer(reg);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff3a 	bl	8000ecc <SPI_transfer>
    // mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e00a      	b.n	8001074 <readRx+0x38>
        values[i] = SPI_transfer(0x00);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	18d4      	adds	r4, r2, r3
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ff31 	bl	8000ecc <SPI_transfer>
 800106a:	4603      	mov	r3, r0
 800106c:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3f0      	bcc.n	800105e <readRx+0x22>
    	//HAL_SPI_Receive(&hspi3, values, n, SPI_TIMEOUT);  //Todo, check if the 0x00 from above is needed
    }
    endSPI();
 800107c:	f7ff ff1a 	bl	8000eb4 <endSPI>
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}

08001088 <setMode>:

CAN_Error setMode(CANCTRL_REQOP_MODE mode)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]

    unsigned long endTime = HAL_GetTick() + 10;
 8001092:	f000 ff9f 	bl	8001fd4 <HAL_GetTick>
 8001096:	4603      	mov	r3, r0
 8001098:	330a      	adds	r3, #10
 800109a:	613b      	str	r3, [r7, #16]
    uint8_t modeMatch = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 80010a0:	e019      	b.n	80010d6 <setMode+0x4e>
    	modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 80010a2:	21e0      	movs	r1, #224	@ 0xe0
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	461a      	mov	r2, r3
 80010a8:	200f      	movs	r0, #15
 80010aa:	f7ff ff8d 	bl	8000fc8 <modifyRegister>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 80010ae:	200e      	movs	r0, #14
 80010b0:	f7ff ffaa 	bl	8001008 <readRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 80010b8:	22e0      	movs	r2, #224	@ 0xe0
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4013      	ands	r3, r2
 80010be:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	bf0c      	ite	eq
 80010c8:	2301      	moveq	r3, #1
 80010ca:	2300      	movne	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <setMode+0x5c>
    while (HAL_GetTick() < endTime) {
 80010d6:	f000 ff7d 	bl	8001fd4 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4293      	cmp	r3, r2
 80010e0:	d8df      	bhi.n	80010a2 <setMode+0x1a>
 80010e2:	e000      	b.n	80010e6 <setMode+0x5e>
            break;
 80010e4:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3

}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <setConfigMode>:

CAN_Error setConfigMode()
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_CONFIG);
 80010fe:	2080      	movs	r0, #128	@ 0x80
 8001100:	f7ff ffc2 	bl	8001088 <setMode>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}

0800110a <prepareId>:

void prepareId(uint8_t *buffer, uint8_t ext, uint32_t id)
{
 800110a:	b480      	push	{r7}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	460b      	mov	r3, r1
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	72fb      	strb	r3, [r7, #11]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	82fb      	strh	r3, [r7, #22]

    if(ext) {
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d046      	beq.n	80011b0 <prepareId+0xa6>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8001122:	2303      	movs	r3, #3
 8001124:	461a      	mov	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	8afa      	ldrh	r2, [r7, #22]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29a      	uxth	r2, r3
 8001136:	2302      	movs	r3, #2
 8001138:	4619      	mov	r1, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	440b      	add	r3, r1
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0c1b      	lsrs	r3, r3, #16
 8001146:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8001148:	8afb      	ldrh	r3, [r7, #22]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	2301      	movs	r3, #1
 800114e:	4619      	mov	r1, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	440b      	add	r3, r1
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 800115c:	2301      	movs	r3, #1
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	7819      	ldrb	r1, [r3, #0]
 8001166:	8afb      	ldrh	r3, [r7, #22]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f023 031f 	bic.w	r3, r3, #31
 8001172:	b2da      	uxtb	r2, r3
 8001174:	2301      	movs	r3, #1
 8001176:	4618      	mov	r0, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4403      	add	r3, r0
 800117c:	440a      	add	r2, r1
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8001182:	2301      	movs	r3, #1
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	2108      	movs	r1, #8
 800118e:	2301      	movs	r3, #1
 8001190:	4618      	mov	r0, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4403      	add	r3, r0
 8001196:	430a      	orrs	r2, r1
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 800119c:	8afb      	ldrh	r3, [r7, #22]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	2300      	movs	r3, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	440b      	add	r3, r1
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80011ae:	e01d      	b.n	80011ec <prepareId+0xe2>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80011b0:	8afb      	ldrh	r3, [r7, #22]
 80011b2:	08db      	lsrs	r3, r3, #3
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	2300      	movs	r3, #0
 80011b8:	4619      	mov	r1, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	440b      	add	r3, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	2301      	movs	r3, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	440b      	add	r3, r1
 80011ce:	0152      	lsls	r2, r2, #5
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80011d4:	2303      	movs	r3, #3
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80011e0:	2302      	movs	r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
}
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <getStatus>:

uint8_t getStatus(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
    startSPI();
 80011fe:	f7ff fe4d 	bl	8000e9c <startSPI>
    SPI_transfer(INSTRUCTION_READ_STATUS);
 8001202:	20a0      	movs	r0, #160	@ 0xa0
 8001204:	f7ff fe62 	bl	8000ecc <SPI_transfer>
    uint8_t i = SPI_transfer(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fe5f 	bl	8000ecc <SPI_transfer>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    endSPI();
 8001212:	f7ff fe4f 	bl	8000eb4 <endSPI>
    return i;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <MCP_setFilterMask>:

CAN_Error MCP_setFilterMask(MASK mask, uint8_t ext, uint32_t ulData)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	603a      	str	r2, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	460b      	mov	r3, r1
 800122e:	71bb      	strb	r3, [r7, #6]
	CAN_Error res = setConfigMode();
 8001230:	f7ff ff63 	bl	80010fa <setConfigMode>
 8001234:	4603      	mov	r3, r0
 8001236:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MCP_setFilterMask+0x22>
        return res;
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	e01c      	b.n	800127c <MCP_setFilterMask+0x5c>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8001242:	79b9      	ldrb	r1, [r7, #6]
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff5d 	bl	800110a <prepareId>

    REGISTER reg;
    switch (mask) {
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <MCP_setFilterMask+0x3c>
 8001256:	2b01      	cmp	r3, #1
 8001258:	d003      	beq.n	8001262 <MCP_setFilterMask+0x42>
 800125a:	e005      	b.n	8001268 <MCP_setFilterMask+0x48>
        case MASK0: reg = MCP_RXM0SIDH; break;
 800125c:	2320      	movs	r3, #32
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e004      	b.n	800126c <MCP_setFilterMask+0x4c>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8001262:	2324      	movs	r3, #36	@ 0x24
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e001      	b.n	800126c <MCP_setFilterMask+0x4c>
        default:
            return ERROR_FAIL;
 8001268:	2301      	movs	r3, #1
 800126a:	e007      	b.n	800127c <MCP_setFilterMask+0x5c>
    }

    setRegisters(reg, tbufdata, 4);
 800126c:	f107 0108 	add.w	r1, r7, #8
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2204      	movs	r2, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe5a 	bl	8000f2e <setRegisters>

    return ERROR_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <MCP_setFilter>:

CAN_Error MCP_setFilter(RXF num, uint8_t ext, uint32_t ulData)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	603a      	str	r2, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	460b      	mov	r3, r1
 8001292:	71bb      	strb	r3, [r7, #6]
    CAN_Error res = setConfigMode();
 8001294:	f7ff ff31 	bl	80010fa <setConfigMode>
 8001298:	4603      	mov	r3, r0
 800129a:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MCP_setFilter+0x22>
        return res;
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	e035      	b.n	8001312 <MCP_setFilter+0x8e>
    }

    REGISTER reg;

    switch (num) {
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d821      	bhi.n	80012f0 <MCP_setFilter+0x6c>
 80012ac:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <MCP_setFilter+0x30>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012cd 	.word	0x080012cd
 80012b8:	080012d3 	.word	0x080012d3
 80012bc:	080012d9 	.word	0x080012d9
 80012c0:	080012df 	.word	0x080012df
 80012c4:	080012e5 	.word	0x080012e5
 80012c8:	080012eb 	.word	0x080012eb
        case RXF0: reg = MCP_RXF0SIDH; break;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e010      	b.n	80012f4 <MCP_setFilter+0x70>
        case RXF1: reg = MCP_RXF1SIDH; break;
 80012d2:	2304      	movs	r3, #4
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	e00d      	b.n	80012f4 <MCP_setFilter+0x70>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80012d8:	2308      	movs	r3, #8
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e00a      	b.n	80012f4 <MCP_setFilter+0x70>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80012de:	2310      	movs	r3, #16
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e007      	b.n	80012f4 <MCP_setFilter+0x70>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80012e4:	2314      	movs	r3, #20
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e004      	b.n	80012f4 <MCP_setFilter+0x70>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80012ea:	2318      	movs	r3, #24
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e001      	b.n	80012f4 <MCP_setFilter+0x70>
        default:
            return ERROR_FAIL;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00e      	b.n	8001312 <MCP_setFilter+0x8e>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80012f4:	79b9      	ldrb	r1, [r7, #6]
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff04 	bl	800110a <prepareId>
    setRegisters(reg, tbufdata, 4);
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	2204      	movs	r2, #4
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fe0f 	bl	8000f2e <setRegisters>

    return ERROR_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop

0800131c <MCP_reset>:
//
//    return ERROR_OK;
//}

CAN_Error MCP_reset(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
    startSPI();
 8001322:	f7ff fdbb 	bl	8000e9c <startSPI>
    SPI_transfer(INSTRUCTION_RESET);
 8001326:	20c0      	movs	r0, #192	@ 0xc0
 8001328:	f7ff fdd0 	bl	8000ecc <SPI_transfer>
    endSPI();
 800132c:	f7ff fdc2 	bl	8000eb4 <endSPI>

    HAL_Delay(10);
 8001330:	200a      	movs	r0, #10
 8001332:	f000 fe5b 	bl	8001fec <HAL_Delay>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	220e      	movs	r2, #14
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fe1a 	bl	8004f78 <memset>
    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	220e      	movs	r2, #14
 800134a:	4619      	mov	r1, r3
 800134c:	2030      	movs	r0, #48	@ 0x30
 800134e:	f7ff fdee 	bl	8000f2e <setRegisters>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	220e      	movs	r2, #14
 8001358:	4619      	mov	r1, r3
 800135a:	2040      	movs	r0, #64	@ 0x40
 800135c:	f7ff fde7 	bl	8000f2e <setRegisters>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	220e      	movs	r2, #14
 8001366:	4619      	mov	r1, r3
 8001368:	2050      	movs	r0, #80	@ 0x50
 800136a:	f7ff fde0 	bl	8000f2e <setRegisters>

    setRegister(MCP_RXB0CTRL, 0);
 800136e:	2100      	movs	r1, #0
 8001370:	2060      	movs	r0, #96	@ 0x60
 8001372:	f7ff fdc1 	bl	8000ef8 <setRegister>
    setRegister(MCP_RXB1CTRL, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2070      	movs	r0, #112	@ 0x70
 800137a:	f7ff fdbd 	bl	8000ef8 <setRegister>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 800137e:	21a3      	movs	r1, #163	@ 0xa3
 8001380:	202b      	movs	r0, #43	@ 0x2b
 8001382:	f7ff fdb9 	bl	8000ef8 <setRegister>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8001386:	2260      	movs	r2, #96	@ 0x60
 8001388:	2304      	movs	r3, #4
 800138a:	4313      	orrs	r3, r2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2203      	movs	r2, #3
 8001390:	4313      	orrs	r3, r2
 8001392:	b2d9      	uxtb	r1, r3
 8001394:	2200      	movs	r2, #0
 8001396:	2304      	movs	r3, #4
 8001398:	4313      	orrs	r3, r2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2200      	movs	r2, #0
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	2060      	movs	r0, #96	@ 0x60
 80013a6:	f7ff fe0f 	bl	8000fc8 <modifyRegister>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 80013aa:	2260      	movs	r2, #96	@ 0x60
 80013ac:	2307      	movs	r3, #7
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	2201      	movs	r2, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	2070      	movs	r0, #112	@ 0x70
 80013be:	f7ff fe03 	bl	8000fc8 <modifyRegister>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 80013c2:	4a24      	ldr	r2, [pc, #144]	@ (8001454 <MCP_reset+0x138>)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ca:	6018      	str	r0, [r3, #0]
 80013cc:	3304      	adds	r3, #4
 80013ce:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d4:	e019      	b.n	800140a <MCP_reset+0xee>
        uint8_t ext = (i == 1);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	2b01      	cmp	r3, #1
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	77bb      	strb	r3, [r7, #30]
        CAN_Error result = MCP_setFilter(filters[i], ext, 0);
 80013e4:	1d3a      	adds	r2, r7, #4
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	7fb9      	ldrb	r1, [r7, #30]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff47 	bl	8001284 <MCP_setFilter>
 80013f6:	4603      	mov	r3, r0
 80013f8:	777b      	strb	r3, [r7, #29]
        if (result != ERROR_OK) {
 80013fa:	7f7b      	ldrb	r3, [r7, #29]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MCP_reset+0xe8>
            return result;
 8001400:	7f7b      	ldrb	r3, [r7, #29]
 8001402:	e023      	b.n	800144c <MCP_reset+0x130>
    for (int i=0; i<6; i++) {
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	3301      	adds	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	2b05      	cmp	r3, #5
 800140e:	dde2      	ble.n	80013d6 <MCP_reset+0xba>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8001410:	2300      	movs	r3, #0
 8001412:	703b      	strb	r3, [r7, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	707b      	strb	r3, [r7, #1]
    for (int i=0; i<2; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	e012      	b.n	8001444 <MCP_reset+0x128>
    	CAN_Error result = MCP_setFilterMask(masks[i], 1, 0);
 800141e:	463a      	mov	r2, r7
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fef8 	bl	8001220 <MCP_setFilterMask>
 8001430:	4603      	mov	r3, r0
 8001432:	77fb      	strb	r3, [r7, #31]
        if (result != ERROR_OK) {
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MCP_reset+0x122>
            return result;
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	e006      	b.n	800144c <MCP_reset+0x130>
    for (int i=0; i<2; i++) {
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	3301      	adds	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2b01      	cmp	r3, #1
 8001448:	dde9      	ble.n	800141e <MCP_reset+0x102>
        }
    }

    return ERROR_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	08004fe8 	.word	0x08004fe8

08001458 <MCP_setNormalMode>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

CAN_Error MCP_setNormalMode()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_NORMAL);
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fe13 	bl	8001088 <setMode>
 8001462:	4603      	mov	r3, r0
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}

08001468 <MCP_setBitrateClock>:

CAN_Error MCP_setBitrateClock(CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
	CAN_Error error = setConfigMode();
 8001478:	f7ff fe3f 	bl	80010fa <setConfigMode>
 800147c:	4603      	mov	r3, r0
 800147e:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MCP_setBitrateClock+0x22>
        return error;
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	e1b3      	b.n	80017f2 <MCP_setBitrateClock+0x38a>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d009      	beq.n	80014a8 <MCP_setBitrateClock+0x40>
 8001494:	2b02      	cmp	r3, #2
 8001496:	f300 8194 	bgt.w	80017c2 <MCP_setBitrateClock+0x35a>
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8120 	beq.w	80016e0 <MCP_setBitrateClock+0x278>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f000 808f 	beq.w	80015c4 <MCP_setBitrateClock+0x15c>
 80014a6:	e18c      	b.n	80017c2 <MCP_setBitrateClock+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f200 8086 	bhi.w	80015bc <MCP_setBitrateClock+0x154>
 80014b0:	a201      	add	r2, pc, #4	@ (adr r2, 80014b8 <MCP_setBitrateClock+0x50>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014f9 	.word	0x080014f9
 80014bc:	08001507 	.word	0x08001507
 80014c0:	08001515 	.word	0x08001515
 80014c4:	08001523 	.word	0x08001523
 80014c8:	08001531 	.word	0x08001531
 80014cc:	0800153f 	.word	0x0800153f
 80014d0:	0800154d 	.word	0x0800154d
 80014d4:	0800155b 	.word	0x0800155b
 80014d8:	080015bd 	.word	0x080015bd
 80014dc:	080015bd 	.word	0x080015bd
 80014e0:	08001569 	.word	0x08001569
 80014e4:	08001577 	.word	0x08001577
 80014e8:	08001585 	.word	0x08001585
 80014ec:	08001593 	.word	0x08001593
 80014f0:	080015a1 	.word	0x080015a1
 80014f4:	080015af 	.word	0x080015af
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80014f8:	231f      	movs	r3, #31
 80014fa:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80014fc:	23bf      	movs	r3, #191	@ 0xbf
 80014fe:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8001500:	2387      	movs	r3, #135	@ 0x87
 8001502:	733b      	strb	r3, [r7, #12]
            break;
 8001504:	e05d      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8001506:	230f      	movs	r3, #15
 8001508:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 800150a:	23bf      	movs	r3, #191	@ 0xbf
 800150c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 800150e:	2387      	movs	r3, #135	@ 0x87
 8001510:	733b      	strb	r3, [r7, #12]
            break;
 8001512:	e056      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8001514:	2307      	movs	r3, #7
 8001516:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8001518:	23bf      	movs	r3, #191	@ 0xbf
 800151a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 800151c:	2387      	movs	r3, #135	@ 0x87
 800151e:	733b      	strb	r3, [r7, #12]
            break;
 8001520:	e04f      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8001522:	2307      	movs	r3, #7
 8001524:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8001526:	23a4      	movs	r3, #164	@ 0xa4
 8001528:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 800152a:	2384      	movs	r3, #132	@ 0x84
 800152c:	733b      	strb	r3, [r7, #12]
            break;
 800152e:	e048      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8001530:	2347      	movs	r3, #71	@ 0x47
 8001532:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8001534:	23e2      	movs	r3, #226	@ 0xe2
 8001536:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8001538:	2385      	movs	r3, #133	@ 0x85
 800153a:	733b      	strb	r3, [r7, #12]
            break;
 800153c:	e041      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 800153e:	2303      	movs	r3, #3
 8001540:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8001542:	23bf      	movs	r3, #191	@ 0xbf
 8001544:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8001546:	2387      	movs	r3, #135	@ 0x87
 8001548:	733b      	strb	r3, [r7, #12]
            break;
 800154a:	e03a      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 800154c:	2303      	movs	r3, #3
 800154e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8001550:	23b4      	movs	r3, #180	@ 0xb4
 8001552:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8001554:	2386      	movs	r3, #134	@ 0x86
 8001556:	733b      	strb	r3, [r7, #12]
            break;
 8001558:	e033      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 800155a:	2301      	movs	r3, #1
 800155c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 800155e:	23bf      	movs	r3, #191	@ 0xbf
 8001560:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8001562:	2387      	movs	r3, #135	@ 0x87
 8001564:	733b      	strb	r3, [r7, #12]
            break;
 8001566:	e02c      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8001568:	2301      	movs	r3, #1
 800156a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 800156c:	23b4      	movs	r3, #180	@ 0xb4
 800156e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8001570:	2386      	movs	r3, #134	@ 0x86
 8001572:	733b      	strb	r3, [r7, #12]
            break;
 8001574:	e025      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8001576:	2301      	movs	r3, #1
 8001578:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 800157a:	23b1      	movs	r3, #177	@ 0xb1
 800157c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 800157e:	2385      	movs	r3, #133	@ 0x85
 8001580:	733b      	strb	r3, [r7, #12]
            break;
 8001582:	e01e      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8001588:	23b4      	movs	r3, #180	@ 0xb4
 800158a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 800158c:	2386      	movs	r3, #134	@ 0x86
 800158e:	733b      	strb	r3, [r7, #12]
            break;
 8001590:	e017      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8001592:	2300      	movs	r3, #0
 8001594:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8001596:	23b1      	movs	r3, #177	@ 0xb1
 8001598:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 800159a:	2385      	movs	r3, #133	@ 0x85
 800159c:	733b      	strb	r3, [r7, #12]
            break;
 800159e:	e010      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 80015a4:	2390      	movs	r3, #144	@ 0x90
 80015a6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 80015a8:	2382      	movs	r3, #130	@ 0x82
 80015aa:	733b      	strb	r3, [r7, #12]
            break;
 80015ac:	e009      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 80015b2:	2380      	movs	r3, #128	@ 0x80
 80015b4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	733b      	strb	r3, [r7, #12]
            break;
 80015ba:	e002      	b.n	80015c2 <MCP_setBitrateClock+0x15a>

            default:
            set = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
            break;
 80015c0:	bf00      	nop
        }
        break;
 80015c2:	e101      	b.n	80017c8 <MCP_setBitrateClock+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	f200 8086 	bhi.w	80016d8 <MCP_setBitrateClock+0x270>
 80015cc:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <MCP_setBitrateClock+0x16c>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	08001615 	.word	0x08001615
 80015d8:	08001623 	.word	0x08001623
 80015dc:	08001631 	.word	0x08001631
 80015e0:	080016d9 	.word	0x080016d9
 80015e4:	0800163f 	.word	0x0800163f
 80015e8:	0800164d 	.word	0x0800164d
 80015ec:	0800165b 	.word	0x0800165b
 80015f0:	08001669 	.word	0x08001669
 80015f4:	08001677 	.word	0x08001677
 80015f8:	080016d9 	.word	0x080016d9
 80015fc:	08001685 	.word	0x08001685
 8001600:	08001693 	.word	0x08001693
 8001604:	080016a1 	.word	0x080016a1
 8001608:	080016af 	.word	0x080016af
 800160c:	080016bd 	.word	0x080016bd
 8001610:	080016cb 	.word	0x080016cb
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8001614:	233f      	movs	r3, #63	@ 0x3f
 8001616:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8001618:	23ff      	movs	r3, #255	@ 0xff
 800161a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 800161c:	2387      	movs	r3, #135	@ 0x87
 800161e:	733b      	strb	r3, [r7, #12]
            break;
 8001620:	e05d      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8001622:	231f      	movs	r3, #31
 8001624:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8001626:	23ff      	movs	r3, #255	@ 0xff
 8001628:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 800162a:	2387      	movs	r3, #135	@ 0x87
 800162c:	733b      	strb	r3, [r7, #12]
            break;
 800162e:	e056      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8001630:	230f      	movs	r3, #15
 8001632:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8001634:	23ff      	movs	r3, #255	@ 0xff
 8001636:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8001638:	2387      	movs	r3, #135	@ 0x87
 800163a:	733b      	strb	r3, [r7, #12]
            break;
 800163c:	e04f      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800163e:	234e      	movs	r3, #78	@ 0x4e
 8001640:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8001642:	23f1      	movs	r3, #241	@ 0xf1
 8001644:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8001646:	2385      	movs	r3, #133	@ 0x85
 8001648:	733b      	strb	r3, [r7, #12]
            break;
 800164a:	e048      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 800164c:	2307      	movs	r3, #7
 800164e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8001650:	23ff      	movs	r3, #255	@ 0xff
 8001652:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8001654:	2387      	movs	r3, #135	@ 0x87
 8001656:	733b      	strb	r3, [r7, #12]
            break;
 8001658:	e041      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 800165a:	2307      	movs	r3, #7
 800165c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800165e:	23fa      	movs	r3, #250	@ 0xfa
 8001660:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8001662:	2387      	movs	r3, #135	@ 0x87
 8001664:	733b      	strb	r3, [r7, #12]
            break;
 8001666:	e03a      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8001668:	2303      	movs	r3, #3
 800166a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 800166c:	23ff      	movs	r3, #255	@ 0xff
 800166e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8001670:	2387      	movs	r3, #135	@ 0x87
 8001672:	733b      	strb	r3, [r7, #12]
            break;
 8001674:	e033      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8001676:	2303      	movs	r3, #3
 8001678:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 800167a:	23be      	movs	r3, #190	@ 0xbe
 800167c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 800167e:	2307      	movs	r3, #7
 8001680:	733b      	strb	r3, [r7, #12]
            break;
 8001682:	e02c      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8001684:	2303      	movs	r3, #3
 8001686:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8001688:	23fa      	movs	r3, #250	@ 0xfa
 800168a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 800168c:	2387      	movs	r3, #135	@ 0x87
 800168e:	733b      	strb	r3, [r7, #12]
            break;
 8001690:	e025      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8001692:	2303      	movs	r3, #3
 8001694:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8001696:	23f0      	movs	r3, #240	@ 0xf0
 8001698:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 800169a:	2386      	movs	r3, #134	@ 0x86
 800169c:	733b      	strb	r3, [r7, #12]
            break;
 800169e:	e01e      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 80016a4:	23fa      	movs	r3, #250	@ 0xfa
 80016a6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 80016a8:	2387      	movs	r3, #135	@ 0x87
 80016aa:	733b      	strb	r3, [r7, #12]
            break;
 80016ac:	e017      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 80016ae:	2341      	movs	r3, #65	@ 0x41
 80016b0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 80016b2:	23f1      	movs	r3, #241	@ 0xf1
 80016b4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80016b6:	2385      	movs	r3, #133	@ 0x85
 80016b8:	733b      	strb	r3, [r7, #12]
            break;
 80016ba:	e010      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 80016bc:	2300      	movs	r3, #0
 80016be:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 80016c0:	23f0      	movs	r3, #240	@ 0xf0
 80016c2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80016c4:	2386      	movs	r3, #134	@ 0x86
 80016c6:	733b      	strb	r3, [r7, #12]
            break;
 80016c8:	e009      	b.n	80016de <MCP_setBitrateClock+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80016ce:	23d0      	movs	r3, #208	@ 0xd0
 80016d0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80016d2:	2382      	movs	r3, #130	@ 0x82
 80016d4:	733b      	strb	r3, [r7, #12]
            break;
 80016d6:	e002      	b.n	80016de <MCP_setBitrateClock+0x276>

            default:
            set = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
            break;
 80016dc:	bf00      	nop
        }
        break;
 80016de:	e073      	b.n	80017c8 <MCP_setBitrateClock+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3b04      	subs	r3, #4
 80016e4:	2b0b      	cmp	r3, #11
 80016e6:	d868      	bhi.n	80017ba <MCP_setBitrateClock+0x352>
 80016e8:	a201      	add	r2, pc, #4	@ (adr r2, 80016f0 <MCP_setBitrateClock+0x288>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	08001721 	.word	0x08001721
 80016f4:	0800172f 	.word	0x0800172f
 80016f8:	0800173d 	.word	0x0800173d
 80016fc:	0800174b 	.word	0x0800174b
 8001700:	08001759 	.word	0x08001759
 8001704:	080017bb 	.word	0x080017bb
 8001708:	08001767 	.word	0x08001767
 800170c:	08001775 	.word	0x08001775
 8001710:	08001783 	.word	0x08001783
 8001714:	08001791 	.word	0x08001791
 8001718:	0800179f 	.word	0x0800179f
 800171c:	080017ad 	.word	0x080017ad
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8001720:	230b      	movs	r3, #11
 8001722:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8001724:	23ff      	movs	r3, #255	@ 0xff
 8001726:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8001728:	2387      	movs	r3, #135	@ 0x87
 800172a:	733b      	strb	r3, [r7, #12]
	    break;
 800172c:	e048      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 800172e:	2309      	movs	r3, #9
 8001730:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8001732:	23ff      	movs	r3, #255	@ 0xff
 8001734:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8001736:	2387      	movs	r3, #135	@ 0x87
 8001738:	733b      	strb	r3, [r7, #12]
            break;
 800173a:	e041      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 800173c:	2309      	movs	r3, #9
 800173e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8001740:	23fa      	movs	r3, #250	@ 0xfa
 8001742:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8001744:	2387      	movs	r3, #135	@ 0x87
 8001746:	733b      	strb	r3, [r7, #12]
            break;
 8001748:	e03a      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800174a:	2304      	movs	r3, #4
 800174c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800174e:	23ff      	movs	r3, #255	@ 0xff
 8001750:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8001752:	2387      	movs	r3, #135	@ 0x87
 8001754:	733b      	strb	r3, [r7, #12]
            break;
 8001756:	e033      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8001758:	2304      	movs	r3, #4
 800175a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 800175c:	23fe      	movs	r3, #254	@ 0xfe
 800175e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8001760:	2387      	movs	r3, #135	@ 0x87
 8001762:	733b      	strb	r3, [r7, #12]
	    break;
 8001764:	e02c      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8001766:	2304      	movs	r3, #4
 8001768:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800176a:	23fa      	movs	r3, #250	@ 0xfa
 800176c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800176e:	2387      	movs	r3, #135	@ 0x87
 8001770:	733b      	strb	r3, [r7, #12]
            break;
 8001772:	e025      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8001774:	2303      	movs	r3, #3
 8001776:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8001778:	23fa      	movs	r3, #250	@ 0xfa
 800177a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 800177c:	2387      	movs	r3, #135	@ 0x87
 800177e:	733b      	strb	r3, [r7, #12]
            break;
 8001780:	e01e      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8001782:	2301      	movs	r3, #1
 8001784:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8001786:	23ff      	movs	r3, #255	@ 0xff
 8001788:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 800178a:	2387      	movs	r3, #135	@ 0x87
 800178c:	733b      	strb	r3, [r7, #12]
            break;
 800178e:	e017      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8001790:	2341      	movs	r3, #65	@ 0x41
 8001792:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8001794:	23fb      	movs	r3, #251	@ 0xfb
 8001796:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8001798:	2386      	movs	r3, #134	@ 0x86
 800179a:	733b      	strb	r3, [r7, #12]
            break;
 800179c:	e010      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 800179e:	2300      	movs	r3, #0
 80017a0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 80017a2:	23fa      	movs	r3, #250	@ 0xfa
 80017a4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 80017a6:	2387      	movs	r3, #135	@ 0x87
 80017a8:	733b      	strb	r3, [r7, #12]
            break;
 80017aa:	e009      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 80017b0:	23d9      	movs	r3, #217	@ 0xd9
 80017b2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80017b4:	2382      	movs	r3, #130	@ 0x82
 80017b6:	733b      	strb	r3, [r7, #12]
            break;
 80017b8:	e002      	b.n	80017c0 <MCP_setBitrateClock+0x358>

            default:
            set = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
            break;
 80017be:	bf00      	nop
        }
        break;
 80017c0:	e002      	b.n	80017c8 <MCP_setBitrateClock+0x360>

        default:
        set = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
        break;
 80017c6:	bf00      	nop
    }

    if (set) {
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d010      	beq.n	80017f0 <MCP_setBitrateClock+0x388>
        setRegister(MCP_CNF1, cfg1);
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	4619      	mov	r1, r3
 80017d2:	202a      	movs	r0, #42	@ 0x2a
 80017d4:	f7ff fb90 	bl	8000ef8 <setRegister>
        setRegister(MCP_CNF2, cfg2);
 80017d8:	7b7b      	ldrb	r3, [r7, #13]
 80017da:	4619      	mov	r1, r3
 80017dc:	2029      	movs	r0, #41	@ 0x29
 80017de:	f7ff fb8b 	bl	8000ef8 <setRegister>
        setRegister(MCP_CNF3, cfg3);
 80017e2:	7b3b      	ldrb	r3, [r7, #12]
 80017e4:	4619      	mov	r1, r3
 80017e6:	2028      	movs	r0, #40	@ 0x28
 80017e8:	f7ff fb86 	bl	8000ef8 <setRegister>
        return ERROR_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <MCP_setBitrateClock+0x38a>
    }
    else {
        return ERROR_FAIL;
 80017f0:	2301      	movs	r3, #1
    }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <MCP_setBitrate>:

CAN_Error MCP_setBitrate( CAN_SPEED canSpeed)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
    return MCP_setBitrateClock(canSpeed, MCP_16MHZ);
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2101      	movs	r1, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe2c 	bl	8001468 <MCP_setBitrateClock>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <MCP_RequestToSend>:


void MCP_RequestToSend(uint8_t instruction)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
    startSPI();
 8001824:	f7ff fb3a 	bl	8000e9c <startSPI>
    SPI_transfer(instruction);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fb4e 	bl	8000ecc <SPI_transfer>
    endSPI();
 8001830:	f7ff fb40 	bl	8000eb4 <endSPI>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <MCP_sendMessageTo>:

CAN_Error MCP_sendMessageTo(TXBn txbn, struct can_frame *frame)
//TXBm is just 0,1,2 for txbox number
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d901      	bls.n	8001854 <MCP_sendMessageTo+0x18>
        return ERROR_FAILTX;
 8001850:	2304      	movs	r3, #4
 8001852:	e081      	b.n	8001958 <MCP_sendMessageTo+0x11c>
    }

    //Todo, fix these magic numbers, but not with something as awful as the og arduino library
    uint8_t load_addr = (2 * txbn) | 0x40;
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	b25b      	sxtb	r3, r3
 800185c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    uint8_t rts_addr = (1 << txbn) | 0x80;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2201      	movs	r2, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint8_t data[13];

    uint8_t ext = !!(frame->can_id & CAN_EFF_FLAG);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0fdb      	lsrs	r3, r3, #31
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    uint8_t rtr = !!(frame->can_id & CAN_RTR_FLAG);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f887 3020 	strb.w	r3, [r7, #32]
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d002      	beq.n	80018ae <MCP_sendMessageTo+0x72>
 80018a8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80018ac:	e001      	b.n	80018b2 <MCP_sendMessageTo+0x76>
 80018ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80018b2:	4013      	ands	r3, r2
 80018b4:	61fb      	str	r3, [r7, #28]

    prepareId(data, ext, id);
 80018b6:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fc22 	bl	800110a <prepareId>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 80018c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <MCP_sendMessageTo+0x9e>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	2240      	movs	r2, #64	@ 0x40
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	e001      	b.n	80018de <MCP_sendMessageTo+0xa2>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	2204      	movs	r2, #4
 80018e0:	3228      	adds	r2, #40	@ 0x28
 80018e2:	443a      	add	r2, r7
 80018e4:	f802 3c1c 	strb.w	r3, [r2, #-28]

    for(int i = 0; i < frame->can_dlc; i++){
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	e00f      	b.n	800190e <MCP_sendMessageTo+0xd2>
    	data[MCP_DATA+i]=frame->data[i];
 80018ee:	2305      	movs	r3, #5
 80018f0:	461a      	mov	r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	4413      	add	r3, r2
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fa:	440a      	add	r2, r1
 80018fc:	3208      	adds	r2, #8
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	3328      	adds	r3, #40	@ 0x28
 8001902:	443b      	add	r3, r7
 8001904:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for(int i = 0; i < frame->can_dlc; i++){
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	4293      	cmp	r3, r2
 8001918:	dbe9      	blt.n	80018ee <MCP_sendMessageTo+0xb2>
    }

   // memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);

    loadTx(load_addr, data, 5 + frame->can_dlc);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	3305      	adds	r3, #5
 8001920:	b2da      	uxtb	r2, r3
 8001922:	f107 010c 	add.w	r1, r7, #12
 8001926:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fb27 	bl	8000f7e <loadTx>
    //setRegisters(load_addr, data, 5 + frame->can_dlc);

    //modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    //modifyRegister(rts_addr, TXB_TXREQ, TXB_TXREQ);
    MCP_RequestToSend(rts_addr);
 8001930:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff70 	bl	800181a <MCP_RequestToSend>
    //setRegister(rts_addr, TXB_TXREQ);

    uint8_t ctrl = readRegister(rts_addr);
 800193a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fb62 	bl	8001008 <readRegister>
 8001944:	4603      	mov	r3, r0
 8001946:	76fb      	strb	r3, [r7, #27]
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 8001948:	7efb      	ldrb	r3, [r7, #27]
 800194a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MCP_sendMessageTo+0x11a>
        return ERROR_FAILTX;
 8001952:	2304      	movs	r3, #4
 8001954:	e000      	b.n	8001958 <MCP_sendMessageTo+0x11c>
    }
    return ERROR_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3728      	adds	r7, #40	@ 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <MCP_sendMessage>:

CAN_Error MCP_sendMessage(struct can_frame *frame)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d901      	bls.n	8001974 <MCP_sendMessage+0x14>
        return ERROR_FAILTX;
 8001970:	2304      	movs	r3, #4
 8001972:	e020      	b.n	80019b6 <MCP_sendMessage+0x56>
    }


    for (uint8_t i=0; i<N_TXBUFFERS; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e018      	b.n	80019ac <MCP_sendMessage+0x4c>
        uint8_t ctrlval = readRegister((i+3)<<4);
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	3303      	adds	r3, #3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb3f 	bl	8001008 <readRegister>
 800198a:	4603      	mov	r3, r0
 800198c:	73bb      	strb	r3, [r7, #14]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d106      	bne.n	80019a6 <MCP_sendMessage+0x46>
            return MCP_sendMessageTo(i, frame);
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff4d 	bl	800183c <MCP_sendMessageTo>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e007      	b.n	80019b6 <MCP_sendMessage+0x56>
    for (uint8_t i=0; i<N_TXBUFFERS; i++) {
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3301      	adds	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	2203      	movs	r2, #3
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d3e2      	bcc.n	800197a <MCP_sendMessage+0x1a>
        }
    }

    return ERROR_ALLTXBUSY;
 80019b4:	2302      	movs	r3, #2
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <MCP_readMessageFrom>:

CAN_Error MCP_readMessageFrom(RXBn rxbn, struct can_frame *frame)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b088      	sub	sp, #32
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	6039      	str	r1, [r7, #0]
 80019c8:	71fb      	strb	r3, [r7, #7]


    uint8_t readCommand = (rxbn << 2) | 0x90;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	76fb      	strb	r3, [r7, #27]

    rx_reg_t rxReg;

    readRx(readCommand, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	7efb      	ldrb	r3, [r7, #27]
 80019de:	220d      	movs	r2, #13
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fb2b 	bl	800103c <readRx>

    uint32_t id = (rxReg.rx_reg_array[MCP_SIDH]<<3) + (rxReg.rx_reg_array[MCP_SIDL]>>5);
 80019e6:	2300      	movs	r3, #0
 80019e8:	3320      	adds	r3, #32
 80019ea:	443b      	add	r3, r7
 80019ec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	2201      	movs	r2, #1
 80019f4:	3220      	adds	r2, #32
 80019f6:	443a      	add	r2, r7
 80019f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80019fc:	0952      	lsrs	r2, r2, #5
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	4413      	add	r3, r2
 8001a02:	61fb      	str	r3, [r7, #28]

    if ( (rxReg.rx_reg_array[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8001a04:	2301      	movs	r3, #1
 8001a06:	3320      	adds	r3, #32
 8001a08:	443b      	add	r3, r7
 8001a0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	4013      	ands	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2208      	movs	r2, #8
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d120      	bne.n	8001a5c <MCP_readMessageFrom+0x9e>
        id = (id<<2) + (rxReg.rx_reg_array[MCP_SIDL] & 0x03);
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	009a      	lsls	r2, r3, #2
 8001a1e:	2301      	movs	r3, #1
 8001a20:	3320      	adds	r3, #32
 8001a22:	443b      	add	r3, r7
 8001a24:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + rxReg.rx_reg_array[MCP_EID8];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	2202      	movs	r2, #2
 8001a36:	3220      	adds	r2, #32
 8001a38:	443a      	add	r2, r7
 8001a3a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001a3e:	4413      	add	r3, r2
 8001a40:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + rxReg.rx_reg_array[MCP_EID0];
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	2203      	movs	r2, #3
 8001a48:	3220      	adds	r2, #32
 8001a4a:	443a      	add	r2, r7
 8001a4c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001a50:	4413      	add	r3, r2
 8001a52:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a5a:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (rxReg.rx_reg_array[MCP_DLC] & DLC_MASK);
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	3320      	adds	r3, #32
 8001a60:	443b      	add	r3, r7
 8001a62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001a66:	220f      	movs	r2, #15
 8001a68:	4013      	ands	r3, r2
 8001a6a:	76bb      	strb	r3, [r7, #26]
    if (dlc > CAN_MAX_DLEN) {
 8001a6c:	7ebb      	ldrb	r3, [r7, #26]
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d901      	bls.n	8001a76 <MCP_readMessageFrom+0xb8>
        return ERROR_FAIL;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e03a      	b.n	8001aec <MCP_readMessageFrom+0x12e>
    }


    //0x60 or 0x70
    uint8_t ctrl = readRegister((rxbn + 6) << 4);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	3306      	adds	r3, #6
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fac1 	bl	8001008 <readRegister>
 8001a86:	4603      	mov	r3, r0
 8001a88:	767b      	strb	r3, [r7, #25]
    if (ctrl & RXBnCTRL_RTR) {
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	7e7b      	ldrb	r3, [r7, #25]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <MCP_readMessageFrom+0xe0>
        id |= CAN_RTR_FLAG;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a9c:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7eba      	ldrb	r2, [r7, #26]
 8001aa8:	711a      	strb	r2, [r3, #4]

    frame->data[0] = rxReg.RXBnD0;
 8001aaa:	7c7a      	ldrb	r2, [r7, #17]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	721a      	strb	r2, [r3, #8]
    frame->data[1] = rxReg.RXBnD1;
 8001ab0:	7cba      	ldrb	r2, [r7, #18]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	725a      	strb	r2, [r3, #9]
    frame->data[2] = rxReg.RXBnD2;
 8001ab6:	7cfa      	ldrb	r2, [r7, #19]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	729a      	strb	r2, [r3, #10]
    frame->data[3] = rxReg.RXBnD3;
 8001abc:	7d3a      	ldrb	r2, [r7, #20]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	72da      	strb	r2, [r3, #11]
    frame->data[4] = rxReg.RXBnD4;
 8001ac2:	7d7a      	ldrb	r2, [r7, #21]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	731a      	strb	r2, [r3, #12]
    frame->data[5] = rxReg.RXBnD5;
 8001ac8:	7dba      	ldrb	r2, [r7, #22]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	735a      	strb	r2, [r3, #13]
    frame->data[6] = rxReg.RXBnD6;
 8001ace:	7dfa      	ldrb	r2, [r7, #23]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	739a      	strb	r2, [r3, #14]
    frame->data[7] = rxReg.RXBnD7;
 8001ad4:	7e3a      	ldrb	r2, [r7, #24]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	73da      	strb	r2, [r3, #15]


    //Clear the inbox interrupt, 0x1 or 0x2
    modifyRegister(MCP_CANINTF, rxbn + 1, 0);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	202c      	movs	r0, #44	@ 0x2c
 8001ae6:	f7ff fa6f 	bl	8000fc8 <modifyRegister>

    return ERROR_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <MCP_readMessage>:

CAN_Error MCP_readMessage(struct can_frame *frame)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	CAN_Error rc;
    uint8_t stat = getStatus();
 8001afc:	f7ff fb7c 	bl	80011f8 <getStatus>
 8001b00:	4603      	mov	r3, r0
 8001b02:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <MCP_readMessage+0x28>
        rc = MCP_readMessageFrom(RXB0, frame);
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff ff54 	bl	80019be <MCP_readMessageFrom>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e00d      	b.n	8001b38 <MCP_readMessage+0x44>
    } else if ( stat & STAT_RX1IF ) {
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <MCP_readMessage+0x40>
        rc = MCP_readMessageFrom(RXB1, frame);
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff ff48 	bl	80019be <MCP_readMessageFrom>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e001      	b.n	8001b38 <MCP_readMessage+0x44>
    } else {
        rc = ERROR_NOMSG;
 8001b34:	2305      	movs	r3, #5
 8001b36:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a08      	ldr	r2, [pc, #32]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b82:	2007      	movs	r0, #7
 8001b84:	f000 ff18 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca0 <HAL_ADC_MspInit+0x10c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d170      	bne.n	8001c98 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a39      	ldr	r2, [pc, #228]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a32      	ldr	r2, [pc, #200]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <HAL_ADC_MspInit+0x110>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4822      	ldr	r0, [pc, #136]	@ (8001ca8 <HAL_ADC_MspInit+0x114>)
 8001c1e:	f001 fa7d 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c26:	2303      	movs	r3, #3
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	481d      	ldr	r0, [pc, #116]	@ (8001cac <HAL_ADC_MspInit+0x118>)
 8001c36:	f001 fa71 	bl	800311c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <HAL_ADC_MspInit+0x120>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c7c:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c7e:	f000 fedd 	bl	8002a3c <HAL_DMA_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001c88:	f7ff f902 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c90:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c92:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <HAL_ADC_MspInit+0x11c>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	@ 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40012000 	.word	0x40012000
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	2000007c 	.word	0x2000007c
 8001cb4:	40026410 	.word	0x40026410

08001cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_SPI_MspInit+0x84>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12c      	bne.n	8001d34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d12:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d24:	2306      	movs	r3, #6
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001d30:	f001 f9f4 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	@ 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40003c00 	.word	0x40003c00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020800 	.word	0x40020800

08001d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <HAL_TIM_Base_MspInit+0x3c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10d      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_TIM_Base_MspInit+0x40>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a09      	ldr	r2, [pc, #36]	@ (8001d88 <HAL_TIM_Base_MspInit+0x40>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_TIM_Base_MspInit+0x40>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_UART_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12b      	bne.n	8001e06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a10      	ldr	r2, [pc, #64]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_UART_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001de6:	230c      	movs	r3, #12
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <HAL_UART_MspInit+0x8c>)
 8001e02:	f001 f98b 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e72:	f000 f89b 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <DMA2_Stream0_IRQHandler+0x10>)
 8001e82:	f000 fee1 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000007c 	.word	0x2000007c

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001eb8:	f7ff ffea 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ebe:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f003 f851 	bl	8004f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7fe fd4d 	bl	8000984 <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ef8:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8001efc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001f00:	20000224 	.word	0x20000224

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <HAL_Init+0x40>)
 8001f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <HAL_Init+0x40>)
 8001f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_Init+0x40>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 fd41 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f808 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3c:	f7ff fe02 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fd59 	bl	8002a22 <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f88:	f000 fd21 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	@ (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	2000000c 	.word	0x2000000c

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000010 	.word	0x20000010
 8001fd0:	20000220 	.word	0x20000220

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000220 	.word	0x20000220

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002012:	bf00      	nop
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000010 	.word	0x20000010

08002034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e033      	b.n	80020b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fd9e 	bl	8001b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800207a:	f023 0302 	bic.w	r3, r3, #2
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa48 	bl	800251c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80020a2:	e001      	b.n	80020a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Start_DMA+0x1e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ce      	b.n	8002278 <HAL_ADC_Start_DMA+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d018      	beq.n	8002122 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002100:	4b5f      	ldr	r3, [pc, #380]	@ (8002280 <HAL_ADC_Start_DMA+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5f      	ldr	r2, [pc, #380]	@ (8002284 <HAL_ADC_Start_DMA+0x1c8>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9a      	lsrs	r2, r3, #18
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002114:	e002      	b.n	800211c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3b01      	subs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002130:	d107      	bne.n	8002142 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002140:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	f040 8086 	bne.w	800225e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800217c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800218c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f023 0206 	bic.w	r2, r3, #6
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
 800219e:	e002      	b.n	80021a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ae:	4b36      	ldr	r3, [pc, #216]	@ (8002288 <HAL_ADC_Start_DMA+0x1cc>)
 80021b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b6:	4a35      	ldr	r2, [pc, #212]	@ (800228c <HAL_ADC_Start_DMA+0x1d0>)
 80021b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	4a34      	ldr	r2, [pc, #208]	@ (8002290 <HAL_ADC_Start_DMA+0x1d4>)
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c6:	4a33      	ldr	r2, [pc, #204]	@ (8002294 <HAL_ADC_Start_DMA+0x1d8>)
 80021c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021e2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021f2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	334c      	adds	r3, #76	@ 0x4c
 80021fe:	4619      	mov	r1, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f000 fcc8 	bl	8002b98 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d129      	bne.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	e020      	b.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <HAL_ADC_Start_DMA+0x1dc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d11b      	bne.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d114      	bne.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e00b      	b.n	8002276 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000008 	.word	0x20000008
 8002284:	431bde83 	.word	0x431bde83
 8002288:	40012300 	.word	0x40012300
 800228c:	08002715 	.word	0x08002715
 8002290:	080027cf 	.word	0x080027cf
 8002294:	080027eb 	.word	0x080027eb
 8002298:	40012000 	.word	0x40012000

0800229c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e105      	b.n	8002500 <HAL_ADC_ConfigChannel+0x228>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b09      	cmp	r3, #9
 8002302:	d925      	bls.n	8002350 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68d9      	ldr	r1, [r3, #12]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	3b1e      	subs	r3, #30
 800231a:	2207      	movs	r2, #7
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43da      	mvns	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	400a      	ands	r2, r1
 8002328:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68d9      	ldr	r1, [r3, #12]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	4603      	mov	r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4403      	add	r3, r0
 8002342:	3b1e      	subs	r3, #30
 8002344:	409a      	lsls	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	e022      	b.n	8002396 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	2207      	movs	r2, #7
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	400a      	ands	r2, r1
 8002372:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	4603      	mov	r3, r0
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4403      	add	r3, r0
 800238c:	409a      	lsls	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b06      	cmp	r3, #6
 800239c:	d824      	bhi.n	80023e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b05      	subs	r3, #5
 80023b0:	221f      	movs	r2, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	400a      	ands	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	3b05      	subs	r3, #5
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023e6:	e04c      	b.n	8002482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d824      	bhi.n	800243a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b23      	subs	r3, #35	@ 0x23
 8002402:	221f      	movs	r2, #31
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43da      	mvns	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	400a      	ands	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b23      	subs	r3, #35	@ 0x23
 800242c:	fa00 f203 	lsl.w	r2, r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30
 8002438:	e023      	b.n	8002482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b41      	subs	r3, #65	@ 0x41
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	400a      	ands	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b41      	subs	r3, #65	@ 0x41
 8002476:	fa00 f203 	lsl.w	r2, r0, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002482:	4b22      	ldr	r3, [pc, #136]	@ (800250c <HAL_ADC_ConfigChannel+0x234>)
 8002484:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a21      	ldr	r2, [pc, #132]	@ (8002510 <HAL_ADC_ConfigChannel+0x238>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b12      	cmp	r3, #18
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a19      	ldr	r2, [pc, #100]	@ (8002510 <HAL_ADC_ConfigChannel+0x238>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d123      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d003      	beq.n	80024be <HAL_ADC_ConfigChannel+0x1e6>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d11b      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_ADC_ConfigChannel+0x23c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <HAL_ADC_ConfigChannel+0x240>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	40012000 	.word	0x40012000
 8002514:	20000008 	.word	0x20000008
 8002518:	431bde83 	.word	0x431bde83

0800251c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002524:	4b79      	ldr	r3, [pc, #484]	@ (800270c <ADC_Init+0x1f0>)
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	431a      	orrs	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	021a      	lsls	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <ADC_Init+0x1f4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d022      	beq.n	80025fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	e00f      	b.n	800261a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002618:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0202 	bic.w	r2, r2, #2
 8002628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
 8002634:	005a      	lsls	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002656:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	3b01      	subs	r3, #1
 8002674:	035a      	lsls	r2, r3, #13
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e007      	b.n	8002690 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800269e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	051a      	lsls	r2, r3, #20
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026d2:	025a      	lsls	r2, r3, #9
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6899      	ldr	r1, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	029a      	lsls	r2, r3, #10
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40012300 	.word	0x40012300
 8002710:	0f000001 	.word	0x0f000001

08002714 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d13c      	bne.n	80027a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d12b      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274c:	2b00      	cmp	r3, #0
 800274e:	d127      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002768:	2b00      	cmp	r3, #0
 800276a:	d119      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0220 	bic.w	r2, r2, #32
 800277a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fd7b 	bl	800229c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027a6:	e00e      	b.n	80027c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7ff fd85 	bl	80022c4 <HAL_ADC_ErrorCallback>
}
 80027ba:	e004      	b.n	80027c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fd67 	bl	80022b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2240      	movs	r2, #64	@ 0x40
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff fd5a 	bl	80022c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	@ (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	@ (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	@ (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	@ (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	@ 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff3e 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff31 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fac4 	bl	8001fd4 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e099      	b.n	8002b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	e00f      	b.n	8002a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7ff faab 	bl	8001fd4 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d908      	bls.n	8002a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e078      	b.n	8002b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e8      	bne.n	8002a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4b38      	ldr	r3, [pc, #224]	@ (8002b94 <HAL_DMA_Init+0x158>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	4313      	orrs	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0307 	bic.w	r3, r3, #7
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d117      	bne.n	8002b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa6f 	bl	8003024 <DMA_CheckFifoParam>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	@ 0x40
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa26 	bl	8002fb8 <DMA_CalcBaseAndBitshift>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b74:	223f      	movs	r2, #63	@ 0x3f
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	f010803f 	.word	0xf010803f

08002b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_Start_IT+0x26>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e040      	b.n	8002c40 <HAL_DMA_Start_IT+0xa8>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d12f      	bne.n	8002c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f9b8 	bl	8002f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	223f      	movs	r2, #63	@ 0x3f
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0216 	orr.w	r2, r2, #22
 8002c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0208 	orr.w	r2, r2, #8
 8002c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e005      	b.n	8002c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c54:	4b8e      	ldr	r3, [pc, #568]	@ (8002e90 <HAL_DMA_IRQHandler+0x248>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a8e      	ldr	r2, [pc, #568]	@ (8002e94 <HAL_DMA_IRQHandler+0x24c>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	2208      	movs	r2, #8
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	2210      	movs	r2, #16
 8002d26:	409a      	lsls	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d043      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03c      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	2210      	movs	r2, #16
 8002d44:	409a      	lsls	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e01f      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0208 	bic.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 808f 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8087 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	2220      	movs	r2, #32
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d136      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0216 	bic.w	r2, r2, #22
 8002e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x1da>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0208 	bic.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	223f      	movs	r2, #63	@ 0x3f
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d07e      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
        }
        return;
 8002e5e:	e079      	b.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d031      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e02c      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
 8002e8e:	bf00      	nop
 8002e90:	20000008 	.word	0x20000008
 8002e94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d023      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e01e      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0210 	bic.w	r2, r2, #16
 8002ec6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2205      	movs	r2, #5
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d307      	bcc.n	8002f30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f2      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x2cc>
 8002f2e:	e000      	b.n	8002f32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
 8002f52:	e000      	b.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f54:	bf00      	nop
    }
  }
}
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b40      	cmp	r3, #64	@ 0x40
 8002f88:	d108      	bne.n	8002f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f9a:	e007      	b.n	8002fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3b10      	subs	r3, #16
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <DMA_CalcBaseAndBitshift+0x64>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fd2:	4a13      	ldr	r2, [pc, #76]	@ (8003020 <DMA_CalcBaseAndBitshift+0x68>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d909      	bls.n	8002ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ff8:	e007      	b.n	800300a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	aaaaaaab 	.word	0xaaaaaaab
 8003020:	08005008 	.word	0x08005008

08003024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11f      	bne.n	800307e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d856      	bhi.n	80030f2 <DMA_CheckFifoParam+0xce>
 8003044:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <DMA_CheckFifoParam+0x28>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306f 	.word	0x0800306f
 8003054:	0800305d 	.word	0x0800305d
 8003058:	080030f3 	.word	0x080030f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d046      	beq.n	80030f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e043      	b.n	80030f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003076:	d140      	bne.n	80030fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e03d      	b.n	80030fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003086:	d121      	bne.n	80030cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d837      	bhi.n	80030fe <DMA_CheckFifoParam+0xda>
 800308e:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <DMA_CheckFifoParam+0x70>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030ab 	.word	0x080030ab
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	080030bd 	.word	0x080030bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e030      	b.n	800310c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d025      	beq.n	8003102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ba:	e022      	b.n	8003102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030c4:	d11f      	bne.n	8003106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ca:	e01c      	b.n	8003106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d903      	bls.n	80030da <DMA_CheckFifoParam+0xb6>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d003      	beq.n	80030e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d8:	e018      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      break;
 80030de:	e015      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e00b      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 80030f2:	bf00      	nop
 80030f4:	e00a      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e008      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
 80030fc:	e006      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e004      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;   
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
    }
  } 
  
  return status; 
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e159      	b.n	80033ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 8148 	bne.w	80033e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d005      	beq.n	800316e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	2b02      	cmp	r3, #2
 800316c:	d130      	bne.n	80031d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d017      	beq.n	800320c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d123      	bne.n	8003260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a2 	beq.w	80033e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b57      	ldr	r3, [pc, #348]	@ (8003404 <HAL_GPIO_Init+0x2e8>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	4a56      	ldr	r2, [pc, #344]	@ (8003404 <HAL_GPIO_Init+0x2e8>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <HAL_GPIO_Init+0x2e8>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032be:	4a52      	ldr	r2, [pc, #328]	@ (8003408 <HAL_GPIO_Init+0x2ec>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a49      	ldr	r2, [pc, #292]	@ (800340c <HAL_GPIO_Init+0x2f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x202>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a48      	ldr	r2, [pc, #288]	@ (8003410 <HAL_GPIO_Init+0x2f4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x1fe>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a47      	ldr	r2, [pc, #284]	@ (8003414 <HAL_GPIO_Init+0x2f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x1fa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a46      	ldr	r2, [pc, #280]	@ (8003418 <HAL_GPIO_Init+0x2fc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x1f6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a45      	ldr	r2, [pc, #276]	@ (800341c <HAL_GPIO_Init+0x300>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x1f2>
 800330a:	2304      	movs	r3, #4
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800330e:	2307      	movs	r3, #7
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x204>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x204>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x204>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	@ (8003408 <HAL_GPIO_Init+0x2ec>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <HAL_GPIO_Init+0x304>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a2f      	ldr	r2, [pc, #188]	@ (8003420 <HAL_GPIO_Init+0x304>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b2d      	ldr	r3, [pc, #180]	@ (8003420 <HAL_GPIO_Init+0x304>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a24      	ldr	r2, [pc, #144]	@ (8003420 <HAL_GPIO_Init+0x304>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b23      	ldr	r3, [pc, #140]	@ (8003420 <HAL_GPIO_Init+0x304>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <HAL_GPIO_Init+0x304>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <HAL_GPIO_Init+0x304>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003420 <HAL_GPIO_Init+0x304>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f aea2 	bls.w	8003138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40013c00 	.word	0x40013c00

08003424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e001      	b.n	8003446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
 8003460:	4613      	mov	r3, r2
 8003462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003464:	787b      	ldrb	r3, [r7, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346a:	887a      	ldrh	r2, [r7, #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003470:	e003      	b.n	800347a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	041a      	lsls	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e267      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d075      	beq.n	8003592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00c      	beq.n	80034cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b85      	ldr	r3, [pc, #532]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d112      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034be:	4b82      	ldr	r3, [pc, #520]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	4b7e      	ldr	r3, [pc, #504]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05b      	beq.n	8003590 <HAL_RCC_OscConfig+0x108>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d157      	bne.n	8003590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e242      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x74>
 80034ee:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a75      	ldr	r2, [pc, #468]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x98>
 8003506:	4b70      	ldr	r3, [pc, #448]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6f      	ldr	r2, [pc, #444]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6c      	ldr	r2, [pc, #432]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 8003520:	4b69      	ldr	r3, [pc, #420]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a68      	ldr	r2, [pc, #416]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a65      	ldr	r2, [pc, #404]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe fd48 	bl	8001fd4 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fd44 	bl	8001fd4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e207      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xc0>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fd34 	bl	8001fd4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe fd30 	bl	8001fd4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1f3      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	4b51      	ldr	r3, [pc, #324]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0xe8>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d063      	beq.n	8003666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359e:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b44      	ldr	r3, [pc, #272]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1c7      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4937      	ldr	r1, [pc, #220]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_RCC_OscConfig+0x244>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fce9 	bl	8001fd4 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fce5 	bl	8001fd4 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1a8      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	4b2b      	ldr	r3, [pc, #172]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4925      	ldr	r1, [pc, #148]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <HAL_RCC_OscConfig+0x244>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fcc8 	bl	8001fd4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe fcc4 	bl	8001fd4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e187      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d036      	beq.n	80036e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d016      	beq.n	80036a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <HAL_RCC_OscConfig+0x248>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe fca8 	bl	8001fd4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003688:	f7fe fca4 	bl	8001fd4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e167      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800369c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x200>
 80036a6:	e01b      	b.n	80036e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a8:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_OscConfig+0x248>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fc91 	bl	8001fd4 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	e00e      	b.n	80036d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b6:	f7fe fc8d 	bl	8001fd4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d907      	bls.n	80036d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e150      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	42470000 	.word	0x42470000
 80036d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d4:	4b88      	ldr	r3, [pc, #544]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ea      	bne.n	80036b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8097 	beq.w	800381c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b81      	ldr	r3, [pc, #516]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b7d      	ldr	r3, [pc, #500]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a7c      	ldr	r2, [pc, #496]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	4b7a      	ldr	r3, [pc, #488]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b77      	ldr	r3, [pc, #476]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b74      	ldr	r3, [pc, #464]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a73      	ldr	r2, [pc, #460]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fe fc4d 	bl	8001fd4 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fe fc49 	bl	8001fd4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e10c      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b6a      	ldr	r3, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x2ea>
 8003764:	4b64      	ldr	r3, [pc, #400]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	4a63      	ldr	r2, [pc, #396]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x324>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x30c>
 800377a:	4b5f      	ldr	r3, [pc, #380]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	4a5e      	ldr	r2, [pc, #376]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	@ 0x70
 8003786:	4b5c      	ldr	r3, [pc, #368]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	4a5b      	ldr	r2, [pc, #364]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	@ 0x70
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0x324>
 8003794:	4b58      	ldr	r3, [pc, #352]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	4a57      	ldr	r2, [pc, #348]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a0:	4b55      	ldr	r3, [pc, #340]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4a54      	ldr	r2, [pc, #336]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037a6:	f023 0304 	bic.w	r3, r3, #4
 80037aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe fc0e 	bl	8001fd4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fe fc0a 	bl	8001fd4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0cb      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b49      	ldr	r3, [pc, #292]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ee      	beq.n	80037bc <HAL_RCC_OscConfig+0x334>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e0:	f7fe fbf8 	bl	8001fd4 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fbf4 	bl	8001fd4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0b5      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fe:	4b3e      	ldr	r3, [pc, #248]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ee      	bne.n	80037e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b39      	ldr	r3, [pc, #228]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a1 	beq.w	8003968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003826:	4b34      	ldr	r3, [pc, #208]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b08      	cmp	r3, #8
 8003830:	d05c      	beq.n	80038ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d141      	bne.n	80038be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCC_OscConfig+0x478>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fbc8 	bl	8001fd4 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fbc4 	bl	8001fd4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e087      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	491b      	ldr	r1, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_RCC_OscConfig+0x478>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fe fb9d 	bl	8001fd4 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fe fb99 	bl	8001fd4 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e05c      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x416>
 80038bc:	e054      	b.n	8003968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fb86 	bl	8001fd4 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fb82 	bl	8001fd4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e045      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x444>
 80038ea:	e03d      	b.n	8003968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e038      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
 8003900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_RCC_OscConfig+0x4ec>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d028      	beq.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d121      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d11a      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d111      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cc      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b68      	ldr	r3, [pc, #416]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90c      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b65      	ldr	r3, [pc, #404]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a58      	ldr	r2, [pc, #352]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e067      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4934      	ldr	r1, [pc, #208]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fe fab4 	bl	8001fd4 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fe fab0 	bl	8001fd4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20c      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f821 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fa14 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08004ff0 	.word	0x08004ff0
 8003b3c:	20000008 	.word	0x20000008
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b094      	sub	sp, #80	@ 0x50
 8003b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b50:	2300      	movs	r3, #0
 8003b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b54:	2300      	movs	r3, #0
 8003b56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5c:	4b79      	ldr	r3, [pc, #484]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d00d      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x40>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	f200 80e1 	bhi.w	8003d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x34>
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b76:	e0db      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b73      	ldr	r3, [pc, #460]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b7c:	e0db      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7e:	4b73      	ldr	r3, [pc, #460]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b82:	e0d8      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	4b6f      	ldr	r3, [pc, #444]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	462b      	mov	r3, r5
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	0159      	lsls	r1, r3, #5
 8003bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc8:	0150      	lsls	r0, r2, #5
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4621      	mov	r1, r4
 8003bd0:	1a51      	subs	r1, r2, r1
 8003bd2:	6139      	str	r1, [r7, #16]
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be8:	4659      	mov	r1, fp
 8003bea:	018b      	lsls	r3, r1, #6
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	018a      	lsls	r2, r1, #6
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c16:	4690      	mov	r8, r2
 8003c18:	4699      	mov	r9, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	eb18 0303 	adds.w	r3, r8, r3
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	462b      	mov	r3, r5
 8003c24:	eb49 0303 	adc.w	r3, r9, r3
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c36:	4629      	mov	r1, r5
 8003c38:	024b      	lsls	r3, r1, #9
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c40:	4621      	mov	r1, r4
 8003c42:	024a      	lsls	r2, r1, #9
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c54:	f7fc fabe 	bl	80001d4 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c60:	e058      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c62:	4b38      	ldr	r3, [pc, #224]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	f04f 0000 	mov.w	r0, #0
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	0159      	lsls	r1, r3, #5
 8003c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8e:	0150      	lsls	r0, r2, #5
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4641      	mov	r1, r8
 8003c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	eb45 0303 	adc.w	r3, r5, r3
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cea:	4629      	mov	r1, r5
 8003cec:	028b      	lsls	r3, r1, #10
 8003cee:	4621      	mov	r1, r4
 8003cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	028a      	lsls	r2, r1, #10
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	61fa      	str	r2, [r7, #28]
 8003d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d08:	f7fc fa64 	bl	80001d4 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3750      	adds	r7, #80	@ 0x50
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	007a1200 	.word	0x007a1200

08003d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000008 	.word	0x20000008

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	@ (8003d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08005000 	.word	0x08005000

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d94:	f7ff ffdc 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0b5b      	lsrs	r3, r3, #13
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	@ (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08005000 	.word	0x08005000

08003db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07b      	b.n	8003ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dda:	d009      	beq.n	8003df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	61da      	str	r2, [r3, #28]
 8003de2:	e005      	b.n	8003df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd ff54 	bl	8001cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e74:	ea42 0103 	orr.w	r1, r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0104 	and.w	r1, r3, #4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	f003 0210 	and.w	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08c      	sub	sp, #48	@ 0x30
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x26>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e198      	b.n	8004222 <HAL_SPI_TransmitReceive+0x358>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef8:	f7fe f86c 	bl	8001fd4 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d00f      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x70>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f20:	d107      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x68>
 8003f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f38:	e16d      	b.n	8004216 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x82>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x82>
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003f52:	e160      	b.n	8004216 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d003      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2205      	movs	r2, #5
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	887a      	ldrh	r2, [r7, #2]
 8003f7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	887a      	ldrh	r2, [r7, #2]
 8003f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d17c      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x10a>
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d16a      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff8:	e057      	b.n	80040aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11b      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x176>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x176>
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d113      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	881a      	ldrh	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d119      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x1b8>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d014      	beq.n	8004082 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	b292      	uxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	1c9a      	adds	r2, r3, #2
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800407e:	2301      	movs	r3, #1
 8004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004082:	f7fd ffa7 	bl	8001fd4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800408e:	429a      	cmp	r2, r3
 8004090:	d80b      	bhi.n	80040aa <HAL_SPI_TransmitReceive+0x1e0>
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004098:	d007      	beq.n	80040aa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80040a8:	e0b5      	b.n	8004216 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1a2      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x130>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d19d      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x130>
 80040be:	e080      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_SPI_TransmitReceive+0x204>
 80040c8:	8b7b      	ldrh	r3, [r7, #26]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d16f      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f4:	e05b      	b.n	80041ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d11c      	bne.n	800413e <HAL_SPI_TransmitReceive+0x274>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d017      	beq.n	800413e <HAL_SPI_TransmitReceive+0x274>
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d114      	bne.n	800413e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d119      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x2b6>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d014      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800417c:	2301      	movs	r3, #1
 800417e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004180:	f7fd ff28 	bl	8001fd4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800418c:	429a      	cmp	r2, r3
 800418e:	d803      	bhi.n	8004198 <HAL_SPI_TransmitReceive+0x2ce>
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004196:	d102      	bne.n	800419e <HAL_SPI_TransmitReceive+0x2d4>
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80041ac:	e033      	b.n	8004216 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d19e      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x22c>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d199      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f8b8 	bl	800433c <SPI_EndRxTxTransaction>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80041de:	e01a      	b.n	8004216 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800420c:	e003      	b.n	8004216 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800421e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004222:	4618      	mov	r0, r3
 8004224:	3730      	adds	r7, #48	@ 0x30
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800423c:	f7fd feca 	bl	8001fd4 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4413      	add	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800424c:	f7fd fec2 	bl	8001fd4 <HAL_GetTick>
 8004250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004252:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	015b      	lsls	r3, r3, #5
 8004258:	0d1b      	lsrs	r3, r3, #20
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004262:	e054      	b.n	800430e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800426a:	d050      	beq.n	800430e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800426c:	f7fd feb2 	bl	8001fd4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	429a      	cmp	r2, r3
 800427a:	d902      	bls.n	8004282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d13d      	bne.n	80042fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800429a:	d111      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a4:	d004      	beq.n	80042b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ae:	d107      	bne.n	80042c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c8:	d10f      	bne.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e017      	b.n	800432e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3b01      	subs	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	429a      	cmp	r2, r3
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	429a      	cmp	r2, r3
 800432a:	d19b      	bne.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000008 	.word	0x20000008

0800433c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2201      	movs	r2, #1
 8004350:	2102      	movs	r1, #2
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff ff6a 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e032      	b.n	80043d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800436e:	4b1b      	ldr	r3, [pc, #108]	@ (80043dc <SPI_EndRxTxTransaction+0xa0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <SPI_EndRxTxTransaction+0xa4>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	0d5b      	lsrs	r3, r3, #21
 800437a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800438c:	d112      	bne.n	80043b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff ff47 	bl	800422c <SPI_WaitFlagStateUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d016      	beq.n	80043d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e00f      	b.n	80043d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	3b01      	subs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	2b80      	cmp	r3, #128	@ 0x80
 80043cc:	d0f2      	beq.n	80043b4 <SPI_EndRxTxTransaction+0x78>
 80043ce:	e000      	b.n	80043d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80043d0:	bf00      	nop
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000008 	.word	0x20000008
 80043e0:	165e9f81 	.word	0x165e9f81

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e041      	b.n	800447a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd fc9c 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 f950 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d001      	beq.n	800449c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e03c      	b.n	8004516 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_TIM_Base_Start+0xa0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_TIM_Base_Start+0x5c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b6:	d013      	beq.n	80044e0 <HAL_TIM_Base_Start+0x5c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_TIM_Base_Start+0xa4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_TIM_Base_Start+0x5c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a19      	ldr	r2, [pc, #100]	@ (800452c <HAL_TIM_Base_Start+0xa8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_TIM_Base_Start+0x5c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_TIM_Base_Start+0xac>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_Base_Start+0x5c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_TIM_Base_Start+0xb0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d010      	beq.n	8004514 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	e007      	b.n	8004514 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40014000 	.word	0x40014000

08004538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIM_ConfigClockSource+0x1c>
 8004550:	2302      	movs	r3, #2
 8004552:	e0b4      	b.n	80046be <HAL_TIM_ConfigClockSource+0x186>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800457a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800458c:	d03e      	beq.n	800460c <HAL_TIM_ConfigClockSource+0xd4>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004592:	f200 8087 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800459a:	f000 8086 	beq.w	80046aa <HAL_TIM_ConfigClockSource+0x172>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a2:	d87f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b70      	cmp	r3, #112	@ 0x70
 80045a6:	d01a      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xa6>
 80045a8:	2b70      	cmp	r3, #112	@ 0x70
 80045aa:	d87b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b60      	cmp	r3, #96	@ 0x60
 80045ae:	d050      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x11a>
 80045b0:	2b60      	cmp	r3, #96	@ 0x60
 80045b2:	d877      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b50      	cmp	r3, #80	@ 0x50
 80045b6:	d03c      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0xfa>
 80045b8:	2b50      	cmp	r3, #80	@ 0x50
 80045ba:	d873      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	d058      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x13a>
 80045c0:	2b40      	cmp	r3, #64	@ 0x40
 80045c2:	d86f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b30      	cmp	r3, #48	@ 0x30
 80045c6:	d064      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045c8:	2b30      	cmp	r3, #48	@ 0x30
 80045ca:	d86b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d060      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d867      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d05a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	e062      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ee:	f000 f971 	bl	80048d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]
      break;
 800460a:	e04f      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800461c:	f000 f95a 	bl	80048d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800462e:	609a      	str	r2, [r3, #8]
      break;
 8004630:	e03c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f8ce 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2150      	movs	r1, #80	@ 0x50
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f927 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004650:	e02c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f8ed 	bl	800483e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2160      	movs	r1, #96	@ 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f917 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004670:	e01c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	461a      	mov	r2, r3
 8004680:	f000 f8ae 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	@ 0x40
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f907 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004690:	e00c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 f8fe 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 80046a2:	e003      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3a      	ldr	r2, [pc, #232]	@ (80047c4 <TIM_Base_SetConfig+0xfc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00f      	beq.n	8004700 <TIM_Base_SetConfig+0x38>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x38>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a37      	ldr	r2, [pc, #220]	@ (80047c8 <TIM_Base_SetConfig+0x100>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x38>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a36      	ldr	r2, [pc, #216]	@ (80047cc <TIM_Base_SetConfig+0x104>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x38>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a35      	ldr	r2, [pc, #212]	@ (80047d0 <TIM_Base_SetConfig+0x108>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <TIM_Base_SetConfig+0xfc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01b      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004720:	d017      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a28      	ldr	r2, [pc, #160]	@ (80047c8 <TIM_Base_SetConfig+0x100>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a27      	ldr	r2, [pc, #156]	@ (80047cc <TIM_Base_SetConfig+0x104>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00f      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a26      	ldr	r2, [pc, #152]	@ (80047d0 <TIM_Base_SetConfig+0x108>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00b      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a25      	ldr	r2, [pc, #148]	@ (80047d4 <TIM_Base_SetConfig+0x10c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a24      	ldr	r2, [pc, #144]	@ (80047d8 <TIM_Base_SetConfig+0x110>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a23      	ldr	r2, [pc, #140]	@ (80047dc <TIM_Base_SetConfig+0x114>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d108      	bne.n	8004764 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0e      	ldr	r2, [pc, #56]	@ (80047c4 <TIM_Base_SetConfig+0xfc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d105      	bne.n	80047b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	611a      	str	r2, [r3, #16]
  }
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 030a 	bic.w	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0210 	bic.w	r2, r3, #16
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800487a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f043 0307 	orr.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e050      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d013      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a13      	ldr	r2, [pc, #76]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40014000 	.word	0x40014000

080049f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e042      	b.n	8004a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd f9b8 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	@ 0x24
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f82b 	bl	8004a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a94:	b0c0      	sub	sp, #256	@ 0x100
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	68d9      	ldr	r1, [r3, #12]
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	ea40 0301 	orr.w	r3, r0, r1
 8004ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ae8:	f021 010c 	bic.w	r1, r1, #12
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004af6:	430b      	orrs	r3, r1
 8004af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0a:	6999      	ldr	r1, [r3, #24]
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	ea40 0301 	orr.w	r3, r0, r1
 8004b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d5c <UART_SetConfig+0x2cc>)
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d005      	beq.n	8004b30 <UART_SetConfig+0xa0>
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d60 <UART_SetConfig+0x2d0>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d104      	bne.n	8004b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b30:	f7ff f92e 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8004b34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b38:	e003      	b.n	8004b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b3a:	f7ff f915 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8004b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4c:	f040 810c 	bne.w	8004d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b62:	4622      	mov	r2, r4
 8004b64:	462b      	mov	r3, r5
 8004b66:	1891      	adds	r1, r2, r2
 8004b68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b6a:	415b      	adcs	r3, r3
 8004b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b72:	4621      	mov	r1, r4
 8004b74:	eb12 0801 	adds.w	r8, r2, r1
 8004b78:	4629      	mov	r1, r5
 8004b7a:	eb43 0901 	adc.w	r9, r3, r1
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b92:	4690      	mov	r8, r2
 8004b94:	4699      	mov	r9, r3
 8004b96:	4623      	mov	r3, r4
 8004b98:	eb18 0303 	adds.w	r3, r8, r3
 8004b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	eb49 0303 	adc.w	r3, r9, r3
 8004ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	18db      	adds	r3, r3, r3
 8004bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	eb42 0303 	adc.w	r3, r2, r3
 8004bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bd4:	f7fb fafe 	bl	80001d4 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4b61      	ldr	r3, [pc, #388]	@ (8004d64 <UART_SetConfig+0x2d4>)
 8004bde:	fba3 2302 	umull	r2, r3, r3, r2
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	011c      	lsls	r4, r3, #4
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	1891      	adds	r1, r2, r2
 8004bfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c00:	415b      	adcs	r3, r3
 8004c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c08:	4641      	mov	r1, r8
 8004c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb43 0b01 	adc.w	fp, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c28:	4692      	mov	sl, r2
 8004c2a:	469b      	mov	fp, r3
 8004c2c:	4643      	mov	r3, r8
 8004c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c36:	464b      	mov	r3, r9
 8004c38:	eb4b 0303 	adc.w	r3, fp, r3
 8004c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c54:	460b      	mov	r3, r1
 8004c56:	18db      	adds	r3, r3, r3
 8004c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c6a:	f7fb fab3 	bl	80001d4 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	4b3b      	ldr	r3, [pc, #236]	@ (8004d64 <UART_SetConfig+0x2d4>)
 8004c76:	fba3 2301 	umull	r2, r3, r3, r1
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2264      	movs	r2, #100	@ 0x64
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	1acb      	subs	r3, r1, r3
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004c8a:	4b36      	ldr	r3, [pc, #216]	@ (8004d64 <UART_SetConfig+0x2d4>)
 8004c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c98:	441c      	add	r4, r3
 8004c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	1891      	adds	r1, r2, r2
 8004cb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cb4:	415b      	adcs	r3, r3
 8004cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	1851      	adds	r1, r2, r1
 8004cc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	414b      	adcs	r3, r1
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	00cb      	lsls	r3, r1, #3
 8004cd8:	4651      	mov	r1, sl
 8004cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cde:	4651      	mov	r1, sl
 8004ce0:	00ca      	lsls	r2, r1, #3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4642      	mov	r2, r8
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	460a      	mov	r2, r1
 8004cf4:	eb42 0303 	adc.w	r3, r2, r3
 8004cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d10:	460b      	mov	r3, r1
 8004d12:	18db      	adds	r3, r3, r3
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d16:	4613      	mov	r3, r2
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d26:	f7fb fa55 	bl	80001d4 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <UART_SetConfig+0x2d4>)
 8004d30:	fba3 1302 	umull	r1, r3, r3, r2
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	2164      	movs	r1, #100	@ 0x64
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	3332      	adds	r3, #50	@ 0x32
 8004d42:	4a08      	ldr	r2, [pc, #32]	@ (8004d64 <UART_SetConfig+0x2d4>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	f003 0207 	and.w	r2, r3, #7
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4422      	add	r2, r4
 8004d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d58:	e106      	b.n	8004f68 <UART_SetConfig+0x4d8>
 8004d5a:	bf00      	nop
 8004d5c:	40011000 	.word	0x40011000
 8004d60:	40011400 	.word	0x40011400
 8004d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	1891      	adds	r1, r2, r2
 8004d80:	6239      	str	r1, [r7, #32]
 8004d82:	415b      	adcs	r3, r3
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	1854      	adds	r4, r2, r1
 8004d8e:	4649      	mov	r1, r9
 8004d90:	eb43 0501 	adc.w	r5, r3, r1
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	00eb      	lsls	r3, r5, #3
 8004d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da2:	00e2      	lsls	r2, r4, #3
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	18e3      	adds	r3, r4, r3
 8004dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004db0:	464b      	mov	r3, r9
 8004db2:	eb45 0303 	adc.w	r3, r5, r3
 8004db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	008b      	lsls	r3, r1, #2
 8004dda:	4621      	mov	r1, r4
 8004ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de0:	4621      	mov	r1, r4
 8004de2:	008a      	lsls	r2, r1, #2
 8004de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004de8:	f7fb f9f4 	bl	80001d4 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4b60      	ldr	r3, [pc, #384]	@ (8004f74 <UART_SetConfig+0x4e4>)
 8004df2:	fba3 2302 	umull	r2, r3, r3, r2
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	011c      	lsls	r4, r3, #4
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	61b9      	str	r1, [r7, #24]
 8004e14:	415b      	adcs	r3, r3
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6139      	str	r1, [r7, #16]
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e50:	464b      	mov	r3, r9
 8004e52:	460a      	mov	r2, r1
 8004e54:	eb42 0303 	adc.w	r3, r2, r3
 8004e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e74:	4649      	mov	r1, r9
 8004e76:	008b      	lsls	r3, r1, #2
 8004e78:	4641      	mov	r1, r8
 8004e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7e:	4641      	mov	r1, r8
 8004e80:	008a      	lsls	r2, r1, #2
 8004e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e86:	f7fb f9a5 	bl	80001d4 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4b38      	ldr	r3, [pc, #224]	@ (8004f74 <UART_SetConfig+0x4e4>)
 8004e92:	fba3 2301 	umull	r2, r3, r3, r1
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2264      	movs	r2, #100	@ 0x64
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	1acb      	subs	r3, r1, r3
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	3332      	adds	r3, #50	@ 0x32
 8004ea4:	4a33      	ldr	r2, [pc, #204]	@ (8004f74 <UART_SetConfig+0x4e4>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eb0:	441c      	add	r4, r3
 8004eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eba:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	1891      	adds	r1, r2, r2
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	415b      	adcs	r3, r3
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	1851      	adds	r1, r2, r1
 8004ed4:	6039      	str	r1, [r7, #0]
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	414b      	adcs	r3, r1
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ee8:	4659      	mov	r1, fp
 8004eea:	00cb      	lsls	r3, r1, #3
 8004eec:	4651      	mov	r1, sl
 8004eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	00ca      	lsls	r2, r1, #3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	4642      	mov	r2, r8
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f02:	464b      	mov	r3, r9
 8004f04:	460a      	mov	r2, r1
 8004f06:	eb42 0303 	adc.w	r3, r2, r3
 8004f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f16:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f24:	4649      	mov	r1, r9
 8004f26:	008b      	lsls	r3, r1, #2
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2e:	4641      	mov	r1, r8
 8004f30:	008a      	lsls	r2, r1, #2
 8004f32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f36:	f7fb f94d 	bl	80001d4 <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <UART_SetConfig+0x4e4>)
 8004f40:	fba3 1302 	umull	r1, r3, r3, r2
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	2164      	movs	r1, #100	@ 0x64
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	3332      	adds	r3, #50	@ 0x32
 8004f52:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <UART_SetConfig+0x4e4>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4422      	add	r2, r4
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f74:	51eb851f 	.word	0x51eb851f

08004f78 <memset>:
 8004f78:	4402      	add	r2, r0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <memset+0xa>
 8004f80:	4770      	bx	lr
 8004f82:	f803 1b01 	strb.w	r1, [r3], #1
 8004f86:	e7f9      	b.n	8004f7c <memset+0x4>

08004f88 <__libc_init_array>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fc0 <__libc_init_array+0x38>)
 8004f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fc4 <__libc_init_array+0x3c>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	2600      	movs	r6, #0
 8004f94:	42a6      	cmp	r6, r4
 8004f96:	d109      	bne.n	8004fac <__libc_init_array+0x24>
 8004f98:	4d0b      	ldr	r5, [pc, #44]	@ (8004fc8 <__libc_init_array+0x40>)
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8004fcc <__libc_init_array+0x44>)
 8004f9c:	f000 f818 	bl	8004fd0 <_init>
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	42a6      	cmp	r6, r4
 8004fa8:	d105      	bne.n	8004fb6 <__libc_init_array+0x2e>
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb0:	4798      	blx	r3
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7ee      	b.n	8004f94 <__libc_init_array+0xc>
 8004fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fba:	4798      	blx	r3
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7f2      	b.n	8004fa6 <__libc_init_array+0x1e>
 8004fc0:	08005018 	.word	0x08005018
 8004fc4:	08005018 	.word	0x08005018
 8004fc8:	08005018 	.word	0x08005018
 8004fcc:	0800501c 	.word	0x0800501c

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
