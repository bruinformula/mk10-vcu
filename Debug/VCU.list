
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004e04  08004e04  00005e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e2c  08004e2c  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004e2c  08004e2c  00005e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e34  08004e34  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e34  08004e34  00005e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004e3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000014  08004e50  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004e50  000061fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011366  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254a  00000000  00000000  000173aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000198f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cec  00000000  00000000  0001a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e61  00000000  00000000  0001b64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012159  00000000  00000000  000334ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5ee  00000000  00000000  00045606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1bf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000e1c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e61d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004dec 	.word	0x08004dec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08004dec 	.word	0x08004dec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <readAPPSandBSE>:
void sendTorqueCommand(void);
/*            VCU Method Declarations  end         */


void readAPPSandBSE(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

	// ADC Read Code
	HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 80004c8:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <readAPPSandBSE+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	4917      	ldr	r1, [pc, #92]	@ (800052c <readAPPSandBSE+0x68>)
 80004d0:	4817      	ldr	r0, [pc, #92]	@ (8000530 <readAPPSandBSE+0x6c>)
 80004d2:	f001 fd19 	bl	8001f08 <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - millis_since_dma_read >DMA_READ_TIMEOUT){
 80004d6:	f001 fca3 	bl	8001e20 <HAL_GetTick>
 80004da:	4602      	mov	r2, r0
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <readAPPSandBSE+0x70>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	220a      	movs	r2, #10
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d91c      	bls.n	8000522 <readAPPSandBSE+0x5e>
		apps1Value = ADC_Reads[APPS1_RANK];
 80004e8:	2300      	movs	r3, #0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <readAPPSandBSE+0x68>)
 80004ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <readAPPSandBSE+0x74>)
 80004f6:	801a      	strh	r2, [r3, #0]
		apps2Value = ADC_Reads[APPS2_RANK];
 80004f8:	2301      	movs	r3, #1
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <readAPPSandBSE+0x68>)
 80004fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <readAPPSandBSE+0x78>)
 8000506:	801a      	strh	r2, [r3, #0]
		bseValue = ADC_Reads[BSE_RANK];
 8000508:	2302      	movs	r3, #2
 800050a:	461a      	mov	r2, r3
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <readAPPSandBSE+0x68>)
 800050e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <readAPPSandBSE+0x7c>)
 8000516:	801a      	strh	r2, [r3, #0]

		millis_since_dma_read = HAL_GetTick();
 8000518:	f001 fc82 	bl	8001e20 <HAL_GetTick>
 800051c:	4603      	mov	r3, r0
 800051e:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <readAPPSandBSE+0x70>)
 8000520:	6013      	str	r3, [r2, #0]
	}

//	HAL_ADC_Stop_DMA(&hadc1);


}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000004 	.word	0x20000004
 800052c:	200001e0 	.word	0x200001e0
 8000530:	20000030 	.word	0x20000030
 8000534:	200001d8 	.word	0x200001d8
 8000538:	200001c0 	.word	0x200001c0
 800053c:	200001c2 	.word	0x200001c2
 8000540:	200001c4 	.word	0x200001c4

08000544 <calculateTorqueRequest>:

void calculateTorqueRequest(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0

	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 800054a:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <calculateTorqueRequest+0x11c>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	ee07 3a90 	vmov	s15, r3
 8000552:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000556:	230a      	movs	r3, #10
 8000558:	ee07 3a90 	vmov	s15, r3
 800055c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000560:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000564:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000568:	461a      	mov	r2, r3
 800056a:	230a      	movs	r3, #10
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	ee07 3a90 	vmov	s15, r3
 8000572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800057a:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 800057e:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <calculateTorqueRequest+0x120>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	ee07 3a90 	vmov	s15, r3
 8000586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800058a:	230a      	movs	r3, #10
 800058c:	ee07 3a90 	vmov	s15, r3
 8000590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000594:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000598:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800059c:	461a      	mov	r2, r3
 800059e:	230a      	movs	r3, #10
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	ee07 3a90 	vmov	s15, r3
 80005a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ae:	edc7 7a02 	vstr	s15, [r7, #8]
	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 80005b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80005b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80005ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005be:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80005c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005c6:	edc7 7a01 	vstr	s15, [r7, #4]
	if(appsValue >= 0){
 80005ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d6:	db11      	blt.n	80005fc <calculateTorqueRequest+0xb8>
		requestedTorque = ((float)(MAX_TORQUE-MIN_TORQUE)) * appsValue + MIN_TORQUE;
 80005d8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000668 <calculateTorqueRequest+0x124>
 80005dc:	eddf 7a23 	vldr	s15, [pc, #140]	@ 800066c <calculateTorqueRequest+0x128>
 80005e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80005e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800066c <calculateTorqueRequest+0x128>
 80005f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <calculateTorqueRequest+0x12c>)
 80005f6:	edc3 7a00 	vstr	s15, [r3]
	}else{
		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
	}
}
 80005fa:	e02a      	b.n	8000652 <calculateTorqueRequest+0x10e>
		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <calculateTorqueRequest+0x130>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	ee07 3a90 	vmov	s15, r3
 8000604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000608:	2300      	movs	r3, #0
 800060a:	ee07 3a90 	vmov	s15, r3
 800060e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000612:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000616:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800061a:	461a      	mov	r2, r3
 800061c:	2300      	movs	r3, #0
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800062c:	edc7 7a00 	vstr	s15, [r7]
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000630:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000634:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800066c <calculateTorqueRequest+0x128>
 8000638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800063c:	edd7 7a00 	vldr	s15, [r7]
 8000640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000644:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800066c <calculateTorqueRequest+0x128>
 8000648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <calculateTorqueRequest+0x12c>)
 800064e:	edc3 7a00 	vstr	s15, [r3]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200001c0 	.word	0x200001c0
 8000664:	200001c2 	.word	0x200001c2
 8000668:	42d80000 	.word	0x42d80000
 800066c:	00000000 	.word	0x00000000
 8000670:	200001c8 	.word	0x200001c8
 8000674:	200001c4 	.word	0x200001c4

08000678 <checkAPPSPlausibility>:

void checkAPPSPlausibility(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL) * 100;
 800067c:	4b39      	ldr	r3, [pc, #228]	@ (8000764 <checkAPPSPlausibility+0xec>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000688:	230a      	movs	r3, #10
 800068a:	ee07 3a90 	vmov	s15, r3
 800068e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000692:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000696:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800069a:	461a      	mov	r2, r3
 800069c:	230a      	movs	r3, #10
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ac:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000768 <checkAPPSPlausibility+0xf0>
 80006b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b4:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <checkAPPSPlausibility+0xf4>)
 80006b6:	edc3 7a00 	vstr	s15, [r3]
  apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL) * 100;
 80006ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <checkAPPSPlausibility+0xf8>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006c6:	230a      	movs	r3, #10
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006d4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80006d8:	461a      	mov	r2, r3
 80006da:	230a      	movs	r3, #10
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	ee07 3a90 	vmov	s15, r3
 80006e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000768 <checkAPPSPlausibility+0xf0>
 80006ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <checkAPPSPlausibility+0xfc>)
 80006f4:	edc3 7a00 	vstr	s15, [r3]

  if(abs(apps1_as_percent-apps2_as_percent)> APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE){
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <checkAPPSPlausibility+0xf4>)
 80006fa:	ed93 7a00 	vldr	s14, [r3]
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <checkAPPSPlausibility+0xfc>)
 8000700:	edd3 7a00 	vldr	s15, [r3]
 8000704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800070c:	ee17 3a90 	vmov	r3, s15
 8000710:	2b00      	cmp	r3, #0
 8000712:	bfb8      	it	lt
 8000714:	425b      	neglt	r3, r3
 8000716:	220a      	movs	r2, #10
 8000718:	4293      	cmp	r3, r2
 800071a:	dd1e      	ble.n	800075a <checkAPPSPlausibility+0xe2>
	  if(apps_plausible){
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <checkAPPSPlausibility+0x100>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00c      	beq.n	800073e <checkAPPSPlausibility+0xc6>
		  millis_since_apps_implausible = HAL_GetTick();
 8000724:	f001 fb7c 	bl	8001e20 <HAL_GetTick>
 8000728:	4603      	mov	r3, r0
 800072a:	4a14      	ldr	r2, [pc, #80]	@ (800077c <checkAPPSPlausibility+0x104>)
 800072c:	6013      	str	r3, [r2, #0]
		  apps_plausible = false;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <checkAPPSPlausibility+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	801a      	strh	r2, [r3, #0]
		  requestedTorque = lastRequestedTorque;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <checkAPPSPlausibility+0x108>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <checkAPPSPlausibility+0x10c>)
 800073a:	6013      	str	r3, [r2, #0]
	  }
  }else{
      apps_plausible = true;
  }

}
 800073c:	e010      	b.n	8000760 <checkAPPSPlausibility+0xe8>
	  }else if (HAL_GetTick()-millis_since_apps_implausible>APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS){
 800073e:	f001 fb6f 	bl	8001e20 <HAL_GetTick>
 8000742:	4602      	mov	r2, r0
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <checkAPPSPlausibility+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	2264      	movs	r2, #100	@ 0x64
 800074c:	4293      	cmp	r3, r2
 800074e:	d907      	bls.n	8000760 <checkAPPSPlausibility+0xe8>
		  requestedTorque = 0;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <checkAPPSPlausibility+0x10c>)
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	e002      	b.n	8000760 <checkAPPSPlausibility+0xe8>
      apps_plausible = true;
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <checkAPPSPlausibility+0x100>)
 800075c:	2201      	movs	r2, #1
 800075e:	801a      	strh	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001c0 	.word	0x200001c0
 8000768:	42c80000 	.word	0x42c80000
 800076c:	200001ec 	.word	0x200001ec
 8000770:	200001c2 	.word	0x200001c2
 8000774:	200001f0 	.word	0x200001f0
 8000778:	20000000 	.word	0x20000000
 800077c:	200001d4 	.word	0x200001d4
 8000780:	200001cc 	.word	0x200001cc
 8000784:	200001c8 	.word	0x200001c8

08000788 <checkCrossCheck>:

void checkCrossCheck(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

	bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL) * 100;
 800078e:	4b4e      	ldr	r3, [pc, #312]	@ (80008c8 <checkCrossCheck+0x140>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	ee07 3a90 	vmov	s15, r3
 8000796:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800079a:	2300      	movs	r3, #0
 800079c:	ee07 3a90 	vmov	s15, r3
 80007a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80007a8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80007ac:	461a      	mov	r2, r3
 80007ae:	2300      	movs	r3, #0
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007be:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80008cc <checkCrossCheck+0x144>
 80007c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c6:	4b42      	ldr	r3, [pc, #264]	@ (80008d0 <checkCrossCheck+0x148>)
 80007c8:	edc3 7a00 	vstr	s15, [r3]
	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL) * 100;
 80007cc:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <checkCrossCheck+0x14c>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007d8:	230a      	movs	r3, #10
 80007da:	ee07 3a90 	vmov	s15, r3
 80007de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80007e6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80007ea:	461a      	mov	r2, r3
 80007ec:	230a      	movs	r3, #10
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007fc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80008cc <checkCrossCheck+0x144>
 8000800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000804:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL) * 100;
 8000808:	4b33      	ldr	r3, [pc, #204]	@ (80008d8 <checkCrossCheck+0x150>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	ee07 3a90 	vmov	s15, r3
 8000810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000814:	230a      	movs	r3, #10
 8000816:	ee07 3a90 	vmov	s15, r3
 800081a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800081e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000822:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000826:	461a      	mov	r2, r3
 8000828:	230a      	movs	r3, #10
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000838:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80008cc <checkCrossCheck+0x144>
 800083c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000840:	edc7 7a02 	vstr	s15, [r7, #8]
	float apps_as_percent = ((float)apps1_as_percent+apps2_as_percent)/2;
 8000844:	ed97 7a03 	vldr	s14, [r7, #12]
 8000848:	edd7 7a02 	vldr	s15, [r7, #8]
 800084c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000850:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000858:	edc7 7a01 	vstr	s15, [r7, #4]

	if(apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT && bseValue > BRAKE_ACTIVATED_ADC_VAL){
 800085c:	2319      	movs	r3, #25
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000866:	ed97 7a01 	vldr	s14, [r7, #4]
 800086a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000872:	dd1f      	ble.n	80008b4 <checkCrossCheck+0x12c>
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <checkCrossCheck+0x140>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	2264      	movs	r2, #100	@ 0x64
 800087a:	4293      	cmp	r3, r2
 800087c:	d91a      	bls.n	80008b4 <checkCrossCheck+0x12c>
		if(cross_check_plausible){
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <checkCrossCheck+0x154>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d008      	beq.n	8000898 <checkCrossCheck+0x110>
			  millis_since_cross_check_implausible = HAL_GetTick();
 8000886:	f001 facb 	bl	8001e20 <HAL_GetTick>
 800088a:	4603      	mov	r3, r0
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <checkCrossCheck+0x158>)
 800088e:	6013      	str	r3, [r2, #0]
			  cross_check_plausible = false;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <checkCrossCheck+0x154>)
 8000892:	2200      	movs	r2, #0
 8000894:	801a      	strh	r2, [r3, #0]
		if(cross_check_plausible){
 8000896:	e011      	b.n	80008bc <checkCrossCheck+0x134>
		  }else if (HAL_GetTick()-millis_since_cross_check_implausible>CROSS_CHECK_IMPLAUSIBILITY_TIMEOUT_MILLIS){
 8000898:	f001 fac2 	bl	8001e20 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <checkCrossCheck+0x158>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2264      	movs	r2, #100	@ 0x64
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d908      	bls.n	80008bc <checkCrossCheck+0x134>
			  requestedTorque = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <checkCrossCheck+0x15c>)
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
		if(cross_check_plausible){
 80008b2:	e003      	b.n	80008bc <checkCrossCheck+0x134>
		  }
	}else{
		cross_check_plausible = true;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <checkCrossCheck+0x154>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	801a      	strh	r2, [r3, #0]
	}

}
 80008ba:	e000      	b.n	80008be <checkCrossCheck+0x136>
		if(cross_check_plausible){
 80008bc:	bf00      	nop
}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001c4 	.word	0x200001c4
 80008cc:	42c80000 	.word	0x42c80000
 80008d0:	200001f4 	.word	0x200001f4
 80008d4:	200001c0 	.word	0x200001c0
 80008d8:	200001c2 	.word	0x200001c2
 80008dc:	20000002 	.word	0x20000002
 80008e0:	200001dc 	.word	0x200001dc
 80008e4:	200001c8 	.word	0x200001c8

080008e8 <sendTorqueCommand>:

void sendTorqueCommand(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b098      	sub	sp, #96	@ 0x60
 80008ec:	af00      	add	r7, sp, #0

	int torqueValue = (int)(requestedTorque * 10);  // Convert to integer, multiply by 10
 80008ee:	4b46      	ldr	r3, [pc, #280]	@ (8000a08 <sendTorqueCommand+0x120>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80008f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000900:	ee17 3a90 	vmov	r3, s15
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c

	// Break the torqueValue into two bytes (little-endian)
	int msg0 = torqueValue & 0xFF;  // Low byte
 8000906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000908:	b2db      	uxtb	r3, r3
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
	int msg1 = (torqueValue >> 8) & 0xFF;  // High byte
 800090c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800090e:	121b      	asrs	r3, r3, #8
 8000910:	b2db      	uxtb	r3, r3
 8000912:	647b      	str	r3, [r7, #68]	@ 0x44

	struct can_frame torqueMsg1;
	torqueMsg1.can_id = 0x0C0;
 8000914:	23c0      	movs	r3, #192	@ 0xc0
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
	torqueMsg1.can_dlc = 8;
 8000918:	2308      	movs	r3, #8
 800091a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	for(int i=0;i<8;i++){
 800091e:	2300      	movs	r3, #0
 8000920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000922:	e010      	b.n	8000946 <sendTorqueCommand+0x5e>
		torqueMsg1.data[i] = (msg0 >> i) & 1;
 8000924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000928:	fa42 f303 	asr.w	r3, r2, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2d9      	uxtb	r1, r3
 8000934:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000938:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800093a:	4413      	add	r3, r2
 800093c:	460a      	mov	r2, r1
 800093e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++){
 8000940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000942:	3301      	adds	r3, #1
 8000944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000948:	2b07      	cmp	r3, #7
 800094a:	ddeb      	ble.n	8000924 <sendTorqueCommand+0x3c>
	}

	struct can_frame torqueMsg2;
	torqueMsg2.can_id = 0x0C1;
 800094c:	23c1      	movs	r3, #193	@ 0xc1
 800094e:	623b      	str	r3, [r7, #32]
	torqueMsg2.can_dlc = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	for(int i=0;i<8;i++){
 8000956:	2300      	movs	r3, #0
 8000958:	65bb      	str	r3, [r7, #88]	@ 0x58
 800095a:	e010      	b.n	800097e <sendTorqueCommand+0x96>
		torqueMsg2.data[i] = (msg1 >> i) & 1;
 800095c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800095e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000960:	fa42 f303 	asr.w	r3, r2, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	b2d9      	uxtb	r1, r3
 800096c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000972:	4413      	add	r3, r2
 8000974:	460a      	mov	r2, r1
 8000976:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++){
 8000978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800097a:	3301      	adds	r3, #1
 800097c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800097e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000980:	2b07      	cmp	r3, #7
 8000982:	ddeb      	ble.n	800095c <sendTorqueCommand+0x74>
	}

	struct can_frame directionMsg;
	struct can_frame inverterMsg;

	directionMsg.can_id = 0x0C4;
 8000984:	23c4      	movs	r3, #196	@ 0xc4
 8000986:	613b      	str	r3, [r7, #16]
	directionMsg.can_dlc = 8;
 8000988:	2308      	movs	r3, #8
 800098a:	753b      	strb	r3, [r7, #20]
	directionMsg.data[0] = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	763b      	strb	r3, [r7, #24]
	for(int i=1;i<8;i++){
 8000990:	2301      	movs	r3, #1
 8000992:	657b      	str	r3, [r7, #84]	@ 0x54
 8000994:	e008      	b.n	80009a8 <sendTorqueCommand+0xc0>
		directionMsg.data[i] = 0;
 8000996:	f107 0218 	add.w	r2, r7, #24
 800099a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800099c:	4413      	add	r3, r2
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<8;i++){
 80009a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009a4:	3301      	adds	r3, #1
 80009a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80009a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	ddf3      	ble.n	8000996 <sendTorqueCommand+0xae>
	}

	inverterMsg.can_id = 0x0C5;
 80009ae:	23c5      	movs	r3, #197	@ 0xc5
 80009b0:	603b      	str	r3, [r7, #0]
	inverterMsg.can_dlc = 8;
 80009b2:	2308      	movs	r3, #8
 80009b4:	713b      	strb	r3, [r7, #4]
	inverterMsg.data[0] = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	723b      	strb	r3, [r7, #8]
	for(int i=1;i<8;i++){
 80009ba:	2301      	movs	r3, #1
 80009bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80009be:	e008      	b.n	80009d2 <sendTorqueCommand+0xea>
		inverterMsg.data[i] = 0;
 80009c0:	f107 0208 	add.w	r2, r7, #8
 80009c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009c6:	4413      	add	r3, r2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<8;i++){
 80009cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009ce:	3301      	adds	r3, #1
 80009d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80009d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	ddf3      	ble.n	80009c0 <sendTorqueCommand+0xd8>
	}


	MCP_sendMessage(&torqueMsg1);
 80009d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 ffa7 	bl	8001930 <MCP_sendMessage>
	MCP_sendMessage(&torqueMsg2);
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 ffa2 	bl	8001930 <MCP_sendMessage>
	MCP_sendMessage(&directionMsg);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 ff9d 	bl	8001930 <MCP_sendMessage>
	MCP_sendMessage(&inverterMsg);
 80009f6:	463b      	mov	r3, r7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 ff99 	bl	8001930 <MCP_sendMessage>


}
 80009fe:	bf00      	nop
 8000a00:	3760      	adds	r7, #96	@ 0x60
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001c8 	.word	0x200001c8

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f001 f9a0 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f832 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f9d8 	bl	8000dcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1c:	f000 f9b6 	bl	8000d8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a20:	f000 f98a 	bl	8000d38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a24:	f000 f896 	bl	8000b54 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000a28:	f000 f938 	bl	8000c9c <MX_TIM3_Init>
  MX_SPI3_Init();
 8000a2c:	f000 f900 	bl	8000c30 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8000a30:	480e      	ldr	r0, [pc, #56]	@ (8000a6c <main+0x60>)
 8000a32:	f003 fc35 	bl	80042a0 <HAL_TIM_Base_Start>

  MCP_reset();
 8000a36:	f000 fc59 	bl	80012ec <MCP_reset>
  MCP_setBitrate(CAN_125KBPS);
 8000a3a:	200b      	movs	r0, #11
 8000a3c:	f000 fec6 	bl	80017cc <MCP_setBitrate>
  MCP_setNormalMode();
 8000a40:	f000 fcf2 	bl	8001428 <MCP_setNormalMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 readAPPSandBSE();
 8000a44:	f7ff fd3e 	bl	80004c4 <readAPPSandBSE>
	 calculateTorqueRequest();
 8000a48:	f7ff fd7c 	bl	8000544 <calculateTorqueRequest>
	 checkAPPSPlausibility();
 8000a4c:	f7ff fe14 	bl	8000678 <checkAPPSPlausibility>
	 checkCrossCheck();
 8000a50:	f7ff fe9a 	bl	8000788 <checkCrossCheck>

	 finalTorqueRequest = requestedTorque;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <main+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a06      	ldr	r2, [pc, #24]	@ (8000a74 <main+0x68>)
 8000a5a:	6013      	str	r3, [r2, #0]
	 lastRequestedTorque = requestedTorque;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <main+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <main+0x6c>)
 8000a62:	6013      	str	r3, [r2, #0]

	 sendTorqueCommand();
 8000a64:	f7ff ff40 	bl	80008e8 <sendTorqueCommand>
	 readAPPSandBSE();
 8000a68:	bf00      	nop
 8000a6a:	e7eb      	b.n	8000a44 <main+0x38>
 8000a6c:	20000130 	.word	0x20000130
 8000a70:	200001c8 	.word	0x200001c8
 8000a74:	200001d0 	.word	0x200001d0
 8000a78:	200001cc 	.word	0x200001cc

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	@ 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	@ 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f004 f982 	bl	8004d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a28      	ldr	r2, [pc, #160]	@ (8000b4c <SystemClock_Config+0xd0>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab0:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <SystemClock_Config+0xd0>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <SystemClock_Config+0xd4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac8:	4a21      	ldr	r2, [pc, #132]	@ (8000b50 <SystemClock_Config+0xd4>)
 8000aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <SystemClock_Config+0xd4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af0:	2310      	movs	r3, #16
 8000af2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afa:	2304      	movs	r3, #4
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000afe:	2307      	movs	r3, #7
 8000b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fbcc 	bl	80032a4 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b12:	f000 f9df 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fe2e 	bl	8003794 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b3e:	f000 f9c9 	bl	8000ed4 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	@ 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b66:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b68:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <MX_ADC1_Init+0xd8>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b96:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000b98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000ba4:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb8:	481b      	ldr	r0, [pc, #108]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000bba:	f001 f961 	bl	8001e80 <HAL_ADC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000bc4:	f000 f986 	bl	8000ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000bda:	f001 faa3 	bl	8002124 <HAL_ADC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000be4:	f000 f976 	bl	8000ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000bec:	2303      	movs	r3, #3
 8000bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000bf6:	f001 fa95 	bl	8002124 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c00:	f000 f968 	bl	8000ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c04:	2308      	movs	r3, #8
 8000c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_ADC1_Init+0xd4>)
 8000c12:	f001 fa87 	bl	8002124 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000c1c:	f000 f95a 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000030 	.word	0x20000030
 8000c2c:	40012000 	.word	0x40012000

08000c30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c36:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <MX_SPI3_Init+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c60:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MX_SPI3_Init+0x64>)
 8000c82:	f002 ffa7 	bl	8003bd4 <HAL_SPI_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c8c:	f000 f922 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	40003c00 	.word	0x40003c00

08000c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000cba:	4a1e      	ldr	r2, [pc, #120]	@ (8000d34 <MX_TIM3_Init+0x98>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cde:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000ce0:	f003 fa8e 	bl	8004200 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 f8f3 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000cfc:	f003 fb2a 	bl	8004354 <HAL_TIM_ConfigClockSource>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f8e5 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000d0e:	2380      	movs	r3, #128	@ 0x80
 8000d10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <MX_TIM3_Init+0x94>)
 8000d18:	f003 fd0a 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d22:	f000 f8d7 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000130 	.word	0x20000130
 8000d34:	40000400 	.word	0x40000400

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f003 fd4c 	bl	800480c <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f8ab 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000178 	.word	0x20000178
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_DMA_Init+0x3c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <MX_DMA_Init+0x3c>)
 8000d9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_DMA_Init+0x3c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2038      	movs	r0, #56	@ 0x38
 8000db4:	f001 fd31 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000db8:	2038      	movs	r0, #56	@ 0x38
 8000dba:	f001 fd4a 	bl	8002852 <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a36      	ldr	r2, [pc, #216]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b30      	ldr	r3, [pc, #192]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_GPIO_Init+0xf8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2120      	movs	r1, #32
 8000e56:	481c      	ldr	r0, [pc, #112]	@ (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e58:	f002 fa0a 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	481a      	ldr	r0, [pc, #104]	@ (8000ecc <MX_GPIO_Init+0x100>)
 8000e62:	f002 fa05 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4814      	ldr	r0, [pc, #80]	@ (8000ed0 <MX_GPIO_Init+0x104>)
 8000e7e:	f002 f873 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e82:	2320      	movs	r3, #32
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <MX_GPIO_Init+0xfc>)
 8000e9a:	f002 f865 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_GPIO_Init+0x100>)
 8000eb6:	f002 f857 	bl	8002f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	@ 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <Error_Handler+0x8>

08000ee0 <startSPI>:
#define SPI_CAN                 &hspi3
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET)

void startSPI() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <startSPI+0x14>)
 8000eea:	f002 f9c1 	bl	8003270 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <endSPI>:

void endSPI() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2110      	movs	r1, #16
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <endSPI+0x14>)
 8000f02:	f002 f9b5 	bl	8003270 <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <SPI_transfer>:

uint8_t SPI_transfer(uint8_t txByte){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	uint8_t rxByte;
	HAL_SPI_TransmitReceive(SPI_CAN, &txByte, &rxByte, 1, SPI_TIMEOUT);
 8000f1a:	f107 020f 	add.w	r2, r7, #15
 8000f1e:	1df9      	adds	r1, r7, #7
 8000f20:	230a      	movs	r3, #10
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <SPI_transfer+0x28>)
 8000f28:	f002 fedd 	bl	8003ce6 <HAL_SPI_TransmitReceive>
	return rxByte;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000d8 	.word	0x200000d8

08000f3c <setRegister>:

void setRegister(uint8_t reg, uint8_t value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
    startSPI();
 8000f4c:	f7ff ffc8 	bl	8000ee0 <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff ffdd 	bl	8000f10 <SPI_transfer>
    SPI_transfer(reg);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffd9 	bl	8000f10 <SPI_transfer>
    SPI_transfer(value);
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffd5 	bl	8000f10 <SPI_transfer>
    endSPI();
 8000f66:	f7ff ffc7 	bl	8000ef8 <endSPI>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <setRegisters>:

void setRegisters(uint8_t reg, uint8_t values[], uint8_t n)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	6039      	str	r1, [r7, #0]
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71bb      	strb	r3, [r7, #6]
    startSPI();
 8000f82:	f7ff ffad 	bl	8000ee0 <startSPI>
    SPI_transfer(INSTRUCTION_WRITE);
 8000f86:	2002      	movs	r0, #2
 8000f88:	f7ff ffc2 	bl	8000f10 <SPI_transfer>
    SPI_transfer(reg);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffbe 	bl	8000f10 <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e009      	b.n	8000fae <setRegisters+0x3c>
        SPI_transfer(values[i]);
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ffb4 	bl	8000f10 <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3f1      	bcc.n	8000f9a <setRegisters+0x28>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 8000fb6:	f7ff ff9f 	bl	8000ef8 <endSPI>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <loadTx>:

void loadTx(uint8_t reg, uint8_t values[], uint8_t n){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	71bb      	strb	r3, [r7, #6]
    startSPI();
 8000fd2:	f7ff ff85 	bl	8000ee0 <startSPI>
    //SPI_transfer(INSTRUCTION_WRITE);
    SPI_transfer(reg);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff99 	bl	8000f10 <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e009      	b.n	8000ff8 <loadTx+0x36>
        SPI_transfer(values[i]);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff8f 	bl	8000f10 <SPI_transfer>
    for (uint8_t i=0; i<n; i++) {
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3f1      	bcc.n	8000fe4 <loadTx+0x22>
    }

  //  HAL_SPI_Transmit(SPI_CAN, values, n, SPI_TIMEOUT);
    endSPI();
 8001000:	f7ff ff7a 	bl	8000ef8 <endSPI>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <modifyRegister>:

void modifyRegister(uint8_t reg, uint8_t mask, uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	717b      	strb	r3, [r7, #5]
    startSPI();
 800101e:	f7ff ff5f 	bl	8000ee0 <startSPI>
    SPI_transfer(INSTRUCTION_BITMOD);
 8001022:	2005      	movs	r0, #5
 8001024:	f7ff ff74 	bl	8000f10 <SPI_transfer>
    SPI_transfer(reg);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff70 	bl	8000f10 <SPI_transfer>
    SPI_transfer(mask);
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff6c 	bl	8000f10 <SPI_transfer>
    SPI_transfer(data);
 8001038:	797b      	ldrb	r3, [r7, #5]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff68 	bl	8000f10 <SPI_transfer>
    endSPI();
 8001040:	f7ff ff5a 	bl	8000ef8 <endSPI>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <readRegister>:




uint8_t readRegister(REGISTER reg)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
    startSPI();
 8001056:	f7ff ff43 	bl	8000ee0 <startSPI>
    SPI_transfer(INSTRUCTION_READ);
 800105a:	2003      	movs	r0, #3
 800105c:	f7ff ff58 	bl	8000f10 <SPI_transfer>
    SPI_transfer(reg);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff54 	bl	8000f10 <SPI_transfer>
    uint8_t ret = SPI_transfer(0x00);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff51 	bl	8000f10 <SPI_transfer>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001072:	f7ff ff41 	bl	8000ef8 <endSPI>

    return ret;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <setMode>:
    }
    endSPI();
}

CAN_Error setMode(CANCTRL_REQOP_MODE mode)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]

    unsigned long endTime = HAL_GetTick() + 10;
 800108a:	f000 fec9 	bl	8001e20 <HAL_GetTick>
 800108e:	4603      	mov	r3, r0
 8001090:	330a      	adds	r3, #10
 8001092:	613b      	str	r3, [r7, #16]
    uint8_t modeMatch = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8001098:	e019      	b.n	80010ce <setMode+0x4e>
    	modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 800109a:	21e0      	movs	r1, #224	@ 0xe0
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	461a      	mov	r2, r3
 80010a0:	200f      	movs	r0, #15
 80010a2:	f7ff ffb3 	bl	800100c <modifyRegister>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 80010a6:	200e      	movs	r0, #14
 80010a8:	f7ff ffd0 	bl	800104c <readRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 80010b0:	22e0      	movs	r2, #224	@ 0xe0
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	4013      	ands	r3, r2
 80010b6:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	429a      	cmp	r2, r3
 80010be:	bf0c      	ite	eq
 80010c0:	2301      	moveq	r3, #1
 80010c2:	2300      	movne	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <setMode+0x5c>
    while (HAL_GetTick() < endTime) {
 80010ce:	f000 fea7 	bl	8001e20 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d8df      	bhi.n	800109a <setMode+0x1a>
 80010da:	e000      	b.n	80010de <setMode+0x5e>
            break;
 80010dc:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3

}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <setConfigMode>:

CAN_Error setConfigMode()
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_CONFIG);
 80010f6:	2080      	movs	r0, #128	@ 0x80
 80010f8:	f7ff ffc2 	bl	8001080 <setMode>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}

08001102 <prepareId>:

void prepareId(uint8_t *buffer, uint8_t ext, uint32_t id)
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	460b      	mov	r3, r1
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	72fb      	strb	r3, [r7, #11]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	82fb      	strh	r3, [r7, #22]

    if(ext) {
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d046      	beq.n	80011a8 <prepareId+0xa6>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 800111a:	2303      	movs	r3, #3
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	8afa      	ldrh	r2, [r7, #22]
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8001128:	8afb      	ldrh	r3, [r7, #22]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29a      	uxth	r2, r3
 800112e:	2302      	movs	r3, #2
 8001130:	4619      	mov	r1, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	440b      	add	r3, r1
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	0c1b      	lsrs	r3, r3, #16
 800113e:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	2301      	movs	r3, #1
 8001146:	4619      	mov	r1, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	440b      	add	r3, r1
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8001154:	2301      	movs	r3, #1
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	7819      	ldrb	r1, [r3, #0]
 800115e:	8afb      	ldrh	r3, [r7, #22]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f023 031f 	bic.w	r3, r3, #31
 800116a:	b2da      	uxtb	r2, r3
 800116c:	2301      	movs	r3, #1
 800116e:	4618      	mov	r0, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4403      	add	r3, r0
 8001174:	440a      	add	r2, r1
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 800117a:	2301      	movs	r3, #1
 800117c:	461a      	mov	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4413      	add	r3, r2
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	2108      	movs	r1, #8
 8001186:	2301      	movs	r3, #1
 8001188:	4618      	mov	r0, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4403      	add	r3, r0
 800118e:	430a      	orrs	r2, r1
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b29a      	uxth	r2, r3
 800119a:	2300      	movs	r3, #0
 800119c:	4619      	mov	r1, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	440b      	add	r3, r1
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80011a6:	e01d      	b.n	80011e4 <prepareId+0xe2>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80011a8:	8afb      	ldrh	r3, [r7, #22]
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	2300      	movs	r3, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	440b      	add	r3, r1
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80011ba:	8afb      	ldrh	r3, [r7, #22]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	2301      	movs	r3, #1
 80011c0:	4619      	mov	r1, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	440b      	add	r3, r1
 80011c6:	0152      	lsls	r2, r2, #5
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80011cc:	2303      	movs	r3, #3
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80011d8:	2302      	movs	r3, #2
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <MCP_setFilterMask>:
    endSPI();
    return i;
}

CAN_Error MCP_setFilterMask(MASK mask, uint8_t ext, uint32_t ulData)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	603a      	str	r2, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	460b      	mov	r3, r1
 80011fe:	71bb      	strb	r3, [r7, #6]
	CAN_Error res = setConfigMode();
 8001200:	f7ff ff77 	bl	80010f2 <setConfigMode>
 8001204:	4603      	mov	r3, r0
 8001206:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MCP_setFilterMask+0x22>
        return res;
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	e01c      	b.n	800124c <MCP_setFilterMask+0x5c>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8001212:	79b9      	ldrb	r1, [r7, #6]
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff71 	bl	8001102 <prepareId>

    REGISTER reg;
    switch (mask) {
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <MCP_setFilterMask+0x3c>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d003      	beq.n	8001232 <MCP_setFilterMask+0x42>
 800122a:	e005      	b.n	8001238 <MCP_setFilterMask+0x48>
        case MASK0: reg = MCP_RXM0SIDH; break;
 800122c:	2320      	movs	r3, #32
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e004      	b.n	800123c <MCP_setFilterMask+0x4c>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8001232:	2324      	movs	r3, #36	@ 0x24
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e001      	b.n	800123c <MCP_setFilterMask+0x4c>
        default:
            return ERROR_FAIL;
 8001238:	2301      	movs	r3, #1
 800123a:	e007      	b.n	800124c <MCP_setFilterMask+0x5c>
    }

    setRegisters(reg, tbufdata, 4);
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2204      	movs	r2, #4
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe94 	bl	8000f72 <setRegisters>

    return ERROR_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <MCP_setFilter>:

CAN_Error MCP_setFilter(RXF num, uint8_t ext, uint32_t ulData)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	603a      	str	r2, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	460b      	mov	r3, r1
 8001262:	71bb      	strb	r3, [r7, #6]
    CAN_Error res = setConfigMode();
 8001264:	f7ff ff45 	bl	80010f2 <setConfigMode>
 8001268:	4603      	mov	r3, r0
 800126a:	73bb      	strb	r3, [r7, #14]
    if (res != ERROR_OK) {
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MCP_setFilter+0x22>
        return res;
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	e035      	b.n	80012e2 <MCP_setFilter+0x8e>
    }

    REGISTER reg;

    switch (num) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b05      	cmp	r3, #5
 800127a:	d821      	bhi.n	80012c0 <MCP_setFilter+0x6c>
 800127c:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <MCP_setFilter+0x30>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012a3 	.word	0x080012a3
 800128c:	080012a9 	.word	0x080012a9
 8001290:	080012af 	.word	0x080012af
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012bb 	.word	0x080012bb
        case RXF0: reg = MCP_RXF0SIDH; break;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e010      	b.n	80012c4 <MCP_setFilter+0x70>
        case RXF1: reg = MCP_RXF1SIDH; break;
 80012a2:	2304      	movs	r3, #4
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e00d      	b.n	80012c4 <MCP_setFilter+0x70>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80012a8:	2308      	movs	r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e00a      	b.n	80012c4 <MCP_setFilter+0x70>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80012ae:	2310      	movs	r3, #16
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e007      	b.n	80012c4 <MCP_setFilter+0x70>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80012b4:	2314      	movs	r3, #20
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e004      	b.n	80012c4 <MCP_setFilter+0x70>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80012ba:	2318      	movs	r3, #24
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e001      	b.n	80012c4 <MCP_setFilter+0x70>
        default:
            return ERROR_FAIL;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e00e      	b.n	80012e2 <MCP_setFilter+0x8e>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80012c4:	79b9      	ldrb	r1, [r7, #6]
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff18 	bl	8001102 <prepareId>
    setRegisters(reg, tbufdata, 4);
 80012d2:	f107 0108 	add.w	r1, r7, #8
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2204      	movs	r2, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe49 	bl	8000f72 <setRegisters>

    return ERROR_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop

080012ec <MCP_reset>:
//
//    return ERROR_OK;
//}

CAN_Error MCP_reset(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
    startSPI();
 80012f2:	f7ff fdf5 	bl	8000ee0 <startSPI>
    SPI_transfer(INSTRUCTION_RESET);
 80012f6:	20c0      	movs	r0, #192	@ 0xc0
 80012f8:	f7ff fe0a 	bl	8000f10 <SPI_transfer>
    endSPI();
 80012fc:	f7ff fdfc 	bl	8000ef8 <endSPI>

    HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 fd99 	bl	8001e38 <HAL_Delay>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	220e      	movs	r2, #14
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fd40 	bl	8004d94 <memset>
    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	220e      	movs	r2, #14
 800131a:	4619      	mov	r1, r3
 800131c:	2030      	movs	r0, #48	@ 0x30
 800131e:	f7ff fe28 	bl	8000f72 <setRegisters>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	220e      	movs	r2, #14
 8001328:	4619      	mov	r1, r3
 800132a:	2040      	movs	r0, #64	@ 0x40
 800132c:	f7ff fe21 	bl	8000f72 <setRegisters>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	220e      	movs	r2, #14
 8001336:	4619      	mov	r1, r3
 8001338:	2050      	movs	r0, #80	@ 0x50
 800133a:	f7ff fe1a 	bl	8000f72 <setRegisters>

    setRegister(MCP_RXB0CTRL, 0);
 800133e:	2100      	movs	r1, #0
 8001340:	2060      	movs	r0, #96	@ 0x60
 8001342:	f7ff fdfb 	bl	8000f3c <setRegister>
    setRegister(MCP_RXB1CTRL, 0);
 8001346:	2100      	movs	r1, #0
 8001348:	2070      	movs	r0, #112	@ 0x70
 800134a:	f7ff fdf7 	bl	8000f3c <setRegister>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 800134e:	21a3      	movs	r1, #163	@ 0xa3
 8001350:	202b      	movs	r0, #43	@ 0x2b
 8001352:	f7ff fdf3 	bl	8000f3c <setRegister>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8001356:	2260      	movs	r2, #96	@ 0x60
 8001358:	2304      	movs	r3, #4
 800135a:	4313      	orrs	r3, r2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2203      	movs	r2, #3
 8001360:	4313      	orrs	r3, r2
 8001362:	b2d9      	uxtb	r1, r3
 8001364:	2200      	movs	r2, #0
 8001366:	2304      	movs	r3, #4
 8001368:	4313      	orrs	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2200      	movs	r2, #0
 800136e:	4313      	orrs	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	2060      	movs	r0, #96	@ 0x60
 8001376:	f7ff fe49 	bl	800100c <modifyRegister>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 800137a:	2260      	movs	r2, #96	@ 0x60
 800137c:	2307      	movs	r3, #7
 800137e:	4313      	orrs	r3, r2
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2100      	movs	r1, #0
 8001384:	2201      	movs	r2, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	4619      	mov	r1, r3
 800138c:	2070      	movs	r0, #112	@ 0x70
 800138e:	f7ff fe3d 	bl	800100c <modifyRegister>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8001392:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <MCP_reset+0x138>)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139a:	6018      	str	r0, [r3, #0]
 800139c:	3304      	adds	r3, #4
 800139e:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a4:	e019      	b.n	80013da <MCP_reset+0xee>
        uint8_t ext = (i == 1);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	77bb      	strb	r3, [r7, #30]
        CAN_Error result = MCP_setFilter(filters[i], ext, 0);
 80013b4:	1d3a      	adds	r2, r7, #4
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	7fb9      	ldrb	r1, [r7, #30]
 80013be:	2200      	movs	r2, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff47 	bl	8001254 <MCP_setFilter>
 80013c6:	4603      	mov	r3, r0
 80013c8:	777b      	strb	r3, [r7, #29]
        if (result != ERROR_OK) {
 80013ca:	7f7b      	ldrb	r3, [r7, #29]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MCP_reset+0xe8>
            return result;
 80013d0:	7f7b      	ldrb	r3, [r7, #29]
 80013d2:	e023      	b.n	800141c <MCP_reset+0x130>
    for (int i=0; i<6; i++) {
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	3301      	adds	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	2b05      	cmp	r3, #5
 80013de:	dde2      	ble.n	80013a6 <MCP_reset+0xba>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 80013e0:	2300      	movs	r3, #0
 80013e2:	703b      	strb	r3, [r7, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	707b      	strb	r3, [r7, #1]
    for (int i=0; i<2; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
 80013ec:	e012      	b.n	8001414 <MCP_reset+0x128>
    	CAN_Error result = MCP_setFilterMask(masks[i], 1, 0);
 80013ee:	463a      	mov	r2, r7
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	2101      	movs	r1, #1
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fef8 	bl	80011f0 <MCP_setFilterMask>
 8001400:	4603      	mov	r3, r0
 8001402:	77fb      	strb	r3, [r7, #31]
        if (result != ERROR_OK) {
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MCP_reset+0x122>
            return result;
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	e006      	b.n	800141c <MCP_reset+0x130>
    for (int i=0; i<2; i++) {
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	3301      	adds	r3, #1
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	2b01      	cmp	r3, #1
 8001418:	dde9      	ble.n	80013ee <MCP_reset+0x102>
        }
    }

    return ERROR_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08004e04 	.word	0x08004e04

08001428 <MCP_setNormalMode>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

CAN_Error MCP_setNormalMode()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    return setMode(CANCTRL_REQOP_NORMAL);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe27 	bl	8001080 <setMode>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}

08001438 <MCP_setBitrateClock>:

CAN_Error MCP_setBitrateClock(CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	460a      	mov	r2, r1
 8001442:	71fb      	strb	r3, [r7, #7]
 8001444:	4613      	mov	r3, r2
 8001446:	71bb      	strb	r3, [r7, #6]
	CAN_Error error = setConfigMode();
 8001448:	f7ff fe53 	bl	80010f2 <setConfigMode>
 800144c:	4603      	mov	r3, r0
 800144e:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MCP_setBitrateClock+0x22>
        return error;
 8001456:	7afb      	ldrb	r3, [r7, #11]
 8001458:	e1b3      	b.n	80017c2 <MCP_setBitrateClock+0x38a>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d009      	beq.n	8001478 <MCP_setBitrateClock+0x40>
 8001464:	2b02      	cmp	r3, #2
 8001466:	f300 8194 	bgt.w	8001792 <MCP_setBitrateClock+0x35a>
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8120 	beq.w	80016b0 <MCP_setBitrateClock+0x278>
 8001470:	2b01      	cmp	r3, #1
 8001472:	f000 808f 	beq.w	8001594 <MCP_setBitrateClock+0x15c>
 8001476:	e18c      	b.n	8001792 <MCP_setBitrateClock+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f200 8086 	bhi.w	800158c <MCP_setBitrateClock+0x154>
 8001480:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <MCP_setBitrateClock+0x50>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	080014c9 	.word	0x080014c9
 800148c:	080014d7 	.word	0x080014d7
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014f3 	.word	0x080014f3
 8001498:	08001501 	.word	0x08001501
 800149c:	0800150f 	.word	0x0800150f
 80014a0:	0800151d 	.word	0x0800151d
 80014a4:	0800152b 	.word	0x0800152b
 80014a8:	0800158d 	.word	0x0800158d
 80014ac:	0800158d 	.word	0x0800158d
 80014b0:	08001539 	.word	0x08001539
 80014b4:	08001547 	.word	0x08001547
 80014b8:	08001555 	.word	0x08001555
 80014bc:	08001563 	.word	0x08001563
 80014c0:	08001571 	.word	0x08001571
 80014c4:	0800157f 	.word	0x0800157f
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80014c8:	231f      	movs	r3, #31
 80014ca:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80014cc:	23bf      	movs	r3, #191	@ 0xbf
 80014ce:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 80014d0:	2387      	movs	r3, #135	@ 0x87
 80014d2:	733b      	strb	r3, [r7, #12]
            break;
 80014d4:	e05d      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 80014d6:	230f      	movs	r3, #15
 80014d8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 80014da:	23bf      	movs	r3, #191	@ 0xbf
 80014dc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 80014de:	2387      	movs	r3, #135	@ 0x87
 80014e0:	733b      	strb	r3, [r7, #12]
            break;
 80014e2:	e056      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 80014e4:	2307      	movs	r3, #7
 80014e6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 80014e8:	23bf      	movs	r3, #191	@ 0xbf
 80014ea:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 80014ec:	2387      	movs	r3, #135	@ 0x87
 80014ee:	733b      	strb	r3, [r7, #12]
            break;
 80014f0:	e04f      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 80014f2:	2307      	movs	r3, #7
 80014f4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 80014f6:	23a4      	movs	r3, #164	@ 0xa4
 80014f8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 80014fa:	2384      	movs	r3, #132	@ 0x84
 80014fc:	733b      	strb	r3, [r7, #12]
            break;
 80014fe:	e048      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8001500:	2347      	movs	r3, #71	@ 0x47
 8001502:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8001504:	23e2      	movs	r3, #226	@ 0xe2
 8001506:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8001508:	2385      	movs	r3, #133	@ 0x85
 800150a:	733b      	strb	r3, [r7, #12]
            break;
 800150c:	e041      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 800150e:	2303      	movs	r3, #3
 8001510:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8001512:	23bf      	movs	r3, #191	@ 0xbf
 8001514:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8001516:	2387      	movs	r3, #135	@ 0x87
 8001518:	733b      	strb	r3, [r7, #12]
            break;
 800151a:	e03a      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 800151c:	2303      	movs	r3, #3
 800151e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8001520:	23b4      	movs	r3, #180	@ 0xb4
 8001522:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8001524:	2386      	movs	r3, #134	@ 0x86
 8001526:	733b      	strb	r3, [r7, #12]
            break;
 8001528:	e033      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 800152a:	2301      	movs	r3, #1
 800152c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 800152e:	23bf      	movs	r3, #191	@ 0xbf
 8001530:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8001532:	2387      	movs	r3, #135	@ 0x87
 8001534:	733b      	strb	r3, [r7, #12]
            break;
 8001536:	e02c      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8001538:	2301      	movs	r3, #1
 800153a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 800153c:	23b4      	movs	r3, #180	@ 0xb4
 800153e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8001540:	2386      	movs	r3, #134	@ 0x86
 8001542:	733b      	strb	r3, [r7, #12]
            break;
 8001544:	e025      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8001546:	2301      	movs	r3, #1
 8001548:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 800154a:	23b1      	movs	r3, #177	@ 0xb1
 800154c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 800154e:	2385      	movs	r3, #133	@ 0x85
 8001550:	733b      	strb	r3, [r7, #12]
            break;
 8001552:	e01e      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8001554:	2300      	movs	r3, #0
 8001556:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8001558:	23b4      	movs	r3, #180	@ 0xb4
 800155a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 800155c:	2386      	movs	r3, #134	@ 0x86
 800155e:	733b      	strb	r3, [r7, #12]
            break;
 8001560:	e017      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8001562:	2300      	movs	r3, #0
 8001564:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8001566:	23b1      	movs	r3, #177	@ 0xb1
 8001568:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 800156a:	2385      	movs	r3, #133	@ 0x85
 800156c:	733b      	strb	r3, [r7, #12]
            break;
 800156e:	e010      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8001570:	2300      	movs	r3, #0
 8001572:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8001574:	2390      	movs	r3, #144	@ 0x90
 8001576:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8001578:	2382      	movs	r3, #130	@ 0x82
 800157a:	733b      	strb	r3, [r7, #12]
            break;
 800157c:	e009      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 800157e:	2300      	movs	r3, #0
 8001580:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	733b      	strb	r3, [r7, #12]
            break;
 800158a:	e002      	b.n	8001592 <MCP_setBitrateClock+0x15a>

            default:
            set = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
            break;
 8001590:	bf00      	nop
        }
        break;
 8001592:	e101      	b.n	8001798 <MCP_setBitrateClock+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f200 8086 	bhi.w	80016a8 <MCP_setBitrateClock+0x270>
 800159c:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <MCP_setBitrateClock+0x16c>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015e5 	.word	0x080015e5
 80015a8:	080015f3 	.word	0x080015f3
 80015ac:	08001601 	.word	0x08001601
 80015b0:	080016a9 	.word	0x080016a9
 80015b4:	0800160f 	.word	0x0800160f
 80015b8:	0800161d 	.word	0x0800161d
 80015bc:	0800162b 	.word	0x0800162b
 80015c0:	08001639 	.word	0x08001639
 80015c4:	08001647 	.word	0x08001647
 80015c8:	080016a9 	.word	0x080016a9
 80015cc:	08001655 	.word	0x08001655
 80015d0:	08001663 	.word	0x08001663
 80015d4:	08001671 	.word	0x08001671
 80015d8:	0800167f 	.word	0x0800167f
 80015dc:	0800168d 	.word	0x0800168d
 80015e0:	0800169b 	.word	0x0800169b
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 80015e4:	233f      	movs	r3, #63	@ 0x3f
 80015e6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 80015e8:	23ff      	movs	r3, #255	@ 0xff
 80015ea:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 80015ec:	2387      	movs	r3, #135	@ 0x87
 80015ee:	733b      	strb	r3, [r7, #12]
            break;
 80015f0:	e05d      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 80015f2:	231f      	movs	r3, #31
 80015f4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 80015f6:	23ff      	movs	r3, #255	@ 0xff
 80015f8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 80015fa:	2387      	movs	r3, #135	@ 0x87
 80015fc:	733b      	strb	r3, [r7, #12]
            break;
 80015fe:	e056      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8001600:	230f      	movs	r3, #15
 8001602:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8001604:	23ff      	movs	r3, #255	@ 0xff
 8001606:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8001608:	2387      	movs	r3, #135	@ 0x87
 800160a:	733b      	strb	r3, [r7, #12]
            break;
 800160c:	e04f      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800160e:	234e      	movs	r3, #78	@ 0x4e
 8001610:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8001612:	23f1      	movs	r3, #241	@ 0xf1
 8001614:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8001616:	2385      	movs	r3, #133	@ 0x85
 8001618:	733b      	strb	r3, [r7, #12]
            break;
 800161a:	e048      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 800161c:	2307      	movs	r3, #7
 800161e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8001620:	23ff      	movs	r3, #255	@ 0xff
 8001622:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8001624:	2387      	movs	r3, #135	@ 0x87
 8001626:	733b      	strb	r3, [r7, #12]
            break;
 8001628:	e041      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 800162a:	2307      	movs	r3, #7
 800162c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800162e:	23fa      	movs	r3, #250	@ 0xfa
 8001630:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8001632:	2387      	movs	r3, #135	@ 0x87
 8001634:	733b      	strb	r3, [r7, #12]
            break;
 8001636:	e03a      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8001638:	2303      	movs	r3, #3
 800163a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 800163c:	23ff      	movs	r3, #255	@ 0xff
 800163e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8001640:	2387      	movs	r3, #135	@ 0x87
 8001642:	733b      	strb	r3, [r7, #12]
            break;
 8001644:	e033      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8001646:	2303      	movs	r3, #3
 8001648:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 800164a:	23be      	movs	r3, #190	@ 0xbe
 800164c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 800164e:	2307      	movs	r3, #7
 8001650:	733b      	strb	r3, [r7, #12]
            break;
 8001652:	e02c      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8001654:	2303      	movs	r3, #3
 8001656:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8001658:	23fa      	movs	r3, #250	@ 0xfa
 800165a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 800165c:	2387      	movs	r3, #135	@ 0x87
 800165e:	733b      	strb	r3, [r7, #12]
            break;
 8001660:	e025      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8001662:	2303      	movs	r3, #3
 8001664:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8001666:	23f0      	movs	r3, #240	@ 0xf0
 8001668:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 800166a:	2386      	movs	r3, #134	@ 0x86
 800166c:	733b      	strb	r3, [r7, #12]
            break;
 800166e:	e01e      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8001670:	2301      	movs	r3, #1
 8001672:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8001674:	23fa      	movs	r3, #250	@ 0xfa
 8001676:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8001678:	2387      	movs	r3, #135	@ 0x87
 800167a:	733b      	strb	r3, [r7, #12]
            break;
 800167c:	e017      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 800167e:	2341      	movs	r3, #65	@ 0x41
 8001680:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8001682:	23f1      	movs	r3, #241	@ 0xf1
 8001684:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8001686:	2385      	movs	r3, #133	@ 0x85
 8001688:	733b      	strb	r3, [r7, #12]
            break;
 800168a:	e010      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 800168c:	2300      	movs	r3, #0
 800168e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8001690:	23f0      	movs	r3, #240	@ 0xf0
 8001692:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8001694:	2386      	movs	r3, #134	@ 0x86
 8001696:	733b      	strb	r3, [r7, #12]
            break;
 8001698:	e009      	b.n	80016ae <MCP_setBitrateClock+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 800169a:	2300      	movs	r3, #0
 800169c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 800169e:	23d0      	movs	r3, #208	@ 0xd0
 80016a0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 80016a2:	2382      	movs	r3, #130	@ 0x82
 80016a4:	733b      	strb	r3, [r7, #12]
            break;
 80016a6:	e002      	b.n	80016ae <MCP_setBitrateClock+0x276>

            default:
            set = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
            break;
 80016ac:	bf00      	nop
        }
        break;
 80016ae:	e073      	b.n	8001798 <MCP_setBitrateClock+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	3b04      	subs	r3, #4
 80016b4:	2b0b      	cmp	r3, #11
 80016b6:	d868      	bhi.n	800178a <MCP_setBitrateClock+0x352>
 80016b8:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <MCP_setBitrateClock+0x288>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080016f1 	.word	0x080016f1
 80016c4:	080016ff 	.word	0x080016ff
 80016c8:	0800170d 	.word	0x0800170d
 80016cc:	0800171b 	.word	0x0800171b
 80016d0:	08001729 	.word	0x08001729
 80016d4:	0800178b 	.word	0x0800178b
 80016d8:	08001737 	.word	0x08001737
 80016dc:	08001745 	.word	0x08001745
 80016e0:	08001753 	.word	0x08001753
 80016e4:	08001761 	.word	0x08001761
 80016e8:	0800176f 	.word	0x0800176f
 80016ec:	0800177d 	.word	0x0800177d
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 80016f0:	230b      	movs	r3, #11
 80016f2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 80016f4:	23ff      	movs	r3, #255	@ 0xff
 80016f6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 80016f8:	2387      	movs	r3, #135	@ 0x87
 80016fa:	733b      	strb	r3, [r7, #12]
	    break;
 80016fc:	e048      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 80016fe:	2309      	movs	r3, #9
 8001700:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8001702:	23ff      	movs	r3, #255	@ 0xff
 8001704:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8001706:	2387      	movs	r3, #135	@ 0x87
 8001708:	733b      	strb	r3, [r7, #12]
            break;
 800170a:	e041      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 800170c:	2309      	movs	r3, #9
 800170e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8001710:	23fa      	movs	r3, #250	@ 0xfa
 8001712:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8001714:	2387      	movs	r3, #135	@ 0x87
 8001716:	733b      	strb	r3, [r7, #12]
            break;
 8001718:	e03a      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800171a:	2304      	movs	r3, #4
 800171c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800171e:	23ff      	movs	r3, #255	@ 0xff
 8001720:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8001722:	2387      	movs	r3, #135	@ 0x87
 8001724:	733b      	strb	r3, [r7, #12]
            break;
 8001726:	e033      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8001728:	2304      	movs	r3, #4
 800172a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 800172c:	23fe      	movs	r3, #254	@ 0xfe
 800172e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8001730:	2387      	movs	r3, #135	@ 0x87
 8001732:	733b      	strb	r3, [r7, #12]
	    break;
 8001734:	e02c      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8001736:	2304      	movs	r3, #4
 8001738:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800173a:	23fa      	movs	r3, #250	@ 0xfa
 800173c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800173e:	2387      	movs	r3, #135	@ 0x87
 8001740:	733b      	strb	r3, [r7, #12]
            break;
 8001742:	e025      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8001744:	2303      	movs	r3, #3
 8001746:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8001748:	23fa      	movs	r3, #250	@ 0xfa
 800174a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 800174c:	2387      	movs	r3, #135	@ 0x87
 800174e:	733b      	strb	r3, [r7, #12]
            break;
 8001750:	e01e      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8001752:	2301      	movs	r3, #1
 8001754:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8001756:	23ff      	movs	r3, #255	@ 0xff
 8001758:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 800175a:	2387      	movs	r3, #135	@ 0x87
 800175c:	733b      	strb	r3, [r7, #12]
            break;
 800175e:	e017      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8001760:	2341      	movs	r3, #65	@ 0x41
 8001762:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8001764:	23fb      	movs	r3, #251	@ 0xfb
 8001766:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8001768:	2386      	movs	r3, #134	@ 0x86
 800176a:	733b      	strb	r3, [r7, #12]
            break;
 800176c:	e010      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 800176e:	2300      	movs	r3, #0
 8001770:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8001772:	23fa      	movs	r3, #250	@ 0xfa
 8001774:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8001776:	2387      	movs	r3, #135	@ 0x87
 8001778:	733b      	strb	r3, [r7, #12]
            break;
 800177a:	e009      	b.n	8001790 <MCP_setBitrateClock+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 800177c:	2300      	movs	r3, #0
 800177e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8001780:	23d9      	movs	r3, #217	@ 0xd9
 8001782:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8001784:	2382      	movs	r3, #130	@ 0x82
 8001786:	733b      	strb	r3, [r7, #12]
            break;
 8001788:	e002      	b.n	8001790 <MCP_setBitrateClock+0x358>

            default:
            set = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
            break;
 800178e:	bf00      	nop
        }
        break;
 8001790:	e002      	b.n	8001798 <MCP_setBitrateClock+0x360>

        default:
        set = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
        break;
 8001796:	bf00      	nop
    }

    if (set) {
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <MCP_setBitrateClock+0x388>
        setRegister(MCP_CNF1, cfg1);
 800179e:	7bbb      	ldrb	r3, [r7, #14]
 80017a0:	4619      	mov	r1, r3
 80017a2:	202a      	movs	r0, #42	@ 0x2a
 80017a4:	f7ff fbca 	bl	8000f3c <setRegister>
        setRegister(MCP_CNF2, cfg2);
 80017a8:	7b7b      	ldrb	r3, [r7, #13]
 80017aa:	4619      	mov	r1, r3
 80017ac:	2029      	movs	r0, #41	@ 0x29
 80017ae:	f7ff fbc5 	bl	8000f3c <setRegister>
        setRegister(MCP_CNF3, cfg3);
 80017b2:	7b3b      	ldrb	r3, [r7, #12]
 80017b4:	4619      	mov	r1, r3
 80017b6:	2028      	movs	r0, #40	@ 0x28
 80017b8:	f7ff fbc0 	bl	8000f3c <setRegister>
        return ERROR_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <MCP_setBitrateClock+0x38a>
    }
    else {
        return ERROR_FAIL;
 80017c0:	2301      	movs	r3, #1
    }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop

080017cc <MCP_setBitrate>:

CAN_Error MCP_setBitrate( CAN_SPEED canSpeed)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
    return MCP_setBitrateClock(canSpeed, MCP_16MHZ);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fe2c 	bl	8001438 <MCP_setBitrateClock>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <MCP_RequestToSend>:


void MCP_RequestToSend(uint8_t instruction)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
    startSPI();
 80017f4:	f7ff fb74 	bl	8000ee0 <startSPI>
    SPI_transfer(instruction);
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fb88 	bl	8000f10 <SPI_transfer>
    endSPI();
 8001800:	f7ff fb7a 	bl	8000ef8 <endSPI>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <MCP_sendMessageTo>:

CAN_Error MCP_sendMessageTo(TXBn txbn, struct can_frame *frame)
//TXBm is just 0,1,2 for txbox number
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d901      	bls.n	8001824 <MCP_sendMessageTo+0x18>
        return ERROR_FAILTX;
 8001820:	2304      	movs	r3, #4
 8001822:	e081      	b.n	8001928 <MCP_sendMessageTo+0x11c>
    }

    //Todo, fix these magic numbers, but not with something as awful as the og arduino library
    uint8_t load_addr = (2 * txbn) | 0x40;
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001830:	b25b      	sxtb	r3, r3
 8001832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    uint8_t rts_addr = (1 << txbn) | 0x80;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	b25b      	sxtb	r3, r3
 8001840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001844:	b25b      	sxtb	r3, r3
 8001846:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint8_t data[13];

    uint8_t ext = !!(frame->can_id & CAN_EFF_FLAG);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0fdb      	lsrs	r3, r3, #31
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    uint8_t rtr = !!(frame->can_id & CAN_RTR_FLAG);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f887 3020 	strb.w	r3, [r7, #32]
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001874:	2a00      	cmp	r2, #0
 8001876:	d002      	beq.n	800187e <MCP_sendMessageTo+0x72>
 8001878:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800187c:	e001      	b.n	8001882 <MCP_sendMessageTo+0x76>
 800187e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001882:	4013      	ands	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]

    prepareId(data, ext, id);
 8001886:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fc36 	bl	8001102 <prepareId>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 8001896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <MCP_sendMessageTo+0x9e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	e001      	b.n	80018ae <MCP_sendMessageTo+0xa2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	2204      	movs	r2, #4
 80018b0:	3228      	adds	r2, #40	@ 0x28
 80018b2:	443a      	add	r2, r7
 80018b4:	f802 3c1c 	strb.w	r3, [r2, #-28]

    for(int i = 0; i < frame->can_dlc; i++){
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80018bc:	e00f      	b.n	80018de <MCP_sendMessageTo+0xd2>
    	data[MCP_DATA+i]=frame->data[i];
 80018be:	2305      	movs	r3, #5
 80018c0:	461a      	mov	r2, r3
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	4413      	add	r3, r2
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ca:	440a      	add	r2, r1
 80018cc:	3208      	adds	r2, #8
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	3328      	adds	r3, #40	@ 0x28
 80018d2:	443b      	add	r3, r7
 80018d4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for(int i = 0; i < frame->can_dlc; i++){
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	3301      	adds	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	4293      	cmp	r3, r2
 80018e8:	dbe9      	blt.n	80018be <MCP_sendMessageTo+0xb2>
    }

   // memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);

    loadTx(load_addr, data, 5 + frame->can_dlc);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	3305      	adds	r3, #5
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	f107 010c 	add.w	r1, r7, #12
 80018f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fb61 	bl	8000fc2 <loadTx>
    //setRegisters(load_addr, data, 5 + frame->can_dlc);

    //modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    //modifyRegister(rts_addr, TXB_TXREQ, TXB_TXREQ);
    MCP_RequestToSend(rts_addr);
 8001900:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff70 	bl	80017ea <MCP_RequestToSend>
    //setRegister(rts_addr, TXB_TXREQ);

    uint8_t ctrl = readRegister(rts_addr);
 800190a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fb9c 	bl	800104c <readRegister>
 8001914:	4603      	mov	r3, r0
 8001916:	76fb      	strb	r3, [r7, #27]
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 8001918:	7efb      	ldrb	r3, [r7, #27]
 800191a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MCP_sendMessageTo+0x11a>
        return ERROR_FAILTX;
 8001922:	2304      	movs	r3, #4
 8001924:	e000      	b.n	8001928 <MCP_sendMessageTo+0x11c>
    }
    return ERROR_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3728      	adds	r7, #40	@ 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <MCP_sendMessage>:

CAN_Error MCP_sendMessage(struct can_frame *frame)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	791b      	ldrb	r3, [r3, #4]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d901      	bls.n	8001944 <MCP_sendMessage+0x14>
        return ERROR_FAILTX;
 8001940:	2304      	movs	r3, #4
 8001942:	e020      	b.n	8001986 <MCP_sendMessage+0x56>
    }


    for (uint8_t i=0; i<N_TXBUFFERS; i++) {
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e018      	b.n	800197c <MCP_sendMessage+0x4c>
        uint8_t ctrlval = readRegister((i+3)<<4);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	3303      	adds	r3, #3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	b2db      	uxtb	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fb79 	bl	800104c <readRegister>
 800195a:	4603      	mov	r3, r0
 800195c:	73bb      	strb	r3, [r7, #14]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <MCP_sendMessage+0x46>
            return MCP_sendMessageTo(i, frame);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff4d 	bl	800180c <MCP_sendMessageTo>
 8001972:	4603      	mov	r3, r0
 8001974:	e007      	b.n	8001986 <MCP_sendMessage+0x56>
    for (uint8_t i=0; i<N_TXBUFFERS; i++) {
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3301      	adds	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	2203      	movs	r2, #3
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	4293      	cmp	r3, r2
 8001982:	d3e2      	bcc.n	800194a <MCP_sendMessage+0x1a>
        }
    }

    return ERROR_ALLTXBUSY;
 8001984:	2302      	movs	r3, #2
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a0f      	ldr	r2, [pc, #60]	@ (80019dc <HAL_MspInit+0x4c>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <HAL_MspInit+0x4c>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ce:	2007      	movs	r0, #7
 80019d0:	f000 ff18 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3b      	ldr	r2, [pc, #236]	@ (8001aec <HAL_ADC_MspInit+0x10c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d170      	bne.n	8001ae4 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b3a      	ldr	r3, [pc, #232]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a39      	ldr	r2, [pc, #228]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b37      	ldr	r3, [pc, #220]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a32      	ldr	r2, [pc, #200]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a2b      	ldr	r2, [pc, #172]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_ADC_MspInit+0x110>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001a56:	2312      	movs	r3, #18
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4822      	ldr	r0, [pc, #136]	@ (8001af4 <HAL_ADC_MspInit+0x114>)
 8001a6a:	f001 fa7d 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a72:	2303      	movs	r3, #3
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <HAL_ADC_MspInit+0x118>)
 8001a82:	f001 fa71 	bl	8002f68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001a88:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <HAL_ADC_MspInit+0x120>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a98:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001aa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001aa8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001aac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001ab0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ab4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001aca:	f000 fedd 	bl	8002888 <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001ad4:	f7ff f9fe 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001adc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ade:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <HAL_ADC_MspInit+0x11c>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	@ 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	20000078 	.word	0x20000078
 8001b00:	40026410 	.word	0x40026410

08001b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	@ (8001b88 <HAL_SPI_MspInit+0x84>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12c      	bne.n	8001b80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a17      	ldr	r2, [pc, #92]	@ (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <HAL_SPI_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b70:	2306      	movs	r3, #6
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <HAL_SPI_MspInit+0x8c>)
 8001b7c:	f001 f9f4 	bl	8002f68 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	@ 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40003c00 	.word	0x40003c00
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020800 	.word	0x40020800

08001b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x40>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x40>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x40>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_UART_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_UART_MspInit+0x88>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_UART_MspInit+0x88>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_UART_MspInit+0x88>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_UART_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a10      	ldr	r2, [pc, #64]	@ (8001c60 <HAL_UART_MspInit+0x88>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_UART_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c32:	230c      	movs	r3, #12
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	2307      	movs	r3, #7
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <HAL_UART_MspInit+0x8c>)
 8001c4e:	f001 f98b 	bl	8002f68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	@ 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <NMI_Handler+0x4>

08001c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <MemManage_Handler+0x4>

08001c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbe:	f000 f89b 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001cce:	f000 fee1 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000078 	.word	0x20000078

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d04:	f7ff ffea 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	@ (8001d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f003 f839 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7fe fe6b 	bl	8000a0c <main>
  bx  lr    
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d44:	08004e3c 	.word	0x08004e3c
  ldr r2, =_sbss
 8001d48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d4c:	200001fc 	.word	0x200001fc

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 fd41 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fe02 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fd59 	bl	800286e <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd4:	f000 fd21 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000010 	.word	0x20000010
 8001df4:	2000000c 	.word	0x2000000c

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000010 	.word	0x20000010
 8001e1c:	200001f8 	.word	0x200001f8

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200001f8 	.word	0x200001f8

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000010 	.word	0x20000010

08001e80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e033      	b.n	8001efe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fd9e 	bl	80019e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ec6:	f023 0302 	bic.w	r3, r3, #2
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fa48 	bl	8002368 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f023 0303 	bic.w	r3, r3, #3
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eee:	e001      	b.n	8001ef4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Start_DMA+0x1e>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e0ce      	b.n	80020c4 <HAL_ADC_Start_DMA+0x1bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d018      	beq.n	8001f6e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4c:	4b5f      	ldr	r3, [pc, #380]	@ (80020cc <HAL_ADC_Start_DMA+0x1c4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a5f      	ldr	r2, [pc, #380]	@ (80020d0 <HAL_ADC_Start_DMA+0x1c8>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9a      	lsrs	r2, r3, #18
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f7c:	d107      	bne.n	8001f8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f8c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	f040 8086 	bne.w	80020aa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fdc:	d106      	bne.n	8001fec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f023 0206 	bic.w	r2, r3, #6
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fea:	e002      	b.n	8001ff2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffa:	4b36      	ldr	r3, [pc, #216]	@ (80020d4 <HAL_ADC_Start_DMA+0x1cc>)
 8001ffc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	4a35      	ldr	r2, [pc, #212]	@ (80020d8 <HAL_ADC_Start_DMA+0x1d0>)
 8002004:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200a:	4a34      	ldr	r2, [pc, #208]	@ (80020dc <HAL_ADC_Start_DMA+0x1d4>)
 800200c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002012:	4a33      	ldr	r2, [pc, #204]	@ (80020e0 <HAL_ADC_Start_DMA+0x1d8>)
 8002014:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800201e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800202e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800203e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	334c      	adds	r3, #76	@ 0x4c
 800204a:	4619      	mov	r1, r3
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f000 fcc8 	bl	80029e4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10f      	bne.n	8002080 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d129      	bne.n	80020c2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	e020      	b.n	80020c2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_ADC_Start_DMA+0x1dc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d11b      	bne.n	80020c2 <HAL_ADC_Start_DMA+0x1ba>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d114      	bne.n	80020c2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e00b      	b.n	80020c2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f043 0210 	orr.w	r2, r3, #16
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000008 	.word	0x20000008
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	40012300 	.word	0x40012300
 80020d8:	08002561 	.word	0x08002561
 80020dc:	0800261b 	.word	0x0800261b
 80020e0:	08002637 	.word	0x08002637
 80020e4:	40012000 	.word	0x40012000

080020e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1c>
 800213c:	2302      	movs	r3, #2
 800213e:	e105      	b.n	800234c <HAL_ADC_ConfigChannel+0x228>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d925      	bls.n	800219c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	3b1e      	subs	r3, #30
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68d9      	ldr	r1, [r3, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	4603      	mov	r3, r0
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4403      	add	r3, r0
 800218e:	3b1e      	subs	r3, #30
 8002190:	409a      	lsls	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	e022      	b.n	80021e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6919      	ldr	r1, [r3, #16]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	2207      	movs	r2, #7
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4403      	add	r3, r0
 80021d8:	409a      	lsls	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d824      	bhi.n	8002234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	3b05      	subs	r3, #5
 80021fc:	221f      	movs	r2, #31
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b05      	subs	r3, #5
 8002226:	fa00 f203 	lsl.w	r2, r0, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	635a      	str	r2, [r3, #52]	@ 0x34
 8002232:	e04c      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b0c      	cmp	r3, #12
 800223a:	d824      	bhi.n	8002286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b23      	subs	r3, #35	@ 0x23
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b23      	subs	r3, #35	@ 0x23
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
 8002284:	e023      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b41      	subs	r3, #65	@ 0x41
 8002298:	221f      	movs	r2, #31
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	400a      	ands	r2, r1
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	3b41      	subs	r3, #65	@ 0x41
 80022c2:	fa00 f203 	lsl.w	r2, r0, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ce:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <HAL_ADC_ConfigChannel+0x234>)
 80022d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a21      	ldr	r2, [pc, #132]	@ (800235c <HAL_ADC_ConfigChannel+0x238>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1cc>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	@ (800235c <HAL_ADC_ConfigChannel+0x238>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d123      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x21e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d003      	beq.n	800230a <HAL_ADC_ConfigChannel+0x1e6>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b11      	cmp	r3, #17
 8002308:	d11b      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d111      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_ADC_ConfigChannel+0x23c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_ADC_ConfigChannel+0x240>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	0c9a      	lsrs	r2, r3, #18
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002334:	e002      	b.n	800233c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3b01      	subs	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40012300 	.word	0x40012300
 800235c:	40012000 	.word	0x40012000
 8002360:	20000008 	.word	0x20000008
 8002364:	431bde83 	.word	0x431bde83

08002368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002370:	4b79      	ldr	r3, [pc, #484]	@ (8002558 <ADC_Init+0x1f0>)
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800239c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	4a58      	ldr	r2, [pc, #352]	@ (800255c <ADC_Init+0x1f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d022      	beq.n	8002446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800240e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e00f      	b.n	8002466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002464:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0202 	bic.w	r2, r2, #2
 8002474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6899      	ldr	r1, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
 8002480:	005a      	lsls	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	3b01      	subs	r3, #1
 80024c0:	035a      	lsls	r2, r3, #13
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e007      	b.n	80024dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	051a      	lsls	r2, r3, #20
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800251e:	025a      	lsls	r2, r3, #9
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	029a      	lsls	r2, r3, #10
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40012300 	.word	0x40012300
 800255c:	0f000001 	.word	0x0f000001

08002560 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002576:	2b00      	cmp	r3, #0
 8002578:	d13c      	bne.n	80025f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d12b      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d127      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d119      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0220 	bic.w	r2, r2, #32
 80025c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fd7b 	bl	80020e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025f2:	e00e      	b.n	8002612 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fd85 	bl	8002110 <HAL_ADC_ErrorCallback>
}
 8002606:	e004      	b.n	8002612 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002626:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff fd67 	bl	80020fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2240      	movs	r2, #64	@ 0x40
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fd5a 	bl	8002110 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	@ (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	@ (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	@ (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	@ 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fac4 	bl	8001e20 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e099      	b.n	80029d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c4:	e00f      	b.n	80028e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c6:	f7ff faab 	bl	8001e20 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d908      	bls.n	80028e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e078      	b.n	80029d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e8      	bne.n	80028c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <HAL_DMA_Init+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	4313      	orrs	r3, r2
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 0307 	bic.w	r3, r3, #7
 8002966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	2b04      	cmp	r3, #4
 8002978:	d117      	bne.n	80029aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fa6f 	bl	8002e70 <DMA_CheckFifoParam>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029a6:	2301      	movs	r3, #1
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa26 	bl	8002e04 <DMA_CalcBaseAndBitshift>
 80029b8:	4603      	mov	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	223f      	movs	r2, #63	@ 0x3f
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	f010803f 	.word	0xf010803f

080029e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Start_IT+0x26>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e040      	b.n	8002a8c <HAL_DMA_Start_IT+0xa8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d12f      	bne.n	8002a7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f9b8 	bl	8002da8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	223f      	movs	r2, #63	@ 0x3f
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0216 	orr.w	r2, r2, #22
 8002a52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0208 	orr.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8002cdc <HAL_DMA_IRQHandler+0x248>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a8e      	ldr	r2, [pc, #568]	@ (8002ce0 <HAL_DMA_IRQHandler+0x24c>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	2208      	movs	r2, #8
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01a      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	2208      	movs	r2, #8
 8002aee:	409a      	lsls	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d012      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	2201      	movs	r2, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	2204      	movs	r2, #4
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	2210      	movs	r2, #16
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d043      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d03c      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	2210      	movs	r2, #16
 8002b90:	409a      	lsls	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d108      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d024      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
 8002bc2:	e01f      	b.n	8002c04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
 8002bd4:	e016      	b.n	8002c04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0208 	bic.w	r2, r2, #8
 8002bf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	2220      	movs	r2, #32
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 808f 	beq.w	8002d34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8087 	beq.w	8002d34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d136      	bne.n	8002cac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0216 	bic.w	r2, r2, #22
 8002c4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x1da>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0208 	bic.w	r2, r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	223f      	movs	r2, #63	@ 0x3f
 8002c84:	409a      	lsls	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d07e      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
        }
        return;
 8002caa:	e079      	b.n	8002da0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d031      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
 8002cd8:	e02c      	b.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
 8002cda:	bf00      	nop
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
 8002cf4:	e01e      	b.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10f      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0210 	bic.w	r2, r2, #16
 8002d12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d032      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3301      	adds	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d307      	bcc.n	8002d7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f2      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x2cc>
 8002d7a:	e000      	b.n	8002d7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	e000      	b.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002da0:	bf00      	nop
    }
  }
}
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	d108      	bne.n	8002de8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002de6:	e007      	b.n	8002df8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3b10      	subs	r3, #16
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <DMA_CalcBaseAndBitshift+0x64>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <DMA_CalcBaseAndBitshift+0x68>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d909      	bls.n	8002e46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e44:	e007      	b.n	8002e56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	aaaaaaab 	.word	0xaaaaaaab
 8002e6c:	08004e24 	.word	0x08004e24

08002e70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11f      	bne.n	8002eca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d856      	bhi.n	8002f3e <DMA_CheckFifoParam+0xce>
 8002e90:	a201      	add	r2, pc, #4	@ (adr r2, 8002e98 <DMA_CheckFifoParam+0x28>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002ebb 	.word	0x08002ebb
 8002ea0:	08002ea9 	.word	0x08002ea9
 8002ea4:	08002f3f 	.word	0x08002f3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d046      	beq.n	8002f42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e043      	b.n	8002f42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ec2:	d140      	bne.n	8002f46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e03d      	b.n	8002f46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed2:	d121      	bne.n	8002f18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d837      	bhi.n	8002f4a <DMA_CheckFifoParam+0xda>
 8002eda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <DMA_CheckFifoParam+0x70>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002ef7 	.word	0x08002ef7
 8002ee8:	08002ef1 	.word	0x08002ef1
 8002eec:	08002f09 	.word	0x08002f09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	e030      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d025      	beq.n	8002f4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f06:	e022      	b.n	8002f4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f10:	d11f      	bne.n	8002f52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f16:	e01c      	b.n	8002f52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d903      	bls.n	8002f26 <DMA_CheckFifoParam+0xb6>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d003      	beq.n	8002f2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f24:	e018      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2a:	e015      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e00b      	b.n	8002f56 <DMA_CheckFifoParam+0xe6>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e00a      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e008      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e006      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e004      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
    }
  } 
  
  return status; 
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e159      	b.n	8003238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 8148 	bne.w	8003232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d005      	beq.n	8002fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d130      	bne.n	800301c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 0201 	and.w	r2, r3, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b03      	cmp	r3, #3
 8003026:	d017      	beq.n	8003058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d123      	bne.n	80030ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3208      	adds	r2, #8
 800306c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	220f      	movs	r2, #15
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	08da      	lsrs	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3208      	adds	r2, #8
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a2 	beq.w	8003232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b57      	ldr	r3, [pc, #348]	@ (8003250 <HAL_GPIO_Init+0x2e8>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	4a56      	ldr	r2, [pc, #344]	@ (8003250 <HAL_GPIO_Init+0x2e8>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fe:	4b54      	ldr	r3, [pc, #336]	@ (8003250 <HAL_GPIO_Init+0x2e8>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310a:	4a52      	ldr	r2, [pc, #328]	@ (8003254 <HAL_GPIO_Init+0x2ec>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a49      	ldr	r2, [pc, #292]	@ (8003258 <HAL_GPIO_Init+0x2f0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_GPIO_Init+0x202>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a48      	ldr	r2, [pc, #288]	@ (800325c <HAL_GPIO_Init+0x2f4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0x1fe>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a47      	ldr	r2, [pc, #284]	@ (8003260 <HAL_GPIO_Init+0x2f8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x1fa>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a46      	ldr	r2, [pc, #280]	@ (8003264 <HAL_GPIO_Init+0x2fc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x1f6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a45      	ldr	r2, [pc, #276]	@ (8003268 <HAL_GPIO_Init+0x300>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x1f2>
 8003156:	2304      	movs	r3, #4
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x204>
 800315a:	2307      	movs	r3, #7
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x204>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x204>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x204>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x204>
 800316a:	2300      	movs	r3, #0
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317c:	4935      	ldr	r1, [pc, #212]	@ (8003254 <HAL_GPIO_Init+0x2ec>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318a:	4b38      	ldr	r3, [pc, #224]	@ (800326c <HAL_GPIO_Init+0x304>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ae:	4a2f      	ldr	r2, [pc, #188]	@ (800326c <HAL_GPIO_Init+0x304>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b4:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <HAL_GPIO_Init+0x304>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d8:	4a24      	ldr	r2, [pc, #144]	@ (800326c <HAL_GPIO_Init+0x304>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031de:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_GPIO_Init+0x304>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003202:	4a1a      	ldr	r2, [pc, #104]	@ (800326c <HAL_GPIO_Init+0x304>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003208:	4b18      	ldr	r3, [pc, #96]	@ (800326c <HAL_GPIO_Init+0x304>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800322c:	4a0f      	ldr	r2, [pc, #60]	@ (800326c <HAL_GPIO_Init+0x304>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f67f aea2 	bls.w	8002f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3724      	adds	r7, #36	@ 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	40013800 	.word	0x40013800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40013c00 	.word	0x40013c00

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e267      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d075      	beq.n	80033ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c2:	4b88      	ldr	r3, [pc, #544]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d00c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d112      	bne.n	8003300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032da:	4b82      	ldr	r3, [pc, #520]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e6:	d10b      	bne.n	8003300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d05b      	beq.n	80033ac <HAL_RCC_OscConfig+0x108>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d157      	bne.n	80033ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e242      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003308:	d106      	bne.n	8003318 <HAL_RCC_OscConfig+0x74>
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a75      	ldr	r2, [pc, #468]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e01d      	b.n	8003354 <HAL_RCC_OscConfig+0xb0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003320:	d10c      	bne.n	800333c <HAL_RCC_OscConfig+0x98>
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6f      	ldr	r2, [pc, #444]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4b6d      	ldr	r3, [pc, #436]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6c      	ldr	r2, [pc, #432]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0xb0>
 800333c:	4b69      	ldr	r3, [pc, #420]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a68      	ldr	r2, [pc, #416]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	4b66      	ldr	r3, [pc, #408]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a65      	ldr	r2, [pc, #404]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 800334e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7fe fd60 	bl	8001e20 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003364:	f7fe fd5c 	bl	8001e20 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	@ 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e207      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	4b5b      	ldr	r3, [pc, #364]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0xc0>
 8003382:	e014      	b.n	80033ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fd4c 	bl	8001e20 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fd48 	bl	8001e20 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	@ 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e1f3      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	4b51      	ldr	r3, [pc, #324]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0xe8>
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ba:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d11c      	bne.n	800340c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033d2:	4b44      	ldr	r3, [pc, #272]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d116      	bne.n	800340c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	4b41      	ldr	r3, [pc, #260]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x152>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e1c7      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4937      	ldr	r1, [pc, #220]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	e03a      	b.n	8003482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003414:	4b34      	ldr	r3, [pc, #208]	@ (80034e8 <HAL_RCC_OscConfig+0x244>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fe fd01 	bl	8001e20 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003422:	f7fe fcfd 	bl	8001e20 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e1a8      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003440:	4b28      	ldr	r3, [pc, #160]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4925      	ldr	r1, [pc, #148]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
 8003454:	e015      	b.n	8003482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003456:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_RCC_OscConfig+0x244>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fce0 	bl	8001e20 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe fcdc 	bl	8001e20 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e187      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d036      	beq.n	80034fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <HAL_RCC_OscConfig+0x248>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe fcc0 	bl	8001e20 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a4:	f7fe fcbc 	bl	8001e20 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e167      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b6:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x200>
 80034c2:	e01b      	b.n	80034fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_OscConfig+0x248>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fca9 	bl	8001e20 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d0:	e00e      	b.n	80034f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d2:	f7fe fca5 	bl	8001e20 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d907      	bls.n	80034f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e150      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
 80034e4:	40023800 	.word	0x40023800
 80034e8:	42470000 	.word	0x42470000
 80034ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80034f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ea      	bne.n	80034d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8097 	beq.w	8003638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350e:	4b81      	ldr	r3, [pc, #516]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10f      	bne.n	800353a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	4b7d      	ldr	r3, [pc, #500]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	4a7c      	ldr	r2, [pc, #496]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003528:	6413      	str	r3, [r2, #64]	@ 0x40
 800352a:	4b7a      	ldr	r3, [pc, #488]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b77      	ldr	r3, [pc, #476]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b74      	ldr	r3, [pc, #464]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a73      	ldr	r2, [pc, #460]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe fc65 	bl	8001e20 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe fc61 	bl	8001e20 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e10c      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_RCC_OscConfig+0x474>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x2ea>
 8003580:	4b64      	ldr	r3, [pc, #400]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	4a63      	ldr	r2, [pc, #396]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	@ 0x70
 800358c:	e01c      	b.n	80035c8 <HAL_RCC_OscConfig+0x324>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b05      	cmp	r3, #5
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x30c>
 8003596:	4b5f      	ldr	r3, [pc, #380]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359a:	4a5e      	ldr	r2, [pc, #376]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800359c:	f043 0304 	orr.w	r3, r3, #4
 80035a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0x324>
 80035b0:	4b58      	ldr	r3, [pc, #352]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b4:	4a57      	ldr	r2, [pc, #348]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80035bc:	4b55      	ldr	r3, [pc, #340]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	4a54      	ldr	r2, [pc, #336]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035c2:	f023 0304 	bic.w	r3, r3, #4
 80035c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fe fc26 	bl	8001e20 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fe fc22 	bl	8001e20 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0cb      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ee:	4b49      	ldr	r3, [pc, #292]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0ee      	beq.n	80035d8 <HAL_RCC_OscConfig+0x334>
 80035fa:	e014      	b.n	8003626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe fc10 	bl	8001e20 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe fc0c 	bl	8001e20 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0b5      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361a:	4b3e      	ldr	r3, [pc, #248]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ee      	bne.n	8003604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	4a38      	ldr	r2, [pc, #224]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a1 	beq.w	8003784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003642:	4b34      	ldr	r3, [pc, #208]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b08      	cmp	r3, #8
 800364c:	d05c      	beq.n	8003708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d141      	bne.n	80036da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCC_OscConfig+0x478>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fbe0 	bl	8001e20 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fbdc 	bl	8001e20 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e087      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	4b27      	ldr	r3, [pc, #156]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	491b      	ldr	r1, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x478>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe fbb5 	bl	8001e20 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fe fbb1 	bl	8001e20 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e05c      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x416>
 80036d8:	e054      	b.n	8003784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <HAL_RCC_OscConfig+0x478>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe fb9e 	bl	8001e20 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fb9a 	bl	8001e20 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e045      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <HAL_RCC_OscConfig+0x470>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x444>
 8003706:	e03d      	b.n	8003784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e038      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
 8003714:	40023800 	.word	0x40023800
 8003718:	40007000 	.word	0x40007000
 800371c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_RCC_OscConfig+0x4ec>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d028      	beq.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d121      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d11a      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cc      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b68      	ldr	r3, [pc, #416]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d90c      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b65      	ldr	r3, [pc, #404]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800380a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d044      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d003      	beq.n	8003852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384e:	2b03      	cmp	r3, #3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b3f      	ldr	r3, [pc, #252]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e067      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4934      	ldr	r1, [pc, #208]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fe facc 	bl	8001e20 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fac8 	bl	8001e20 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e04f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d20c      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f821 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fa2c 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	08004e0c 	.word	0x08004e0c
 8003958:	20000008 	.word	0x20000008
 800395c:	2000000c 	.word	0x2000000c

08003960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b094      	sub	sp, #80	@ 0x50
 8003966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	647b      	str	r3, [r7, #68]	@ 0x44
 800396c:	2300      	movs	r3, #0
 800396e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003970:	2300      	movs	r3, #0
 8003972:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003978:	4b79      	ldr	r3, [pc, #484]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d00d      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003984:	2b08      	cmp	r3, #8
 8003986:	f200 80e1 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x34>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d003      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x3a>
 8003992:	e0db      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003994:	4b73      	ldr	r3, [pc, #460]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003998:	e0db      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399a:	4b73      	ldr	r3, [pc, #460]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800399c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800399e:	e0d8      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d063      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	2200      	movs	r2, #0
 80039be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ca:	2300      	movs	r3, #0
 80039cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039d2:	4622      	mov	r2, r4
 80039d4:	462b      	mov	r3, r5
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	0159      	lsls	r1, r3, #5
 80039e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e4:	0150      	lsls	r0, r2, #5
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4621      	mov	r1, r4
 80039ec:	1a51      	subs	r1, r2, r1
 80039ee:	6139      	str	r1, [r7, #16]
 80039f0:	4629      	mov	r1, r5
 80039f2:	eb63 0301 	sbc.w	r3, r3, r1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a04:	4659      	mov	r1, fp
 8003a06:	018b      	lsls	r3, r1, #6
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a0e:	4651      	mov	r1, sl
 8003a10:	018a      	lsls	r2, r1, #6
 8003a12:	4651      	mov	r1, sl
 8003a14:	ebb2 0801 	subs.w	r8, r2, r1
 8003a18:	4659      	mov	r1, fp
 8003a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a32:	4690      	mov	r8, r2
 8003a34:	4699      	mov	r9, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	eb18 0303 	adds.w	r3, r8, r3
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	462b      	mov	r3, r5
 8003a40:	eb49 0303 	adc.w	r3, r9, r3
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a52:	4629      	mov	r1, r5
 8003a54:	024b      	lsls	r3, r1, #9
 8003a56:	4621      	mov	r1, r4
 8003a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	024a      	lsls	r2, r1, #9
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a66:	2200      	movs	r2, #0
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a70:	f7fc fbb0 	bl	80001d4 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7c:	e058      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7e:	4b38      	ldr	r3, [pc, #224]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	2200      	movs	r2, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	4611      	mov	r1, r2
 8003a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	0159      	lsls	r1, r3, #5
 8003aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aaa:	0150      	lsls	r0, r2, #5
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	00eb      	lsls	r3, r5, #3
 8003ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae6:	00e2      	lsls	r2, r4, #3
 8003ae8:	4614      	mov	r4, r2
 8003aea:	461d      	mov	r5, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	18e3      	adds	r3, r4, r3
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	464b      	mov	r3, r9
 8003af4:	eb45 0303 	adc.w	r3, r5, r3
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b06:	4629      	mov	r1, r5
 8003b08:	028b      	lsls	r3, r1, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b10:	4621      	mov	r1, r4
 8003b12:	028a      	lsls	r2, r1, #10
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	61fa      	str	r2, [r7, #28]
 8003b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b24:	f7fc fb56 	bl	80001d4 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3750      	adds	r7, #80	@ 0x50
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	007a1200 	.word	0x007a1200

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0a9b      	lsrs	r3, r3, #10
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08004e1c 	.word	0x08004e1c

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff ffdc 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0b5b      	lsrs	r3, r3, #13
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08004e1c 	.word	0x08004e1c

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07b      	b.n	8003cde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf6:	d009      	beq.n	8003c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd ff6c 	bl	8001b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0104 	and.w	r1, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f003 0210 	and.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08c      	sub	sp, #48	@ 0x30
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x26>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e198      	b.n	800403e <HAL_SPI_TransmitReceive+0x358>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d14:	f7fe f884 	bl	8001e20 <HAL_GetTick>
 8003d18:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d00f      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x70>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3c:	d107      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x68>
 8003d46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d54:	e16d      	b.n	8004032 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x82>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x82>
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d6e:	e160      	b.n	8004032 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d003      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	887a      	ldrh	r2, [r7, #2]
 8003d9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	887a      	ldrh	r2, [r7, #2]
 8003da6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d007      	beq.n	8003dd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de0:	d17c      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x10a>
 8003dea:	8b7b      	ldrh	r3, [r7, #26]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d16a      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e14:	e057      	b.n	8003ec6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d11b      	bne.n	8003e5c <HAL_SPI_TransmitReceive+0x176>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d016      	beq.n	8003e5c <HAL_SPI_TransmitReceive+0x176>
 8003e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d113      	bne.n	8003e5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d119      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x1b8>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e9e:	f7fd ffbf 	bl	8001e20 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d80b      	bhi.n	8003ec6 <HAL_SPI_TransmitReceive+0x1e0>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb4:	d007      	beq.n	8003ec6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003ec4:	e0b5      	b.n	8004032 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1a2      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x130>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d19d      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x130>
 8003eda:	e080      	b.n	8003fde <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x204>
 8003ee4:	8b7b      	ldrh	r3, [r7, #26]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d16f      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f10:	e05b      	b.n	8003fca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d11c      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x274>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d017      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0x274>
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d114      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d119      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x2b6>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d014      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f9c:	f7fd ff40 	bl	8001e20 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d803      	bhi.n	8003fb4 <HAL_SPI_TransmitReceive+0x2ce>
 8003fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x2d4>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003fc8:	e033      	b.n	8004032 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d19e      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x22c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d199      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f8b8 	bl	8004158 <SPI_EndRxTxTransaction>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003ffa:	e01a      	b.n	8004032 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004028:	e003      	b.n	8004032 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800403a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800403e:	4618      	mov	r0, r3
 8004040:	3730      	adds	r7, #48	@ 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004058:	f7fd fee2 	bl	8001e20 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	4413      	add	r3, r2
 8004066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004068:	f7fd feda 	bl	8001e20 <HAL_GetTick>
 800406c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800406e:	4b39      	ldr	r3, [pc, #228]	@ (8004154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	015b      	lsls	r3, r3, #5
 8004074:	0d1b      	lsrs	r3, r3, #20
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	e054      	b.n	800412a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004086:	d050      	beq.n	800412a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004088:	f7fd feca 	bl	8001e20 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	429a      	cmp	r2, r3
 8004096:	d902      	bls.n	800409e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d13d      	bne.n	800411a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b6:	d111      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c0:	d004      	beq.n	80040cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ca:	d107      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e4:	d10f      	bne.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e017      	b.n	800414a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3b01      	subs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	429a      	cmp	r2, r3
 8004146:	d19b      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000008 	.word	0x20000008

08004158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2201      	movs	r2, #1
 800416c:	2102      	movs	r1, #2
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff6a 	bl	8004048 <SPI_WaitFlagStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e032      	b.n	80041f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <SPI_EndRxTxTransaction+0xa0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1b      	ldr	r2, [pc, #108]	@ (80041fc <SPI_EndRxTxTransaction+0xa4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0d5b      	lsrs	r3, r3, #21
 8004196:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a8:	d112      	bne.n	80041d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	@ 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff ff47 	bl	8004048 <SPI_WaitFlagStateUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e00f      	b.n	80041f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	3b01      	subs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e6:	2b80      	cmp	r3, #128	@ 0x80
 80041e8:	d0f2      	beq.n	80041d0 <SPI_EndRxTxTransaction+0x78>
 80041ea:	e000      	b.n	80041ee <SPI_EndRxTxTransaction+0x96>
        break;
 80041ec:	bf00      	nop
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000008 	.word	0x20000008
 80041fc:	165e9f81 	.word	0x165e9f81

08004200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e041      	b.n	8004296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fd fcb4 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 f950 	bl	80044e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d001      	beq.n	80042b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e03c      	b.n	8004332 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <HAL_TIM_Base_Start+0xa0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d018      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d2:	d013      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004344 <HAL_TIM_Base_Start+0xa4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <HAL_TIM_Base_Start+0xa8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a17      	ldr	r2, [pc, #92]	@ (800434c <HAL_TIM_Base_Start+0xac>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_TIM_Base_Start+0x5c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <HAL_TIM_Base_Start+0xb0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d111      	bne.n	8004320 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d010      	beq.n	8004330 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431e:	e007      	b.n	8004330 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000

08004354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x1c>
 800436c:	2302      	movs	r3, #2
 800436e:	e0b4      	b.n	80044da <HAL_TIM_ConfigClockSource+0x186>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800438e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a8:	d03e      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xd4>
 80043aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ae:	f200 8087 	bhi.w	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b6:	f000 8086 	beq.w	80044c6 <HAL_TIM_ConfigClockSource+0x172>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d87f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b70      	cmp	r3, #112	@ 0x70
 80043c2:	d01a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0xa6>
 80043c4:	2b70      	cmp	r3, #112	@ 0x70
 80043c6:	d87b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b60      	cmp	r3, #96	@ 0x60
 80043ca:	d050      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x11a>
 80043cc:	2b60      	cmp	r3, #96	@ 0x60
 80043ce:	d877      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b50      	cmp	r3, #80	@ 0x50
 80043d2:	d03c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xfa>
 80043d4:	2b50      	cmp	r3, #80	@ 0x50
 80043d6:	d873      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d8:	2b40      	cmp	r3, #64	@ 0x40
 80043da:	d058      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x13a>
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d86f      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b30      	cmp	r3, #48	@ 0x30
 80043e2:	d064      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043e4:	2b30      	cmp	r3, #48	@ 0x30
 80043e6:	d86b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d060      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d867      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05c      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d05a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x15a>
 80043f8:	e062      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800440a:	f000 f971 	bl	80046f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800441c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	609a      	str	r2, [r3, #8]
      break;
 8004426:	e04f      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	f000 f95a 	bl	80046f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800444a:	609a      	str	r2, [r3, #8]
      break;
 800444c:	e03c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f8ce 	bl	80045fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2150      	movs	r1, #80	@ 0x50
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f927 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 800446c:	e02c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f8ed 	bl	800465a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2160      	movs	r1, #96	@ 0x60
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f917 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 800448c:	e01c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	461a      	mov	r2, r3
 800449c:	f000 f8ae 	bl	80045fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2140      	movs	r1, #64	@ 0x40
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f907 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044ac:	e00c      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 f8fe 	bl	80046ba <TIM_ITRx_SetConfig>
      break;
 80044be:	e003      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3a      	ldr	r2, [pc, #232]	@ (80045e0 <TIM_Base_SetConfig+0xfc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a37      	ldr	r2, [pc, #220]	@ (80045e4 <TIM_Base_SetConfig+0x100>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a36      	ldr	r2, [pc, #216]	@ (80045e8 <TIM_Base_SetConfig+0x104>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x38>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a35      	ldr	r2, [pc, #212]	@ (80045ec <TIM_Base_SetConfig+0x108>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2b      	ldr	r2, [pc, #172]	@ (80045e0 <TIM_Base_SetConfig+0xfc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01b      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d017      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a28      	ldr	r2, [pc, #160]	@ (80045e4 <TIM_Base_SetConfig+0x100>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a27      	ldr	r2, [pc, #156]	@ (80045e8 <TIM_Base_SetConfig+0x104>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	@ (80045ec <TIM_Base_SetConfig+0x108>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a25      	ldr	r2, [pc, #148]	@ (80045f0 <TIM_Base_SetConfig+0x10c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a24      	ldr	r2, [pc, #144]	@ (80045f4 <TIM_Base_SetConfig+0x110>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a23      	ldr	r2, [pc, #140]	@ (80045f8 <TIM_Base_SetConfig+0x114>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a0e      	ldr	r2, [pc, #56]	@ (80045e0 <TIM_Base_SetConfig+0xfc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]
  }
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800

080045fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 030a 	bic.w	r3, r3, #10
 8004638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465a:	b480      	push	{r7}
 800465c:	b087      	sub	sp, #28
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 0210 	bic.w	r2, r3, #16
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004696:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f043 0307 	orr.w	r3, r3, #7
 80046dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800470a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	431a      	orrs	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e050      	b.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d013      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a16      	ldr	r2, [pc, #88]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10c      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000

0800480c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e042      	b.n	80048a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd f9d0 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	@ 0x24
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800484e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f82b 	bl	80048ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0c0      	sub	sp, #256	@ 0x100
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	ea40 0301 	orr.w	r3, r0, r1
 80048d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004904:	f021 010c 	bic.w	r1, r1, #12
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004912:	430b      	orrs	r3, r1
 8004914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	6999      	ldr	r1, [r3, #24]
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	ea40 0301 	orr.w	r3, r0, r1
 8004932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b78 <UART_SetConfig+0x2cc>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d005      	beq.n	800494c <UART_SetConfig+0xa0>
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8d      	ldr	r3, [pc, #564]	@ (8004b7c <UART_SetConfig+0x2d0>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d104      	bne.n	8004956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7ff f92e 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8004950:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004954:	e003      	b.n	800495e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004956:	f7ff f915 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 800495a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004968:	f040 810c 	bne.w	8004b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004976:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800497a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	1891      	adds	r1, r2, r2
 8004984:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004986:	415b      	adcs	r3, r3
 8004988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800498e:	4621      	mov	r1, r4
 8004990:	eb12 0801 	adds.w	r8, r2, r1
 8004994:	4629      	mov	r1, r5
 8004996:	eb43 0901 	adc.w	r9, r3, r1
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ae:	4690      	mov	r8, r2
 80049b0:	4699      	mov	r9, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	eb18 0303 	adds.w	r3, r8, r3
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049bc:	462b      	mov	r3, r5
 80049be:	eb49 0303 	adc.w	r3, r9, r3
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049da:	460b      	mov	r3, r1
 80049dc:	18db      	adds	r3, r3, r3
 80049de:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e0:	4613      	mov	r3, r2
 80049e2:	eb42 0303 	adc.w	r3, r2, r3
 80049e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049f0:	f7fb fbf0 	bl	80001d4 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b61      	ldr	r3, [pc, #388]	@ (8004b80 <UART_SetConfig+0x2d4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a24:	4641      	mov	r1, r8
 8004a26:	eb12 0a01 	adds.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a44:	4692      	mov	sl, r2
 8004a46:	469b      	mov	fp, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a52:	464b      	mov	r3, r9
 8004a54:	eb4b 0303 	adc.w	r3, fp, r3
 8004a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	4613      	mov	r3, r2
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a86:	f7fb fba5 	bl	80001d4 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004a92:	fba3 2301 	umull	r2, r3, r3, r1
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2264      	movs	r2, #100	@ 0x64
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	1acb      	subs	r3, r1, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	18db      	adds	r3, r3, r3
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b32:	4613      	mov	r3, r2
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b42:	f7fb fb47 	bl	80001d4 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	@ 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	@ 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b74:	e106      	b.n	8004d84 <UART_SetConfig+0x4d8>
 8004b76:	bf00      	nop
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	6239      	str	r1, [r7, #32]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0501 	adc.w	r5, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bcc:	464b      	mov	r3, r9
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004be2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	008a      	lsls	r2, r1, #2
 8004c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c04:	f7fb fae6 	bl	80001d4 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b60      	ldr	r3, [pc, #384]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	61b9      	str	r1, [r7, #24]
 8004c30:	415b      	adcs	r3, r3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6139      	str	r1, [r7, #16]
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c90:	4649      	mov	r1, r9
 8004c92:	008b      	lsls	r3, r1, #2
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ca2:	f7fb fa97 	bl	80001d4 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	@ 0x32
 8004cc0:	4a33      	ldr	r2, [pc, #204]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ccc:	441c      	add	r4, r3
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d1e:	464b      	mov	r3, r9
 8004d20:	460a      	mov	r2, r1
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d32:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d52:	f7fb fa3f 	bl	80001d4 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	@ 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	3332      	adds	r3, #50	@ 0x32
 8004d6e:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4422      	add	r2, r4
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	51eb851f 	.word	0x51eb851f

08004d94 <memset>:
 8004d94:	4402      	add	r2, r0
 8004d96:	4603      	mov	r3, r0
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <memset+0xa>
 8004d9c:	4770      	bx	lr
 8004d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004da2:	e7f9      	b.n	8004d98 <memset+0x4>

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	4d0d      	ldr	r5, [pc, #52]	@ (8004ddc <__libc_init_array+0x38>)
 8004da8:	4c0d      	ldr	r4, [pc, #52]	@ (8004de0 <__libc_init_array+0x3c>)
 8004daa:	1b64      	subs	r4, r4, r5
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	2600      	movs	r6, #0
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	4d0b      	ldr	r5, [pc, #44]	@ (8004de4 <__libc_init_array+0x40>)
 8004db6:	4c0c      	ldr	r4, [pc, #48]	@ (8004de8 <__libc_init_array+0x44>)
 8004db8:	f000 f818 	bl	8004dec <_init>
 8004dbc:	1b64      	subs	r4, r4, r5
 8004dbe:	10a4      	asrs	r4, r4, #2
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	08004e34 	.word	0x08004e34
 8004de0:	08004e34 	.word	0x08004e34
 8004de4:	08004e34 	.word	0x08004e34
 8004de8:	08004e38 	.word	0x08004e38

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
