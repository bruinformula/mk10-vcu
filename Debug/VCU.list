
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050280  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08055c74  08055c74  00057014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08055c74  08055c74  00056c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08055c7c  08055c7c  00057014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08055c7c  08055c7c  00056c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08055c80  08055c80  00056c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08055c84  00057000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000014  08055c98  00057014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08055c98  000572a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00057014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bf0  00000000  00000000  00057044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c91  00000000  00000000  00068c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0006b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0006c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197da  00000000  00000000  0006d73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014921  00000000  00000000  00086f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c89b  00000000  00000000  0009b835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001380d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  00138114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000035e  00000000  00000000  0013c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0013cb52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080059dc 	.word	0x080059dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080059dc 	.word	0x080059dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Transmit>:
  return true;
}

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800050c:	4b44      	ldr	r3, [pc, #272]	@ (8000620 <CANSPI_Transmit+0x120>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000512:	4b43      	ldr	r3, [pc, #268]	@ (8000620 <CANSPI_Transmit+0x120>)
 8000514:	2200      	movs	r2, #0
 8000516:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000518:	4b41      	ldr	r3, [pc, #260]	@ (8000620 <CANSPI_Transmit+0x120>)
 800051a:	2200      	movs	r2, #0
 800051c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800051e:	4b40      	ldr	r3, [pc, #256]	@ (8000620 <CANSPI_Transmit+0x120>)
 8000520:	2200      	movs	r2, #0
 8000522:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000524:	f000 fe44 	bl	80011b0 <MCP2515_ReadStatus>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	4b3d      	ldr	r3, [pc, #244]	@ (8000624 <CANSPI_Transmit+0x124>)
 800052e:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 8000530:	4b3c      	ldr	r3, [pc, #240]	@ (8000624 <CANSPI_Transmit+0x124>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
 8000536:	200f      	movs	r0, #15
 8000538:	f000 fdcc 	bl	80010d4 <MCP2515_ReadByte>
 800053c:	4603      	mov	r3, r0
 800053e:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 8000540:	202d      	movs	r0, #45	@ 0x2d
 8000542:	f000 fdc7 	bl	80010d4 <MCP2515_ReadByte>
 8000546:	4603      	mov	r3, r0
 8000548:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800054a:	2030      	movs	r0, #48	@ 0x30
 800054c:	f000 fdc2 	bl	80010d4 <MCP2515_ReadByte>
 8000550:	4603      	mov	r3, r0
 8000552:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 8000554:	2040      	movs	r0, #64	@ 0x40
 8000556:	f000 fdbd 	bl	80010d4 <MCP2515_ReadByte>
 800055a:	4603      	mov	r3, r0
 800055c:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 800055e:	2050      	movs	r0, #80	@ 0x50
 8000560:	f000 fdb8 	bl	80010d4 <MCP2515_ReadByte>
 8000564:	4603      	mov	r3, r0
 8000566:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000568:	4b2e      	ldr	r3, [pc, #184]	@ (8000624 <CANSPI_Transmit+0x124>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d115      	bne.n	80005a2 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6858      	ldr	r0, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4a28      	ldr	r2, [pc, #160]	@ (8000620 <CANSPI_Transmit+0x120>)
 8000580:	4619      	mov	r1, r3
 8000582:	f000 f851 	bl	8000628 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7a1a      	ldrb	r2, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3309      	adds	r3, #9
 800058e:	4924      	ldr	r1, [pc, #144]	@ (8000620 <CANSPI_Transmit+0x120>)
 8000590:	2040      	movs	r0, #64	@ 0x40
 8000592:	f000 fdc3 	bl	800111c <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000596:	2081      	movs	r0, #129	@ 0x81
 8000598:	f000 fdee 	bl	8001178 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e038      	b.n	8000614 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80005a2:	4b20      	ldr	r3, [pc, #128]	@ (8000624 <CANSPI_Transmit+0x124>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d115      	bne.n	80005dc <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6858      	ldr	r0, [r3, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <CANSPI_Transmit+0x120>)
 80005ba:	4619      	mov	r1, r3
 80005bc:	f000 f834 	bl	8000628 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7a1a      	ldrb	r2, [r3, #8]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3309      	adds	r3, #9
 80005c8:	4915      	ldr	r1, [pc, #84]	@ (8000620 <CANSPI_Transmit+0x120>)
 80005ca:	2042      	movs	r0, #66	@ 0x42
 80005cc:	f000 fda6 	bl	800111c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80005d0:	2082      	movs	r0, #130	@ 0x82
 80005d2:	f000 fdd1 	bl	8001178 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	e01b      	b.n	8000614 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <CANSPI_Transmit+0x124>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d114      	bne.n	8000614 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6858      	ldr	r0, [r3, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000620 <CANSPI_Transmit+0x120>)
 80005f4:	4619      	mov	r1, r3
 80005f6:	f000 f817 	bl	8000628 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7a1a      	ldrb	r2, [r3, #8]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3309      	adds	r3, #9
 8000602:	4907      	ldr	r1, [pc, #28]	@ (8000620 <CANSPI_Transmit+0x120>)
 8000604:	2044      	movs	r0, #68	@ 0x44
 8000606:	f000 fd89 	bl	800111c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800060a:	2084      	movs	r0, #132	@ 0x84
 800060c:	f000 fdb4 	bl	8001178 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000034 	.word	0x20000034
 8000624:	20000030 	.word	0x20000030

08000628 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000628:	b480      	push	{r7}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	460b      	mov	r3, r1
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d12e      	bne.n	800069e <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0303 	and.w	r3, r3, #3
 8000664:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f023 031f 	bic.w	r3, r3, #31
 8000674:	b2da      	uxtb	r2, r3
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	4413      	add	r3, r2
 800067a:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	3308      	adds	r3, #8
 8000680:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	f023 0314 	bic.w	r3, r3, #20
 8000688:	b2da      	uxtb	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800069c:	e013      	b.n	80006c6 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	015b      	lsls	r3, r3, #5
 80006ae:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	371c      	adds	r7, #28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
	...

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d8:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	2400      	movs	r4, #0
 80006dc:	9405      	str	r4, [sp, #20]
 80006de:	9406      	str	r4, [sp, #24]
 80006e0:	9407      	str	r4, [sp, #28]
 80006e2:	9408      	str	r4, [sp, #32]
 80006e4:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	9401      	str	r4, [sp, #4]
 80006e8:	4b5c      	ldr	r3, [pc, #368]	@ (800085c <MX_GPIO_Init+0x188>)
 80006ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006ec:	f042 0204 	orr.w	r2, r2, #4
 80006f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006f4:	f002 0204 	and.w	r2, r2, #4
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fc:	9402      	str	r4, [sp, #8]
 80006fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000700:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000704:	631a      	str	r2, [r3, #48]	@ 0x30
 8000706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000708:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800070c:	9202      	str	r2, [sp, #8]
 800070e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	9403      	str	r4, [sp, #12]
 8000712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000714:	f042 0201 	orr.w	r2, r2, #1
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
 800071a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071c:	f002 0201 	and.w	r2, r2, #1
 8000720:	9203      	str	r2, [sp, #12]
 8000722:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	9404      	str	r4, [sp, #16]
 8000726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000728:	f042 0202 	orr.w	r2, r2, #2
 800072c:	631a      	str	r2, [r3, #48]	@ 0x30
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	9304      	str	r3, [sp, #16]
 8000736:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000738:	4e49      	ldr	r6, [pc, #292]	@ (8000860 <MX_GPIO_Init+0x18c>)
 800073a:	4622      	mov	r2, r4
 800073c:	2101      	movs	r1, #1
 800073e:	4630      	mov	r0, r6
 8000740:	f002 fbae 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	210e      	movs	r1, #14
 8000748:	4630      	mov	r0, r6
 800074a:	f002 fba9 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800074e:	4f45      	ldr	r7, [pc, #276]	@ (8000864 <MX_GPIO_Init+0x190>)
 8000750:	4622      	mov	r2, r4
 8000752:	2120      	movs	r1, #32
 8000754:	4638      	mov	r0, r7
 8000756:	f002 fba3 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000760:	4638      	mov	r0, r7
 8000762:	f002 fb9d 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTD_GPIO_Port, RTD_Pin, GPIO_PIN_RESET);
 8000766:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8000868 <MX_GPIO_Init+0x194>
 800076a:	4622      	mov	r2, r4
 800076c:	2110      	movs	r1, #16
 800076e:	4648      	mov	r0, r9
 8000770:	f002 fb96 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000778:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800077e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	a905      	add	r1, sp, #20
 8000784:	4630      	mov	r0, r6
 8000786:	f002 f9ef 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800078a:	2501      	movs	r5, #1
 800078c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000794:	a905      	add	r1, sp, #20
 8000796:	4630      	mov	r0, r6
 8000798:	f002 f9e6 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 800079c:	f04f 0a02 	mov.w	sl, #2
 80007a0:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	f04f 0803 	mov.w	r8, #3
 80007ac:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80007b0:	a905      	add	r1, sp, #20
 80007b2:	4630      	mov	r0, r6
 80007b4:	f002 f9d8 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 80007b8:	f04f 0b0c 	mov.w	fp, #12
 80007bc:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	a905      	add	r1, sp, #20
 80007c8:	4630      	mov	r0, r6
 80007ca:	f002 f9cd 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ce:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007dc:	2307      	movs	r3, #7
 80007de:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	a905      	add	r1, sp, #20
 80007e2:	4638      	mov	r0, r7
 80007e4:	f002 f9c0 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007f2:	a905      	add	r1, sp, #20
 80007f4:	4638      	mov	r0, r7
 80007f6:	f002 f9b7 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80007fa:	2324      	movs	r3, #36	@ 0x24
 80007fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	a905      	add	r1, sp, #20
 8000804:	4648      	mov	r0, r9
 8000806:	f002 f9af 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_Pin;
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PRECHARGE_GPIO_Port, &GPIO_InitStruct);
 8000812:	a905      	add	r1, sp, #20
 8000814:	4630      	mov	r0, r6
 8000816:	f002 f9a7 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 800081a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800081e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000824:	a905      	add	r1, sp, #20
 8000826:	4638      	mov	r0, r7
 8000828:	f002 f99e 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 800082c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000830:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 800083a:	a905      	add	r1, sp, #20
 800083c:	4638      	mov	r0, r7
 800083e:	f002 f993 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTD_Pin */
  GPIO_InitStruct.Pin = RTD_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(RTD_GPIO_Port, &GPIO_InitStruct);
 800084e:	a905      	add	r1, sp, #20
 8000850:	4648      	mov	r0, r9
 8000852:	f002 f989 	bl	8002b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000856:	b00b      	add	sp, #44	@ 0x2c
 8000858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020800 	.word	0x40020800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400

0800086c <MX_DMA_Init>:
{
 800086c:	b510      	push	{r4, lr}
 800086e:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000870:	2400      	movs	r4, #0
 8000872:	9400      	str	r4, [sp, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_DMA_Init+0x54>)
 8000876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000878:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800087c:	631a      	str	r2, [r3, #48]	@ 0x30
 800087e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000880:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000888:	9401      	str	r4, [sp, #4]
 800088a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800088c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
 8000892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800089c:	4622      	mov	r2, r4
 800089e:	4621      	mov	r1, r4
 80008a0:	200f      	movs	r0, #15
 80008a2:	f001 fdba 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f001 fdd3 	bl	8002452 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ac:	4622      	mov	r2, r4
 80008ae:	4621      	mov	r1, r4
 80008b0:	2038      	movs	r0, #56	@ 0x38
 80008b2:	f001 fdb2 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b6:	2038      	movs	r0, #56	@ 0x38
 80008b8:	f001 fdcb 	bl	8002452 <HAL_NVIC_EnableIRQ>
}
 80008bc:	b002      	add	sp, #8
 80008be:	bd10      	pop	{r4, pc}
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_ADC_ConvCpltCallback>:
	apps1Value = ADC_Reads[APPS1_RANK-1];
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <HAL_ADC_ConvCpltCallback+0x20>)
 80008ca:	6011      	str	r1, [r2, #0]
	apps2Value = ADC_Reads[APPS2_RANK-1];
 80008cc:	6859      	ldr	r1, [r3, #4]
 80008ce:	4a06      	ldr	r2, [pc, #24]	@ (80008e8 <HAL_ADC_ConvCpltCallback+0x24>)
 80008d0:	6011      	str	r1, [r2, #0]
	bseValue   = ADC_Reads[BSE_RANK-1];
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <HAL_ADC_ConvCpltCallback+0x28>)
 80008d6:	601a      	str	r2, [r3, #0]
	dma_read_complete = 1;
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
}
 80008de:	4770      	bx	lr
 80008e0:	2000006c 	.word	0x2000006c
 80008e4:	20000094 	.word	0x20000094
 80008e8:	20000090 	.word	0x20000090
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	20000002 	.word	0x20000002

080008f4 <calculateTorqueRequest>:
	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 80008f4:	4b57      	ldr	r3, [pc, #348]	@ (8000a54 <calculateTorqueRequest+0x160>)
 80008f6:	ed93 7a00 	vldr	s14, [r3]
 80008fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80008fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000902:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000906:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8000a58 <calculateTorqueRequest+0x164>
 800090a:	eec7 7a06 	vdiv.f32	s15, s14, s12
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 800090e:	4b53      	ldr	r3, [pc, #332]	@ (8000a5c <calculateTorqueRequest+0x168>)
 8000910:	ed93 7a00 	vldr	s14, [r3]
 8000914:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000918:	ee37 7a66 	vsub.f32	s14, s14, s13
 800091c:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 8000a60 <calculateTorqueRequest+0x16c>
 8000920:	eec7 6a06 	vdiv.f32	s13, s14, s12
	float appsValue = (apps1_as_percent + apps2_as_percent) / 2.0f;
 8000924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000928:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (appsValue > 0) {
 8000930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	dd77      	ble.n	8000a2a <calculateTorqueRequest+0x136>
void calculateTorqueRequest(void) {
 800093a:	b510      	push	{r4, lr}
		int pedalLowIndx = (int)(appsValue / (pedalStepSize / 100.0f));  // handle properly if needed
 800093c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000a64 <calculateTorqueRequest+0x170>
 8000940:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000944:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000948:	ee17 3a10 	vmov	r3, s14
		int pedalHighIndx = pedalLowIndx + 1;
 800094c:	1c59      	adds	r1, r3, #1
		if (pedalHighIndx >= numPedalSteps) {
 800094e:	2909      	cmp	r1, #9
 8000950:	dd00      	ble.n	8000954 <calculateTorqueRequest+0x60>
			pedalHighIndx = numPedalSteps - 1;
 8000952:	2109      	movs	r1, #9
		int rpmLowIndx = (int)(inverter_diagnostics.motorRpm / rpmStepSize);
 8000954:	4a44      	ldr	r2, [pc, #272]	@ (8000a68 <calculateTorqueRequest+0x174>)
 8000956:	edd2 5a00 	vldr	s11, [r2]
 800095a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800095e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8000a6c <calculateTorqueRequest+0x178>
 8000962:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8000966:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800096a:	ee17 2a10 	vmov	r2, s14
		int rpmHighIndx = rpmLowIndx + 1;
 800096e:	f102 0e01 	add.w	lr, r2, #1
		if (rpmHighIndx >= numRpmSteps) {
 8000972:	f1be 0f09 	cmp.w	lr, #9
 8000976:	dd01      	ble.n	800097c <calculateTorqueRequest+0x88>
			rpmHighIndx = numRpmSteps - 1;
 8000978:	f04f 0e09 	mov.w	lr, #9
		float T00 = TORQUE_ARRAY[pedalLowIndx][rpmLowIndx];   // Lower-left
 800097c:	483c      	ldr	r0, [pc, #240]	@ (8000a70 <calculateTorqueRequest+0x17c>)
 800097e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000982:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000986:	4494      	add	ip, r2
 8000988:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800098c:	ed9c 4a00 	vldr	s8, [ip]
		float T10 = TORQUE_ARRAY[pedalHighIndx][rpmLowIndx];  // Upper-left
 8000990:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8000994:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000998:	4494      	add	ip, r2
 800099a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800099e:	ed9c 5a00 	vldr	s10, [ip]
		float T01 = TORQUE_ARRAY[pedalLowIndx][rpmHighIndx];  // Lower-right
 80009a2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80009a6:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80009aa:	44f4      	add	ip, lr
 80009ac:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80009b0:	ed9c 6a00 	vldr	s12, [ip]
		float T11 = TORQUE_ARRAY[pedalHighIndx][rpmHighIndx]; // Upper-right
 80009b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	44f4      	add	ip, lr
 80009be:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80009c2:	ed90 7a00 	vldr	s14, [r0]
		float pedalLerp = (appsValue * 100.0f - (pedalLowIndx * pedalStepSize)) / pedalStepSize;
 80009c6:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000a74 <calculateTorqueRequest+0x180>
 80009ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009ce:	ee06 3a90 	vmov	s13, r3
 80009d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80009d6:	eddf 4a28 	vldr	s9, [pc, #160]	@ 8000a78 <calculateTorqueRequest+0x184>
 80009da:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80009de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80009e2:	eec7 3aa4 	vdiv.f32	s7, s15, s9
		float rpmLerp   = (float)(inverter_diagnostics.motorRpm - (rpmLowIndx * rpmStepSize)) / rpmStepSize;
 80009e6:	ee07 2a90 	vmov	s15, r2
 80009ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ee:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000a6c <calculateTorqueRequest+0x178>
 80009f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009f6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80009fa:	eec5 4aa6 	vdiv.f32	s9, s11, s13
		float torqueLow  = T00 + (T01 - T00) * rpmLerp;
 80009fe:	ee76 6a44 	vsub.f32	s13, s12, s8
 8000a02:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8000a06:	ee76 6a84 	vadd.f32	s13, s13, s8
		float torqueHigh = T10 + (T11 - T10) * rpmLerp;
 8000a0a:	ee77 7a45 	vsub.f32	s15, s14, s10
 8000a0e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000a12:	ee77 7a85 	vadd.f32	s15, s15, s10
		requestedTorque = torqueLow + (torqueHigh - torqueLow) * pedalLerp;
 8000a16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000a1a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <calculateTorqueRequest+0x188>)
 8000a24:	edc3 7a00 	vstr	s15, [r3]
}
 8000a28:	bd10      	pop	{r4, pc}
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <calculateTorqueRequest+0x18c>)
 8000a2c:	ed93 7a00 	vldr	s14, [r3]
 8000a30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000a34:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000a84 <calculateTorqueRequest+0x190>
 8000a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
				* bse_as_percent + REGEN_BASELINE_TORQUE;
 8000a3c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a44:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000a88 <calculateTorqueRequest+0x194>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <calculateTorqueRequest+0x188>)
 8000a4e:	edc3 7a00 	vstr	s15, [r3]
 8000a52:	4770      	bx	lr
 8000a54:	20000094 	.word	0x20000094
 8000a58:	45412000 	.word	0x45412000
 8000a5c:	20000090 	.word	0x20000090
 8000a60:	457f5000 	.word	0x457f5000
 8000a64:	3de38e38 	.word	0x3de38e38
 8000a68:	20000048 	.word	0x20000048
 8000a6c:	44a6aaab 	.word	0x44a6aaab
 8000a70:	08055acc 	.word	0x08055acc
 8000a74:	42c80000 	.word	0x42c80000
 8000a78:	4131c71c 	.word	0x4131c71c
 8000a7c:	20000088 	.word	0x20000088
 8000a80:	2000008c 	.word	0x2000008c
 8000a84:	457ff000 	.word	0x457ff000
 8000a88:	00000000 	.word	0x00000000

08000a8c <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000a8c:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <checkAPPSPlausibility+0x98>)
 8000a90:	ed93 7a00 	vldr	s14, [r3]
 8000a94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000a98:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8000a9c:	ee37 7a46 	vsub.f32	s14, s14, s12
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000aa0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000b28 <checkAPPSPlausibility+0x9c>
 8000aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aa8:	eddf 5a20 	vldr	s11, [pc, #128]	@ 8000b2c <checkAPPSPlausibility+0xa0>
 8000aac:	ee67 7aa5 	vmul.f32	s15, s15, s11
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <checkAPPSPlausibility+0xa4>)
 8000ab2:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <checkAPPSPlausibility+0xa8>)
 8000ab8:	ed93 7a00 	vldr	s14, [r3]
 8000abc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000ac0:	ee37 7a46 	vsub.f32	s14, s14, s12
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000ac4:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 8000b38 <checkAPPSPlausibility+0xac>
 8000ac8:	eec7 6a05 	vdiv.f32	s13, s14, s10
 8000acc:	ee26 7aa5 	vmul.f32	s14, s13, s11
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <checkAPPSPlausibility+0xb0>)
 8000ad2:	ed83 7a00 	vstr	s14, [r3]
	if (fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ada:	eef0 7ae7 	vabs.f32	s15, s15
 8000ade:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae6:	dc06      	bgt.n	8000af6 <checkAPPSPlausibility+0x6a>
	else if (!apps_plausible
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <checkAPPSPlausibility+0xb4>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b173      	cbz	r3, 8000b0c <checkAPPSPlausibility+0x80>
		apps_plausible = 1; // true
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <checkAPPSPlausibility+0xb4>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	801a      	strh	r2, [r3, #0]
}
 8000af4:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8000af6:	f000 fe79 	bl	80017ec <HAL_GetTick>
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <checkAPPSPlausibility+0xb8>)
 8000afc:	6018      	str	r0, [r3, #0]
		apps_plausible = 0; // false
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <checkAPPSPlausibility+0xb4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <checkAPPSPlausibility+0xbc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	e7f3      	b.n	8000af4 <checkAPPSPlausibility+0x68>
			&& (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000b0c:	f000 fe6e 	bl	80017ec <HAL_GetTick>
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <checkAPPSPlausibility+0xb8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	1ac0      	subs	r0, r0, r3
 8000b16:	2863      	cmp	r0, #99	@ 0x63
 8000b18:	d8e9      	bhi.n	8000aee <checkAPPSPlausibility+0x62>
		requestedTorque = 0;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <checkAPPSPlausibility+0xbc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e7e8      	b.n	8000af4 <checkAPPSPlausibility+0x68>
 8000b22:	bf00      	nop
 8000b24:	20000094 	.word	0x20000094
 8000b28:	45412000 	.word	0x45412000
 8000b2c:	42c80000 	.word	0x42c80000
 8000b30:	20000068 	.word	0x20000068
 8000b34:	20000090 	.word	0x20000090
 8000b38:	457f5000 	.word	0x457f5000
 8000b3c:	20000064 	.word	0x20000064
 8000b40:	20000004 	.word	0x20000004
 8000b44:	2000007c 	.word	0x2000007c
 8000b48:	20000088 	.word	0x20000088

08000b4c <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <checkCrossCheck+0xac>)
 8000b4e:	ed93 7a00 	vldr	s14, [r3]
 8000b52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000b56:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000bfc <checkCrossCheck+0xb0>
 8000b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b5e:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000c00 <checkCrossCheck+0xb4>
 8000b62:	ee67 7a86 	vmul.f32	s15, s15, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000b66:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <checkCrossCheck+0xb8>)
 8000b68:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000b6c:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <checkCrossCheck+0xbc>)
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000b76:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000b7a:	ee37 7a66 	vsub.f32	s14, s14, s13
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000b7e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8000c0c <checkCrossCheck+0xc0>
 8000b82:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000b86:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <checkCrossCheck+0xc4>)
 8000b8c:	ed93 7a00 	vldr	s14, [r3]
 8000b90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000b94:	ee37 7a66 	vsub.f32	s14, s14, s13
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000b98:	eddf 5a1e 	vldr	s11, [pc, #120]	@ 8000c14 <checkCrossCheck+0xc8>
 8000b9c:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ba0:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ba8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bac:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8000bb0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbc:	dd0a      	ble.n	8000bd4 <checkCrossCheck+0x88>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <checkCrossCheck+0xac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b64      	cmp	r3, #100	@ 0x64
 8000bc4:	d906      	bls.n	8000bd4 <checkCrossCheck+0x88>
		cross_check_plausible = 0;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <checkCrossCheck+0xcc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <checkCrossCheck+0xd0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	4770      	bx	lr
	else if (!cross_check_plausible
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <checkCrossCheck+0xcc>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b953      	cbnz	r3, 8000bf0 <checkCrossCheck+0xa4>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 8000bda:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	dd03      	ble.n	8000bf0 <checkCrossCheck+0xa4>
		requestedTorque = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <checkCrossCheck+0xd0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	4770      	bx	lr
		cross_check_plausible = 1;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <checkCrossCheck+0xcc>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	801a      	strh	r2, [r3, #0]
}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000008c 	.word	0x2000008c
 8000bfc:	457ff000 	.word	0x457ff000
 8000c00:	42c80000 	.word	0x42c80000
 8000c04:	20000060 	.word	0x20000060
 8000c08:	20000094 	.word	0x20000094
 8000c0c:	45412000 	.word	0x45412000
 8000c10:	20000090 	.word	0x20000090
 8000c14:	457f5000 	.word	0x457f5000
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000088 	.word	0x20000088

08000c20 <sendTorqueCommand>:
void sendTorqueCommand(void) {
 8000c20:	b508      	push	{r3, lr}
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <sendTorqueCommand+0x44>)
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	ee17 3a90 	vmov	r3, s15
	char msg1 = (torqueValue >> 8) & 0xFF;
 8000c38:	f3c3 2207 	ubfx	r2, r3, #8, #8
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <sendTorqueCommand+0x48>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	7001      	strb	r1, [r0, #0]
	txMessage.frame.id = 0x0C0;
 8000c42:	21c0      	movs	r1, #192	@ 0xc0
 8000c44:	6041      	str	r1, [r0, #4]
	txMessage.frame.dlc = 8;
 8000c46:	2108      	movs	r1, #8
 8000c48:	7201      	strb	r1, [r0, #8]
	txMessage.frame.data0 = msg0;
 8000c4a:	7243      	strb	r3, [r0, #9]
	txMessage.frame.data1 = msg1;
 8000c4c:	7282      	strb	r2, [r0, #10]
	txMessage.frame.data2 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	72c3      	strb	r3, [r0, #11]
	txMessage.frame.data3 = 0;
 8000c52:	7303      	strb	r3, [r0, #12]
	txMessage.frame.data4 = 0;
 8000c54:	7343      	strb	r3, [r0, #13]
	txMessage.frame.data5 = 0;
 8000c56:	7383      	strb	r3, [r0, #14]
	txMessage.frame.data6 = 0;
 8000c58:	73c3      	strb	r3, [r0, #15]
	txMessage.frame.data7 = 0;
 8000c5a:	7403      	strb	r3, [r0, #16]
	CANSPI_Transmit(&txMessage);
 8000c5c:	f7ff fc50 	bl	8000500 <CANSPI_Transmit>
}
 8000c60:	bd08      	pop	{r3, pc}
 8000c62:	bf00      	nop
 8000c64:	20000088 	.word	0x20000088
 8000c68:	20000098 	.word	0x20000098

08000c6c <checkShutdown>:
void checkShutdown(){
 8000c6c:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 8000c6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c72:	4806      	ldr	r0, [pc, #24]	@ (8000c8c <checkShutdown+0x20>)
 8000c74:	f002 f8fc 	bl	8002e70 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_SET) {
 8000c78:	2801      	cmp	r0, #1
 8000c7a:	d000      	beq.n	8000c7e <checkShutdown+0x12>
}
 8000c7c:	bd08      	pop	{r3, pc}
		requestedTorque = 0;
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <checkShutdown+0x24>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 8000c84:	f7ff ffcc 	bl	8000c20 <sendTorqueCommand>
		while(true){}
 8000c88:	e7fe      	b.n	8000c88 <checkShutdown+0x1c>
 8000c8a:	bf00      	nop
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	20000088 	.word	0x20000088

08000c94 <checkReadyToDrive>:
void checkReadyToDrive(void) {
 8000c94:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_GPIO_Port, RTD_Pin);
 8000c96:	2110      	movs	r1, #16
 8000c98:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <checkReadyToDrive+0x20>)
 8000c9a:	f002 f8e9 	bl	8002e70 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000c9e:	2801      	cmp	r0, #1
 8000ca0:	d000      	beq.n	8000ca4 <checkReadyToDrive+0x10>
}
 8000ca2:	bd08      	pop	{r3, pc}
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <checkReadyToDrive+0x24>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b64      	cmp	r3, #100	@ 0x64
 8000caa:	d9fa      	bls.n	8000ca2 <checkReadyToDrive+0xe>
		readyToDrive = 1;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <checkReadyToDrive+0x28>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	e7f6      	b.n	8000ca2 <checkReadyToDrive+0xe>
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	2000005d 	.word	0x2000005d

08000cc0 <sendPrechargeRequest>:
void sendPrechargeRequest(void){
 8000cc0:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_GPIO_Port, PRECHARGE_Pin);
 8000cc2:	2180      	movs	r1, #128	@ 0x80
 8000cc4:	4818      	ldr	r0, [pc, #96]	@ (8000d28 <sendPrechargeRequest+0x68>)
 8000cc6:	f002 f8d3 	bl	8002e70 <HAL_GPIO_ReadPin>
	if(pinState == GPIO_PIN_SET && !prechargeState){
 8000cca:	2801      	cmp	r0, #1
 8000ccc:	d004      	beq.n	8000cd8 <sendPrechargeRequest+0x18>
	else if (pinState == GPIO_PIN_RESET){
 8000cce:	b978      	cbnz	r0, 8000cf0 <sendPrechargeRequest+0x30>
		prechargeState = false;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <sendPrechargeRequest+0x6c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bd08      	pop	{r3, pc}
	if(pinState == GPIO_PIN_SET && !prechargeState){
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <sendPrechargeRequest+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f6      	bne.n	8000cce <sendPrechargeRequest+0xe>
		prechargeState = true;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <sendPrechargeRequest+0x6c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
		millis_precharge = HAL_GetTick();
 8000ce6:	f000 fd81 	bl	80017ec <HAL_GetTick>
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <sendPrechargeRequest+0x70>)
 8000cec:	6018      	str	r0, [r3, #0]
 8000cee:	e7f2      	b.n	8000cd6 <sendPrechargeRequest+0x16>
	else if(HAL_GetTick()-millis_precharge >= 1000){
 8000cf0:	f000 fd7c 	bl	80017ec <HAL_GetTick>
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <sendPrechargeRequest+0x70>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	1ac0      	subs	r0, r0, r3
 8000cfa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000cfe:	d3ea      	bcc.n	8000cd6 <sendPrechargeRequest+0x16>
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <sendPrechargeRequest+0x74>)
 8000d02:	2301      	movs	r3, #1
 8000d04:	7003      	strb	r3, [r0, #0]
		txMessage.frame.id = PRECHARGE_REQUEST_ID;
 8000d06:	2300      	movs	r3, #0
 8000d08:	6043      	str	r3, [r0, #4]
		txMessage.frame.dlc = 8;
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	7202      	strb	r2, [r0, #8]
		txMessage.frame.data0 = 2; // your precharge request code
 8000d0e:	2202      	movs	r2, #2
 8000d10:	7242      	strb	r2, [r0, #9]
		txMessage.frame.data1 = 0;
 8000d12:	7283      	strb	r3, [r0, #10]
		txMessage.frame.data2 = 0;
 8000d14:	72c3      	strb	r3, [r0, #11]
		txMessage.frame.data3 = 0;
 8000d16:	7303      	strb	r3, [r0, #12]
		txMessage.frame.data4 = 0;
 8000d18:	7343      	strb	r3, [r0, #13]
		txMessage.frame.data5 = 0;
 8000d1a:	7383      	strb	r3, [r0, #14]
		txMessage.frame.data6 = 0;
 8000d1c:	73c3      	strb	r3, [r0, #15]
		txMessage.frame.data7 = 0;
 8000d1e:	7403      	strb	r3, [r0, #16]
		CANSPI_Transmit(&txMessage);
 8000d20:	f7ff fbee 	bl	8000500 <CANSPI_Transmit>
}
 8000d24:	e7d7      	b.n	8000cd6 <sendPrechargeRequest+0x16>
 8000d26:	bf00      	nop
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	2000005c 	.word	0x2000005c
 8000d30:	20000058 	.word	0x20000058
 8000d34:	20000098 	.word	0x20000098

08000d38 <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8000d38:	6802      	ldr	r2, [r0, #0]
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_I2S_TxCpltCallback+0x50>)
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d000      	beq.n	8000d42 <HAL_I2S_TxCpltCallback+0xa>
 8000d40:	4770      	bx	lr
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_I2S_TxCpltCallback+0x54>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1fa      	bne.n	8000d40 <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_I2S_TxCpltCallback+0x58>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <HAL_I2S_TxCpltCallback+0x5c>)
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d214      	bcs.n	8000d80 <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000d56:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 8000d58:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8000d5a:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000d5e:	428a      	cmp	r2, r1
 8000d60:	d80b      	bhi.n	8000d7a <HAL_I2S_TxCpltCallback+0x42>
 8000d62:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 8000d64:	490c      	ldr	r1, [pc, #48]	@ (8000d98 <HAL_I2S_TxCpltCallback+0x60>)
 8000d66:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 8000d68:	18d4      	adds	r4, r2, r3
 8000d6a:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <HAL_I2S_TxCpltCallback+0x58>)
 8000d6c:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8000d6e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000d72:	480a      	ldr	r0, [pc, #40]	@ (8000d9c <HAL_I2S_TxCpltCallback+0x64>)
 8000d74:	f002 f9ee 	bl	8003154 <HAL_I2S_Transmit_DMA>
}
 8000d78:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8000d7a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000d7e:	e7f1      	b.n	8000d64 <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 8000d80:	4b02      	ldr	r3, [pc, #8]	@ (8000d8c <HAL_I2S_TxCpltCallback+0x54>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
}
 8000d86:	4770      	bx	lr
 8000d88:	40003800 	.word	0x40003800
 8000d8c:	20000038 	.word	0x20000038
 8000d90:	20000044 	.word	0x20000044
 8000d94:	2000003c 	.word	0x2000003c
 8000d98:	20000040 	.word	0x20000040
 8000d9c:	200001ac 	.word	0x200001ac

08000da0 <PlayStartupSoundOnce>:
void PlayStartupSoundOnce(void) {
 8000da0:	b508      	push	{r3, lr}
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 8000da2:	4909      	ldr	r1, [pc, #36]	@ (8000dc8 <PlayStartupSoundOnce+0x28>)
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <PlayStartupSoundOnce+0x2c>)
 8000da6:	6019      	str	r1, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <PlayStartupSoundOnce+0x30>)
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <PlayStartupSoundOnce+0x34>)
 8000dac:	601a      	str	r2, [r3, #0]
	wavPos = 0;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <PlayStartupSoundOnce+0x38>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <PlayStartupSoundOnce+0x3c>)
 8000db6:	7002      	strb	r2, [r0, #0]
	wavPos += thisChunk;
 8000db8:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000dbc:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <PlayStartupSoundOnce+0x40>)
 8000dc0:	f002 f9c8 	bl	8003154 <HAL_I2S_Transmit_DMA>
}
 8000dc4:	bd08      	pop	{r3, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08005a20 	.word	0x08005a20
 8000dcc:	20000040 	.word	0x20000040
 8000dd0:	2000003c 	.word	0x2000003c
 8000dd4:	00028056 	.word	0x00028056
 8000dd8:	20000044 	.word	0x20000044
 8000ddc:	20000038 	.word	0x20000038
 8000de0:	200001ac 	.word	0x200001ac

08000de4 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <Error_Handler+0x2>

08000de8 <MX_ADC1_Init>:
{
 8000de8:	b500      	push	{lr}
 8000dea:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dec:	2300      	movs	r3, #0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000df6:	4821      	ldr	r0, [pc, #132]	@ (8000e7c <MX_ADC1_Init+0x94>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	@ (8000e80 <MX_ADC1_Init+0x98>)
 8000dfa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dfc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e00:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e02:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e04:	2201      	movs	r2, #1
 8000e06:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e08:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e0a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e12:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000e14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e18:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e20:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e24:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e26:	f000 fd11 	bl	800184c <HAL_ADC_Init>
 8000e2a:	b9f0      	cbnz	r0, 8000e6a <MX_ADC1_Init+0x82>
  sConfig.Channel = ADC_CHANNEL_14;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e34:	2307      	movs	r3, #7
 8000e36:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	4669      	mov	r1, sp
 8000e3a:	4810      	ldr	r0, [pc, #64]	@ (8000e7c <MX_ADC1_Init+0x94>)
 8000e3c:	f000 ff68 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000e40:	b9a8      	cbnz	r0, 8000e6e <MX_ADC1_Init+0x86>
  sConfig.Channel = ADC_CHANNEL_15;
 8000e42:	230f      	movs	r3, #15
 8000e44:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000e46:	2303      	movs	r3, #3
 8000e48:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	4669      	mov	r1, sp
 8000e4c:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <MX_ADC1_Init+0x94>)
 8000e4e:	f000 ff5f 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000e52:	b970      	cbnz	r0, 8000e72 <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000e58:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5a:	4669      	mov	r1, sp
 8000e5c:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <MX_ADC1_Init+0x94>)
 8000e5e:	f000 ff57 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000e62:	b940      	cbnz	r0, 8000e76 <MX_ADC1_Init+0x8e>
}
 8000e64:	b005      	add	sp, #20
 8000e66:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e6a:	f7ff ffbb 	bl	8000de4 <Error_Handler>
    Error_Handler();
 8000e6e:	f7ff ffb9 	bl	8000de4 <Error_Handler>
    Error_Handler();
 8000e72:	f7ff ffb7 	bl	8000de4 <Error_Handler>
    Error_Handler();
 8000e76:	f7ff ffb5 	bl	8000de4 <Error_Handler>
 8000e7a:	bf00      	nop
 8000e7c:	20000254 	.word	0x20000254
 8000e80:	40012000 	.word	0x40012000

08000e84 <MX_TIM3_Init>:
{
 8000e84:	b500      	push	{lr}
 8000e86:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	9303      	str	r3, [sp, #12]
 8000e8e:	9304      	str	r3, [sp, #16]
 8000e90:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8000e96:	4814      	ldr	r0, [pc, #80]	@ (8000ee8 <MX_TIM3_Init+0x64>)
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <MX_TIM3_Init+0x68>)
 8000e9a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 10000;
 8000ea2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ea6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eac:	f004 f92e 	bl	800510c <HAL_TIM_Base_Init>
 8000eb0:	b998      	cbnz	r0, 8000eda <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eb8:	a902      	add	r1, sp, #8
 8000eba:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <MX_TIM3_Init+0x64>)
 8000ebc:	f004 fac0 	bl	8005440 <HAL_TIM_ConfigClockSource>
 8000ec0:	b968      	cbnz	r0, 8000ede <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000ec6:	2380      	movs	r3, #128	@ 0x80
 8000ec8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eca:	4669      	mov	r1, sp
 8000ecc:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_TIM3_Init+0x64>)
 8000ece:	f004 fcd7 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	b930      	cbnz	r0, 8000ee2 <MX_TIM3_Init+0x5e>
}
 8000ed4:	b007      	add	sp, #28
 8000ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000eda:	f7ff ff83 	bl	8000de4 <Error_Handler>
    Error_Handler();
 8000ede:	f7ff ff81 	bl	8000de4 <Error_Handler>
    Error_Handler();
 8000ee2:	f7ff ff7f 	bl	8000de4 <Error_Handler>
 8000ee6:	bf00      	nop
 8000ee8:	200000ac 	.word	0x200000ac
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_SPI3_Init>:
{
 8000ef0:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000ef2:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <MX_SPI3_Init+0x38>)
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <MX_SPI3_Init+0x3c>)
 8000ef6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ef8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000efc:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	2300      	movs	r3, #0
 8000f00:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f02:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f04:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f06:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f0c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f0e:	2210      	movs	r2, #16
 8000f10:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f12:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f1c:	f003 fb24 	bl	8004568 <HAL_SPI_Init>
 8000f20:	b900      	cbnz	r0, 8000f24 <MX_SPI3_Init+0x34>
}
 8000f22:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f24:	f7ff ff5e 	bl	8000de4 <Error_Handler>
 8000f28:	200000f4 	.word	0x200000f4
 8000f2c:	40003c00 	.word	0x40003c00

08000f30 <MX_I2S2_Init>:
{
 8000f30:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 8000f32:	480b      	ldr	r0, [pc, #44]	@ (8000f60 <MX_I2S2_Init+0x30>)
 8000f34:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <MX_I2S2_Init+0x34>)
 8000f36:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f3c:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f42:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000f44:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f46:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000f4a:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f4c:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f4e:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f50:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f52:	f001 ffbf 	bl	8002ed4 <HAL_I2S_Init>
 8000f56:	b900      	cbnz	r0, 8000f5a <MX_I2S2_Init+0x2a>
}
 8000f58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f5a:	f7ff ff43 	bl	8000de4 <Error_Handler>
 8000f5e:	bf00      	nop
 8000f60:	200001ac 	.word	0x200001ac
 8000f64:	40003800 	.word	0x40003800

08000f68 <SystemClock_Config>:
{
 8000f68:	b500      	push	{lr}
 8000f6a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6c:	2230      	movs	r2, #48	@ 0x30
 8000f6e:	2100      	movs	r1, #0
 8000f70:	a808      	add	r0, sp, #32
 8000f72:	f004 fd07 	bl	8005984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f76:	2300      	movs	r3, #0
 8000f78:	9303      	str	r3, [sp, #12]
 8000f7a:	9304      	str	r3, [sp, #16]
 8000f7c:	9305      	str	r3, [sp, #20]
 8000f7e:	9306      	str	r3, [sp, #24]
 8000f80:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <SystemClock_Config+0x9c>)
 8000f86:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000f88:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000f8c:	6411      	str	r1, [r2, #64]	@ 0x40
 8000f8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f90:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	491b      	ldr	r1, [pc, #108]	@ (8001008 <SystemClock_Config+0xa0>)
 8000f9c:	680a      	ldr	r2, [r1, #0]
 8000f9e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000fa6:	600a      	str	r2, [r1, #0]
 8000fa8:	680a      	ldr	r2, [r1, #0]
 8000faa:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000fae:	9202      	str	r2, [sp, #8]
 8000fb0:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fba:	2110      	movs	r1, #16
 8000fbc:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fc6:	2354      	movs	r3, #84	@ 0x54
 8000fc8:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	a808      	add	r0, sp, #32
 8000fd2:	f002 fd17 	bl	8003a04 <HAL_RCC_OscConfig>
 8000fd6:	b980      	cbnz	r0, 8000ffa <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2102      	movs	r1, #2
 8000fde:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fe8:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fec:	a803      	add	r0, sp, #12
 8000fee:	f002 ff81 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000ff2:	b920      	cbnz	r0, 8000ffe <SystemClock_Config+0x96>
}
 8000ff4:	b015      	add	sp, #84	@ 0x54
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ffa:	f7ff fef3 	bl	8000de4 <Error_Handler>
    Error_Handler();
 8000ffe:	f7ff fef1 	bl	8000de4 <Error_Handler>
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <main>:
{
 800100c:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800100e:	f000 fb87 	bl	8001720 <HAL_Init>
  SystemClock_Config();
 8001012:	f7ff ffa9 	bl	8000f68 <SystemClock_Config>
  MX_GPIO_Init();
 8001016:	f7ff fb5d 	bl	80006d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800101a:	f7ff fc27 	bl	800086c <MX_DMA_Init>
  MX_ADC1_Init();
 800101e:	f7ff fee3 	bl	8000de8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001022:	f7ff ff2f 	bl	8000e84 <MX_TIM3_Init>
  MX_SPI3_Init();
 8001026:	f7ff ff63 	bl	8000ef0 <MX_SPI3_Init>
  MX_I2S2_Init();
 800102a:	f7ff ff81 	bl	8000f30 <MX_I2S2_Init>
  HAL_TIM_Base_Start(&htim3);
 800102e:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <main+0x9c>)
 8001030:	f004 f8bc 	bl	80051ac <HAL_TIM_Base_Start>
  bms_diagnostics.inverterActive = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <main+0xa0>)
 8001038:	6013      	str	r3, [r2, #0]
  inverter_diagnostics.motorRpm   = 0;
 800103a:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <main+0xa4>)
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e00e      	b.n	800105e <main+0x52>
		HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8001040:	2203      	movs	r2, #3
 8001042:	491c      	ldr	r1, [pc, #112]	@ (80010b4 <main+0xa8>)
 8001044:	481c      	ldr	r0, [pc, #112]	@ (80010b8 <main+0xac>)
 8001046:	f000 fd55 	bl	8001af4 <HAL_ADC_Start_DMA>
		dma_read_complete = 0;
 800104a:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <main+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
		millis_since_dma_read = HAL_GetTick();
 8001050:	f000 fbcc 	bl	80017ec <HAL_GetTick>
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <main+0xb4>)
 8001056:	6018      	str	r0, [r3, #0]
 8001058:	e009      	b.n	800106e <main+0x62>
		  sendTorqueCommand();
 800105a:	f7ff fde1 	bl	8000c20 <sendTorqueCommand>
	  if(millis_since_dma_read -  HAL_GetTick() > DMA_READ_TIMEOUT){
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <main+0xb4>)
 8001060:	681c      	ldr	r4, [r3, #0]
 8001062:	f000 fbc3 	bl	80017ec <HAL_GetTick>
 8001066:	1a24      	subs	r4, r4, r0
 8001068:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 800106c:	d8e8      	bhi.n	8001040 <main+0x34>
	  calculateTorqueRequest();
 800106e:	f7ff fc41 	bl	80008f4 <calculateTorqueRequest>
	  checkAPPSPlausibility();
 8001072:	f7ff fd0b 	bl	8000a8c <checkAPPSPlausibility>
	  checkCrossCheck();
 8001076:	f7ff fd69 	bl	8000b4c <checkCrossCheck>
	  sendPrechargeRequest();
 800107a:	f7ff fe21 	bl	8000cc0 <sendPrechargeRequest>
	  checkShutdown();  // If pin is high, torque->0, block
 800107e:	f7ff fdf5 	bl	8000c6c <checkShutdown>
	  finalTorqueRequest   = requestedTorque;
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <main+0xb8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <main+0xbc>)
 8001088:	6013      	str	r3, [r2, #0]
	  lastRequestedTorque  = requestedTorque;
 800108a:	4a10      	ldr	r2, [pc, #64]	@ (80010cc <main+0xc0>)
 800108c:	6013      	str	r3, [r2, #0]
	  uint8_t prevReadyToDrive = readyToDrive;
 800108e:	4c10      	ldr	r4, [pc, #64]	@ (80010d0 <main+0xc4>)
 8001090:	7825      	ldrb	r5, [r4, #0]
	  checkReadyToDrive();
 8001092:	f7ff fdff 	bl	8000c94 <checkReadyToDrive>
	  if (readyToDrive) {
 8001096:	7823      	ldrb	r3, [r4, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0e0      	beq.n	800105e <main+0x52>
		  if(!prevReadyToDrive){
 800109c:	2d00      	cmp	r5, #0
 800109e:	d1dc      	bne.n	800105a <main+0x4e>
			  PlayStartupSoundOnce();
 80010a0:	f7ff fe7e 	bl	8000da0 <PlayStartupSoundOnce>
 80010a4:	e7d9      	b.n	800105a <main+0x4e>
 80010a6:	bf00      	nop
 80010a8:	200000ac 	.word	0x200000ac
 80010ac:	2000004c 	.word	0x2000004c
 80010b0:	20000048 	.word	0x20000048
 80010b4:	2000006c 	.word	0x2000006c
 80010b8:	20000254 	.word	0x20000254
 80010bc:	20000002 	.word	0x20000002
 80010c0:	20000078 	.word	0x20000078
 80010c4:	20000088 	.word	0x20000088
 80010c8:	20000080 	.word	0x20000080
 80010cc:	20000084 	.word	0x20000084
 80010d0:	2000005d 	.word	0x2000005d

080010d4 <MCP2515_ReadByte>:



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80010de:	2200      	movs	r2, #0
 80010e0:	2102      	movs	r1, #2
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MCP2515_ReadByte+0x44>)
 80010e4:	f001 fedc 	bl	8002ea0 <HAL_GPIO_WritePin>
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fb8b 	bl	8001804 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 f87c 	bl	80011ec <SPI_Tx>
  SPI_Tx(address);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f878 	bl	80011ec <SPI_Tx>
  retVal = SPI_Rx();
 80010fc:	f000 f89c 	bl	8001238 <SPI_Rx>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001104:	2201      	movs	r2, #1
 8001106:	2102      	movs	r1, #2
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <MCP2515_ReadByte+0x44>)
 800110a:	f001 fec9 	bl	8002ea0 <HAL_GPIO_WritePin>
  
  return retVal;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020800 	.word	0x40020800

0800111c <MCP2515_LoadTxSequence>:
  MCP2515_CS_HIGH();
}

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	4613      	mov	r3, r2
 800112c:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	4810      	ldr	r0, [pc, #64]	@ (8001174 <MCP2515_LoadTxSequence+0x58>)
 8001134:	f001 feb4 	bl	8002ea0 <HAL_GPIO_WritePin>
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fb63 	bl	8001804 <HAL_Delay>
  
  SPI_Tx(instruction);
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f853 	bl	80011ec <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001146:	2104      	movs	r1, #4
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f000 f861 	bl	8001210 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f84b 	bl	80011ec <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f858 	bl	8001210 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <MCP2515_LoadTxSequence+0x58>)
 8001166:	f001 fe9b 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020800 	.word	0x40020800

08001178 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	4809      	ldr	r0, [pc, #36]	@ (80011ac <MCP2515_RequestToSend+0x34>)
 8001188:	f001 fe8a 	bl	8002ea0 <HAL_GPIO_WritePin>
 800118c:	2001      	movs	r0, #1
 800118e:	f000 fb39 	bl	8001804 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f829 	bl	80011ec <SPI_Tx>
      
  MCP2515_CS_HIGH();
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	4803      	ldr	r0, [pc, #12]	@ (80011ac <MCP2515_RequestToSend+0x34>)
 80011a0:	f001 fe7e 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020800 	.word	0x40020800

080011b0 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80011b6:	2200      	movs	r2, #0
 80011b8:	2102      	movs	r1, #2
 80011ba:	480b      	ldr	r0, [pc, #44]	@ (80011e8 <MCP2515_ReadStatus+0x38>)
 80011bc:	f001 fe70 	bl	8002ea0 <HAL_GPIO_WritePin>
 80011c0:	2001      	movs	r0, #1
 80011c2:	f000 fb1f 	bl	8001804 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80011c6:	20a0      	movs	r0, #160	@ 0xa0
 80011c8:	f000 f810 	bl	80011ec <SPI_Tx>
  retVal = SPI_Rx();
 80011cc:	f000 f834 	bl	8001238 <SPI_Rx>
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 80011d4:	2201      	movs	r2, #1
 80011d6:	2102      	movs	r1, #2
 80011d8:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <MCP2515_ReadStatus+0x38>)
 80011da:	f001 fe61 	bl	8002ea0 <HAL_GPIO_WritePin>
  
  return retVal;
 80011de:	79fb      	ldrb	r3, [r7, #7]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020800 	.word	0x40020800

080011ec <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80011f6:	1df9      	adds	r1, r7, #7
 80011f8:	230a      	movs	r3, #10
 80011fa:	2201      	movs	r2, #1
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <SPI_Tx+0x20>)
 80011fe:	f003 fa3c 	bl	800467a <HAL_SPI_Transmit>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200000f4 	.word	0x200000f4

08001210 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	b29a      	uxth	r2, r3
 8001220:	230a      	movs	r3, #10
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4803      	ldr	r0, [pc, #12]	@ (8001234 <SPI_TxBuffer+0x24>)
 8001226:	f003 fa28 	bl	800467a <HAL_SPI_Transmit>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000f4 	.word	0x200000f4

08001238 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800123e:	1df9      	adds	r1, r7, #7
 8001240:	230a      	movs	r3, #10
 8001242:	2201      	movs	r2, #1
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <SPI_Rx+0x1c>)
 8001246:	f003 fb5c 	bl	8004902 <HAL_SPI_Receive>
  return retVal;
 800124a:	79fb      	ldrb	r3, [r7, #7]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200000f4 	.word	0x200000f4

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f001 f8b4 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a40      	ldr	r2, [pc, #256]	@ (80013c8 <HAL_ADC_MspInit+0x120>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d179      	bne.n	80013be <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b3f      	ldr	r3, [pc, #252]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b3c      	ldr	r3, [pc, #240]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a37      	ldr	r2, [pc, #220]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a30      	ldr	r2, [pc, #192]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <HAL_ADC_MspInit+0x124>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800131e:	2302      	movs	r3, #2
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4827      	ldr	r0, [pc, #156]	@ (80013d0 <HAL_ADC_MspInit+0x128>)
 8001332:	f001 fc19 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001336:	2330      	movs	r3, #48	@ 0x30
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4822      	ldr	r0, [pc, #136]	@ (80013d4 <HAL_ADC_MspInit+0x12c>)
 800134a:	f001 fc0d 	bl	8002b68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001350:	4a22      	ldr	r2, [pc, #136]	@ (80013dc <HAL_ADC_MspInit+0x134>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001354:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001378:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001386:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800138a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001392:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 8001394:	f001 f878 	bl	8002488 <HAL_DMA_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800139e:	f7ff fd21 	bl	8000de4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_ADC_MspInit+0x130>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2012      	movs	r0, #18
 80013b4:	f001 f831 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013b8:	2012      	movs	r0, #18
 80013ba:	f001 f84a 	bl	8002452 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40012000 	.word	0x40012000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020800 	.word	0x40020800
 80013d8:	200001f4 	.word	0x200001f4
 80013dc:	40026410 	.word	0x40026410

080013e0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	@ 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a3d      	ldr	r2, [pc, #244]	@ (8001504 <HAL_I2S_MspInit+0x124>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d174      	bne.n	80014fc <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001412:	2301      	movs	r3, #1
 8001414:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001416:	23c0      	movs	r3, #192	@ 0xc0
 8001418:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f002 ff52 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800142e:	f7ff fcd9 	bl	8000de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_I2S_MspInit+0x128>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a33      	ldr	r2, [pc, #204]	@ (8001508 <HAL_I2S_MspInit+0x128>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <HAL_I2S_MspInit+0x128>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <HAL_I2S_MspInit+0x128>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a2c      	ldr	r2, [pc, #176]	@ (8001508 <HAL_I2S_MspInit+0x128>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_I2S_MspInit+0x128>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800146a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147c:	2305      	movs	r3, #5
 800147e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4821      	ldr	r0, [pc, #132]	@ (800150c <HAL_I2S_MspInit+0x12c>)
 8001488:	f001 fb6e 	bl	8002b68 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800148c:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_I2S_MspInit+0x134>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 800149a:	2240      	movs	r2, #64	@ 0x40
 800149c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80014d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014e0:	480b      	ldr	r0, [pc, #44]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014e2:	f000 ffd1 	bl	8002488 <HAL_DMA_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 80014ec:	f7ff fc7a 	bl	8000de4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80014f6:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <HAL_I2S_MspInit+0x130>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	@ 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40003800 	.word	0x40003800
 8001508:	40023800 	.word	0x40023800
 800150c:	40020400 	.word	0x40020400
 8001510:	2000014c 	.word	0x2000014c
 8001514:	40026070 	.word	0x40026070

08001518 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_SPI_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001572:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001584:	2306      	movs	r3, #6
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <HAL_SPI_MspInit+0x8c>)
 8001590:	f001 faea 	bl	8002b68 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	@ 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40003c00 	.word	0x40003c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020800 	.word	0x40020800

080015a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d115      	bne.n	80015e6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_TIM_Base_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a0c      	ldr	r2, [pc, #48]	@ (80015f4 <HAL_TIM_Base_MspInit+0x4c>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_TIM_Base_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	201d      	movs	r0, #29
 80015dc:	f000 ff1d 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015e0:	201d      	movs	r0, #29
 80015e2:	f000 ff36 	bl	8002452 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40000400 	.word	0x40000400
 80015f4:	40023800 	.word	0x40023800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f8b9 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <DMA1_Stream4_IRQHandler+0x10>)
 800165e:	f001 f819 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000014c 	.word	0x2000014c

0800166c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <ADC_IRQHandler+0x10>)
 8001672:	f000 f92e 	bl	80018d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000254 	.word	0x20000254

08001680 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <TIM3_IRQHandler+0x10>)
 8001686:	f003 fdeb 	bl	8005260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000ac 	.word	0x200000ac

08001694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <DMA2_Stream0_IRQHandler+0x10>)
 800169a:	f000 fffb 	bl	8002694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001f4 	.word	0x200001f4

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001704 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016d0:	f7ff ffea 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f004 f94b 	bl	8005994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fc85 	bl	800100c <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001704:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001710:	08055c84 	.word	0x08055c84
  ldr r2, =_sbss
 8001714:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001718:	200002a0 	.word	0x200002a0

0800171c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <DMA1_Stream0_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 fe5b 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fd80 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fe73 	bl	800246e <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 fe3b 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000010 	.word	0x20000010
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000010 	.word	0x20000010
 80017e8:	2000029c 	.word	0x2000029c

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000029c 	.word	0x2000029c

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000010 	.word	0x20000010

0800184c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e033      	b.n	80018ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fd1c 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001892:	f023 0302 	bic.w	r3, r3, #2
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fb58 	bl	8001f54 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ba:	e001      	b.n	80018c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d049      	beq.n	800199c <HAL_ADC_IRQHandler+0xca>
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d046      	beq.n	800199c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d12b      	bne.n	800198c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d127      	bne.n	800198c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001954:	2b00      	cmp	r3, #0
 8001956:	d119      	bne.n	800198c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0220 	bic.w	r2, r2, #32
 8001966:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7fe ff99 	bl	80008c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0212 	mvn.w	r2, #18
 800199a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d057      	beq.n	8001a62 <HAL_ADC_IRQHandler+0x190>
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d054      	beq.n	8001a62 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d139      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d12b      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d124      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d11d      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d119      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a2c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d105      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fbfc 	bl	8002250 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 020c 	mvn.w	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a70:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d017      	beq.n	8001aa8 <HAL_ADC_IRQHandler+0x1d6>
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d014      	beq.n	8001aa8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f925 	bl	8001ce8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0201 	mvn.w	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d015      	beq.n	8001aea <HAL_ADC_IRQHandler+0x218>
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d012      	beq.n	8001aea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac8:	f043 0202 	orr.w	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0220 	mvn.w	r2, #32
 8001ad8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f90e 	bl	8001cfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0220 	mvn.w	r2, #32
 8001ae8:	601a      	str	r2, [r3, #0]
  }
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Start_DMA+0x1e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e0ce      	b.n	8001cb0 <HAL_ADC_Start_DMA+0x1bc>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d018      	beq.n	8001b5a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b38:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb8 <HAL_ADC_Start_DMA+0x1c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cbc <HAL_ADC_Start_DMA+0x1c8>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9a      	lsrs	r2, r3, #18
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b68:	d107      	bne.n	8001b7a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b78:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 8086 	bne.w	8001c96 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bc8:	d106      	bne.n	8001bd8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	f023 0206 	bic.w	r2, r3, #6
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd6:	e002      	b.n	8001bde <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be6:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <HAL_ADC_Start_DMA+0x1cc>)
 8001be8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bee:	4a35      	ldr	r2, [pc, #212]	@ (8001cc4 <HAL_ADC_Start_DMA+0x1d0>)
 8001bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf6:	4a34      	ldr	r2, [pc, #208]	@ (8001cc8 <HAL_ADC_Start_DMA+0x1d4>)
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfe:	4a33      	ldr	r2, [pc, #204]	@ (8001ccc <HAL_ADC_Start_DMA+0x1d8>)
 8001c00:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c1a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c2a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	334c      	adds	r3, #76	@ 0x4c
 8001c36:	4619      	mov	r1, r3
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f000 fcd2 	bl	80025e4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d129      	bne.n	8001cae <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	e020      	b.n	8001cae <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <HAL_ADC_Start_DMA+0x1dc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d11b      	bne.n	8001cae <HAL_ADC_Start_DMA+0x1ba>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d114      	bne.n	8001cae <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e00b      	b.n	8001cae <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	0800214d 	.word	0x0800214d
 8001cc8:	08002207 	.word	0x08002207
 8001ccc:	08002223 	.word	0x08002223
 8001cd0:	40012000 	.word	0x40012000

08001cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1c>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e105      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x228>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	d925      	bls.n	8001d88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68d9      	ldr	r1, [r3, #12]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	2207      	movs	r2, #7
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68d9      	ldr	r1, [r3, #12]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	4603      	mov	r3, r0
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4403      	add	r3, r0
 8001d7a:	3b1e      	subs	r3, #30
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	e022      	b.n	8001dce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6919      	ldr	r1, [r3, #16]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4403      	add	r3, r0
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d824      	bhi.n	8001e20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b05      	subs	r3, #5
 8001de8:	221f      	movs	r2, #31
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b05      	subs	r3, #5
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e1e:	e04c      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d824      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b23      	subs	r3, #35	@ 0x23
 8001e3a:	221f      	movs	r2, #31
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43da      	mvns	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	400a      	ands	r2, r1
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b23      	subs	r3, #35	@ 0x23
 8001e64:	fa00 f203 	lsl.w	r2, r0, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e70:	e023      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b41      	subs	r3, #65	@ 0x41
 8001e84:	221f      	movs	r2, #31
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b41      	subs	r3, #65	@ 0x41
 8001eae:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eba:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_ADC_ConfigChannel+0x234>)
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <HAL_ADC_ConfigChannel+0x238>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d109      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1cc>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	@ (8001f48 <HAL_ADC_ConfigChannel+0x238>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d123      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x21e>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x1e6>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b11      	cmp	r3, #17
 8001ef4:	d11b      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d111      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_ADC_ConfigChannel+0x23c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	@ (8001f50 <HAL_ADC_ConfigChannel+0x240>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40012300 	.word	0x40012300
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	431bde83 	.word	0x431bde83

08001f54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b79      	ldr	r3, [pc, #484]	@ (8002144 <ADC_Init+0x1f0>)
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	021a      	lsls	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	4a58      	ldr	r2, [pc, #352]	@ (8002148 <ADC_Init+0x1f4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ffa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6899      	ldr	r1, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e00f      	b.n	8002052 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002050:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0202 	bic.w	r2, r2, #2
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7e1b      	ldrb	r3, [r3, #24]
 800206c:	005a      	lsls	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800208e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800209e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	3b01      	subs	r3, #1
 80020ac:	035a      	lsls	r2, r3, #13
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e007      	b.n	80020c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	051a      	lsls	r2, r3, #20
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800210a:	025a      	lsls	r2, r3, #9
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	029a      	lsls	r2, r3, #10
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	0f000001 	.word	0x0f000001

0800214c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002158:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13c      	bne.n	80021e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d12b      	bne.n	80021d8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d127      	bne.n	80021d8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d119      	bne.n	80021d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0220 	bic.w	r2, r2, #32
 80021b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7fe fb73 	bl	80008c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021de:	e00e      	b.n	80021fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fd85 	bl	8001cfc <HAL_ADC_ErrorCallback>
}
 80021f2:	e004      	b.n	80021fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	4798      	blx	r3
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002212:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fd5d 	bl	8001cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2240      	movs	r2, #64	@ 0x40
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f043 0204 	orr.w	r2, r3, #4
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7ff fd5a 	bl	8001cfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff f9aa 	bl	80017ec <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e099      	b.n	80025d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c4:	e00f      	b.n	80024e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c6:	f7ff f991 	bl	80017ec <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d908      	bls.n	80024e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e078      	b.n	80025d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e8      	bne.n	80024c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_DMA_Init+0x158>)
 8002500:	4013      	ands	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	2b04      	cmp	r3, #4
 800253e:	d107      	bne.n	8002550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	4313      	orrs	r3, r2
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0307 	bic.w	r3, r3, #7
 8002566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	2b04      	cmp	r3, #4
 8002578:	d117      	bne.n	80025aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa6f 	bl	8002a70 <DMA_CheckFifoParam>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2240      	movs	r2, #64	@ 0x40
 800259c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025a6:	2301      	movs	r3, #1
 80025a8:	e016      	b.n	80025d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa26 	bl	8002a04 <DMA_CalcBaseAndBitshift>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	223f      	movs	r2, #63	@ 0x3f
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	f010803f 	.word	0xf010803f

080025e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_DMA_Start_IT+0x26>
 8002606:	2302      	movs	r3, #2
 8002608:	e040      	b.n	800268c <HAL_DMA_Start_IT+0xa8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d12f      	bne.n	800267e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f9b8 	bl	80029a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	223f      	movs	r2, #63	@ 0x3f
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0216 	orr.w	r2, r2, #22
 8002652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0208 	orr.w	r2, r2, #8
 800266a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e005      	b.n	800268a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026a0:	4b8e      	ldr	r3, [pc, #568]	@ (80028dc <HAL_DMA_IRQHandler+0x248>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a8e      	ldr	r2, [pc, #568]	@ (80028e0 <HAL_DMA_IRQHandler+0x24c>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0a9b      	lsrs	r3, r3, #10
 80026ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	2208      	movs	r2, #8
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0204 	bic.w	r2, r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	2208      	movs	r2, #8
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	2201      	movs	r2, #1
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	f043 0202 	orr.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	2204      	movs	r2, #4
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	2204      	movs	r2, #4
 800275a:	409a      	lsls	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	2210      	movs	r2, #16
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d043      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03c      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	2210      	movs	r2, #16
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e01f      	b.n	8002804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4798      	blx	r3
 80027d4:	e016      	b.n	8002804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0208 	bic.w	r2, r2, #8
 80027f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002808:	2220      	movs	r2, #32
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 808f 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8087 	beq.w	8002934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	2220      	movs	r2, #32
 800282c:	409a      	lsls	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b05      	cmp	r3, #5
 800283c:	d136      	bne.n	80028ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0216 	bic.w	r2, r2, #22
 800284c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800285c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_DMA_IRQHandler+0x1da>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0208 	bic.w	r2, r2, #8
 800287c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	223f      	movs	r2, #63	@ 0x3f
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d07e      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
        }
        return;
 80028aa:	e079      	b.n	80029a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01d      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e02c      	b.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
 80028da:	bf00      	nop
 80028dc:	20000008 	.word	0x20000008
 80028e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e01e      	b.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0210 	bic.w	r2, r2, #16
 8002912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	2b00      	cmp	r3, #0
 800293a:	d032      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d022      	beq.n	800298e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2205      	movs	r2, #5
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	d307      	bcc.n	800297c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f2      	bne.n	8002960 <HAL_DMA_IRQHandler+0x2cc>
 800297a:	e000      	b.n	800297e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800297c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e000      	b.n	80029a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029a0:	bf00      	nop
    }
  }
}
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b40      	cmp	r3, #64	@ 0x40
 80029d4:	d108      	bne.n	80029e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029e6:	e007      	b.n	80029f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	60da      	str	r2, [r3, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3b10      	subs	r3, #16
 8002a14:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <DMA_CalcBaseAndBitshift+0x64>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1e:	4a13      	ldr	r2, [pc, #76]	@ (8002a6c <DMA_CalcBaseAndBitshift+0x68>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d909      	bls.n	8002a46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	1d1a      	adds	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a44:	e007      	b.n	8002a56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	aaaaaaab 	.word	0xaaaaaaab
 8002a6c:	08055c6c 	.word	0x08055c6c

08002a70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11f      	bne.n	8002aca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d856      	bhi.n	8002b3e <DMA_CheckFifoParam+0xce>
 8002a90:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <DMA_CheckFifoParam+0x28>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002abb 	.word	0x08002abb
 8002aa0:	08002aa9 	.word	0x08002aa9
 8002aa4:	08002b3f 	.word	0x08002b3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d046      	beq.n	8002b42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab8:	e043      	b.n	8002b42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ac2:	d140      	bne.n	8002b46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e03d      	b.n	8002b46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ad2:	d121      	bne.n	8002b18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d837      	bhi.n	8002b4a <DMA_CheckFifoParam+0xda>
 8002ada:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <DMA_CheckFifoParam+0x70>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002af7 	.word	0x08002af7
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b09 	.word	0x08002b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e030      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d025      	beq.n	8002b4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e022      	b.n	8002b4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b10:	d11f      	bne.n	8002b52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b16:	e01c      	b.n	8002b52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d903      	bls.n	8002b26 <DMA_CheckFifoParam+0xb6>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d003      	beq.n	8002b2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b24:	e018      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2a:	e015      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e00b      	b.n	8002b56 <DMA_CheckFifoParam+0xe6>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e00a      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e008      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e006      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
    }
  } 
  
  return status; 
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	e159      	b.n	8002e38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	f040 8148 	bne.w	8002e32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d005      	beq.n	8002bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d130      	bne.n	8002c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 0201 	and.w	r2, r3, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d017      	beq.n	8002c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d123      	bne.n	8002cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	69b9      	ldr	r1, [r7, #24]
 8002ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0203 	and.w	r2, r3, #3
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a2 	beq.w	8002e32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <HAL_GPIO_Init+0x2e8>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4a56      	ldr	r2, [pc, #344]	@ (8002e50 <HAL_GPIO_Init+0x2e8>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfe:	4b54      	ldr	r3, [pc, #336]	@ (8002e50 <HAL_GPIO_Init+0x2e8>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d0a:	4a52      	ldr	r2, [pc, #328]	@ (8002e54 <HAL_GPIO_Init+0x2ec>)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a49      	ldr	r2, [pc, #292]	@ (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x202>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a48      	ldr	r2, [pc, #288]	@ (8002e5c <HAL_GPIO_Init+0x2f4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x1fe>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <HAL_GPIO_Init+0x2f8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x1fa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a46      	ldr	r2, [pc, #280]	@ (8002e64 <HAL_GPIO_Init+0x2fc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x1f6>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a45      	ldr	r2, [pc, #276]	@ (8002e68 <HAL_GPIO_Init+0x300>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x1f2>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e008      	b.n	8002d6c <HAL_GPIO_Init+0x204>
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x204>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e004      	b.n	8002d6c <HAL_GPIO_Init+0x204>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e002      	b.n	8002d6c <HAL_GPIO_Init+0x204>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_Init+0x204>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f002 0203 	and.w	r2, r2, #3
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	4093      	lsls	r3, r2
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d7c:	4935      	ldr	r1, [pc, #212]	@ (8002e54 <HAL_GPIO_Init+0x2ec>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	3302      	adds	r3, #2
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8a:	4b38      	ldr	r3, [pc, #224]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dae:	4a2f      	ldr	r2, [pc, #188]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd8:	4a24      	ldr	r2, [pc, #144]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dde:	4b23      	ldr	r3, [pc, #140]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e02:	4a1a      	ldr	r2, [pc, #104]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	f67f aea2 	bls.w	8002b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	@ 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40013800 	.word	0x40013800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40013c00 	.word	0x40013c00

08002e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e001      	b.n	8002e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
 8002eac:	4613      	mov	r3, r2
 8002eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb0:	787b      	ldrb	r3, [r7, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ebc:	e003      	b.n	8002ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	041a      	lsls	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	619a      	str	r2, [r3, #24]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e128      	b.n	8003138 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a90      	ldr	r2, [pc, #576]	@ (8003140 <HAL_I2S_Init+0x26c>)
 8002efe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe fa6d 	bl	80013e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f1c:	f023 030f 	bic.w	r3, r3, #15
 8002f20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2202      	movs	r2, #2
 8002f28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d060      	beq.n	8002ff4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e001      	b.n	8002f44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d802      	bhi.n	8002f52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f001 faa8 	bl	80044a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f62:	d125      	bne.n	8002fb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	461a      	mov	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	3305      	adds	r3, #5
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	e01f      	b.n	8002fce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	3305      	adds	r3, #5
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	e00e      	b.n	8002fce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	3305      	adds	r3, #5
 8002fcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8003144 <HAL_I2S_Init+0x270>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e003      	b.n	8002ffc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d902      	bls.n	8003008 <HAL_I2S_Init+0x134>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2bff      	cmp	r3, #255	@ 0xff
 8003006:	d907      	bls.n	8003018 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	f043 0210 	orr.w	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e08f      	b.n	8003138 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	ea42 0103 	orr.w	r1, r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	430a      	orrs	r2, r1
 800302a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003036:	f023 030f 	bic.w	r3, r3, #15
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6851      	ldr	r1, [r2, #4]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6892      	ldr	r2, [r2, #8]
 8003042:	4311      	orrs	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68d2      	ldr	r2, [r2, #12]
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6992      	ldr	r2, [r2, #24]
 800304e:	430a      	orrs	r2, r1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d161      	bne.n	8003128 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a38      	ldr	r2, [pc, #224]	@ (8003148 <HAL_I2S_Init+0x274>)
 8003068:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a37      	ldr	r2, [pc, #220]	@ (800314c <HAL_I2S_Init+0x278>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_I2S_Init+0x1a4>
 8003074:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <HAL_I2S_Init+0x27c>)
 8003076:	e001      	b.n	800307c <HAL_I2S_Init+0x1a8>
 8003078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	4932      	ldr	r1, [pc, #200]	@ (800314c <HAL_I2S_Init+0x278>)
 8003084:	428a      	cmp	r2, r1
 8003086:	d101      	bne.n	800308c <HAL_I2S_Init+0x1b8>
 8003088:	4a31      	ldr	r2, [pc, #196]	@ (8003150 <HAL_I2S_Init+0x27c>)
 800308a:	e001      	b.n	8003090 <HAL_I2S_Init+0x1bc>
 800308c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003090:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003094:	f023 030f 	bic.w	r3, r3, #15
 8003098:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <HAL_I2S_Init+0x278>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_I2S_Init+0x1d4>
 80030a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003150 <HAL_I2S_Init+0x27c>)
 80030a6:	e001      	b.n	80030ac <HAL_I2S_Init+0x1d8>
 80030a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030ac:	2202      	movs	r2, #2
 80030ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a25      	ldr	r2, [pc, #148]	@ (800314c <HAL_I2S_Init+0x278>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <HAL_I2S_Init+0x1ea>
 80030ba:	4b25      	ldr	r3, [pc, #148]	@ (8003150 <HAL_I2S_Init+0x27c>)
 80030bc:	e001      	b.n	80030c2 <HAL_I2S_Init+0x1ee>
 80030be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ce:	d003      	beq.n	80030d8 <HAL_I2S_Init+0x204>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e001      	b.n	80030e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003102:	4313      	orrs	r3, r2
 8003104:	b29a      	uxth	r2, r3
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	4313      	orrs	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003110:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_I2S_Init+0x278>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_I2S_Init+0x24c>
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <HAL_I2S_Init+0x27c>)
 800311e:	e001      	b.n	8003124 <HAL_I2S_Init+0x250>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003124:	897a      	ldrh	r2, [r7, #10]
 8003126:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	0800343d 	.word	0x0800343d
 8003144:	cccccccd 	.word	0xcccccccd
 8003148:	08003551 	.word	0x08003551
 800314c:	40003800 	.word	0x40003800
 8003150:	40003400 	.word	0x40003400

08003154 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_I2S_Transmit_DMA+0x1a>
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e08a      	b.n	8003288 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d001      	beq.n	8003182 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	e082      	b.n	8003288 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2S_Transmit_DMA+0x3e>
 800318e:	2302      	movs	r3, #2
 8003190:	e07a      	b.n	8003288 <HAL_I2S_Transmit_DMA+0x134>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d002      	beq.n	80031c6 <HAL_I2S_Transmit_DMA+0x72>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d10a      	bne.n	80031dc <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031da:	e005      	b.n	80031e8 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	88fa      	ldrh	r2, [r7, #6]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ec:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <HAL_I2S_Transmit_DMA+0x13c>)
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <HAL_I2S_Transmit_DMA+0x140>)
 80031f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	4a26      	ldr	r2, [pc, #152]	@ (8003298 <HAL_I2S_Transmit_DMA+0x144>)
 80031fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003208:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003210:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003216:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003218:	f7ff f9e4 	bl	80025e4 <HAL_DMA_Start_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00f      	beq.n	8003242 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f043 0208 	orr.w	r2, r3, #8
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e022      	b.n	8003288 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0202 	orr.w	r2, r2, #2
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003284:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	0800331b 	.word	0x0800331b
 8003294:	080032d9 	.word	0x080032d9
 8003298:	08003337 	.word	0x08003337

0800329c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0202 	bic.w	r2, r2, #2
 80032fc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7fd fd13 	bl	8000d38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff ffb7 	bl	800329c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0203 	bic.w	r2, r2, #3
 8003352:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	f043 0208 	orr.w	r2, r3, #8
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff ffa5 	bl	80032c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	881a      	ldrh	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	1c9a      	adds	r2, r3, #2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10e      	bne.n	80033d6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fcb1 	bl	8000d38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	b292      	uxth	r2, r2
 80033f2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003424:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff3e 	bl	80032b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b04      	cmp	r3, #4
 8003456:	d13a      	bne.n	80034ce <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d109      	bne.n	8003476 <I2S_IRQHandler+0x3a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b40      	cmp	r3, #64	@ 0x40
 800346e:	d102      	bne.n	8003476 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffb4 	bl	80033de <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d126      	bne.n	80034ce <I2S_IRQHandler+0x92>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b20      	cmp	r3, #32
 800348c:	d11f      	bne.n	80034ce <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800349c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	f043 0202 	orr.w	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fefb 	bl	80032c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d136      	bne.n	8003548 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d109      	bne.n	80034f8 <I2S_IRQHandler+0xbc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ee:	2b80      	cmp	r3, #128	@ 0x80
 80034f0:	d102      	bne.n	80034f8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff45 	bl	8003382 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d122      	bne.n	8003548 <I2S_IRQHandler+0x10c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d11b      	bne.n	8003548 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff febe 	bl	80032c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a92      	ldr	r2, [pc, #584]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800356a:	4b92      	ldr	r3, [pc, #584]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800356c:	e001      	b.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800356e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a8b      	ldr	r2, [pc, #556]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003588:	4b8a      	ldr	r3, [pc, #552]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800358a:	e001      	b.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800358c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359c:	d004      	beq.n	80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8099 	bne.w	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d107      	bne.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f925 	bl	800380c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9c8 	bl	800396c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e2:	2b40      	cmp	r3, #64	@ 0x40
 80035e4:	d13a      	bne.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d035      	beq.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6e      	ldr	r2, [pc, #440]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035fa:	4b6e      	ldr	r3, [pc, #440]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035fc:	e001      	b.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4969      	ldr	r1, [pc, #420]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800360a:	428b      	cmp	r3, r1
 800360c:	d101      	bne.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800360e:	4b69      	ldr	r3, [pc, #420]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003610:	e001      	b.n	8003616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003612:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003616:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800361a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800362a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fe34 	bl	80032c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b08      	cmp	r3, #8
 8003664:	f040 80c3 	bne.w	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80bd 	beq.w	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003682:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a49      	ldr	r2, [pc, #292]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800368e:	4b49      	ldr	r3, [pc, #292]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003690:	e001      	b.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003692:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4944      	ldr	r1, [pc, #272]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800369e:	428b      	cmp	r3, r1
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036a2:	4b44      	ldr	r3, [pc, #272]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fdf6 	bl	80032c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d8:	e089      	b.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d107      	bne.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8be 	bl	8003870 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d107      	bne.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8fd 	bl	8003908 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d12f      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02a      	beq.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003730:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1e      	ldr	r2, [pc, #120]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800373c:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373e:	e001      	b.n	8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003740:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4919      	ldr	r1, [pc, #100]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d101      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003750:	4b18      	ldr	r3, [pc, #96]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003752:	e001      	b.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003754:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003758:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800375c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	f043 0202 	orr.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fda6 	bl	80032c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b08      	cmp	r3, #8
 8003780:	d136      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d031      	beq.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a07      	ldr	r2, [pc, #28]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003796:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003798:	e001      	b.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800379a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4902      	ldr	r1, [pc, #8]	@ (80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a6:	428b      	cmp	r3, r1
 80037a8:	d106      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037aa:	4b02      	ldr	r3, [pc, #8]	@ (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ac:	e006      	b.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037ae:	bf00      	nop
 80037b0:	40003800 	.word	0x40003800
 80037b4:	40003400 	.word	0x40003400
 80037b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fd6c 	bl	80032c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	e000      	b.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ee:	bf00      	nop
}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	1c99      	adds	r1, r3, #2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6251      	str	r1, [r2, #36]	@ 0x24
 800381e:	881a      	ldrh	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d113      	bne.n	8003866 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800384c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ffc9 	bl	80037f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6251      	str	r1, [r2, #36]	@ 0x24
 8003882:	8819      	ldrh	r1, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <I2SEx_TxISR_I2SExt+0x90>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <I2SEx_TxISR_I2SExt+0x22>
 800388e:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <I2SEx_TxISR_I2SExt+0x94>)
 8003890:	e001      	b.n	8003896 <I2SEx_TxISR_I2SExt+0x26>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003896:	460a      	mov	r2, r1
 8003898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d121      	bne.n	80038f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a12      	ldr	r2, [pc, #72]	@ (8003900 <I2SEx_TxISR_I2SExt+0x90>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <I2SEx_TxISR_I2SExt+0x50>
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <I2SEx_TxISR_I2SExt+0x94>)
 80038be:	e001      	b.n	80038c4 <I2SEx_TxISR_I2SExt+0x54>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	490d      	ldr	r1, [pc, #52]	@ (8003900 <I2SEx_TxISR_I2SExt+0x90>)
 80038cc:	428b      	cmp	r3, r1
 80038ce:	d101      	bne.n	80038d4 <I2SEx_TxISR_I2SExt+0x64>
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <I2SEx_TxISR_I2SExt+0x94>)
 80038d2:	e001      	b.n	80038d8 <I2SEx_TxISR_I2SExt+0x68>
 80038d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff81 	bl	80037f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40003800 	.word	0x40003800
 8003904:	40003400 	.word	0x40003400

08003908 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68d8      	ldr	r0, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	1c99      	adds	r1, r3, #2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003920:	b282      	uxth	r2, r0
 8003922:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d113      	bne.n	8003964 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800394a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff4a 	bl	80037f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a20      	ldr	r2, [pc, #128]	@ (80039fc <I2SEx_RxISR_I2SExt+0x90>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <I2SEx_RxISR_I2SExt+0x16>
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <I2SEx_RxISR_I2SExt+0x94>)
 8003980:	e001      	b.n	8003986 <I2SEx_RxISR_I2SExt+0x1a>
 8003982:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003986:	68d8      	ldr	r0, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	1c99      	adds	r1, r3, #2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003992:	b282      	uxth	r2, r0
 8003994:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d121      	bne.n	80039f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <I2SEx_RxISR_I2SExt+0x90>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d101      	bne.n	80039bc <I2SEx_RxISR_I2SExt+0x50>
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <I2SEx_RxISR_I2SExt+0x94>)
 80039ba:	e001      	b.n	80039c0 <I2SEx_RxISR_I2SExt+0x54>
 80039bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	490d      	ldr	r1, [pc, #52]	@ (80039fc <I2SEx_RxISR_I2SExt+0x90>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d101      	bne.n	80039d0 <I2SEx_RxISR_I2SExt+0x64>
 80039cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <I2SEx_RxISR_I2SExt+0x94>)
 80039ce:	e001      	b.n	80039d4 <I2SEx_RxISR_I2SExt+0x68>
 80039d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff03 	bl	80037f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40003800 	.word	0x40003800
 8003a00:	40003400 	.word	0x40003400

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e267      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d075      	beq.n	8003b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a22:	4b88      	ldr	r3, [pc, #544]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d00c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2e:	4b85      	ldr	r3, [pc, #532]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d112      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b82      	ldr	r3, [pc, #520]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a46:	d10b      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	4b7e      	ldr	r3, [pc, #504]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d05b      	beq.n	8003b0c <HAL_RCC_OscConfig+0x108>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d157      	bne.n	8003b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e242      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a68:	d106      	bne.n	8003a78 <HAL_RCC_OscConfig+0x74>
 8003a6a:	4b76      	ldr	r3, [pc, #472]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a75      	ldr	r2, [pc, #468]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e01d      	b.n	8003ab4 <HAL_RCC_OscConfig+0xb0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x98>
 8003a82:	4b70      	ldr	r3, [pc, #448]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a6f      	ldr	r2, [pc, #444]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6c      	ldr	r2, [pc, #432]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0xb0>
 8003a9c:	4b69      	ldr	r3, [pc, #420]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a68      	ldr	r2, [pc, #416]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b66      	ldr	r3, [pc, #408]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a65      	ldr	r2, [pc, #404]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd fe96 	bl	80017ec <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fd fe92 	bl	80017ec <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e207      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fe82 	bl	80017ec <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fd fe7e 	bl	80017ec <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1f3      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	4b51      	ldr	r3, [pc, #324]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0xe8>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d063      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d11c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b44      	ldr	r3, [pc, #272]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d116      	bne.n	8003b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	4b41      	ldr	r3, [pc, #260]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x152>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e1c7      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b56:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4937      	ldr	r1, [pc, #220]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6a:	e03a      	b.n	8003be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b74:	4b34      	ldr	r3, [pc, #208]	@ (8003c48 <HAL_RCC_OscConfig+0x244>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fe37 	bl	80017ec <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fd fe33 	bl	80017ec <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1a8      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	4b2b      	ldr	r3, [pc, #172]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b28      	ldr	r3, [pc, #160]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4925      	ldr	r1, [pc, #148]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_RCC_OscConfig+0x244>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd fe16 	bl	80017ec <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc4:	f7fd fe12 	bl	80017ec <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e187      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d036      	beq.n	8003c5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf6:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <HAL_RCC_OscConfig+0x248>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd fdf6 	bl	80017ec <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c04:	f7fd fdf2 	bl	80017ec <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e167      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCC_OscConfig+0x240>)
 8003c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x200>
 8003c22:	e01b      	b.n	8003c5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c24:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <HAL_RCC_OscConfig+0x248>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd fddf 	bl	80017ec <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	e00e      	b.n	8003c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c32:	f7fd fddb 	bl	80017ec <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d907      	bls.n	8003c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e150      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
 8003c44:	40023800 	.word	0x40023800
 8003c48:	42470000 	.word	0x42470000
 8003c4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	4b88      	ldr	r3, [pc, #544]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ea      	bne.n	8003c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8097 	beq.w	8003d98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6e:	4b81      	ldr	r3, [pc, #516]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	4a7c      	ldr	r2, [pc, #496]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b77      	ldr	r3, [pc, #476]	@ (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d118      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca6:	4b74      	ldr	r3, [pc, #464]	@ (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a73      	ldr	r2, [pc, #460]	@ (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fd9b 	bl	80017ec <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cba:	f7fd fd97 	bl	80017ec <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e10c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <HAL_RCC_OscConfig+0x474>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x2ea>
 8003ce0:	4b64      	ldr	r3, [pc, #400]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	4a63      	ldr	r2, [pc, #396]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cec:	e01c      	b.n	8003d28 <HAL_RCC_OscConfig+0x324>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x30c>
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfa:	4a5e      	ldr	r2, [pc, #376]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d02:	4b5c      	ldr	r3, [pc, #368]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	4a5b      	ldr	r2, [pc, #364]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0e:	e00b      	b.n	8003d28 <HAL_RCC_OscConfig+0x324>
 8003d10:	4b58      	ldr	r3, [pc, #352]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a57      	ldr	r2, [pc, #348]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1c:	4b55      	ldr	r3, [pc, #340]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4a54      	ldr	r2, [pc, #336]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0304 	bic.w	r3, r3, #4
 8003d26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd fd5c 	bl	80017ec <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd fd58 	bl	80017ec <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0cb      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4e:	4b49      	ldr	r3, [pc, #292]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ee      	beq.n	8003d38 <HAL_RCC_OscConfig+0x334>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fd fd46 	bl	80017ec <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fd fd42 	bl	80017ec <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e0b5      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1ee      	bne.n	8003d64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b39      	ldr	r3, [pc, #228]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	4a38      	ldr	r2, [pc, #224]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a1 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da2:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d05c      	beq.n	8003e68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d141      	bne.n	8003e3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b31      	ldr	r3, [pc, #196]	@ (8003e7c <HAL_RCC_OscConfig+0x478>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fd16 	bl	80017ec <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fd12 	bl	80017ec <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e087      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b27      	ldr	r3, [pc, #156]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	019b      	lsls	r3, r3, #6
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	491b      	ldr	r1, [pc, #108]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x478>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fd fceb 	bl	80017ec <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd fce7 	bl	80017ec <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e05c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2c:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x416>
 8003e38:	e054      	b.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <HAL_RCC_OscConfig+0x478>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fcd4 	bl	80017ec <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fd fcd0 	bl	80017ec <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e045      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x444>
 8003e66:	e03d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e038      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <HAL_RCC_OscConfig+0x4ec>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d028      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d121      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11a      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d111      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	085b      	lsrs	r3, r3, #1
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0cc      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b68      	ldr	r3, [pc, #416]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d90c      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b65      	ldr	r3, [pc, #404]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b63      	ldr	r3, [pc, #396]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0b8      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d020      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f48:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a58      	ldr	r2, [pc, #352]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a52      	ldr	r2, [pc, #328]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6c:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	494d      	ldr	r1, [pc, #308]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d044      	beq.n	8004014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b47      	ldr	r3, [pc, #284]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e07f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e06f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e067      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd2:	4b37      	ldr	r3, [pc, #220]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 0203 	bic.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4934      	ldr	r1, [pc, #208]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fc02 	bl	80017ec <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fd fbfe 	bl	80017ec <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04f      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	4b2b      	ldr	r3, [pc, #172]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 020c 	and.w	r2, r3, #12
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	429a      	cmp	r2, r3
 8004012:	d1eb      	bne.n	8003fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d20c      	bcs.n	800403c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b20      	ldr	r3, [pc, #128]	@ (80040ac <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e032      	b.n	80040a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4916      	ldr	r1, [pc, #88]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004066:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	490e      	ldr	r1, [pc, #56]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800407a:	f000 f821 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 800407e:	4602      	mov	r2, r0
 8004080:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	490a      	ldr	r1, [pc, #40]	@ (80040b4 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	5ccb      	ldrb	r3, [r1, r3]
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004096:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_RCC_ClockConfig+0x1c8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd fb62 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023c00 	.word	0x40023c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08055c5c 	.word	0x08055c5c
 80040b8:	20000008 	.word	0x20000008
 80040bc:	2000000c 	.word	0x2000000c

080040c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c4:	b094      	sub	sp, #80	@ 0x50
 80040c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d8:	4b79      	ldr	r3, [pc, #484]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d00d      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x40>
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	f200 80e1 	bhi.w	80042ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0x3a>
 80040f2:	e0db      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f4:	4b73      	ldr	r3, [pc, #460]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040f8:	e0db      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fa:	4b73      	ldr	r3, [pc, #460]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80040fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040fe:	e0d8      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004100:	4b6f      	ldr	r3, [pc, #444]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004108:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410a:	4b6d      	ldr	r3, [pc, #436]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004116:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	099b      	lsrs	r3, r3, #6
 800411c:	2200      	movs	r2, #0
 800411e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004120:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	633b      	str	r3, [r7, #48]	@ 0x30
 800412a:	2300      	movs	r3, #0
 800412c:	637b      	str	r3, [r7, #52]	@ 0x34
 800412e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4621      	mov	r1, r4
 800414c:	1a51      	subs	r1, r2, r1
 800414e:	6139      	str	r1, [r7, #16]
 8004150:	4629      	mov	r1, r5
 8004152:	eb63 0301 	sbc.w	r3, r3, r1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004164:	4659      	mov	r1, fp
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416e:	4651      	mov	r1, sl
 8004170:	018a      	lsls	r2, r1, #6
 8004172:	4651      	mov	r1, sl
 8004174:	ebb2 0801 	subs.w	r8, r2, r1
 8004178:	4659      	mov	r1, fp
 800417a:	eb63 0901 	sbc.w	r9, r3, r1
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800418e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004192:	4690      	mov	r8, r2
 8004194:	4699      	mov	r9, r3
 8004196:	4623      	mov	r3, r4
 8004198:	eb18 0303 	adds.w	r3, r8, r3
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	462b      	mov	r3, r5
 80041a0:	eb49 0303 	adc.w	r3, r9, r3
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041b2:	4629      	mov	r1, r5
 80041b4:	024b      	lsls	r3, r1, #9
 80041b6:	4621      	mov	r1, r4
 80041b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041bc:	4621      	mov	r1, r4
 80041be:	024a      	lsls	r2, r1, #9
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041c6:	2200      	movs	r2, #0
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041d0:	f7fc f800 	bl	80001d4 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041dc:	e058      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041de:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	2200      	movs	r2, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	4611      	mov	r1, r2
 80041ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	0159      	lsls	r1, r3, #5
 8004206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420a:	0150      	lsls	r0, r2, #5
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4641      	mov	r1, r8
 8004212:	ebb2 0a01 	subs.w	sl, r2, r1
 8004216:	4649      	mov	r1, r9
 8004218:	eb63 0b01 	sbc.w	fp, r3, r1
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800422c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004230:	ebb2 040a 	subs.w	r4, r2, sl
 8004234:	eb63 050b 	sbc.w	r5, r3, fp
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	00eb      	lsls	r3, r5, #3
 8004242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004246:	00e2      	lsls	r2, r4, #3
 8004248:	4614      	mov	r4, r2
 800424a:	461d      	mov	r5, r3
 800424c:	4643      	mov	r3, r8
 800424e:	18e3      	adds	r3, r4, r3
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	464b      	mov	r3, r9
 8004254:	eb45 0303 	adc.w	r3, r5, r3
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004266:	4629      	mov	r1, r5
 8004268:	028b      	lsls	r3, r1, #10
 800426a:	4621      	mov	r1, r4
 800426c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004270:	4621      	mov	r1, r4
 8004272:	028a      	lsls	r2, r1, #10
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427a:	2200      	movs	r2, #0
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004284:	f7fb ffa6 	bl	80001d4 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004290:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3750      	adds	r7, #80	@ 0x50
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400
 80042c8:	007a1200 	.word	0x007a1200

080042cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d035      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042f4:	4b67      	ldr	r3, [pc, #412]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042fa:	f7fd fa77 	bl	80017ec <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004302:	f7fd fa73 	bl	80017ec <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0ba      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004314:	4b60      	ldr	r3, [pc, #384]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	019a      	lsls	r2, r3, #6
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	495a      	ldr	r1, [pc, #360]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004334:	4b57      	ldr	r3, [pc, #348]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800433a:	f7fd fa57 	bl	80017ec <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004342:	f7fd fa53 	bl	80017ec <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e09a      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004354:	4b50      	ldr	r3, [pc, #320]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8083 	beq.w	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b49      	ldr	r3, [pc, #292]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	4a48      	ldr	r2, [pc, #288]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	@ 0x40
 800437e:	4b46      	ldr	r3, [pc, #280]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800438a:	4b44      	ldr	r3, [pc, #272]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a43      	ldr	r2, [pc, #268]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004394:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fd fa29 	bl	80017ec <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439e:	f7fd fa25 	bl	80017ec <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e06c      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043b0:	4b3a      	ldr	r3, [pc, #232]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043bc:	4b36      	ldr	r3, [pc, #216]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02f      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d028      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043da:	4b2f      	ldr	r3, [pc, #188]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e4:	4b2e      	ldr	r3, [pc, #184]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ea:	4b2d      	ldr	r3, [pc, #180]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043f0:	4a29      	ldr	r2, [pc, #164]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f6:	4b28      	ldr	r3, [pc, #160]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d114      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004402:	f7fd f9f3 	bl	80017ec <HAL_GetTick>
 8004406:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd f9ef 	bl	80017ec <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e034      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004438:	d10d      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800443a:	4b17      	ldr	r3, [pc, #92]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800444a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444e:	4912      	ldr	r1, [pc, #72]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]
 8004454:	e005      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004456:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4a0f      	ldr	r2, [pc, #60]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800445c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004460:	6093      	str	r3, [r2, #8]
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004464:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	490a      	ldr	r1, [pc, #40]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	7c1a      	ldrb	r2, [r3, #16]
 8004484:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004486:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	42470068 	.word	0x42470068
 8004498:	40023800 	.word	0x40023800
 800449c:	40007000 	.word	0x40007000
 80044a0:	42470e40 	.word	0x42470e40
 80044a4:	424711e0 	.word	0x424711e0

080044a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d13f      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044c6:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044ce:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d006      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044dc:	d12f      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044de:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044e0:	617b      	str	r3, [r7, #20]
          break;
 80044e2:	e02f      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f0:	d108      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044f2:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e007      	b.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004504:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800450c:	4a15      	ldr	r2, [pc, #84]	@ (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004514:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800452e:	0f1b      	lsrs	r3, r3, #28
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]
          break;
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
          break;
 8004542:	bf00      	nop
        }
      }
      break;
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004546:	bf00      	nop
    }
  }
  return frequency;
 8004548:	697b      	ldr	r3, [r7, #20]
}
 800454a:	4618      	mov	r0, r3
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	00bb8000 	.word	0x00bb8000
 8004560:	007a1200 	.word	0x007a1200
 8004564:	00f42400 	.word	0x00f42400

08004568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07b      	b.n	8004672 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d108      	bne.n	8004594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800458a:	d009      	beq.n	80045a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	61da      	str	r2, [r3, #28]
 8004592:	e005      	b.n	80045a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc ffac 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004624:	ea42 0103 	orr.w	r1, r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	f003 0104 	and.w	r1, r3, #4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	f003 0210 	and.w	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b088      	sub	sp, #32
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800468a:	f7fd f8af 	bl	80017ec <HAL_GetTick>
 800468e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
 80046a2:	e12a      	b.n	80048fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_Transmit+0x36>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e122      	b.n	80048fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_Transmit+0x48>
 80046be:	2302      	movs	r3, #2
 80046c0:	e11b      	b.n	80048fa <HAL_SPI_Transmit+0x280>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2203      	movs	r2, #3
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004710:	d10f      	bne.n	8004732 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d007      	beq.n	8004750 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800474e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004758:	d152      	bne.n	8004800 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0xee>
 8004762:	8b7b      	ldrh	r3, [r7, #26]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d145      	bne.n	80047f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	881a      	ldrh	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800478c:	e032      	b.n	80047f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d112      	bne.n	80047c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047c0:	e018      	b.n	80047f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c2:	f7fd f813 	bl	80017ec <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d803      	bhi.n	80047da <HAL_SPI_Transmit+0x160>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_Transmit+0x166>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e082      	b.n	80048fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1c7      	bne.n	800478e <HAL_SPI_Transmit+0x114>
 80047fe:	e053      	b.n	80048a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_SPI_Transmit+0x194>
 8004808:	8b7b      	ldrh	r3, [r7, #26]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d147      	bne.n	800489e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	330c      	adds	r3, #12
 8004818:	7812      	ldrb	r2, [r2, #0]
 800481a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004834:	e033      	b.n	800489e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d113      	bne.n	800486c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	86da      	strh	r2, [r3, #54]	@ 0x36
 800486a:	e018      	b.n	800489e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800486c:	f7fc ffbe 	bl	80017ec <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d803      	bhi.n	8004884 <HAL_SPI_Transmit+0x20a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d102      	bne.n	800488a <HAL_SPI_Transmit+0x210>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e02d      	b.n	80048fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1c6      	bne.n	8004836 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fbd9 	bl	8005064 <SPI_EndRxTxTransaction>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af02      	add	r7, sp, #8
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800491e:	2302      	movs	r3, #2
 8004920:	e104      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800492a:	d112      	bne.n	8004952 <HAL_SPI_Receive+0x50>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10e      	bne.n	8004952 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2204      	movs	r2, #4
 8004938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4613      	mov	r3, r2
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f8f3 	bl	8004b34 <HAL_SPI_TransmitReceive>
 800494e:	4603      	mov	r3, r0
 8004950:	e0ec      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004952:	f7fc ff4b 	bl	80017ec <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Receive+0x62>
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0e1      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_SPI_Receive+0x74>
 8004972:	2302      	movs	r3, #2
 8004974:	e0da      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2204      	movs	r2, #4
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c4:	d10f      	bne.n	80049e6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d007      	beq.n	8004a04 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d170      	bne.n	8004aee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a0c:	e035      	b.n	8004a7a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d115      	bne.n	8004a48 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f103 020c 	add.w	r2, r3, #12
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a46:	e018      	b.n	8004a7a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a48:	f7fc fed0 	bl	80017ec <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d803      	bhi.n	8004a60 <HAL_SPI_Receive+0x15e>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Receive+0x164>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e058      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1c4      	bne.n	8004a0e <HAL_SPI_Receive+0x10c>
 8004a84:	e038      	b.n	8004af8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d113      	bne.n	8004abc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	1c9a      	adds	r2, r3, #2
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aba:	e018      	b.n	8004aee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004abc:	f7fc fe96 	bl	80017ec <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d803      	bhi.n	8004ad4 <HAL_SPI_Receive+0x1d2>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Receive+0x1d8>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e01e      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1c6      	bne.n	8004a86 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	6839      	ldr	r1, [r7, #0]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fa4b 	bl	8004f98 <SPI_EndRxTransaction>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b42:	2301      	movs	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b46:	f7fc fe51 	bl	80017ec <HAL_GetTick>
 8004b4a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b52:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d00c      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x4a>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6a:	d106      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x46>
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d001      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e17f      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x5c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x5c>
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e174      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x6e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e16d      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d003      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2205      	movs	r2, #5
 8004bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	887a      	ldrh	r2, [r7, #2]
 8004bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	887a      	ldrh	r2, [r7, #2]
 8004be0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	887a      	ldrh	r2, [r7, #2]
 8004be6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b40      	cmp	r3, #64	@ 0x40
 8004c00:	d007      	beq.n	8004c12 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1a:	d17e      	bne.n	8004d1a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0xf6>
 8004c24:	8afb      	ldrh	r3, [r7, #22]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d16c      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	1c9a      	adds	r2, r3, #2
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4e:	e059      	b.n	8004d04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d11b      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x162>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d016      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x162>
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d113      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	1c9a      	adds	r2, r3, #2
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d119      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x1a4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d014      	beq.n	8004cd8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cd8:	f7fc fd88 	bl	80017ec <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d80d      	bhi.n	8004d04 <HAL_SPI_TransmitReceive+0x1d0>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d009      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0bc      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1a0      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x11c>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d19b      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x11c>
 8004d18:	e082      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x1f4>
 8004d22:	8afb      	ldrh	r3, [r7, #22]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d171      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4e:	e05d      	b.n	8004e0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d11c      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x264>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <HAL_SPI_TransmitReceive+0x264>
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d114      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	7812      	ldrb	r2, [r2, #0]
 8004d7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d119      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x2a6>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d014      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dda:	f7fc fd07 	bl	80017ec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d803      	bhi.n	8004df2 <HAL_SPI_TransmitReceive+0x2be>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x2c4>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e038      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d19c      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x21c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d197      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f91d 	bl	8005064 <SPI_EndRxTxTransaction>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e01d      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3728      	adds	r7, #40	@ 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e98:	f7fc fca8 	bl	80017ec <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea8:	f7fc fca0 	bl	80017ec <HAL_GetTick>
 8004eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eae:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	015b      	lsls	r3, r3, #5
 8004eb4:	0d1b      	lsrs	r3, r3, #20
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ebe:	e054      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d050      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec8:	f7fc fc90 	bl	80017ec <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d902      	bls.n	8004ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d13d      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef6:	d111      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f00:	d004      	beq.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0a:	d107      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f24:	d10f      	bne.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e017      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d19b      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000008 	.word	0x20000008

08004f98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fac:	d111      	bne.n	8004fd2 <SPI_EndRxTransaction+0x3a>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb6:	d004      	beq.n	8004fc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc0:	d107      	bne.n	8004fd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fda:	d12a      	bne.n	8005032 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe4:	d012      	beq.n	800500c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7ff ff49 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02d      	beq.n	8005058 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e026      	b.n	800505a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2200      	movs	r2, #0
 8005014:	2101      	movs	r1, #1
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ff36 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01a      	beq.n	8005058 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e013      	b.n	800505a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	2101      	movs	r1, #1
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ff23 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e000      	b.n	800505a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2201      	movs	r2, #1
 8005078:	2102      	movs	r1, #2
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff ff04 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e032      	b.n	80050fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <SPI_EndRxTxTransaction+0xa0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <SPI_EndRxTxTransaction+0xa4>)
 800509c:	fba2 2303 	umull	r2, r3, r2, r3
 80050a0:	0d5b      	lsrs	r3, r3, #21
 80050a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050b4:	d112      	bne.n	80050dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2200      	movs	r2, #0
 80050be:	2180      	movs	r1, #128	@ 0x80
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fee1 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d016      	beq.n	80050fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e00f      	b.n	80050fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	2b80      	cmp	r3, #128	@ 0x80
 80050f4:	d0f2      	beq.n	80050dc <SPI_EndRxTxTransaction+0x78>
 80050f6:	e000      	b.n	80050fa <SPI_EndRxTxTransaction+0x96>
        break;
 80050f8:	bf00      	nop
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000008 	.word	0x20000008
 8005108:	165e9f81 	.word	0x165e9f81

0800510c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e041      	b.n	80051a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc fa38 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 fa72 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e03c      	b.n	800523e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <HAL_TIM_Base_Start+0xa0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_TIM_Base_Start+0x5c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d013      	beq.n	8005208 <HAL_TIM_Base_Start+0x5c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <HAL_TIM_Base_Start+0xa4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIM_Base_Start+0x5c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <HAL_TIM_Base_Start+0xa8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIM_Base_Start+0x5c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <HAL_TIM_Base_Start+0xac>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_Base_Start+0x5c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a16      	ldr	r2, [pc, #88]	@ (800525c <HAL_TIM_Base_Start+0xb0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d111      	bne.n	800522c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d010      	beq.n	800523c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	e007      	b.n	800523c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40014000 	.word	0x40014000

08005260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0202 	mvn.w	r2, #2
 8005294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9a3 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f995 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f9a6 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d020      	beq.n	8005310 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0204 	mvn.w	r2, #4
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f97d 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f96f 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f980 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d020      	beq.n	800535c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01b      	beq.n	800535c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0208 	mvn.w	r2, #8
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2204      	movs	r2, #4
 8005332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f957 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f949 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f95a 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d020      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01b      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0210 	mvn.w	r2, #16
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2208      	movs	r2, #8
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f931 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f923 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f934 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00c      	beq.n	80053cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0201 	mvn.w	r2, #1
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f901 	bl	80055ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fac0 	bl	8005970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f905 	bl	800561e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0220 	mvn.w	r2, #32
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa92 	bl	800595c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIM_ConfigClockSource+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e0b4      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x186>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800547a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005494:	d03e      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0xd4>
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549a:	f200 8087 	bhi.w	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a2:	f000 8086 	beq.w	80055b2 <HAL_TIM_ConfigClockSource+0x172>
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054aa:	d87f      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b70      	cmp	r3, #112	@ 0x70
 80054ae:	d01a      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0xa6>
 80054b0:	2b70      	cmp	r3, #112	@ 0x70
 80054b2:	d87b      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b60      	cmp	r3, #96	@ 0x60
 80054b6:	d050      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x11a>
 80054b8:	2b60      	cmp	r3, #96	@ 0x60
 80054ba:	d877      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b50      	cmp	r3, #80	@ 0x50
 80054be:	d03c      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xfa>
 80054c0:	2b50      	cmp	r3, #80	@ 0x50
 80054c2:	d873      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d058      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x13a>
 80054c8:	2b40      	cmp	r3, #64	@ 0x40
 80054ca:	d86f      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b30      	cmp	r3, #48	@ 0x30
 80054ce:	d064      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054d0:	2b30      	cmp	r3, #48	@ 0x30
 80054d2:	d86b      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d060      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d867      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d05c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d05a      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054e4:	e062      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	f000 f9a3 	bl	8005840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
      break;
 8005512:	e04f      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005524:	f000 f98c 	bl	8005840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005536:	609a      	str	r2, [r3, #8]
      break;
 8005538:	e03c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005546:	461a      	mov	r2, r3
 8005548:	f000 f900 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2150      	movs	r1, #80	@ 0x50
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f959 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005558:	e02c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f91f 	bl	80057aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2160      	movs	r1, #96	@ 0x60
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f949 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005578:	e01c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f8e0 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2140      	movs	r1, #64	@ 0x40
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f939 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 8005598:	e00c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 f930 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055aa:	e003      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      break;
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3a      	ldr	r2, [pc, #232]	@ (8005730 <TIM_Base_SetConfig+0xfc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00f      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005652:	d00b      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a37      	ldr	r2, [pc, #220]	@ (8005734 <TIM_Base_SetConfig+0x100>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a36      	ldr	r2, [pc, #216]	@ (8005738 <TIM_Base_SetConfig+0x104>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_Base_SetConfig+0x38>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a35      	ldr	r2, [pc, #212]	@ (800573c <TIM_Base_SetConfig+0x108>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d108      	bne.n	800567e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2b      	ldr	r2, [pc, #172]	@ (8005730 <TIM_Base_SetConfig+0xfc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01b      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568c:	d017      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a28      	ldr	r2, [pc, #160]	@ (8005734 <TIM_Base_SetConfig+0x100>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a27      	ldr	r2, [pc, #156]	@ (8005738 <TIM_Base_SetConfig+0x104>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a26      	ldr	r2, [pc, #152]	@ (800573c <TIM_Base_SetConfig+0x108>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a25      	ldr	r2, [pc, #148]	@ (8005740 <TIM_Base_SetConfig+0x10c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a24      	ldr	r2, [pc, #144]	@ (8005744 <TIM_Base_SetConfig+0x110>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_Base_SetConfig+0x8a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a23      	ldr	r2, [pc, #140]	@ (8005748 <TIM_Base_SetConfig+0x114>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d108      	bne.n	80056d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005730 <TIM_Base_SetConfig+0xfc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d103      	bne.n	8005704 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b01      	cmp	r3, #1
 8005714:	d105      	bne.n	8005722 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f023 0201 	bic.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	611a      	str	r2, [r3, #16]
  }
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f023 0210 	bic.w	r2, r3, #16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e050      	b.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e4:	d013      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a18      	ldr	r2, [pc, #96]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a16      	ldr	r2, [pc, #88]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a13      	ldr	r2, [pc, #76]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40014000 	.word	0x40014000

0800595c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <memset>:
 8005984:	4402      	add	r2, r0
 8005986:	4603      	mov	r3, r0
 8005988:	4293      	cmp	r3, r2
 800598a:	d100      	bne.n	800598e <memset+0xa>
 800598c:	4770      	bx	lr
 800598e:	f803 1b01 	strb.w	r1, [r3], #1
 8005992:	e7f9      	b.n	8005988 <memset+0x4>

08005994 <__libc_init_array>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	4d0d      	ldr	r5, [pc, #52]	@ (80059cc <__libc_init_array+0x38>)
 8005998:	4c0d      	ldr	r4, [pc, #52]	@ (80059d0 <__libc_init_array+0x3c>)
 800599a:	1b64      	subs	r4, r4, r5
 800599c:	10a4      	asrs	r4, r4, #2
 800599e:	2600      	movs	r6, #0
 80059a0:	42a6      	cmp	r6, r4
 80059a2:	d109      	bne.n	80059b8 <__libc_init_array+0x24>
 80059a4:	4d0b      	ldr	r5, [pc, #44]	@ (80059d4 <__libc_init_array+0x40>)
 80059a6:	4c0c      	ldr	r4, [pc, #48]	@ (80059d8 <__libc_init_array+0x44>)
 80059a8:	f000 f818 	bl	80059dc <_init>
 80059ac:	1b64      	subs	r4, r4, r5
 80059ae:	10a4      	asrs	r4, r4, #2
 80059b0:	2600      	movs	r6, #0
 80059b2:	42a6      	cmp	r6, r4
 80059b4:	d105      	bne.n	80059c2 <__libc_init_array+0x2e>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059bc:	4798      	blx	r3
 80059be:	3601      	adds	r6, #1
 80059c0:	e7ee      	b.n	80059a0 <__libc_init_array+0xc>
 80059c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c6:	4798      	blx	r3
 80059c8:	3601      	adds	r6, #1
 80059ca:	e7f2      	b.n	80059b2 <__libc_init_array+0x1e>
 80059cc:	08055c7c 	.word	0x08055c7c
 80059d0:	08055c7c 	.word	0x08055c7c
 80059d4:	08055c7c 	.word	0x08055c7c
 80059d8:	08055c80 	.word	0x08055c80

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
