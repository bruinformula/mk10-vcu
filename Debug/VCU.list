
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050288  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080567e4  080567e4  00058014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080567e4  080567e4  000577e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080567ec  080567ec  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080567ec  080567ec  000577ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080567f0  080567f0  000577f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080567f4  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000014  08056808  00058014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08056808  000582fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013590  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7d  00000000  00000000  0006b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0006e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e76  00000000  00000000  0006f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001904a  00000000  00000000  0007034e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bef  00000000  00000000  00089398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e967  00000000  00000000  0009ef87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d8ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e40  00000000  00000000  0013d934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00142774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006544 	.word	0x08006544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08006544 	.word	0x08006544

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 8000506:	f001 f9ed 	bl	80018e4 <MCP2515_Reset>
  HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 fe78 	bl	8002200 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000530:	2300      	movs	r3, #0
 8000532:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000534:	2300      	movs	r3, #0
 8000536:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000544:	2308      	movs	r3, #8
 8000546:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000584:	2308      	movs	r3, #8
 8000586:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000590:	f001 f936 	bl	8001800 <MCP2515_Initialize>
 8000594:	4603      	mov	r3, r0
 8000596:	f083 0301 	eor.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <CANSPI_Initialize+0xa4>
  {
    return false;
 80005a0:	2300      	movs	r3, #0
 80005a2:	e05e      	b.n	8000662 <CANSPI_Initialize+0x162>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80005a4:	f001 f94e 	bl	8001844 <MCP2515_SetConfigMode>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <CANSPI_Initialize+0xb8>
  {
    return false;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e054      	b.n	8000662 <CANSPI_Initialize+0x162>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	461a      	mov	r2, r3
 80005bc:	2123      	movs	r1, #35	@ 0x23
 80005be:	2020      	movs	r0, #32
 80005c0:	f001 fa1c 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005c4:	463b      	mov	r3, r7
 80005c6:	461a      	mov	r2, r3
 80005c8:	2127      	movs	r1, #39	@ 0x27
 80005ca:	2024      	movs	r0, #36	@ 0x24
 80005cc:	f001 fa16 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	461a      	mov	r2, r3
 80005d6:	2103      	movs	r1, #3
 80005d8:	2000      	movs	r0, #0
 80005da:	f001 fa0f 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	461a      	mov	r2, r3
 80005e4:	2107      	movs	r1, #7
 80005e6:	2004      	movs	r0, #4
 80005e8:	f001 fa08 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	461a      	mov	r2, r3
 80005f2:	210b      	movs	r1, #11
 80005f4:	2008      	movs	r0, #8
 80005f6:	f001 fa01 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	461a      	mov	r2, r3
 8000600:	2113      	movs	r1, #19
 8000602:	2010      	movs	r0, #16
 8000604:	f001 f9fa 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	461a      	mov	r2, r3
 800060e:	2117      	movs	r1, #23
 8000610:	2014      	movs	r0, #20
 8000612:	f001 f9f3 	bl	80019fc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	461a      	mov	r2, r3
 800061c:	211b      	movs	r1, #27
 800061e:	2018      	movs	r0, #24
 8000620:	f001 f9ec 	bl	80019fc <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000624:	2104      	movs	r1, #4
 8000626:	2060      	movs	r0, #96	@ 0x60
 8000628:	f001 f9c0 	bl	80019ac <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800062c:	2101      	movs	r1, #1
 800062e:	2070      	movs	r0, #112	@ 0x70
 8000630:	f001 f9bc 	bl	80019ac <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000634:	2100      	movs	r1, #0
 8000636:	202a      	movs	r0, #42	@ 0x2a
 8000638:	f001 f9b8 	bl	80019ac <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xF0);
 800063c:	21f0      	movs	r1, #240	@ 0xf0
 800063e:	2029      	movs	r0, #41	@ 0x29
 8000640:	f001 f9b4 	bl	80019ac <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000644:	2183      	movs	r1, #131	@ 0x83
 8000646:	2028      	movs	r0, #40	@ 0x28
 8000648:	f001 f9b0 	bl	80019ac <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800064c:	f001 f928 	bl	80018a0 <MCP2515_SetNormalMode>
 8000650:	4603      	mov	r3, r0
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <CANSPI_Initialize+0x160>
    return false;
 800065c:	2300      	movs	r3, #0
 800065e:	e000      	b.n	8000662 <CANSPI_Initialize+0x162>
  
  return true;
 8000660:	2301      	movs	r3, #1
}
 8000662:	4618      	mov	r0, r3
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000678:	4b44      	ldr	r3, [pc, #272]	@ (800078c <CANSPI_Transmit+0x120>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800067e:	4b43      	ldr	r3, [pc, #268]	@ (800078c <CANSPI_Transmit+0x120>)
 8000680:	2200      	movs	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000684:	4b41      	ldr	r3, [pc, #260]	@ (800078c <CANSPI_Transmit+0x120>)
 8000686:	2200      	movs	r2, #0
 8000688:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800068a:	4b40      	ldr	r3, [pc, #256]	@ (800078c <CANSPI_Transmit+0x120>)
 800068c:	2200      	movs	r2, #0
 800068e:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000690:	f001 fa30 	bl	8001af4 <MCP2515_ReadStatus>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <CANSPI_Transmit+0x124>)
 800069a:	701a      	strb	r2, [r3, #0]
  uint8_t dingus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 800069c:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <CANSPI_Transmit+0x124>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	73bb      	strb	r3, [r7, #14]
  uint8_t dingus2 = MCP2515_ReadByte(MCP2515_CANCTRL);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f001 f936 	bl	8001914 <MCP2515_ReadByte>
 80006a8:	4603      	mov	r3, r0
 80006aa:	737b      	strb	r3, [r7, #13]
  uint8_t efl = MCP2515_ReadByte(MCP2515_EFLG);
 80006ac:	202d      	movs	r0, #45	@ 0x2d
 80006ae:	f001 f931 	bl	8001914 <MCP2515_ReadByte>
 80006b2:	4603      	mov	r3, r0
 80006b4:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f001 f92c 	bl	8001914 <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006c0:	2040      	movs	r0, #64	@ 0x40
 80006c2:	f001 f927 	bl	8001914 <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006ca:	2050      	movs	r0, #80	@ 0x50
 80006cc:	f001 f922 	bl	8001914 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000790 <CANSPI_Transmit+0x124>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d115      	bne.n	800070e <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6858      	ldr	r0, [r3, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4a28      	ldr	r2, [pc, #160]	@ (800078c <CANSPI_Transmit+0x120>)
 80006ec:	4619      	mov	r1, r3
 80006ee:	f000 f928 	bl	8000942 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7a1a      	ldrb	r2, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3309      	adds	r3, #9
 80006fa:	4924      	ldr	r1, [pc, #144]	@ (800078c <CANSPI_Transmit+0x120>)
 80006fc:	2040      	movs	r0, #64	@ 0x40
 80006fe:	f001 f9ab 	bl	8001a58 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000702:	2081      	movs	r0, #129	@ 0x81
 8000704:	f001 f9d8 	bl	8001ab8 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e038      	b.n	8000780 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <CANSPI_Transmit+0x124>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d115      	bne.n	8000748 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6858      	ldr	r0, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	@ (800078c <CANSPI_Transmit+0x120>)
 8000726:	4619      	mov	r1, r3
 8000728:	f000 f90b 	bl	8000942 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7a1a      	ldrb	r2, [r3, #8]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3309      	adds	r3, #9
 8000734:	4915      	ldr	r1, [pc, #84]	@ (800078c <CANSPI_Transmit+0x120>)
 8000736:	2042      	movs	r0, #66	@ 0x42
 8000738:	f001 f98e 	bl	8001a58 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 800073c:	2082      	movs	r0, #130	@ 0x82
 800073e:	f001 f9bb 	bl	8001ab8 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e01b      	b.n	8000780 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <CANSPI_Transmit+0x124>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d114      	bne.n	8000780 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6858      	ldr	r0, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <CANSPI_Transmit+0x120>)
 8000760:	4619      	mov	r1, r3
 8000762:	f000 f8ee 	bl	8000942 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7a1a      	ldrb	r2, [r3, #8]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3309      	adds	r3, #9
 800076e:	4907      	ldr	r1, [pc, #28]	@ (800078c <CANSPI_Transmit+0x120>)
 8000770:	2044      	movs	r0, #68	@ 0x44
 8000772:	f001 f971 	bl	8001a58 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000776:	2084      	movs	r0, #132	@ 0x84
 8000778:	f001 f99e 	bl	8001ab8 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000034 	.word	0x20000034
 8000790:	20000030 	.word	0x20000030

08000794 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80007a0:	f001 f9ca 	bl	8001b38 <MCP2515_GetRxStatus>
 80007a4:	4603      	mov	r3, r0
 80007a6:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80007a8:	7b3b      	ldrb	r3, [r7, #12]
 80007aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d066      	beq.n	8000882 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80007b4:	7b3b      	ldrb	r3, [r7, #12]
 80007b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b40      	cmp	r3, #64	@ 0x40
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80007d0:	bf0c      	ite	eq
 80007d2:	2301      	moveq	r3, #1
 80007d4:	2300      	movne	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d007      	beq.n	80007f0 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	220d      	movs	r2, #13
 80007e6:	4619      	mov	r1, r3
 80007e8:	2090      	movs	r0, #144	@ 0x90
 80007ea:	f001 f8b9 	bl	8001960 <MCP2515_ReadRxSequence>
 80007ee:	e00c      	b.n	800080a <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007f0:	7b3b      	ldrb	r3, [r7, #12]
 80007f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b80      	cmp	r3, #128	@ 0x80
 80007fa:	d106      	bne.n	800080a <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	220d      	movs	r2, #13
 8000802:	4619      	mov	r1, r3
 8000804:	2094      	movs	r0, #148	@ 0x94
 8000806:	f001 f8ab 	bl	8001960 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800080a:	7b3b      	ldrb	r3, [r7, #12]
 800080c:	f003 0318 	and.w	r3, r3, #24
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b10      	cmp	r3, #16
 8000814:	d10c      	bne.n	8000830 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2202      	movs	r2, #2
 800081a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800081c:	7cb8      	ldrb	r0, [r7, #18]
 800081e:	7cf9      	ldrb	r1, [r7, #19]
 8000820:	7c3a      	ldrb	r2, [r7, #16]
 8000822:	7c7b      	ldrb	r3, [r7, #17]
 8000824:	f000 f832 	bl	800088c <convertReg2ExtendedCANid>
 8000828:	4602      	mov	r2, r0
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	e00b      	b.n	8000848 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000836:	7c3b      	ldrb	r3, [r7, #16]
 8000838:	7c7a      	ldrb	r2, [r7, #17]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f863 	bl	8000908 <convertReg2StandardCANid>
 8000842:	4602      	mov	r2, r0
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000848:	7d3a      	ldrb	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800084e:	7d7a      	ldrb	r2, [r7, #21]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000854:	7dba      	ldrb	r2, [r7, #22]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800085a:	7dfa      	ldrb	r2, [r7, #23]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000860:	7e3a      	ldrb	r2, [r7, #24]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000866:	7e7a      	ldrb	r2, [r7, #25]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800086c:	7eba      	ldrb	r2, [r7, #26]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000872:	7efa      	ldrb	r2, [r7, #27]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000878:	7f3a      	ldrb	r2, [r7, #28]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000882:	7ffb      	ldrb	r3, [r7, #31]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800088c:	b490      	push	{r4, r7}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4604      	mov	r4, r0
 8000894:	4608      	mov	r0, r1
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	4623      	mov	r3, r4
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4603      	mov	r3, r0
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	460b      	mov	r3, r1
 80008a4:	717b      	strb	r3, [r7, #5]
 80008a6:	4613      	mov	r3, r2
 80008a8:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008b2:	793b      	ldrb	r3, [r7, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008ba:	793b      	ldrb	r3, [r7, #4]
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4413      	add	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4413      	add	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4413      	add	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4413      	add	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008fc:	697b      	ldr	r3, [r7, #20]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bc90      	pop	{r4, r7}
 8000906:	4770      	bx	lr

08000908 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	095b      	lsrs	r3, r3, #5
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000942:	b480      	push	{r7}
 8000944:	b087      	sub	sp, #28
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	460b      	mov	r3, r1
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d12e      	bne.n	80009b8 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f023 031f 	bic.w	r3, r3, #31
 800098e:	b2da      	uxtb	r2, r3
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	4413      	add	r3, r2
 8000994:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	3308      	adds	r3, #8
 800099a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	f023 0314 	bic.w	r3, r3, #20
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80009b6:	e013      	b.n	80009e0 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	701a      	strb	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <updateRpm>:
// WAV chunk-based playback
//----------------------------------------------------
static void StartNextChunk(void);
void PlayStartupSoundOnce(void);

void updateRpm() {
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data0
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <updateRpm+0x30>)
 80009f2:	7a5b      	ldrb	r3, [r3, #9]
 80009f4:	461a      	mov	r2, r3
			| (rxMessage.frame.data1 << 8));
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <updateRpm+0x30>)
 80009f8:	7a9b      	ldrb	r3, [r3, #10]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	4313      	orrs	r3, r2
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data0
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a0a:	ee17 2a90 	vmov	r2, s15
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <updateRpm+0x34>)
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000284 	.word	0x20000284
 8000a20:	200002e4 	.word	0x200002e4

08000a24 <readFromCAN>:

void readFromCAN() {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <readFromCAN+0x18>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <readFromCAN+0x12>
		updateRpm();
 8000a32:	f7ff ffdb 	bl	80009ec <updateRpm>
	}
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000284 	.word	0x20000284

08000a40 <updateBMSDiagnostics>:

void updateBMSDiagnostics(void) {
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// do nothing for now
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <readAPPSandBSE>:

void readAPPSandBSE(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	// Start ADC DMA read
	HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <readAPPSandBSE+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4917      	ldr	r1, [pc, #92]	@ (8000ab8 <readAPPSandBSE+0x68>)
 8000a5c:	4817      	ldr	r0, [pc, #92]	@ (8000abc <readAPPSandBSE+0x6c>)
 8000a5e:	f001 fc37 	bl	80022d0 <HAL_ADC_Start_DMA>
	if (HAL_GetTick() - millis_since_dma_read > DMA_READ_TIMEOUT) {
 8000a62:	f001 fbc1 	bl	80021e8 <HAL_GetTick>
 8000a66:	4602      	mov	r2, r0
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <readAPPSandBSE+0x70>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	220a      	movs	r2, #10
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d91c      	bls.n	8000aae <readAPPSandBSE+0x5e>
		apps1Value = ADC_Reads[APPS1_RANK];
 8000a74:	2300      	movs	r3, #0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <readAPPSandBSE+0x68>)
 8000a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <readAPPSandBSE+0x74>)
 8000a82:	801a      	strh	r2, [r3, #0]
		apps2Value = ADC_Reads[APPS2_RANK];
 8000a84:	2301      	movs	r3, #1
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <readAPPSandBSE+0x68>)
 8000a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <readAPPSandBSE+0x78>)
 8000a92:	801a      	strh	r2, [r3, #0]
		bseValue = ADC_Reads[BSE_RANK];
 8000a94:	2302      	movs	r3, #2
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <readAPPSandBSE+0x68>)
 8000a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <readAPPSandBSE+0x7c>)
 8000aa2:	801a      	strh	r2, [r3, #0]
		millis_since_dma_read = HAL_GetTick();
 8000aa4:	f001 fba0 	bl	80021e8 <HAL_GetTick>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <readAPPSandBSE+0x70>)
 8000aac:	6013      	str	r3, [r2, #0]
	}
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000004 	.word	0x20000004
 8000ab8:	200002b4 	.word	0x200002b4
 8000abc:	20000038 	.word	0x20000038
 8000ac0:	200002b0 	.word	0x200002b0
 8000ac4:	20000298 	.word	0x20000298
 8000ac8:	2000029a 	.word	0x2000029a
 8000acc:	2000029c 	.word	0x2000029c

08000ad0 <calculateTorqueRequest>:

void calculateTorqueRequest(void) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b095      	sub	sp, #84	@ 0x54
 8000ad4:	af00      	add	r7, sp, #0

	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000ad6:	4ba7      	ldr	r3, [pc, #668]	@ (8000d74 <calculateTorqueRequest+0x2a4>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aec:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL);
 8000af0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000af4:	461a      	mov	r2, r3
 8000af6:	230a      	movs	r3, #10
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	ee07 3a90 	vmov	s15, r3
 8000afe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b06:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000b0a:	4b9b      	ldr	r3, [pc, #620]	@ (8000d78 <calculateTorqueRequest+0x2a8>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	ee07 3a90 	vmov	s15, r3
 8000b12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b16:	230a      	movs	r3, #10
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b20:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL);
 8000b24:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000b28:	461a      	mov	r2, r3
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	ee07 3a90 	vmov	s15, r3
 8000b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float appsValue = ((float) apps1_as_percent + apps2_as_percent) / 2;
 8000b3e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000b42:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b4a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b52:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	if (appsValue > 0) {
 8000b56:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000b5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	f340 80d5 	ble.w	8000d10 <calculateTorqueRequest+0x240>
		int numPedalSteps = 10;
 8000b66:	230a      	movs	r3, #10
 8000b68:	637b      	str	r3, [r7, #52]	@ 0x34
		int numRpmSteps = 10;
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30

		float pedalStepSize = 100 / (numPedalSteps - 1);
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b70:	3b01      	subs	r3, #1
 8000b72:	2264      	movs	r2, #100	@ 0x64
 8000b74:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b80:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float rpmStepSize = MAX_RPM / (numRpmSteps - 1);
 8000b84:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8000d7c <calculateTorqueRequest+0x2ac>
 8000b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b98:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		int pedalLowIndx = (int) (appsValue / pedalStepSize);
 8000b9c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8000ba0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bac:	ee17 3a90 	vmov	r3, s15
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
		int pedalHighIndx = pedalLowIndx + 1;
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (pedalHighIndx >= numPedalSteps)
 8000bb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	db02      	blt.n	8000bc6 <calculateTorqueRequest+0xf6>
			pedalHighIndx = numPedalSteps - 1;
 8000bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		int rpmLowIndx = (int) (inverter_diagnostics.motorRpm / rpmStepSize);
 8000bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d80 <calculateTorqueRequest+0x2b0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bde:	ee17 3a90 	vmov	r3, s15
 8000be2:	623b      	str	r3, [r7, #32]
		int rpmHighIndx = rpmLowIndx + 1;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	3301      	adds	r3, #1
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (rpmHighIndx >= numRpmSteps)
 8000bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	db02      	blt.n	8000bf8 <calculateTorqueRequest+0x128>
			rpmHighIndx = numRpmSteps - 1;
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

		float T00 = TORQUE_ARRAY[pedalLowIndx][rpmLowIndx];  // Lower-left
 8000bf8:	4962      	ldr	r1, [pc, #392]	@ (8000d84 <calculateTorqueRequest+0x2b4>)
 8000bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	6a3a      	ldr	r2, [r7, #32]
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	61fb      	str	r3, [r7, #28]
		float T10 = TORQUE_ARRAY[pedalHighIndx][rpmLowIndx]; // Upper-left
 8000c10:	495c      	ldr	r1, [pc, #368]	@ (8000d84 <calculateTorqueRequest+0x2b4>)
 8000c12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	6a3a      	ldr	r2, [r7, #32]
 8000c1e:	4413      	add	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	440b      	add	r3, r1
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	61bb      	str	r3, [r7, #24]
		float T01 = TORQUE_ARRAY[pedalLowIndx][rpmHighIndx]; // Lower-right
 8000c28:	4956      	ldr	r1, [pc, #344]	@ (8000d84 <calculateTorqueRequest+0x2b4>)
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]
		float T11 = TORQUE_ARRAY[pedalHighIndx][rpmHighIndx]; // Upper-right
 8000c40:	4950      	ldr	r1, [pc, #320]	@ (8000d84 <calculateTorqueRequest+0x2b4>)
 8000c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	613b      	str	r3, [r7, #16]

		// Compute interpolation weights
		float pedalLerp = (appsValue - (pedalLowIndx * pedalStepSize))
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c72:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7a:	edc7 7a03 	vstr	s15, [r7, #12]
				/ pedalStepSize;
		float rpmLerp = (inverter_diagnostics.motorRpm
 8000c7e:	4b40      	ldr	r3, [pc, #256]	@ (8000d80 <calculateTorqueRequest+0x2b0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
				- (rpmLowIndx * rpmStepSize)) / rpmStepSize;
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c94:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c9c:	ee77 6a67 	vsub.f32	s13, s14, s15
		float rpmLerp = (inverter_diagnostics.motorRpm
 8000ca0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca8:	edc7 7a02 	vstr	s15, [r7, #8]

		float torqueLow = T00 + (T01 - T00) * rpmLerp;
 8000cac:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc8:	edc7 7a01 	vstr	s15, [r7, #4]
		float torqueHigh = T10 + (T11 - T10) * rpmLerp;
 8000ccc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a00 	vstr	s15, [r7]

		requestedTorque = torqueLow + (torqueHigh - torqueLow) * pedalLerp;
 8000cec:	ed97 7a00 	vldr	s14, [r7]
 8000cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <calculateTorqueRequest+0x2b8>)
 8000d0a:	edc3 7a00 	vstr	s15, [r3]
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
				/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL);
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
				* bse_as_percent + REGEN_BASELINE_TORQUE;
	}
}
 8000d0e:	e02a      	b.n	8000d66 <calculateTorqueRequest+0x296>
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000d10:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <calculateTorqueRequest+0x2bc>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d26:	ee77 6a67 	vsub.f32	s13, s14, s15
				/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL);
 8000d2a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2300      	movs	r3, #0
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	ee07 3a90 	vmov	s15, r3
 8000d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d40:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000d44:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000d48:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000d90 <calculateTorqueRequest+0x2c0>
 8000d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
				* bse_as_percent + REGEN_BASELINE_TORQUE;
 8000d50:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d58:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000d90 <calculateTorqueRequest+0x2c0>
 8000d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <calculateTorqueRequest+0x2b8>)
 8000d62:	edc3 7a00 	vstr	s15, [r3]
}
 8000d66:	bf00      	nop
 8000d68:	3754      	adds	r7, #84	@ 0x54
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000298 	.word	0x20000298
 8000d78:	2000029a 	.word	0x2000029a
 8000d7c:	463b8000 	.word	0x463b8000
 8000d80:	200002e4 	.word	0x200002e4
 8000d84:	0800655c 	.word	0x0800655c
 8000d88:	200002a0 	.word	0x200002a0
 8000d8c:	2000029c 	.word	0x2000029c
 8000d90:	00000000 	.word	0x00000000

08000d94 <checkAPPSPlausibility>:

void checkAPPSPlausibility(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000d98:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <checkAPPSPlausibility+0xf0>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000da4:	230a      	movs	r3, #10
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dae:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000db2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000db6:	461a      	mov	r2, r3
 8000db8:	230a      	movs	r3, #10
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000e88 <checkAPPSPlausibility+0xf4>
 8000dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <checkAPPSPlausibility+0xf8>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e90 <checkAPPSPlausibility+0xfc>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000de2:	230a      	movs	r3, #10
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dec:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000df0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000df4:	461a      	mov	r2, r3
 8000df6:	230a      	movs	r3, #10
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e06:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000e88 <checkAPPSPlausibility+0xf4>
 8000e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <checkAPPSPlausibility+0x100>)
 8000e10:	edc3 7a00 	vstr	s15, [r3]

	// use fabsf() for float
	if (fabsf(apps1_as_percent - apps2_as_percent)
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <checkAPPSPlausibility+0xf8>)
 8000e16:	ed93 7a00 	vldr	s14, [r3]
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <checkAPPSPlausibility+0x100>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e24:	eeb0 7ae7 	vabs.f32	s14, s15
			> APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000e28:	230a      	movs	r3, #10
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (fabsf(apps1_as_percent - apps2_as_percent)
 8000e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	dd0c      	ble.n	8000e56 <checkAPPSPlausibility+0xc2>
		millis_since_apps_implausible = HAL_GetTick();
 8000e3c:	f001 f9d4 	bl	80021e8 <HAL_GetTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <checkAPPSPlausibility+0x104>)
 8000e44:	6013      	str	r3, [r2, #0]
		apps_plausible = 0; // false
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <checkAPPSPlausibility+0x108>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <checkAPPSPlausibility+0x10c>)
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
					< APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
		requestedTorque = 0;
	} else {
		apps_plausible = 1; // true
	}
}
 8000e54:	e014      	b.n	8000e80 <checkAPPSPlausibility+0xec>
	} else if (!apps_plausible
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <checkAPPSPlausibility+0x108>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10d      	bne.n	8000e7a <checkAPPSPlausibility+0xe6>
			&& (HAL_GetTick() - millis_since_apps_implausible
 8000e5e:	f001 f9c3 	bl	80021e8 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <checkAPPSPlausibility+0x104>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	1ad3      	subs	r3, r2, r3
					< APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000e6a:	2264      	movs	r2, #100	@ 0x64
			&& (HAL_GetTick() - millis_since_apps_implausible
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d204      	bcs.n	8000e7a <checkAPPSPlausibility+0xe6>
		requestedTorque = 0;
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <checkAPPSPlausibility+0x10c>)
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	e002      	b.n	8000e80 <checkAPPSPlausibility+0xec>
		apps_plausible = 1; // true
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <checkAPPSPlausibility+0x108>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	801a      	strh	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000298 	.word	0x20000298
 8000e88:	42c80000 	.word	0x42c80000
 8000e8c:	200002c0 	.word	0x200002c0
 8000e90:	2000029a 	.word	0x2000029a
 8000e94:	200002c4 	.word	0x200002c4
 8000e98:	200002ac 	.word	0x200002ac
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	200002a0 	.word	0x200002a0

08000ea4 <checkCrossCheck>:

void checkCrossCheck(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe8 <checkCrossCheck+0x144>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec0:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000ec4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000fec <checkCrossCheck+0x148>
 8000ede:	ee67 7a87 	vmul.f32	s15, s15, s14
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000ee2:	4b43      	ldr	r3, [pc, #268]	@ (8000ff0 <checkCrossCheck+0x14c>)
 8000ee4:	edc3 7a00 	vstr	s15, [r3]

	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000ee8:	4b42      	ldr	r3, [pc, #264]	@ (8000ff4 <checkCrossCheck+0x150>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efe:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000f02:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f06:	461a      	mov	r2, r3
 8000f08:	230a      	movs	r3, #10
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000f18:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000fec <checkCrossCheck+0x148>
 8000f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f20:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000f24:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <checkCrossCheck+0x154>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f30:	230a      	movs	r3, #10
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000f3e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f42:	461a      	mov	r2, r3
 8000f44:	230a      	movs	r3, #10
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000f54:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000fec <checkCrossCheck+0x148>
 8000f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5c:	edc7 7a02 	vstr	s15, [r7, #8]
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000f60:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f74:	edc7 7a01 	vstr	s15, [r7, #4]

	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8000f78:	2319      	movs	r3, #25
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f82:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	dd0c      	ble.n	8000faa <checkCrossCheck+0x106>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <checkCrossCheck+0x144>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	2264      	movs	r2, #100	@ 0x64
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d907      	bls.n	8000faa <checkCrossCheck+0x106>
		cross_check_plausible = 0;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <checkCrossCheck+0x158>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <checkCrossCheck+0x15c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e018      	b.n	8000fdc <checkCrossCheck+0x138>
	} else if (!cross_check_plausible
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <checkCrossCheck+0x158>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d110      	bne.n	8000fd4 <checkCrossCheck+0x130>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	dd04      	ble.n	8000fd4 <checkCrossCheck+0x130>
		requestedTorque = 0;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <checkCrossCheck+0x15c>)
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e003      	b.n	8000fdc <checkCrossCheck+0x138>
	} else {
		cross_check_plausible = 1;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <checkCrossCheck+0x158>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	801a      	strh	r2, [r3, #0]
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	2000029c 	.word	0x2000029c
 8000fec:	42c80000 	.word	0x42c80000
 8000ff0:	200002c8 	.word	0x200002c8
 8000ff4:	20000298 	.word	0x20000298
 8000ff8:	2000029a 	.word	0x2000029a
 8000ffc:	20000002 	.word	0x20000002
 8001000:	200002a0 	.word	0x200002a0

08001004 <sendTorqueCommand>:

void sendTorqueCommand(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <sendTorqueCommand+0x78>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101c:	ee17 3a90 	vmov	r3, s15
 8001020:	607b      	str	r3, [r7, #4]

	// Break the torqueValue into two bytes (little-endian)
	char msg0 = torqueValue & 0xFF;  // Low byte
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	70fb      	strb	r3, [r7, #3]
	char msg1 = (torqueValue >> 8) & 0xFF;  // High byte
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	121b      	asrs	r3, r3, #8
 800102a:	70bb      	strb	r3, [r7, #2]

	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <sendTorqueCommand+0x7c>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
	txMessage.frame.id = 0x0C0;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	605a      	str	r2, [r3, #4]
	txMessage.frame.dlc = 8;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <sendTorqueCommand+0x7c>)
 800103a:	2208      	movs	r2, #8
 800103c:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0 = msg0;
 800103e:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	7253      	strb	r3, [r2, #9]
	txMessage.frame.data1 = msg1;
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	7293      	strb	r3, [r2, #10]
	txMessage.frame.data2 = 0;
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <sendTorqueCommand+0x7c>)
 800104c:	2200      	movs	r2, #0
 800104e:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001052:	2200      	movs	r2, #0
 8001054:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 0;
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001058:	2200      	movs	r2, #0
 800105a:	735a      	strb	r2, [r3, #13]
	txMessage.frame.data5 = 0;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <sendTorqueCommand+0x7c>)
 800105e:	2200      	movs	r2, #0
 8001060:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = 0;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001064:	2200      	movs	r2, #0
 8001066:	73da      	strb	r2, [r3, #15]
	txMessage.frame.data7 = 0;
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <sendTorqueCommand+0x7c>)
 800106a:	2200      	movs	r2, #0
 800106c:	741a      	strb	r2, [r3, #16]
	CANSPI_Transmit(&txMessage);
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <sendTorqueCommand+0x7c>)
 8001070:	f7ff fafc 	bl	800066c <CANSPI_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200002a0 	.word	0x200002a0
 8001080:	20000270 	.word	0x20000270

08001084 <checkReadyToDrive>:

void checkReadyToDrive(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5); // example
 800108a:	2120      	movs	r1, #32
 800108c:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <checkReadyToDrive+0x30>)
 800108e:	f002 fad3 	bl	8003638 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <checkReadyToDrive+0x28>
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <checkReadyToDrive+0x34>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2264      	movs	r2, #100	@ 0x64
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d902      	bls.n	80010ac <checkReadyToDrive+0x28>
		readyToDrive = 1;
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <checkReadyToDrive+0x38>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000
 80010b8:	2000029c 	.word	0x2000029c
 80010bc:	200002cc 	.word	0x200002cc

080010c0 <HAL_I2S_TxCpltCallback>:
// I2S chunk-based WAV Playback Methods
//-----------------------------------------------
/**
 * @brief Called by HAL when a DMA transmission completes (for one chunk).
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2 && !waveFinished) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_I2S_TxCpltCallback+0x3c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10f      	bne.n	80010f2 <HAL_I2S_TxCpltCallback+0x32>
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_I2S_TxCpltCallback+0x40>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10b      	bne.n	80010f2 <HAL_I2S_TxCpltCallback+0x32>
		// finished one chunk
		if (wavPos < halfwordCount) {
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_I2S_TxCpltCallback+0x44>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_I2S_TxCpltCallback+0x48>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d202      	bcs.n	80010ec <HAL_I2S_TxCpltCallback+0x2c>
			StartNextChunk();
 80010e6:	f000 f811 	bl	800110c <StartNextChunk>
		} else {
			// entire wave is done
			waveFinished = 1;
		}
	}
}
 80010ea:	e002      	b.n	80010f2 <HAL_I2S_TxCpltCallback+0x32>
			waveFinished = 1;
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <HAL_I2S_TxCpltCallback+0x40>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40003800 	.word	0x40003800
 8001100:	200002f4 	.word	0x200002f4
 8001104:	200002e8 	.word	0x200002e8
 8001108:	200002f0 	.word	0x200002f0

0800110c <StartNextChunk>:

/**
 * @brief Start the next chunk of PCM in Normal DMA mode
 */
static void StartNextChunk(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
	// how many halfwords remain
	uint32_t remain = halfwordCount - wavPos;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <StartNextChunk+0x58>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <StartNextChunk+0x5c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	60fb      	str	r3, [r7, #12]
	// pick chunk
	uint16_t thisChunk =
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001124:	4293      	cmp	r3, r2
 8001126:	d802      	bhi.n	800112e <StartNextChunk+0x22>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	b29b      	uxth	r3, r3
 800112c:	e001      	b.n	8001132 <StartNextChunk+0x26>
 800112e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001132:	817b      	strh	r3, [r7, #10]
			(remain > CHUNK_SIZE_HALFWORDS) ?
					CHUNK_SIZE_HALFWORDS : (uint16_t) remain;

	const uint16_t *chunkPtr = wavePCM + wavPos;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <StartNextChunk+0x60>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <StartNextChunk+0x5c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	607b      	str	r3, [r7, #4]
	wavPos += thisChunk;
 8001142:	897a      	ldrh	r2, [r7, #10]
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <StartNextChunk+0x5c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4413      	add	r3, r2
 800114a:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <StartNextChunk+0x5c>)
 800114c:	6013      	str	r3, [r2, #0]

	// Fire the DMA
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 800114e:	897b      	ldrh	r3, [r7, #10]
 8001150:	461a      	mov	r2, r3
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4806      	ldr	r0, [pc, #24]	@ (8001170 <StartNextChunk+0x64>)
 8001156:	f002 fbe1 	bl	800391c <HAL_I2S_Transmit_DMA>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002f0 	.word	0x200002f0
 8001168:	200002e8 	.word	0x200002e8
 800116c:	200002ec 	.word	0x200002ec
 8001170:	200000e0 	.word	0x200000e0

08001174 <PlayStartupSoundOnce>:

/**
 * @brief Public function to play the wave from beginning exactly once
 */
void PlayStartupSoundOnce(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <PlayStartupSoundOnce+0x28>)
 800117a:	4a09      	ldr	r2, [pc, #36]	@ (80011a0 <PlayStartupSoundOnce+0x2c>)
 800117c:	601a      	str	r2, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <PlayStartupSoundOnce+0x30>)
 8001180:	3b2c      	subs	r3, #44	@ 0x2c
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <PlayStartupSoundOnce+0x34>)
 8001186:	6013      	str	r3, [r2, #0]
	wavPos = 0;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <PlayStartupSoundOnce+0x38>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <PlayStartupSoundOnce+0x3c>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

	// Start the first chunk
	StartNextChunk();
 8001194:	f7ff ffba 	bl	800110c <StartNextChunk>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200002ec 	.word	0x200002ec
 80011a0:	08006718 	.word	0x08006718
 80011a4:	000500d8 	.word	0x000500d8
 80011a8:	200002f0 	.word	0x200002f0
 80011ac:	200002e8 	.word	0x200002e8
 80011b0:	200002f4 	.word	0x200002f4

080011b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011b8:	f000 ffb0 	bl	800211c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011bc:	f000 f856 	bl	800126c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011c0:	f000 fa40 	bl	8001644 <MX_GPIO_Init>
	MX_DMA_Init();
 80011c4:	f000 fa08 	bl	80015d8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80011c8:	f000 f9dc 	bl	8001584 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80011cc:	f000 f8b8 	bl	8001340 <MX_ADC1_Init>
	MX_TIM3_Init();
 80011d0:	f000 f98a 	bl	80014e8 <MX_TIM3_Init>
	MX_SPI3_Init();
 80011d4:	f000 f952 	bl	800147c <MX_SPI3_Init>
	MX_I2S2_Init();
 80011d8:	f000 f922 	bl	8001420 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	// Start TIM3
	HAL_TIM_Base_Start(&htim3);
 80011dc:	481b      	ldr	r0, [pc, #108]	@ (800124c <main+0x98>)
 80011de:	f004 fc0b 	bl	80059f8 <HAL_TIM_Base_Start>

	/* initalized to be 500kbps, see canspi.c line 131-133 for details */
	if (CANSPI_Initialize() != true) {
 80011e2:	f7ff f98d 	bl	8000500 <CANSPI_Initialize>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f083 0301 	eor.w	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <main+0x42>
		Error_Handler();
 80011f2:	f000 faff 	bl	80017f4 <Error_Handler>
	}

	bms_diagnostics.inverterActive = 0;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <main+0x9c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
	inverter_diagnostics.motorRpm = 0;
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <main+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
	PlayStartupSoundOnce();
 8001202:	f7ff ffb7 	bl	8001174 <PlayStartupSoundOnce>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (CANSPI_Receive(&rxMessage)) {
 8001206:	4814      	ldr	r0, [pc, #80]	@ (8001258 <main+0xa4>)
 8001208:	f7ff fac4 	bl	8000794 <CANSPI_Receive>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <main+0x62>
			readFromCAN();
 8001212:	f7ff fc07 	bl	8000a24 <readFromCAN>
		}

		readAPPSandBSE();
 8001216:	f7ff fc1b 	bl	8000a50 <readAPPSandBSE>
		calculateTorqueRequest();
 800121a:	f7ff fc59 	bl	8000ad0 <calculateTorqueRequest>
		checkAPPSPlausibility();
 800121e:	f7ff fdb9 	bl	8000d94 <checkAPPSPlausibility>
		checkCrossCheck();
 8001222:	f7ff fe3f 	bl	8000ea4 <checkCrossCheck>
		checkReadyToDrive();
 8001226:	f7ff ff2d 	bl	8001084 <checkReadyToDrive>
		updateBMSDiagnostics();
 800122a:	f7ff fc09 	bl	8000a40 <updateBMSDiagnostics>

		finalTorqueRequest = requestedTorque;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <main+0xa8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <main+0xac>)
 8001234:	6013      	str	r3, [r2, #0]
		lastRequestedTorque = requestedTorque;
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <main+0xa8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <main+0xb0>)
 800123c:	6013      	str	r3, [r2, #0]

		if (readyToDrive) {
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <main+0xb4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0df      	beq.n	8001206 <main+0x52>
			sendTorqueCommand();
 8001246:	f7ff fedd 	bl	8001004 <sendTorqueCommand>
		if (CANSPI_Receive(&rxMessage)) {
 800124a:	e7dc      	b.n	8001206 <main+0x52>
 800124c:	200001e0 	.word	0x200001e0
 8001250:	200002d0 	.word	0x200002d0
 8001254:	200002e4 	.word	0x200002e4
 8001258:	20000284 	.word	0x20000284
 800125c:	200002a0 	.word	0x200002a0
 8001260:	200002a8 	.word	0x200002a8
 8001264:	200002a4 	.word	0x200002a4
 8001268:	200002cc 	.word	0x200002cc

0800126c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	@ 0x50
 8001270:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2230      	movs	r2, #48	@ 0x30
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f005 f936 	bl	80064ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <SystemClock_Config+0xcc>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	4a27      	ldr	r2, [pc, #156]	@ (8001338 <SystemClock_Config+0xcc>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a0:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <SystemClock_Config+0xcc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <SystemClock_Config+0xd0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012b8:	4a20      	ldr	r2, [pc, #128]	@ (800133c <SystemClock_Config+0xd0>)
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80012e4:	2354      	movs	r3, #84	@ 0x54
 80012e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ec:	2307      	movs	r3, #7
 80012ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 ff69 	bl	80041cc <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x98>
		Error_Handler();
 8001300:	f000 fa78 	bl	80017f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001314:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2102      	movs	r1, #2
 8001320:	4618      	mov	r0, r3
 8001322:	f003 f9cb 	bl	80046bc <HAL_RCC_ClockConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xc4>
		Error_Handler();
 800132c:	f000 fa62 	bl	80017f4 <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	@ 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001352:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001354:	4a31      	ldr	r2, [pc, #196]	@ (800141c <MX_ADC1_Init+0xdc>)
 8001356:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001358:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <MX_ADC1_Init+0xd8>)
 800135a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800135e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001366:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001368:	2201      	movs	r2, #1
 800136a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <MX_ADC1_Init+0xd8>)
 800136e:	2200      	movs	r2, #0
 8001370:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <MX_ADC1_Init+0xd8>)
 800137c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001380:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001384:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <MX_ADC1_Init+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001392:	2203      	movs	r2, #3
 8001394:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <MX_ADC1_Init+0xd8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013a4:	481c      	ldr	r0, [pc, #112]	@ (8001418 <MX_ADC1_Init+0xd8>)
 80013a6:	f000 ff4f 	bl	8002248 <HAL_ADC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x74>
		Error_Handler();
 80013b0:	f000 fa20 	bl	80017f4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80013bc:	2304      	movs	r3, #4
 80013be:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4814      	ldr	r0, [pc, #80]	@ (8001418 <MX_ADC1_Init+0xd8>)
 80013c6:	f001 f891 	bl	80024ec <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x94>
		Error_Handler();
 80013d0:	f000 fa10 	bl	80017f4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80013d8:	2303      	movs	r3, #3
 80013da:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	480d      	ldr	r0, [pc, #52]	@ (8001418 <MX_ADC1_Init+0xd8>)
 80013e2:	f001 f883 	bl	80024ec <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0xb0>
		Error_Handler();
 80013ec:	f000 fa02 	bl	80017f4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_ADC1_Init+0xd8>)
 8001402:	f001 f873 	bl	80024ec <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0xd0>
		Error_Handler();
 800140c:	f000 f9f2 	bl	80017f4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000038 	.word	0x20000038
 800141c:	40012000 	.word	0x40012000

08001420 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <MX_I2S2_Init+0x54>)
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <MX_I2S2_Init+0x58>)
 8001428:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_I2S2_Init+0x54>)
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001430:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_I2S2_Init+0x54>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_I2S2_Init+0x54>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <MX_I2S2_Init+0x54>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <MX_I2S2_Init+0x54>)
 8001446:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800144a:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_I2S2_Init+0x54>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <MX_I2S2_Init+0x54>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_I2S2_Init+0x54>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_I2S2_Init+0x54>)
 8001460:	f002 f91c 	bl	800369c <HAL_I2S_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2S2_Init+0x4e>
		Error_Handler();
 800146a:	f000 f9c3 	bl	80017f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000e0 	.word	0x200000e0
 8001478:	40003800 	.word	0x40003800

0800147c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_SPI3_Init+0x64>)
 8001482:	4a18      	ldr	r2, [pc, #96]	@ (80014e4 <MX_SPI3_Init+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_SPI3_Init+0x64>)
 8001488:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800148c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <MX_SPI3_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_SPI3_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_SPI3_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ac:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014b0:	2210      	movs	r2, #16
 80014b2:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 10;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014c8:	220a      	movs	r2, #10
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_SPI3_Init+0x64>)
 80014ce:	f003 fc63 	bl	8004d98 <HAL_SPI_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_SPI3_Init+0x60>
		Error_Handler();
 80014d8:	f000 f98c 	bl	80017f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000188 	.word	0x20000188
 80014e4:	40003c00 	.word	0x40003c00

080014e8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_TIM3_Init+0x94>)
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <MX_TIM3_Init+0x98>)
 8001508:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 4;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_TIM3_Init+0x94>)
 800150c:	2204      	movs	r2, #4
 800150e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_TIM3_Init+0x94>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 5000;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_TIM3_Init+0x94>)
 8001518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_TIM3_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_TIM3_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800152a:	4814      	ldr	r0, [pc, #80]	@ (800157c <MX_TIM3_Init+0x94>)
 800152c:	f004 fa14 	bl	8005958 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x52>
		Error_Handler();
 8001536:	f000 f95d 	bl	80017f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_TIM3_Init+0x94>)
 8001548:	f004 fab0 	bl	8005aac <HAL_TIM_ConfigClockSource>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001552:	f000 f94f 	bl	80017f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001556:	2320      	movs	r3, #32
 8001558:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_TIM3_Init+0x94>)
 8001564:	f004 fc90 	bl	8005e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800156e:	f000 f941 	bl	80017f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001e0 	.word	0x200001e0
 8001580:	40000400 	.word	0x40000400

08001584 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_USART2_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015bc:	f004 fcd2 	bl	8005f64 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80015c6:	f000 f915 	bl	80017f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000228 	.word	0x20000228
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_DMA_Init+0x68>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a16      	ldr	r2, [pc, #88]	@ (8001640 <MX_DMA_Init+0x68>)
 80015e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <MX_DMA_Init+0x68>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_DMA_Init+0x68>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <MX_DMA_Init+0x68>)
 8001604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <MX_DMA_Init+0x68>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200f      	movs	r0, #15
 800161c:	f001 fae1 	bl	8002be2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001620:	200f      	movs	r0, #15
 8001622:	f001 fafa 	bl	8002c1a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2038      	movs	r0, #56	@ 0x38
 800162c:	f001 fad9 	bl	8002be2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001630:	2038      	movs	r0, #56	@ 0x38
 8001632:	f001 faf2 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b61      	ldr	r3, [pc, #388]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a60      	ldr	r2, [pc, #384]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b5e      	ldr	r3, [pc, #376]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a59      	ldr	r2, [pc, #356]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b53      	ldr	r3, [pc, #332]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a52      	ldr	r2, [pc, #328]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b50      	ldr	r3, [pc, #320]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b4c      	ldr	r3, [pc, #304]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a4b      	ldr	r2, [pc, #300]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b49      	ldr	r3, [pc, #292]	@ (80017e4 <MX_GPIO_Init+0x1a0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED1_Pin | CAN2_CS_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2103      	movs	r1, #3
 80016ce:	4846      	ldr	r0, [pc, #280]	@ (80017e8 <MX_GPIO_Init+0x1a4>)
 80016d0:	f001 ffca 	bl	8003668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MCP2515_RESET_GPIO_Port, MCP2515_RESET_Pin, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2104      	movs	r1, #4
 80016d8:	4843      	ldr	r0, [pc, #268]	@ (80017e8 <MX_GPIO_Init+0x1a4>)
 80016da:	f001 ffc5 	bl	8003668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	4842      	ldr	r0, [pc, #264]	@ (80017ec <MX_GPIO_Init+0x1a8>)
 80016e4:	f001 ffc0 	bl	8003668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ee:	483f      	ldr	r0, [pc, #252]	@ (80017ec <MX_GPIO_Init+0x1a8>)
 80016f0:	f001 ffba 	bl	8003668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2110      	movs	r1, #16
 80016f8:	483d      	ldr	r0, [pc, #244]	@ (80017f0 <MX_GPIO_Init+0x1ac>)
 80016fa:	f001 ffb5 	bl	8003668 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001702:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001708:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4834      	ldr	r0, [pc, #208]	@ (80017e8 <MX_GPIO_Init+0x1a4>)
 8001716:	f001 fe0b 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 800171a:	2301      	movs	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	482d      	ldr	r0, [pc, #180]	@ (80017e8 <MX_GPIO_Init+0x1a4>)
 8001732:	f001 fdfd 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN2_CS_Pin */
	GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8001736:	2302      	movs	r3, #2
 8001738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173e:	2301      	movs	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4826      	ldr	r0, [pc, #152]	@ (80017e8 <MX_GPIO_Init+0x1a4>)
 800174e:	f001 fdef 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : MCP2515_RESET_Pin */
	GPIO_InitStruct.Pin = MCP2515_RESET_Pin;
 8001752:	2304      	movs	r3, #4
 8001754:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175a:	2301      	movs	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(MCP2515_RESET_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481f      	ldr	r0, [pc, #124]	@ (80017e8 <MX_GPIO_Init+0x1a4>)
 800176a:	f001 fde1 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 800176e:	2320      	movs	r3, #32
 8001770:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4819      	ldr	r0, [pc, #100]	@ (80017ec <MX_GPIO_Init+0x1a8>)
 8001786:	f001 fdd3 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_CS_Pin */
	GPIO_InitStruct.Pin = CAN_CS_Pin;
 800178a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800178e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001794:	2301      	movs	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0x1a8>)
 80017a4:	f001 fdc4 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017a8:	2310      	movs	r3, #16
 80017aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_GPIO_Init+0x1ac>)
 80017c0:	f001 fdb6 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017c4:	2320      	movs	r3, #32
 80017c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <MX_GPIO_Init+0x1ac>)
 80017d8:	f001 fdaa 	bl	8003330 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400

080017f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <Error_Handler+0x8>

08001800 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800180c:	480b      	ldr	r0, [pc, #44]	@ (800183c <MCP2515_Initialize+0x3c>)
 800180e:	f001 ff2b 	bl	8003668 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8001812:	230a      	movs	r3, #10
 8001814:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001816:	480a      	ldr	r0, [pc, #40]	@ (8001840 <MCP2515_Initialize+0x40>)
 8001818:	f003 ff4d 	bl	80056b6 <HAL_SPI_GetState>
 800181c:	4603      	mov	r3, r0
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <MCP2515_Initialize+0x26>
      return true;
 8001822:	2301      	movs	r3, #1
 8001824:	e006      	b.n	8001834 <MCP2515_Initialize+0x34>
    
    loop--;
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	3b01      	subs	r3, #1
 800182a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f1      	bne.n	8001816 <MCP2515_Initialize+0x16>
      
  return false;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020000 	.word	0x40020000
 8001840:	20000188 	.word	0x20000188

08001844 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800184a:	2180      	movs	r1, #128	@ 0x80
 800184c:	200f      	movs	r0, #15
 800184e:	f000 f8ad 	bl	80019ac <MCP2515_WriteByte>
  HAL_Delay(100);
 8001852:	2064      	movs	r0, #100	@ 0x64
 8001854:	f000 fcd4 	bl	8002200 <HAL_Delay>
  uint8_t loop = 10;
 8001858:	230a      	movs	r3, #10
 800185a:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f8a4 	bl	80019ac <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001864:	200e      	movs	r0, #14
 8001866:	f000 f855 	bl	8001914 <MCP2515_ReadByte>
 800186a:	4603      	mov	r3, r0
 800186c:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800186e:	2030      	movs	r0, #48	@ 0x30
 8001870:	f000 f850 	bl	8001914 <MCP2515_ReadByte>
 8001874:	4603      	mov	r3, r0
 8001876:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800187e:	2b80      	cmp	r3, #128	@ 0x80
 8001880:	d101      	bne.n	8001886 <MCP2515_SetConfigMode+0x42>
      return true;
 8001882:	2301      	movs	r3, #1
 8001884:	e008      	b.n	8001898 <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	3b01      	subs	r3, #1
 800188a:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 800188c:	2064      	movs	r0, #100	@ 0x64
 800188e:	f000 fcb7 	bl	8002200 <HAL_Delay>

  } while(loop > 0);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	e7e1      	b.n	800185c <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80018a6:	2100      	movs	r1, #0
 80018a8:	200f      	movs	r0, #15
 80018aa:	f000 f87f 	bl	80019ac <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80018ae:	230a      	movs	r3, #10
 80018b0:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80018b2:	200e      	movs	r0, #14
 80018b4:	f000 f82e 	bl	8001914 <MCP2515_ReadByte>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <MCP2515_SetNormalMode+0x26>
      return true;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00a      	b.n	80018dc <MCP2515_SetNormalMode+0x3c>
    
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80018c6:	2100      	movs	r1, #0
 80018c8:	200f      	movs	r0, #15
 80018ca:	f000 f86f 	bl	80019ac <MCP2515_WriteByte>
    loop--;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1eb      	bne.n	80018b2 <MCP2515_SetNormalMode+0x12>
  
  return false;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{    
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ee:	4808      	ldr	r0, [pc, #32]	@ (8001910 <MCP2515_Reset+0x2c>)
 80018f0:	f001 feba 	bl	8003668 <HAL_GPIO_WritePin>
 80018f4:	2001      	movs	r0, #1
 80018f6:	f000 fc83 	bl	8002200 <HAL_Delay>
      
  SPI_Tx(MCP2515_RESET);
 80018fa:	20c0      	movs	r0, #192	@ 0xc0
 80018fc:	f000 f93c 	bl	8001b78 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001906:	4802      	ldr	r0, [pc, #8]	@ (8001910 <MCP2515_Reset+0x2c>)
 8001908:	f001 feae 	bl	8003668 <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40020000 	.word	0x40020000

08001914 <MCP2515_ReadByte>:

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001924:	480d      	ldr	r0, [pc, #52]	@ (800195c <MCP2515_ReadByte+0x48>)
 8001926:	f001 fe9f 	bl	8003668 <HAL_GPIO_WritePin>
 800192a:	2001      	movs	r0, #1
 800192c:	f000 fc68 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f921 	bl	8001b78 <SPI_Tx>
  SPI_Tx(address);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f91d 	bl	8001b78 <SPI_Tx>
  retVal = SPI_Rx();
 800193e:	f000 f941 	bl	8001bc4 <SPI_Rx>
 8001942:	4603      	mov	r3, r0
 8001944:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <MCP2515_ReadByte+0x48>)
 800194e:	f001 fe8b 	bl	8003668 <HAL_GPIO_WritePin>
  
  return retVal;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40020000 	.word	0x40020000

08001960 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001976:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <MCP2515_ReadRxSequence+0x48>)
 8001978:	f001 fe76 	bl	8003668 <HAL_GPIO_WritePin>
 800197c:	2001      	movs	r0, #1
 800197e:	f000 fc3f 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(instruction);        
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f8f7 	bl	8001b78 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	4619      	mov	r1, r3
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f000 f928 	bl	8001be4 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199a:	4803      	ldr	r0, [pc, #12]	@ (80019a8 <MCP2515_ReadRxSequence+0x48>)
 800199c:	f001 fe64 	bl	8003668 <HAL_GPIO_WritePin>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40020000 	.word	0x40020000

080019ac <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019c2:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <MCP2515_WriteByte+0x4c>)
 80019c4:	f001 fe50 	bl	8003668 <HAL_GPIO_WritePin>
 80019c8:	2001      	movs	r0, #1
 80019ca:	f000 fc19 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 80019ce:	2002      	movs	r0, #2
 80019d0:	f000 f8d2 	bl	8001b78 <SPI_Tx>
  SPI_Tx(address);
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f8ce 	bl	8001b78 <SPI_Tx>
  SPI_Tx(data);  
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f8ca 	bl	8001b78 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ea:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <MCP2515_WriteByte+0x4c>)
 80019ec:	f001 fe3c 	bl	8003668 <HAL_GPIO_WritePin>
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40020000 	.word	0x40020000

080019fc <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	603a      	str	r2, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a12:	4810      	ldr	r0, [pc, #64]	@ (8001a54 <MCP2515_WriteByteSequence+0x58>)
 8001a14:	f001 fe28 	bl	8003668 <HAL_GPIO_WritePin>
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f000 fbf1 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f000 f8aa 	bl	8001b78 <SPI_Tx>
  SPI_Tx(startAddress);
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f8a6 	bl	8001b78 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001a2c:	79ba      	ldrb	r2, [r7, #6]
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f000 f8ae 	bl	8001b9c <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a46:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <MCP2515_WriteByteSequence+0x58>)
 8001a48:	f001 fe0e 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020000 	.word	0x40020000

08001a58 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	4613      	mov	r3, r2
 8001a68:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a70:	4810      	ldr	r0, [pc, #64]	@ (8001ab4 <MCP2515_LoadTxSequence+0x5c>)
 8001a72:	f001 fdf9 	bl	8003668 <HAL_GPIO_WritePin>
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 fbc2 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f87a 	bl	8001b78 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001a84:	2104      	movs	r1, #4
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f000 f888 	bl	8001b9c <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f872 	bl	8001b78 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f87f 	bl	8001b9c <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa4:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <MCP2515_LoadTxSequence+0x5c>)
 8001aa6:	f001 fddf 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <MCP2515_RequestToSend+0x38>)
 8001aca:	f001 fdcd 	bl	8003668 <HAL_GPIO_WritePin>
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fb96 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f84e 	bl	8001b78 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae2:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <MCP2515_RequestToSend+0x38>)
 8001ae4:	f001 fdc0 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020000 	.word	0x40020000

08001af4 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <MCP2515_ReadStatus+0x40>)
 8001b02:	f001 fdb1 	bl	8003668 <HAL_GPIO_WritePin>
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 fb7a 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001b0c:	20a0      	movs	r0, #160	@ 0xa0
 8001b0e:	f000 f833 	bl	8001b78 <SPI_Tx>
  retVal = SPI_Rx();
 8001b12:	f000 f857 	bl	8001bc4 <SPI_Rx>
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  uint8_t dingus = retVal;
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	71bb      	strb	r3, [r7, #6]
        
  MCP2515_CS_HIGH();
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <MCP2515_ReadStatus+0x40>)
 8001b26:	f001 fd9f 	bl	8003668 <HAL_GPIO_WritePin>
  
  return retVal;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40020000 	.word	0x40020000

08001b38 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b44:	480b      	ldr	r0, [pc, #44]	@ (8001b74 <MCP2515_GetRxStatus+0x3c>)
 8001b46:	f001 fd8f 	bl	8003668 <HAL_GPIO_WritePin>
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 fb58 	bl	8002200 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8001b50:	20b0      	movs	r0, #176	@ 0xb0
 8001b52:	f000 f811 	bl	8001b78 <SPI_Tx>
  retVal = SPI_Rx();
 8001b56:	f000 f835 	bl	8001bc4 <SPI_Rx>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b64:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <MCP2515_GetRxStatus+0x3c>)
 8001b66:	f001 fd7f 	bl	8003668 <HAL_GPIO_WritePin>
  
  return retVal;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020000 	.word	0x40020000

08001b78 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001b82:	1df9      	adds	r1, r7, #7
 8001b84:	230a      	movs	r3, #10
 8001b86:	2201      	movs	r2, #1
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <SPI_Tx+0x20>)
 8001b8a:	f003 f98e 	bl	8004eaa <HAL_SPI_Transmit>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000188 	.word	0x20000188

08001b9c <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	230a      	movs	r3, #10
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4803      	ldr	r0, [pc, #12]	@ (8001bc0 <SPI_TxBuffer+0x24>)
 8001bb2:	f003 f97a 	bl	8004eaa <HAL_SPI_Transmit>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000188 	.word	0x20000188

08001bc4 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001bca:	1df9      	adds	r1, r7, #7
 8001bcc:	230a      	movs	r3, #10
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <SPI_Rx+0x1c>)
 8001bd2:	f003 faae 	bl	8005132 <HAL_SPI_Receive>
  return retVal;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000188 	.word	0x20000188

08001be4 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <SPI_RxBuffer+0x24>)
 8001bfa:	f003 fa9a 	bl	8005132 <HAL_SPI_Receive>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000188 	.word	0x20000188

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c4a:	2007      	movs	r0, #7
 8001c4c:	f000 ffbe 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800

08001c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a3b      	ldr	r2, [pc, #236]	@ (8001d68 <HAL_ADC_MspInit+0x10c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d170      	bne.n	8001d60 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a39      	ldr	r2, [pc, #228]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b33      	ldr	r3, [pc, #204]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a32      	ldr	r2, [pc, #200]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b30      	ldr	r3, [pc, #192]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b2c      	ldr	r3, [pc, #176]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <HAL_ADC_MspInit+0x110>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001cd2:	2312      	movs	r3, #18
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4822      	ldr	r0, [pc, #136]	@ (8001d70 <HAL_ADC_MspInit+0x114>)
 8001ce6:	f001 fb23 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481d      	ldr	r0, [pc, #116]	@ (8001d74 <HAL_ADC_MspInit+0x118>)
 8001cfe:	f001 fb17 	bl	8003330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d04:	4a1d      	ldr	r2, [pc, #116]	@ (8001d7c <HAL_ADC_MspInit+0x120>)
 8001d06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d14:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d44:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d46:	f000 ff83 	bl	8002c50 <HAL_DMA_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001d50:	f7ff fd50 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d5a:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_ADC_MspInit+0x11c>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	20000080 	.word	0x20000080
 8001d7c:	40026410 	.word	0x40026410

08001d80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	@ 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea4 <HAL_I2S_MspInit+0x124>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d174      	bne.n	8001e9c <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001db2:	2301      	movs	r3, #1
 8001db4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001db6:	23c0      	movs	r3, #192	@ 0xc0
 8001db8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fe9a 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001dce:	f7ff fd11 	bl	80017f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <HAL_I2S_MspInit+0x128>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a33      	ldr	r2, [pc, #204]	@ (8001ea8 <HAL_I2S_MspInit+0x128>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b31      	ldr	r3, [pc, #196]	@ (8001ea8 <HAL_I2S_MspInit+0x128>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <HAL_I2S_MspInit+0x128>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <HAL_I2S_MspInit+0x128>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <HAL_I2S_MspInit+0x128>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001e0a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1c:	2305      	movs	r3, #5
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	4821      	ldr	r0, [pc, #132]	@ (8001eac <HAL_I2S_MspInit+0x12c>)
 8001e28:	f001 fa82 	bl	8003330 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e2e:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <HAL_I2S_MspInit+0x134>)
 8001e30:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e52:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e80:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e82:	f000 fee5 	bl	8002c50 <HAL_DMA_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001e8c:	f7ff fcb2 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e96:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_I2S_MspInit+0x130>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3738      	adds	r7, #56	@ 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40003800 	.word	0x40003800
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	20000128 	.word	0x20000128
 8001eb4:	40026070 	.word	0x40026070

08001eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <HAL_SPI_MspInit+0x84>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d12c      	bne.n	8001f34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_SPI_MspInit+0x88>)
 8001ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_SPI_MspInit+0x88>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_SPI_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <HAL_SPI_MspInit+0x88>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <HAL_SPI_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f12:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f24:	2306      	movs	r3, #6
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <HAL_SPI_MspInit+0x8c>)
 8001f30:	f001 f9fe 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	@ 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40003c00 	.word	0x40003c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020800 	.word	0x40020800

08001f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <HAL_TIM_Base_MspInit+0x3c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_TIM_Base_MspInit+0x40>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a09      	ldr	r2, [pc, #36]	@ (8001f88 <HAL_TIM_Base_MspInit+0x40>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_TIM_Base_MspInit+0x40>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	@ (8002010 <HAL_UART_MspInit+0x84>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12b      	bne.n	8002006 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <HAL_UART_MspInit+0x88>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <HAL_UART_MspInit+0x88>)
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <HAL_UART_MspInit+0x88>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_UART_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a10      	ldr	r2, [pc, #64]	@ (8002014 <HAL_UART_MspInit+0x88>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_UART_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <HAL_UART_MspInit+0x8c>)
 8002002:	f001 f995 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40004400 	.word	0x40004400
 8002014:	40023800 	.word	0x40023800
 8002018:	40020000 	.word	0x40020000

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002072:	f000 f8a5 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA1_Stream4_IRQHandler+0x10>)
 8002082:	f000 feeb 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000128 	.word	0x20000128

08002090 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA2_Stream0_IRQHandler+0x10>)
 8002096:	f000 fee1 	bl	8002e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000080 	.word	0x20000080

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002100 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020cc:	f7ff ffea 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020f6:	f004 fa01 	bl	80064fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fa:	f7ff f85b 	bl	80011b4 <main>
  bx  lr    
 80020fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800210c:	080567f4 	.word	0x080567f4
  ldr r2, =_sbss
 8002110:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002114:	200002fc 	.word	0x200002fc

08002118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002120:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <HAL_Init+0x40>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_Init+0x40>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_Init+0x40>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fd41 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff fd5c 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fd59 	bl	8002c36 <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 fd21 	bl	8002be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	4a06      	ldr	r2, [pc, #24]	@ (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000008 	.word	0x20000008
 80021b8:	20000010 	.word	0x20000010
 80021bc:	2000000c 	.word	0x2000000c

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000010 	.word	0x20000010
 80021e4:	200002f8 	.word	0x200002f8

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200002f8 	.word	0x200002f8

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffde 	bl	80021e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000010 	.word	0x20000010

08002248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fcf8 	bl	8001c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800228e:	f023 0302 	bic.w	r3, r3, #2
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fa48 	bl	8002730 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b6:	e001      	b.n	80022bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Start_DMA+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0ce      	b.n	800248c <HAL_ADC_Start_DMA+0x1bc>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d018      	beq.n	8002336 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002314:	4b5f      	ldr	r3, [pc, #380]	@ (8002494 <HAL_ADC_Start_DMA+0x1c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a5f      	ldr	r2, [pc, #380]	@ (8002498 <HAL_ADC_Start_DMA+0x1c8>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9a      	lsrs	r2, r3, #18
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002328:	e002      	b.n	8002330 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3b01      	subs	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f9      	bne.n	800232a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002344:	d107      	bne.n	8002356 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002354:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 8086 	bne.w	8002472 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002390:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a4:	d106      	bne.n	80023b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f023 0206 	bic.w	r2, r3, #6
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80023b2:	e002      	b.n	80023ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b36      	ldr	r3, [pc, #216]	@ (800249c <HAL_ADC_Start_DMA+0x1cc>)
 80023c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ca:	4a35      	ldr	r2, [pc, #212]	@ (80024a0 <HAL_ADC_Start_DMA+0x1d0>)
 80023cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	4a34      	ldr	r2, [pc, #208]	@ (80024a4 <HAL_ADC_Start_DMA+0x1d4>)
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023da:	4a33      	ldr	r2, [pc, #204]	@ (80024a8 <HAL_ADC_Start_DMA+0x1d8>)
 80023dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002406:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	334c      	adds	r3, #76	@ 0x4c
 8002412:	4619      	mov	r1, r3
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f000 fcc8 	bl	8002dac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10f      	bne.n	8002448 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d129      	bne.n	800248a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	e020      	b.n	800248a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <HAL_ADC_Start_DMA+0x1dc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11b      	bne.n	800248a <HAL_ADC_Start_DMA+0x1ba>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d114      	bne.n	800248a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	e00b      	b.n	800248a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000008 	.word	0x20000008
 8002498:	431bde83 	.word	0x431bde83
 800249c:	40012300 	.word	0x40012300
 80024a0:	08002929 	.word	0x08002929
 80024a4:	080029e3 	.word	0x080029e3
 80024a8:	080029ff 	.word	0x080029ff
 80024ac:	40012000 	.word	0x40012000

080024b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1c>
 8002504:	2302      	movs	r3, #2
 8002506:	e105      	b.n	8002714 <HAL_ADC_ConfigChannel+0x228>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b09      	cmp	r3, #9
 8002516:	d925      	bls.n	8002564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43da      	mvns	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	400a      	ands	r2, r1
 800253c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	4603      	mov	r3, r0
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4403      	add	r3, r0
 8002556:	3b1e      	subs	r3, #30
 8002558:	409a      	lsls	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	e022      	b.n	80025aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	2207      	movs	r2, #7
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	400a      	ands	r2, r1
 8002586:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	4603      	mov	r3, r0
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4403      	add	r3, r0
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d824      	bhi.n	80025fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b05      	subs	r3, #5
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b05      	subs	r3, #5
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025fa:	e04c      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d824      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3b23      	subs	r3, #35	@ 0x23
 8002616:	221f      	movs	r2, #31
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43da      	mvns	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	400a      	ands	r2, r1
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	3b23      	subs	r3, #35	@ 0x23
 8002640:	fa00 f203 	lsl.w	r2, r0, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
 800264c:	e023      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b41      	subs	r3, #65	@ 0x41
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b41      	subs	r3, #65	@ 0x41
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002696:	4b22      	ldr	r3, [pc, #136]	@ (8002720 <HAL_ADC_ConfigChannel+0x234>)
 8002698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <HAL_ADC_ConfigChannel+0x238>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d109      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1cc>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_ADC_ConfigChannel+0x238>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d123      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d003      	beq.n	80026d2 <HAL_ADC_ConfigChannel+0x1e6>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b11      	cmp	r3, #17
 80026d0:	d11b      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d111      	bne.n	800270a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_ADC_ConfigChannel+0x23c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a10      	ldr	r2, [pc, #64]	@ (800272c <HAL_ADC_ConfigChannel+0x240>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9a      	lsrs	r2, r3, #18
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	40012000 	.word	0x40012000
 8002728:	20000008 	.word	0x20000008
 800272c:	431bde83 	.word	0x431bde83

08002730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002738:	4b79      	ldr	r3, [pc, #484]	@ (8002920 <ADC_Init+0x1f0>)
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	021a      	lsls	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	4a58      	ldr	r2, [pc, #352]	@ (8002924 <ADC_Init+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	e00f      	b.n	800282e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800281c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800282c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0202 	bic.w	r2, r2, #2
 800283c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800286a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800287a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	035a      	lsls	r2, r3, #13
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	3b01      	subs	r3, #1
 80028c0:	051a      	lsls	r2, r3, #20
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6899      	ldr	r1, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028e6:	025a      	lsls	r2, r3, #9
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	029a      	lsls	r2, r3, #10
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	0f000001 	.word	0x0f000001

08002928 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002934:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d13c      	bne.n	80029bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12b      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d127      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800297c:	2b00      	cmp	r3, #0
 800297e:	d119      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0220 	bic.w	r2, r2, #32
 800298e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fd7b 	bl	80024b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ba:	e00e      	b.n	80029da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff fd85 	bl	80024d8 <HAL_ADC_ErrorCallback>
}
 80029ce:	e004      	b.n	80029da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fd67 	bl	80024c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff fd5a 	bl	80024d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	@ (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	@ (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff8e 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	@ (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff29 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff3e 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff8e 	bl	8002b20 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5d 	bl	8002acc <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff31 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa2 	bl	8002b88 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff fac4 	bl	80021e8 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e099      	b.n	8002da0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8c:	e00f      	b.n	8002cae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8e:	f7ff faab 	bl	80021e8 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d908      	bls.n	8002cae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e078      	b.n	8002da0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e8      	bne.n	8002c8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4b38      	ldr	r3, [pc, #224]	@ (8002da8 <HAL_DMA_Init+0x158>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4313      	orrs	r3, r2
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 0307 	bic.w	r3, r3, #7
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d117      	bne.n	8002d72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fa6f 	bl	8003238 <DMA_CheckFifoParam>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2240      	movs	r2, #64	@ 0x40
 8002d64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e016      	b.n	8002da0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa26 	bl	80031cc <DMA_CalcBaseAndBitshift>
 8002d80:	4603      	mov	r3, r0
 8002d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	223f      	movs	r2, #63	@ 0x3f
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	f010803f 	.word	0xf010803f

08002dac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_DMA_Start_IT+0x26>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e040      	b.n	8002e54 <HAL_DMA_Start_IT+0xa8>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12f      	bne.n	8002e46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f9b8 	bl	8003170 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	223f      	movs	r2, #63	@ 0x3f
 8002e06:	409a      	lsls	r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0216 	orr.w	r2, r2, #22
 8002e1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e005      	b.n	8002e52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e68:	4b8e      	ldr	r3, [pc, #568]	@ (80030a4 <HAL_DMA_IRQHandler+0x248>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a8e      	ldr	r2, [pc, #568]	@ (80030a8 <HAL_DMA_IRQHandler+0x24c>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a9b      	lsrs	r3, r3, #10
 8002e74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e86:	2208      	movs	r2, #8
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01a      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	2201      	movs	r2, #1
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d012      	beq.n	8002efe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	2201      	movs	r2, #1
 8002eec:	409a      	lsls	r2, r3
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	2204      	movs	r2, #4
 8002f04:	409a      	lsls	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	2204      	movs	r2, #4
 8002f22:	409a      	lsls	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f38:	2210      	movs	r2, #16
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d043      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03c      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	2210      	movs	r2, #16
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d018      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d108      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d024      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
 8002f8a:	e01f      	b.n	8002fcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
 8002f9c:	e016      	b.n	8002fcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d107      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0208 	bic.w	r2, r2, #8
 8002fba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 808f 	beq.w	80030fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8087 	beq.w	80030fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b05      	cmp	r3, #5
 8003004:	d136      	bne.n	8003074 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0216 	bic.w	r2, r2, #22
 8003014:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003024:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_DMA_IRQHandler+0x1da>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0208 	bic.w	r2, r2, #8
 8003044:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	223f      	movs	r2, #63	@ 0x3f
 800304c:	409a      	lsls	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003066:	2b00      	cmp	r3, #0
 8003068:	d07e      	beq.n	8003168 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
        }
        return;
 8003072:	e079      	b.n	8003168 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	2b00      	cmp	r3, #0
 8003096:	d031      	beq.n	80030fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e02c      	b.n	80030fc <HAL_DMA_IRQHandler+0x2a0>
 80030a2:	bf00      	nop
 80030a4:	20000008 	.word	0x20000008
 80030a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d023      	beq.n	80030fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e01e      	b.n	80030fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10f      	bne.n	80030ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0210 	bic.w	r2, r2, #16
 80030da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	2b00      	cmp	r3, #0
 8003102:	d032      	beq.n	800316a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d022      	beq.n	8003156 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2205      	movs	r2, #5
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3301      	adds	r3, #1
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	d307      	bcc.n	8003144 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f2      	bne.n	8003128 <HAL_DMA_IRQHandler+0x2cc>
 8003142:	e000      	b.n	8003146 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003144:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
 8003166:	e000      	b.n	800316a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003168:	bf00      	nop
    }
  }
}
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800318c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	d108      	bne.n	80031b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ae:	e007      	b.n	80031c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	3b10      	subs	r3, #16
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <DMA_CalcBaseAndBitshift+0x64>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031e6:	4a13      	ldr	r2, [pc, #76]	@ (8003234 <DMA_CalcBaseAndBitshift+0x68>)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d909      	bls.n	800320e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	1d1a      	adds	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	659a      	str	r2, [r3, #88]	@ 0x58
 800320c:	e007      	b.n	800321e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	aaaaaaab 	.word	0xaaaaaaab
 8003234:	080567dc 	.word	0x080567dc

08003238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11f      	bne.n	8003292 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d856      	bhi.n	8003306 <DMA_CheckFifoParam+0xce>
 8003258:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <DMA_CheckFifoParam+0x28>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003283 	.word	0x08003283
 8003268:	08003271 	.word	0x08003271
 800326c:	08003307 	.word	0x08003307
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d046      	beq.n	800330a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003280:	e043      	b.n	800330a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800328a:	d140      	bne.n	800330e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003290:	e03d      	b.n	800330e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800329a:	d121      	bne.n	80032e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d837      	bhi.n	8003312 <DMA_CheckFifoParam+0xda>
 80032a2:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <DMA_CheckFifoParam+0x70>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032bf 	.word	0x080032bf
 80032b0:	080032b9 	.word	0x080032b9
 80032b4:	080032d1 	.word	0x080032d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      break;
 80032bc:	e030      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d025      	beq.n	8003316 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ce:	e022      	b.n	8003316 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032d8:	d11f      	bne.n	800331a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032de:	e01c      	b.n	800331a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d903      	bls.n	80032ee <DMA_CheckFifoParam+0xb6>
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d003      	beq.n	80032f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032ec:	e018      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
      break;
 80032f2:	e015      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      break;
 8003304:	e00b      	b.n	800331e <DMA_CheckFifoParam+0xe6>
      break;
 8003306:	bf00      	nop
 8003308:	e00a      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      break;
 800330a:	bf00      	nop
 800330c:	e008      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      break;
 800330e:	bf00      	nop
 8003310:	e006      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      break;
 8003312:	bf00      	nop
 8003314:	e004      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      break;
 8003316:	bf00      	nop
 8003318:	e002      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      break;   
 800331a:	bf00      	nop
 800331c:	e000      	b.n	8003320 <DMA_CheckFifoParam+0xe8>
      break;
 800331e:	bf00      	nop
    }
  } 
  
  return status; 
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	@ 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e159      	b.n	8003600 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	429a      	cmp	r2, r3
 8003366:	f040 8148 	bne.w	80035fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d005      	beq.n	8003382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337e:	2b02      	cmp	r3, #2
 8003380:	d130      	bne.n	80033e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 0201 	and.w	r2, r3, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d017      	beq.n	8003420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d123      	bne.n	8003474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	08da      	lsrs	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3208      	adds	r2, #8
 8003434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	08da      	lsrs	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0203 	and.w	r2, r3, #3
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a2 	beq.w	80035fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b57      	ldr	r3, [pc, #348]	@ (8003618 <HAL_GPIO_Init+0x2e8>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	4a56      	ldr	r2, [pc, #344]	@ (8003618 <HAL_GPIO_Init+0x2e8>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034c6:	4b54      	ldr	r3, [pc, #336]	@ (8003618 <HAL_GPIO_Init+0x2e8>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d2:	4a52      	ldr	r2, [pc, #328]	@ (800361c <HAL_GPIO_Init+0x2ec>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a49      	ldr	r2, [pc, #292]	@ (8003620 <HAL_GPIO_Init+0x2f0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d019      	beq.n	8003532 <HAL_GPIO_Init+0x202>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a48      	ldr	r2, [pc, #288]	@ (8003624 <HAL_GPIO_Init+0x2f4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_GPIO_Init+0x1fe>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a47      	ldr	r2, [pc, #284]	@ (8003628 <HAL_GPIO_Init+0x2f8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00d      	beq.n	800352a <HAL_GPIO_Init+0x1fa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a46      	ldr	r2, [pc, #280]	@ (800362c <HAL_GPIO_Init+0x2fc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0x1f6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a45      	ldr	r2, [pc, #276]	@ (8003630 <HAL_GPIO_Init+0x300>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_GPIO_Init+0x1f2>
 800351e:	2304      	movs	r3, #4
 8003520:	e008      	b.n	8003534 <HAL_GPIO_Init+0x204>
 8003522:	2307      	movs	r3, #7
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x204>
 8003526:	2303      	movs	r3, #3
 8003528:	e004      	b.n	8003534 <HAL_GPIO_Init+0x204>
 800352a:	2302      	movs	r3, #2
 800352c:	e002      	b.n	8003534 <HAL_GPIO_Init+0x204>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_GPIO_Init+0x204>
 8003532:	2300      	movs	r3, #0
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	f002 0203 	and.w	r2, r2, #3
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	4093      	lsls	r3, r2
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003544:	4935      	ldr	r1, [pc, #212]	@ (800361c <HAL_GPIO_Init+0x2ec>)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	3302      	adds	r3, #2
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003552:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <HAL_GPIO_Init+0x304>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003576:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <HAL_GPIO_Init+0x304>)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357c:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <HAL_GPIO_Init+0x304>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a0:	4a24      	ldr	r2, [pc, #144]	@ (8003634 <HAL_GPIO_Init+0x304>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a6:	4b23      	ldr	r3, [pc, #140]	@ (8003634 <HAL_GPIO_Init+0x304>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003634 <HAL_GPIO_Init+0x304>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d0:	4b18      	ldr	r3, [pc, #96]	@ (8003634 <HAL_GPIO_Init+0x304>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003634 <HAL_GPIO_Init+0x304>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	f67f aea2 	bls.w	800334c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3724      	adds	r7, #36	@ 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	40013800 	.word	0x40013800
 8003620:	40020000 	.word	0x40020000
 8003624:	40020400 	.word	0x40020400
 8003628:	40020800 	.word	0x40020800
 800362c:	40020c00 	.word	0x40020c00
 8003630:	40021000 	.word	0x40021000
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e001      	b.n	800365a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003684:	e003      	b.n	800368e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	041a      	lsls	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e128      	b.n	8003900 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a90      	ldr	r2, [pc, #576]	@ (8003908 <HAL_I2S_Init+0x26c>)
 80036c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fe fb59 	bl	8001d80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80036e4:	f023 030f 	bic.w	r3, r3, #15
 80036e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2202      	movs	r2, #2
 80036f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d060      	beq.n	80037bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003702:	2310      	movs	r3, #16
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e001      	b.n	800370c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003708:	2320      	movs	r3, #32
 800370a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b20      	cmp	r3, #32
 8003712:	d802      	bhi.n	800371a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800371a:	2001      	movs	r0, #1
 800371c:	f001 fadc 	bl	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003720:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800372a:	d125      	bne.n	8003778 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	fbb2 f2f3 	udiv	r2, r2, r3
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	3305      	adds	r3, #5
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e01f      	b.n	8003796 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	3305      	adds	r3, #5
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e00e      	b.n	8003796 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	3305      	adds	r3, #5
 8003794:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4a5c      	ldr	r2, [pc, #368]	@ (800390c <HAL_I2S_Init+0x270>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	08db      	lsrs	r3, r3, #3
 80037a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e003      	b.n	80037c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037bc:	2302      	movs	r3, #2
 80037be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d902      	bls.n	80037d0 <HAL_I2S_Init+0x134>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2bff      	cmp	r3, #255	@ 0xff
 80037ce:	d907      	bls.n	80037e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d4:	f043 0210 	orr.w	r2, r3, #16
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e08f      	b.n	8003900 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	ea42 0103 	orr.w	r1, r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80037fe:	f023 030f 	bic.w	r3, r3, #15
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6851      	ldr	r1, [r2, #4]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	4311      	orrs	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68d2      	ldr	r2, [r2, #12]
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6992      	ldr	r2, [r2, #24]
 8003816:	430a      	orrs	r2, r1
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003822:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d161      	bne.n	80038f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a38      	ldr	r2, [pc, #224]	@ (8003910 <HAL_I2S_Init+0x274>)
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a37      	ldr	r2, [pc, #220]	@ (8003914 <HAL_I2S_Init+0x278>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_I2S_Init+0x1a4>
 800383c:	4b36      	ldr	r3, [pc, #216]	@ (8003918 <HAL_I2S_Init+0x27c>)
 800383e:	e001      	b.n	8003844 <HAL_I2S_Init+0x1a8>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	4932      	ldr	r1, [pc, #200]	@ (8003914 <HAL_I2S_Init+0x278>)
 800384c:	428a      	cmp	r2, r1
 800384e:	d101      	bne.n	8003854 <HAL_I2S_Init+0x1b8>
 8003850:	4a31      	ldr	r2, [pc, #196]	@ (8003918 <HAL_I2S_Init+0x27c>)
 8003852:	e001      	b.n	8003858 <HAL_I2S_Init+0x1bc>
 8003854:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003858:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800385c:	f023 030f 	bic.w	r3, r3, #15
 8003860:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2b      	ldr	r2, [pc, #172]	@ (8003914 <HAL_I2S_Init+0x278>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <HAL_I2S_Init+0x1d4>
 800386c:	4b2a      	ldr	r3, [pc, #168]	@ (8003918 <HAL_I2S_Init+0x27c>)
 800386e:	e001      	b.n	8003874 <HAL_I2S_Init+0x1d8>
 8003870:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003874:	2202      	movs	r2, #2
 8003876:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a25      	ldr	r2, [pc, #148]	@ (8003914 <HAL_I2S_Init+0x278>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_I2S_Init+0x1ea>
 8003882:	4b25      	ldr	r3, [pc, #148]	@ (8003918 <HAL_I2S_Init+0x27c>)
 8003884:	e001      	b.n	800388a <HAL_I2S_Init+0x1ee>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003896:	d003      	beq.n	80038a0 <HAL_I2S_Init+0x204>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e001      	b.n	80038ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038b6:	4313      	orrs	r3, r2
 80038b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038c0:	4313      	orrs	r3, r2
 80038c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038ca:	4313      	orrs	r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <HAL_I2S_Init+0x278>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_I2S_Init+0x24c>
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <HAL_I2S_Init+0x27c>)
 80038e6:	e001      	b.n	80038ec <HAL_I2S_Init+0x250>
 80038e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038ec:	897a      	ldrh	r2, [r7, #10]
 80038ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	08003c05 	.word	0x08003c05
 800390c:	cccccccd 	.word	0xcccccccd
 8003910:	08003d19 	.word	0x08003d19
 8003914:	40003800 	.word	0x40003800
 8003918:	40003400 	.word	0x40003400

0800391c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_I2S_Transmit_DMA+0x1a>
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e08a      	b.n	8003a50 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
 8003948:	e082      	b.n	8003a50 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_I2S_Transmit_DMA+0x3e>
 8003956:	2302      	movs	r3, #2
 8003958:	e07a      	b.n	8003a50 <HAL_I2S_Transmit_DMA+0x134>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2203      	movs	r2, #3
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d002      	beq.n	800398e <HAL_I2S_Transmit_DMA+0x72>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b05      	cmp	r3, #5
 800398c:	d10a      	bne.n	80039a4 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a2:	e005      	b.n	80039b0 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <HAL_I2S_Transmit_DMA+0x13c>)
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <HAL_I2S_Transmit_DMA+0x140>)
 80039be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_I2S_Transmit_DMA+0x144>)
 80039c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039d0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039d8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039e0:	f7ff f9e4 	bl	8002dac <HAL_DMA_Start_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00f      	beq.n	8003a0a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e022      	b.n	8003a50 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0202 	orr.w	r2, r2, #2
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a4c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	08003ae3 	.word	0x08003ae3
 8003a5c:	08003aa1 	.word	0x08003aa1
 8003a60:	08003aff 	.word	0x08003aff

08003a64 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10e      	bne.n	8003ad4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0202 	bic.w	r2, r2, #2
 8003ac4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7fd faf3 	bl	80010c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff ffb7 	bl	8003a64 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0203 	bic.w	r2, r2, #3
 8003b1a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	f043 0208 	orr.w	r2, r3, #8
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff ffa5 	bl	8003a8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	1c9a      	adds	r2, r3, #2
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10e      	bne.n	8003b9e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fd fa91 	bl	80010c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	b292      	uxth	r2, r2
 8003bba:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	1c9a      	adds	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10e      	bne.n	8003bfc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff3e 	bl	8003a78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d13a      	bne.n	8003c96 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d109      	bne.n	8003c3e <I2S_IRQHandler+0x3a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d102      	bne.n	8003c3e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ffb4 	bl	8003ba6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d126      	bne.n	8003c96 <I2S_IRQHandler+0x92>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d11f      	bne.n	8003c96 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c64:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c88:	f043 0202 	orr.w	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fefb 	bl	8003a8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d136      	bne.n	8003d10 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d109      	bne.n	8003cc0 <I2S_IRQHandler+0xbc>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d102      	bne.n	8003cc0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ff45 	bl	8003b4a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d122      	bne.n	8003d10 <I2S_IRQHandler+0x10c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d11b      	bne.n	8003d10 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ce6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f043 0204 	orr.w	r2, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff febe 	bl	8003a8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a92      	ldr	r2, [pc, #584]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d32:	4b92      	ldr	r3, [pc, #584]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d34:	e001      	b.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a8b      	ldr	r2, [pc, #556]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d50:	4b8a      	ldr	r3, [pc, #552]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d52:	e001      	b.n	8003d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d64:	d004      	beq.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 8099 	bne.w	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f925 	bl	8003fd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9c8 	bl	8004134 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d13a      	bne.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d035      	beq.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc4:	e001      	b.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4969      	ldr	r1, [pc, #420]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dd2:	428b      	cmp	r3, r1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003dd6:	4b69      	ldr	r3, [pc, #420]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd8:	e001      	b.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003de2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003df2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fe34 	bl	8003a8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	f040 80c3 	bne.w	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80bd 	beq.w	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a49      	ldr	r2, [pc, #292]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e56:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e58:	e001      	b.n	8003e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4944      	ldr	r1, [pc, #272]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e66:	428b      	cmp	r3, r1
 8003e68:	d101      	bne.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e6a:	4b44      	ldr	r3, [pc, #272]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e6c:	e001      	b.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0204 	orr.w	r2, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fdf6 	bl	8003a8c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ea0:	e089      	b.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d107      	bne.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f8be 	bl	8004038 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8fd 	bl	80040d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d12f      	bne.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d02a      	beq.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f04:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f06:	e001      	b.n	8003f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4919      	ldr	r1, [pc, #100]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d101      	bne.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f18:	4b18      	ldr	r3, [pc, #96]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1a:	e001      	b.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fda6 	bl	8003a8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d136      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d031      	beq.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a07      	ldr	r2, [pc, #28]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f5e:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4902      	ldr	r1, [pc, #8]	@ (8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	d106      	bne.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f72:	4b02      	ldr	r3, [pc, #8]	@ (8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e006      	b.n	8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f76:	bf00      	nop
 8003f78:	40003800 	.word	0x40003800
 8003f7c:	40003400 	.word	0x40003400
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f043 0204 	orr.w	r2, r3, #4
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fd6c 	bl	8003a8c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fb4:	e000      	b.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb6:	bf00      	nop
}
 8003fb8:	bf00      	nop
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	1c99      	adds	r1, r3, #2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6251      	str	r1, [r2, #36]	@ 0x24
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004014:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ffc9 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	1c99      	adds	r1, r3, #2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6251      	str	r1, [r2, #36]	@ 0x24
 800404a:	8819      	ldrh	r1, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <I2SEx_TxISR_I2SExt+0x22>
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <I2SEx_TxISR_I2SExt+0x94>)
 8004058:	e001      	b.n	800405e <I2SEx_TxISR_I2SExt+0x26>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800405e:	460a      	mov	r2, r1
 8004060:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d121      	bne.n	80040be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a12      	ldr	r2, [pc, #72]	@ (80040c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <I2SEx_TxISR_I2SExt+0x50>
 8004084:	4b11      	ldr	r3, [pc, #68]	@ (80040cc <I2SEx_TxISR_I2SExt+0x94>)
 8004086:	e001      	b.n	800408c <I2SEx_TxISR_I2SExt+0x54>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	490d      	ldr	r1, [pc, #52]	@ (80040c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d101      	bne.n	800409c <I2SEx_TxISR_I2SExt+0x64>
 8004098:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <I2SEx_TxISR_I2SExt+0x94>)
 800409a:	e001      	b.n	80040a0 <I2SEx_TxISR_I2SExt+0x68>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff81 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40003800 	.word	0x40003800
 80040cc:	40003400 	.word	0x40003400

080040d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d8      	ldr	r0, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	1c99      	adds	r1, r3, #2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040e8:	b282      	uxth	r2, r0
 80040ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d113      	bne.n	800412c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004112:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ff4a 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a20      	ldr	r2, [pc, #128]	@ (80041c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <I2SEx_RxISR_I2SExt+0x16>
 8004146:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004148:	e001      	b.n	800414e <I2SEx_RxISR_I2SExt+0x1a>
 800414a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800414e:	68d8      	ldr	r0, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	1c99      	adds	r1, r3, #2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800415a:	b282      	uxth	r2, r0
 800415c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d121      	bne.n	80041ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <I2SEx_RxISR_I2SExt+0x90>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <I2SEx_RxISR_I2SExt+0x50>
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004182:	e001      	b.n	8004188 <I2SEx_RxISR_I2SExt+0x54>
 8004184:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	490d      	ldr	r1, [pc, #52]	@ (80041c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004190:	428b      	cmp	r3, r1
 8004192:	d101      	bne.n	8004198 <I2SEx_RxISR_I2SExt+0x64>
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004196:	e001      	b.n	800419c <I2SEx_RxISR_I2SExt+0x68>
 8004198:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff03 	bl	8003fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40003800 	.word	0x40003800
 80041c8:	40003400 	.word	0x40003400

080041cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e267      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d075      	beq.n	80042d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041ea:	4b88      	ldr	r3, [pc, #544]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00c      	beq.n	8004210 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b85      	ldr	r3, [pc, #532]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b82      	ldr	r3, [pc, #520]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b7e      	ldr	r3, [pc, #504]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e242      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x74>
 8004232:	4b76      	ldr	r3, [pc, #472]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x98>
 800424a:	4b70      	ldr	r3, [pc, #448]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6f      	ldr	r2, [pc, #444]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6d      	ldr	r3, [pc, #436]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6c      	ldr	r2, [pc, #432]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004264:	4b69      	ldr	r3, [pc, #420]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a68      	ldr	r2, [pc, #416]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b66      	ldr	r3, [pc, #408]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a65      	ldr	r2, [pc, #404]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fd ffb0 	bl	80021e8 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd ffac 	bl	80021e8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	@ 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e207      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b5b      	ldr	r3, [pc, #364]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xc0>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd ff9c 	bl	80021e8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd ff98 	bl	80021e8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	@ 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1f3      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b51      	ldr	r3, [pc, #324]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042e2:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b47      	ldr	r3, [pc, #284]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b44      	ldr	r3, [pc, #272]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b41      	ldr	r3, [pc, #260]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c7      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4937      	ldr	r1, [pc, #220]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b34      	ldr	r3, [pc, #208]	@ (8004410 <HAL_RCC_OscConfig+0x244>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fd ff51 	bl	80021e8 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434a:	f7fd ff4d 	bl	80021e8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1a8      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b28      	ldr	r3, [pc, #160]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4925      	ldr	r1, [pc, #148]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b24      	ldr	r3, [pc, #144]	@ (8004410 <HAL_RCC_OscConfig+0x244>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd ff30 	bl	80021e8 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd ff2c 	bl	80021e8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e187      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d036      	beq.n	8004424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <HAL_RCC_OscConfig+0x248>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd ff10 	bl	80021e8 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd ff0c 	bl	80021e8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e167      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_OscConfig+0x240>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x200>
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_OscConfig+0x248>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fd fef9 	bl	80021e8 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00e      	b.n	8004418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd fef5 	bl	80021e8 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d907      	bls.n	8004418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e150      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b88      	ldr	r3, [pc, #544]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8097 	beq.w	8004560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b81      	ldr	r3, [pc, #516]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b7d      	ldr	r3, [pc, #500]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	4a7c      	ldr	r2, [pc, #496]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	@ 0x40
 8004452:	4b7a      	ldr	r3, [pc, #488]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b77      	ldr	r3, [pc, #476]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b74      	ldr	r3, [pc, #464]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fd feb5 	bl	80021e8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fd feb1 	bl	80021e8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e10c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b6a      	ldr	r3, [pc, #424]	@ (8004640 <HAL_RCC_OscConfig+0x474>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2ea>
 80044a8:	4b64      	ldr	r3, [pc, #400]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ac:	4a63      	ldr	r2, [pc, #396]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x30c>
 80044be:	4b5f      	ldr	r3, [pc, #380]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	4a5e      	ldr	r2, [pc, #376]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ca:	4b5c      	ldr	r3, [pc, #368]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a5b      	ldr	r2, [pc, #364]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044d8:	4b58      	ldr	r3, [pc, #352]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	4a57      	ldr	r2, [pc, #348]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e4:	4b55      	ldr	r3, [pc, #340]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a54      	ldr	r2, [pc, #336]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd fe76 	bl	80021e8 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fd fe72 	bl	80021e8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0cb      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b49      	ldr	r3, [pc, #292]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x334>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fd fe60 	bl	80021e8 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fd fe5c 	bl	80021e8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0b5      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b3e      	ldr	r3, [pc, #248]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b39      	ldr	r3, [pc, #228]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	4a38      	ldr	r2, [pc, #224]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a1 	beq.w	80046ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456a:	4b34      	ldr	r3, [pc, #208]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d05c      	beq.n	8004630 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d141      	bne.n	8004602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_RCC_OscConfig+0x478>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fd fe30 	bl	80021e8 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd fe2c 	bl	80021e8 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e087      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b27      	ldr	r3, [pc, #156]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	491b      	ldr	r1, [pc, #108]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <HAL_RCC_OscConfig+0x478>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fd fe05 	bl	80021e8 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fd fe01 	bl	80021e8 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e05c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x416>
 8004600:	e054      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd fdee 	bl	80021e8 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fdea 	bl	80021e8 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e045      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x444>
 800462e:	e03d      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e038      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004648:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <HAL_RCC_OscConfig+0x4ec>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d028      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d121      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d11a      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800467e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d111      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cc      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b68      	ldr	r3, [pc, #416]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b65      	ldr	r3, [pc, #404]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a58      	ldr	r2, [pc, #352]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800471a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a52      	ldr	r2, [pc, #328]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d044      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d119      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b3f      	ldr	r3, [pc, #252]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3b      	ldr	r3, [pc, #236]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e067      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b37      	ldr	r3, [pc, #220]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4934      	ldr	r1, [pc, #208]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fd fd1c 	bl	80021e8 <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fd fd18 	bl	80021e8 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b25      	ldr	r3, [pc, #148]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20c      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b22      	ldr	r3, [pc, #136]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b12      	ldr	r3, [pc, #72]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f821 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490a      	ldr	r1, [pc, #40]	@ (800487c <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd fc7c 	bl	8002160 <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	080567c4 	.word	0x080567c4
 8004880:	20000008 	.word	0x20000008
 8004884:	2000000c 	.word	0x2000000c

08004888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b094      	sub	sp, #80	@ 0x50
 800488e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a0:	4b79      	ldr	r3, [pc, #484]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d00d      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x40>
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	f200 80e1 	bhi.w	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x34>
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ba:	e0db      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b73      	ldr	r3, [pc, #460]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80048be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c0:	e0db      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c2:	4b73      	ldr	r3, [pc, #460]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80048c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048c6:	e0d8      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048de:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	2200      	movs	r2, #0
 80048e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	6139      	str	r1, [r7, #16]
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800492c:	4659      	mov	r1, fp
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4651      	mov	r1, sl
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	ebb2 0801 	subs.w	r8, r2, r1
 8004940:	4659      	mov	r1, fp
 8004942:	eb63 0901 	sbc.w	r9, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	462b      	mov	r3, r5
 8004968:	eb49 0303 	adc.w	r3, r9, r3
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800497a:	4629      	mov	r1, r5
 800497c:	024b      	lsls	r3, r1, #9
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004984:	4621      	mov	r1, r4
 8004986:	024a      	lsls	r2, r1, #9
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004998:	f7fb fc1c 	bl	80001d4 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a4:	e058      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a6:	4b38      	ldr	r3, [pc, #224]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	2200      	movs	r2, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	4611      	mov	r1, r2
 80049b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80049bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0159      	lsls	r1, r3, #5
 80049ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d2:	0150      	lsls	r0, r2, #5
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4641      	mov	r1, r8
 80049da:	ebb2 0a01 	subs.w	sl, r2, r1
 80049de:	4649      	mov	r1, r9
 80049e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f8:	ebb2 040a 	subs.w	r4, r2, sl
 80049fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	00eb      	lsls	r3, r5, #3
 8004a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0e:	00e2      	lsls	r2, r4, #3
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	18e3      	adds	r3, r4, r3
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb45 0303 	adc.w	r3, r5, r3
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	028b      	lsls	r3, r1, #10
 8004a32:	4621      	mov	r1, r4
 8004a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a38:	4621      	mov	r1, r4
 8004a3a:	028a      	lsls	r2, r1, #10
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	61fa      	str	r2, [r7, #28]
 8004a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a4c:	f7fb fbc2 	bl	80001d4 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a58:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	3301      	adds	r3, #1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3750      	adds	r7, #80	@ 0x50
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a98:	4b03      	ldr	r3, [pc, #12]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000008 	.word	0x20000008

08004aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ab0:	f7ff fff0 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0a9b      	lsrs	r3, r3, #10
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4903      	ldr	r1, [pc, #12]	@ (8004ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac2:	5ccb      	ldrb	r3, [r1, r3]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	080567d4 	.word	0x080567d4

08004ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ad8:	f7ff ffdc 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	0b5b      	lsrs	r3, r3, #13
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4903      	ldr	r1, [pc, #12]	@ (8004af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	080567d4 	.word	0x080567d4

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d035      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b24:	4b67      	ldr	r3, [pc, #412]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2a:	f7fd fb5d 	bl	80021e8 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b32:	f7fd fb59 	bl	80021e8 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0ba      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b44:	4b60      	ldr	r3, [pc, #384]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	071b      	lsls	r3, r3, #28
 8004b5c:	495a      	ldr	r1, [pc, #360]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b64:	4b57      	ldr	r3, [pc, #348]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b6a:	f7fd fb3d 	bl	80021e8 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b72:	f7fd fb39 	bl	80021e8 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e09a      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b84:	4b50      	ldr	r3, [pc, #320]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8083 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b49      	ldr	r3, [pc, #292]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	4a48      	ldr	r2, [pc, #288]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bae:	4b46      	ldr	r3, [pc, #280]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bba:	4b44      	ldr	r3, [pc, #272]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a43      	ldr	r2, [pc, #268]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc6:	f7fd fb0f 	bl	80021e8 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fd fb0b 	bl	80021e8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e06c      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004be0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bec:	4b36      	ldr	r3, [pc, #216]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02f      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d028      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c20:	4a29      	ldr	r2, [pc, #164]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c26:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d114      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fd fad9 	bl	80021e8 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fd fad5 	bl	80021e8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e034      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0ee      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c68:	d10d      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c6a:	4b17      	ldr	r3, [pc, #92]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7e:	4912      	ldr	r1, [pc, #72]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c86:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c8c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c90:	6093      	str	r3, [r2, #8]
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9e:	490a      	ldr	r1, [pc, #40]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7c1a      	ldrb	r2, [r3, #16]
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cb6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	42470068 	.word	0x42470068
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	42470e40 	.word	0x42470e40
 8004cd4:	424711e0 	.word	0x424711e0

08004cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d13f      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cf6:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cfe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d0c:	d12f      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d10:	617b      	str	r3, [r7, #20]
          break;
 8004d12:	e02f      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d14:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d20:	d108      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d22:	4b19      	ldr	r3, [pc, #100]	@ (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d2a:	4a19      	ldr	r2, [pc, #100]	@ (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e007      	b.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d34:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d3c:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d44:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4a:	099b      	lsrs	r3, r3, #6
 8004d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d5e:	0f1b      	lsrs	r3, r3, #28
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	617b      	str	r3, [r7, #20]
          break;
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
          break;
 8004d72:	bf00      	nop
        }
      }
      break;
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004d76:	bf00      	nop
    }
  }
  return frequency;
 8004d78:	697b      	ldr	r3, [r7, #20]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	00bb8000 	.word	0x00bb8000
 8004d90:	007a1200 	.word	0x007a1200
 8004d94:	00f42400 	.word	0x00f42400

08004d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07b      	b.n	8004ea2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dba:	d009      	beq.n	8004dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61da      	str	r2, [r3, #28]
 8004dc2:	e005      	b.n	8004dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd f864 	bl	8001eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e54:	ea42 0103 	orr.w	r1, r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	f003 0104 	and.w	r1, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	f003 0210 	and.w	r2, r3, #16
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b088      	sub	sp, #32
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eba:	f7fd f995 	bl	80021e8 <HAL_GetTick>
 8004ebe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e12a      	b.n	800512a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_Transmit+0x36>
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e122      	b.n	800512a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_Transmit+0x48>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e11b      	b.n	800512a <HAL_SPI_Transmit+0x280>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2203      	movs	r2, #3
 8004efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f40:	d10f      	bne.n	8004f62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6c:	2b40      	cmp	r3, #64	@ 0x40
 8004f6e:	d007      	beq.n	8004f80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f88:	d152      	bne.n	8005030 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_SPI_Transmit+0xee>
 8004f92:	8b7b      	ldrh	r3, [r7, #26]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d145      	bne.n	8005024 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	881a      	ldrh	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	1c9a      	adds	r2, r3, #2
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fbc:	e032      	b.n	8005024 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d112      	bne.n	8004ff2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	881a      	ldrh	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ff0:	e018      	b.n	8005024 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff2:	f7fd f8f9 	bl	80021e8 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d803      	bhi.n	800500a <HAL_SPI_Transmit+0x160>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d102      	bne.n	8005010 <HAL_SPI_Transmit+0x166>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e082      	b.n	800512a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1c7      	bne.n	8004fbe <HAL_SPI_Transmit+0x114>
 800502e:	e053      	b.n	80050d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_Transmit+0x194>
 8005038:	8b7b      	ldrh	r3, [r7, #26]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d147      	bne.n	80050ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005064:	e033      	b.n	80050ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b02      	cmp	r3, #2
 8005072:	d113      	bne.n	800509c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	86da      	strh	r2, [r3, #54]	@ 0x36
 800509a:	e018      	b.n	80050ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800509c:	f7fd f8a4 	bl	80021e8 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d803      	bhi.n	80050b4 <HAL_SPI_Transmit+0x20a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d102      	bne.n	80050ba <HAL_SPI_Transmit+0x210>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e02d      	b.n	800512a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1c6      	bne.n	8005066 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fbe7 	bl	80058b0 <SPI_EndRxTxTransaction>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005128:	2300      	movs	r3, #0
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b088      	sub	sp, #32
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
 8005150:	e104      	b.n	800535c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800515a:	d112      	bne.n	8005182 <HAL_SPI_Receive+0x50>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10e      	bne.n	8005182 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2204      	movs	r2, #4
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f8f3 	bl	8005364 <HAL_SPI_TransmitReceive>
 800517e:	4603      	mov	r3, r0
 8005180:	e0ec      	b.n	800535c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005182:	f7fd f831 	bl	80021e8 <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_SPI_Receive+0x62>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0e1      	b.n	800535c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_SPI_Receive+0x74>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0da      	b.n	800535c <HAL_SPI_Receive+0x22a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2204      	movs	r2, #4
 80051b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f4:	d10f      	bne.n	8005216 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005214:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d007      	beq.n	8005234 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005232:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d170      	bne.n	800531e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800523c:	e035      	b.n	80052aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d115      	bne.n	8005278 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f103 020c 	add.w	r2, r3, #12
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005276:	e018      	b.n	80052aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005278:	f7fc ffb6 	bl	80021e8 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d803      	bhi.n	8005290 <HAL_SPI_Receive+0x15e>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <HAL_SPI_Receive+0x164>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e058      	b.n	800535c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1c4      	bne.n	800523e <HAL_SPI_Receive+0x10c>
 80052b4:	e038      	b.n	8005328 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d113      	bne.n	80052ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	b292      	uxth	r2, r2
 80052d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	1c9a      	adds	r2, r3, #2
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052ea:	e018      	b.n	800531e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ec:	f7fc ff7c 	bl	80021e8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d803      	bhi.n	8005304 <HAL_SPI_Receive+0x1d2>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d102      	bne.n	800530a <HAL_SPI_Receive+0x1d8>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e01e      	b.n	800535c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1c6      	bne.n	80052b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fa59 	bl	80057e4 <SPI_EndRxTransaction>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800535a:	2300      	movs	r3, #0
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005372:	2301      	movs	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005376:	f7fc ff37 	bl	80021e8 <HAL_GetTick>
 800537a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005382:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d00c      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x4a>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539a:	d106      	bne.n	80053aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <HAL_SPI_TransmitReceive+0x46>
 80053a4:	7ffb      	ldrb	r3, [r7, #31]
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d001      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
 80053ac:	e17f      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x5c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x5c>
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e174      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_SPI_TransmitReceive+0x6e>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e16d      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d003      	beq.n	80053ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2205      	movs	r2, #5
 80053ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	887a      	ldrh	r2, [r7, #2]
 8005404:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	887a      	ldrh	r2, [r7, #2]
 8005416:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b40      	cmp	r3, #64	@ 0x40
 8005430:	d007      	beq.n	8005442 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544a:	d17e      	bne.n	800554a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_SPI_TransmitReceive+0xf6>
 8005454:	8afb      	ldrh	r3, [r7, #22]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d16c      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547e:	e059      	b.n	8005534 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d11b      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x162>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d016      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x162>
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	2b01      	cmp	r3, #1
 800549c:	d113      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d119      	bne.n	8005508 <HAL_SPI_TransmitReceive+0x1a4>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d014      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	b292      	uxth	r2, r2
 80054ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005504:	2301      	movs	r3, #1
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005508:	f7fc fe6e 	bl	80021e8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005514:	429a      	cmp	r2, r3
 8005516:	d80d      	bhi.n	8005534 <HAL_SPI_TransmitReceive+0x1d0>
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d009      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e0bc      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1a0      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x11c>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d19b      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x11c>
 8005548:	e082      	b.n	8005650 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x1f4>
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d171      	bne.n	800563c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800557e:	e05d      	b.n	800563c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d11c      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x264>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d017      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x264>
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	2b01      	cmp	r3, #1
 800559c:	d114      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d119      	bne.n	800560a <HAL_SPI_TransmitReceive+0x2a6>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d014      	beq.n	800560a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005606:	2301      	movs	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800560a:	f7fc fded 	bl	80021e8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005616:	429a      	cmp	r2, r3
 8005618:	d803      	bhi.n	8005622 <HAL_SPI_TransmitReceive+0x2be>
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d102      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x2c4>
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e038      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d19c      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x21c>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d197      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f92b 	bl	80058b0 <SPI_EndRxTxTransaction>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e01d      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3728      	adds	r7, #40	@ 0x28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056c4:	b2db      	uxtb	r3, r3
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056e4:	f7fc fd80 	bl	80021e8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056f4:	f7fc fd78 	bl	80021e8 <HAL_GetTick>
 80056f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056fa:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	015b      	lsls	r3, r3, #5
 8005700:	0d1b      	lsrs	r3, r3, #20
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	fb02 f303 	mul.w	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	e054      	b.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d050      	beq.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005714:	f7fc fd68 	bl	80021e8 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	429a      	cmp	r2, r3
 8005722:	d902      	bls.n	800572a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d13d      	bne.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005742:	d111      	bne.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800574c:	d004      	beq.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005756:	d107      	bne.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005770:	d10f      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e017      	b.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d19b      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000008 	.word	0x20000008

080057e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057f8:	d111      	bne.n	800581e <SPI_EndRxTransaction+0x3a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005802:	d004      	beq.n	800580e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800580c:	d107      	bne.n	800581e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800581c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005826:	d12a      	bne.n	800587e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005830:	d012      	beq.n	8005858 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2200      	movs	r2, #0
 800583a:	2180      	movs	r1, #128	@ 0x80
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff49 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d02d      	beq.n	80058a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e026      	b.n	80058a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	2101      	movs	r1, #1
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff ff36 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01a      	beq.n	80058a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005872:	f043 0220 	orr.w	r2, r3, #32
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e013      	b.n	80058a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	2101      	movs	r1, #1
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff ff23 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e000      	b.n	80058a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2201      	movs	r2, #1
 80058c4:	2102      	movs	r1, #2
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff ff04 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d6:	f043 0220 	orr.w	r2, r3, #32
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e032      	b.n	8005948 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <SPI_EndRxTxTransaction+0xa0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005954 <SPI_EndRxTxTransaction+0xa4>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	0d5b      	lsrs	r3, r3, #21
 80058ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058f2:	fb02 f303 	mul.w	r3, r2, r3
 80058f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005900:	d112      	bne.n	8005928 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	2180      	movs	r1, #128	@ 0x80
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff fee1 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d016      	beq.n	8005946 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e00f      	b.n	8005948 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	3b01      	subs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b80      	cmp	r3, #128	@ 0x80
 8005940:	d0f2      	beq.n	8005928 <SPI_EndRxTxTransaction+0x78>
 8005942:	e000      	b.n	8005946 <SPI_EndRxTxTransaction+0x96>
        break;
 8005944:	bf00      	nop
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000008 	.word	0x20000008
 8005954:	165e9f81 	.word	0x165e9f81

08005958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e041      	b.n	80059ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc fae2 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 f950 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d001      	beq.n	8005a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e03c      	b.n	8005a8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a98 <HAL_TIM_Base_Start+0xa0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_TIM_Base_Start+0x5c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2a:	d013      	beq.n	8005a54 <HAL_TIM_Base_Start+0x5c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1a      	ldr	r2, [pc, #104]	@ (8005a9c <HAL_TIM_Base_Start+0xa4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_TIM_Base_Start+0x5c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <HAL_TIM_Base_Start+0xa8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_TIM_Base_Start+0x5c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <HAL_TIM_Base_Start+0xac>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_Base_Start+0x5c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <HAL_TIM_Base_Start+0xb0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d111      	bne.n	8005a78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d010      	beq.n	8005a88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	e007      	b.n	8005a88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40014000 	.word	0x40014000

08005aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e0b4      	b.n	8005c32 <HAL_TIM_ConfigClockSource+0x186>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b00:	d03e      	beq.n	8005b80 <HAL_TIM_ConfigClockSource+0xd4>
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b06:	f200 8087 	bhi.w	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0e:	f000 8086 	beq.w	8005c1e <HAL_TIM_ConfigClockSource+0x172>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b16:	d87f      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b70      	cmp	r3, #112	@ 0x70
 8005b1a:	d01a      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0xa6>
 8005b1c:	2b70      	cmp	r3, #112	@ 0x70
 8005b1e:	d87b      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b60      	cmp	r3, #96	@ 0x60
 8005b22:	d050      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b24:	2b60      	cmp	r3, #96	@ 0x60
 8005b26:	d877      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b50      	cmp	r3, #80	@ 0x50
 8005b2a:	d03c      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b2c:	2b50      	cmp	r3, #80	@ 0x50
 8005b2e:	d873      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b40      	cmp	r3, #64	@ 0x40
 8005b32:	d058      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b34:	2b40      	cmp	r3, #64	@ 0x40
 8005b36:	d86f      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b30      	cmp	r3, #48	@ 0x30
 8005b3a:	d064      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b3c:	2b30      	cmp	r3, #48	@ 0x30
 8005b3e:	d86b      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d060      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d867      	bhi.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d05c      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d05a      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	e062      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	f000 f971 	bl	8005e48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	609a      	str	r2, [r3, #8]
      break;
 8005b7e:	e04f      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	f000 f95a 	bl	8005e48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ba2:	609a      	str	r2, [r3, #8]
      break;
 8005ba4:	e03c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f000 f8ce 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2150      	movs	r1, #80	@ 0x50
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f927 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005bc4:	e02c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f000 f8ed 	bl	8005db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2160      	movs	r1, #96	@ 0x60
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f917 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e01c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f000 f8ae 	bl	8005d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2140      	movs	r1, #64	@ 0x40
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f907 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005c04:	e00c      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f000 f8fe 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005c16:	e003      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1c:	e000      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005d38 <TIM_Base_SetConfig+0xfc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_Base_SetConfig+0x38>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d00b      	beq.n	8005c74 <TIM_Base_SetConfig+0x38>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a37      	ldr	r2, [pc, #220]	@ (8005d3c <TIM_Base_SetConfig+0x100>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_Base_SetConfig+0x38>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a36      	ldr	r2, [pc, #216]	@ (8005d40 <TIM_Base_SetConfig+0x104>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_Base_SetConfig+0x38>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a35      	ldr	r2, [pc, #212]	@ (8005d44 <TIM_Base_SetConfig+0x108>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2b      	ldr	r2, [pc, #172]	@ (8005d38 <TIM_Base_SetConfig+0xfc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01b      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c94:	d017      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <TIM_Base_SetConfig+0x100>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a27      	ldr	r2, [pc, #156]	@ (8005d40 <TIM_Base_SetConfig+0x104>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a26      	ldr	r2, [pc, #152]	@ (8005d44 <TIM_Base_SetConfig+0x108>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a25      	ldr	r2, [pc, #148]	@ (8005d48 <TIM_Base_SetConfig+0x10c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a24      	ldr	r2, [pc, #144]	@ (8005d4c <TIM_Base_SetConfig+0x110>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	@ (8005d50 <TIM_Base_SetConfig+0x114>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8005d38 <TIM_Base_SetConfig+0xfc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d103      	bne.n	8005d0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 030a 	bic.w	r3, r3, #10
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f023 0210 	bic.w	r2, r3, #16
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f043 0307 	orr.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	609a      	str	r2, [r3, #8]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e050      	b.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eec:	d013      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a16      	ldr	r2, [pc, #88]	@ (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a13      	ldr	r2, [pc, #76]	@ (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d10c      	bne.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	40014000 	.word	0x40014000

08005f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e042      	b.n	8005ffc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb fffe 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f82b 	bl	8006004 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006008:	b0c0      	sub	sp, #256	@ 0x100
 800600a:	af00      	add	r7, sp, #0
 800600c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	ea40 0301 	orr.w	r3, r0, r1
 800602c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	431a      	orrs	r2, r3
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	431a      	orrs	r2, r3
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800605c:	f021 010c 	bic.w	r1, r1, #12
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800606a:	430b      	orrs	r3, r1
 800606c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607e:	6999      	ldr	r1, [r3, #24]
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	ea40 0301 	orr.w	r3, r0, r1
 800608a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b8f      	ldr	r3, [pc, #572]	@ (80062d0 <UART_SetConfig+0x2cc>)
 8006094:	429a      	cmp	r2, r3
 8006096:	d005      	beq.n	80060a4 <UART_SetConfig+0xa0>
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b8d      	ldr	r3, [pc, #564]	@ (80062d4 <UART_SetConfig+0x2d0>)
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d104      	bne.n	80060ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fe fd16 	bl	8004ad4 <HAL_RCC_GetPCLK2Freq>
 80060a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060ac:	e003      	b.n	80060b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ae:	f7fe fcfd 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 80060b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c0:	f040 810c 	bne.w	80062dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	1891      	adds	r1, r2, r2
 80060dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060de:	415b      	adcs	r3, r3
 80060e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060e6:	4621      	mov	r1, r4
 80060e8:	eb12 0801 	adds.w	r8, r2, r1
 80060ec:	4629      	mov	r1, r5
 80060ee:	eb43 0901 	adc.w	r9, r3, r1
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006106:	4690      	mov	r8, r2
 8006108:	4699      	mov	r9, r3
 800610a:	4623      	mov	r3, r4
 800610c:	eb18 0303 	adds.w	r3, r8, r3
 8006110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006114:	462b      	mov	r3, r5
 8006116:	eb49 0303 	adc.w	r3, r9, r3
 800611a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800612a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800612e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006132:	460b      	mov	r3, r1
 8006134:	18db      	adds	r3, r3, r3
 8006136:	653b      	str	r3, [r7, #80]	@ 0x50
 8006138:	4613      	mov	r3, r2
 800613a:	eb42 0303 	adc.w	r3, r2, r3
 800613e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006140:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006148:	f7fa f844 	bl	80001d4 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4b61      	ldr	r3, [pc, #388]	@ (80062d8 <UART_SetConfig+0x2d4>)
 8006152:	fba3 2302 	umull	r2, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	011c      	lsls	r4, r3, #4
 800615a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006164:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006168:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	1891      	adds	r1, r2, r2
 8006172:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006174:	415b      	adcs	r3, r3
 8006176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006178:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800617c:	4641      	mov	r1, r8
 800617e:	eb12 0a01 	adds.w	sl, r2, r1
 8006182:	4649      	mov	r1, r9
 8006184:	eb43 0b01 	adc.w	fp, r3, r1
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006194:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800619c:	4692      	mov	sl, r2
 800619e:	469b      	mov	fp, r3
 80061a0:	4643      	mov	r3, r8
 80061a2:	eb1a 0303 	adds.w	r3, sl, r3
 80061a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061aa:	464b      	mov	r3, r9
 80061ac:	eb4b 0303 	adc.w	r3, fp, r3
 80061b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061c8:	460b      	mov	r3, r1
 80061ca:	18db      	adds	r3, r3, r3
 80061cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ce:	4613      	mov	r3, r2
 80061d0:	eb42 0303 	adc.w	r3, r2, r3
 80061d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061de:	f7f9 fff9 	bl	80001d4 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	4b3b      	ldr	r3, [pc, #236]	@ (80062d8 <UART_SetConfig+0x2d4>)
 80061ea:	fba3 2301 	umull	r2, r3, r3, r1
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	2264      	movs	r2, #100	@ 0x64
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	1acb      	subs	r3, r1, r3
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061fe:	4b36      	ldr	r3, [pc, #216]	@ (80062d8 <UART_SetConfig+0x2d4>)
 8006200:	fba3 2302 	umull	r2, r3, r3, r2
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800620c:	441c      	add	r4, r3
 800620e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006218:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800621c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	1891      	adds	r1, r2, r2
 8006226:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006228:	415b      	adcs	r3, r3
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800622c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006230:	4641      	mov	r1, r8
 8006232:	1851      	adds	r1, r2, r1
 8006234:	6339      	str	r1, [r7, #48]	@ 0x30
 8006236:	4649      	mov	r1, r9
 8006238:	414b      	adcs	r3, r1
 800623a:	637b      	str	r3, [r7, #52]	@ 0x34
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006248:	4659      	mov	r1, fp
 800624a:	00cb      	lsls	r3, r1, #3
 800624c:	4651      	mov	r1, sl
 800624e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006252:	4651      	mov	r1, sl
 8006254:	00ca      	lsls	r2, r1, #3
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	4603      	mov	r3, r0
 800625c:	4642      	mov	r2, r8
 800625e:	189b      	adds	r3, r3, r2
 8006260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006264:	464b      	mov	r3, r9
 8006266:	460a      	mov	r2, r1
 8006268:	eb42 0303 	adc.w	r3, r2, r3
 800626c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800627c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006284:	460b      	mov	r3, r1
 8006286:	18db      	adds	r3, r3, r3
 8006288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628a:	4613      	mov	r3, r2
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006292:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006296:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800629a:	f7f9 ff9b 	bl	80001d4 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <UART_SetConfig+0x2d4>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	@ 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	3332      	adds	r3, #50	@ 0x32
 80062b6:	4a08      	ldr	r2, [pc, #32]	@ (80062d8 <UART_SetConfig+0x2d4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 0207 	and.w	r2, r3, #7
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4422      	add	r2, r4
 80062ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062cc:	e106      	b.n	80064dc <UART_SetConfig+0x4d8>
 80062ce:	bf00      	nop
 80062d0:	40011000 	.word	0x40011000
 80062d4:	40011400 	.word	0x40011400
 80062d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e0:	2200      	movs	r2, #0
 80062e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062ee:	4642      	mov	r2, r8
 80062f0:	464b      	mov	r3, r9
 80062f2:	1891      	adds	r1, r2, r2
 80062f4:	6239      	str	r1, [r7, #32]
 80062f6:	415b      	adcs	r3, r3
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062fe:	4641      	mov	r1, r8
 8006300:	1854      	adds	r4, r2, r1
 8006302:	4649      	mov	r1, r9
 8006304:	eb43 0501 	adc.w	r5, r3, r1
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	f04f 0300 	mov.w	r3, #0
 8006310:	00eb      	lsls	r3, r5, #3
 8006312:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006316:	00e2      	lsls	r2, r4, #3
 8006318:	4614      	mov	r4, r2
 800631a:	461d      	mov	r5, r3
 800631c:	4643      	mov	r3, r8
 800631e:	18e3      	adds	r3, r4, r3
 8006320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006324:	464b      	mov	r3, r9
 8006326:	eb45 0303 	adc.w	r3, r5, r3
 800632a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800633a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800634a:	4629      	mov	r1, r5
 800634c:	008b      	lsls	r3, r1, #2
 800634e:	4621      	mov	r1, r4
 8006350:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006354:	4621      	mov	r1, r4
 8006356:	008a      	lsls	r2, r1, #2
 8006358:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800635c:	f7f9 ff3a 	bl	80001d4 <__aeabi_uldivmod>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4b60      	ldr	r3, [pc, #384]	@ (80064e8 <UART_SetConfig+0x4e4>)
 8006366:	fba3 2302 	umull	r2, r3, r3, r2
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	011c      	lsls	r4, r3, #4
 800636e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006372:	2200      	movs	r2, #0
 8006374:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006378:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800637c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006380:	4642      	mov	r2, r8
 8006382:	464b      	mov	r3, r9
 8006384:	1891      	adds	r1, r2, r2
 8006386:	61b9      	str	r1, [r7, #24]
 8006388:	415b      	adcs	r3, r3
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006390:	4641      	mov	r1, r8
 8006392:	1851      	adds	r1, r2, r1
 8006394:	6139      	str	r1, [r7, #16]
 8006396:	4649      	mov	r1, r9
 8006398:	414b      	adcs	r3, r1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a8:	4659      	mov	r1, fp
 80063aa:	00cb      	lsls	r3, r1, #3
 80063ac:	4651      	mov	r1, sl
 80063ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b2:	4651      	mov	r1, sl
 80063b4:	00ca      	lsls	r2, r1, #3
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	4642      	mov	r2, r8
 80063be:	189b      	adds	r3, r3, r2
 80063c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063c4:	464b      	mov	r3, r9
 80063c6:	460a      	mov	r2, r1
 80063c8:	eb42 0303 	adc.w	r3, r2, r3
 80063cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063e8:	4649      	mov	r1, r9
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	4641      	mov	r1, r8
 80063ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f2:	4641      	mov	r1, r8
 80063f4:	008a      	lsls	r2, r1, #2
 80063f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063fa:	f7f9 feeb 	bl	80001d4 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4611      	mov	r1, r2
 8006404:	4b38      	ldr	r3, [pc, #224]	@ (80064e8 <UART_SetConfig+0x4e4>)
 8006406:	fba3 2301 	umull	r2, r3, r3, r1
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	2264      	movs	r2, #100	@ 0x64
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	1acb      	subs	r3, r1, r3
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	3332      	adds	r3, #50	@ 0x32
 8006418:	4a33      	ldr	r2, [pc, #204]	@ (80064e8 <UART_SetConfig+0x4e4>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006424:	441c      	add	r4, r3
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	673b      	str	r3, [r7, #112]	@ 0x70
 800642e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006430:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	1891      	adds	r1, r2, r2
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	415b      	adcs	r3, r3
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006444:	4641      	mov	r1, r8
 8006446:	1851      	adds	r1, r2, r1
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	4649      	mov	r1, r9
 800644c:	414b      	adcs	r3, r1
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800645c:	4659      	mov	r1, fp
 800645e:	00cb      	lsls	r3, r1, #3
 8006460:	4651      	mov	r1, sl
 8006462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006466:	4651      	mov	r1, sl
 8006468:	00ca      	lsls	r2, r1, #3
 800646a:	4610      	mov	r0, r2
 800646c:	4619      	mov	r1, r3
 800646e:	4603      	mov	r3, r0
 8006470:	4642      	mov	r2, r8
 8006472:	189b      	adds	r3, r3, r2
 8006474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006476:	464b      	mov	r3, r9
 8006478:	460a      	mov	r2, r1
 800647a:	eb42 0303 	adc.w	r3, r2, r3
 800647e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	663b      	str	r3, [r7, #96]	@ 0x60
 800648a:	667a      	str	r2, [r7, #100]	@ 0x64
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006498:	4649      	mov	r1, r9
 800649a:	008b      	lsls	r3, r1, #2
 800649c:	4641      	mov	r1, r8
 800649e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a2:	4641      	mov	r1, r8
 80064a4:	008a      	lsls	r2, r1, #2
 80064a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064aa:	f7f9 fe93 	bl	80001d4 <__aeabi_uldivmod>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4b0d      	ldr	r3, [pc, #52]	@ (80064e8 <UART_SetConfig+0x4e4>)
 80064b4:	fba3 1302 	umull	r1, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	2164      	movs	r1, #100	@ 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	3332      	adds	r3, #50	@ 0x32
 80064c6:	4a08      	ldr	r2, [pc, #32]	@ (80064e8 <UART_SetConfig+0x4e4>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4422      	add	r2, r4
 80064da:	609a      	str	r2, [r3, #8]
}
 80064dc:	bf00      	nop
 80064de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064e2:	46bd      	mov	sp, r7
 80064e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e8:	51eb851f 	.word	0x51eb851f

080064ec <memset>:
 80064ec:	4402      	add	r2, r0
 80064ee:	4603      	mov	r3, r0
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d100      	bne.n	80064f6 <memset+0xa>
 80064f4:	4770      	bx	lr
 80064f6:	f803 1b01 	strb.w	r1, [r3], #1
 80064fa:	e7f9      	b.n	80064f0 <memset+0x4>

080064fc <__libc_init_array>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006534 <__libc_init_array+0x38>)
 8006500:	4c0d      	ldr	r4, [pc, #52]	@ (8006538 <__libc_init_array+0x3c>)
 8006502:	1b64      	subs	r4, r4, r5
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	2600      	movs	r6, #0
 8006508:	42a6      	cmp	r6, r4
 800650a:	d109      	bne.n	8006520 <__libc_init_array+0x24>
 800650c:	4d0b      	ldr	r5, [pc, #44]	@ (800653c <__libc_init_array+0x40>)
 800650e:	4c0c      	ldr	r4, [pc, #48]	@ (8006540 <__libc_init_array+0x44>)
 8006510:	f000 f818 	bl	8006544 <_init>
 8006514:	1b64      	subs	r4, r4, r5
 8006516:	10a4      	asrs	r4, r4, #2
 8006518:	2600      	movs	r6, #0
 800651a:	42a6      	cmp	r6, r4
 800651c:	d105      	bne.n	800652a <__libc_init_array+0x2e>
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	f855 3b04 	ldr.w	r3, [r5], #4
 8006524:	4798      	blx	r3
 8006526:	3601      	adds	r6, #1
 8006528:	e7ee      	b.n	8006508 <__libc_init_array+0xc>
 800652a:	f855 3b04 	ldr.w	r3, [r5], #4
 800652e:	4798      	blx	r3
 8006530:	3601      	adds	r6, #1
 8006532:	e7f2      	b.n	800651a <__libc_init_array+0x1e>
 8006534:	080567ec 	.word	0x080567ec
 8006538:	080567ec 	.word	0x080567ec
 800653c:	080567ec 	.word	0x080567ec
 8006540:	080567f0 	.word	0x080567f0

08006544 <_init>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr

08006550 <_fini>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr
