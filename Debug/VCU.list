
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000500f0  080061f4  080061f4  000071f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080562e4  080562e4  00058014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080562e4  080562e4  000572e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080562ec  080562ec  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080562ec  080562ec  000572ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080562f0  080562f0  000572f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080562f4  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000014  08056308  00058014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08056308  000582d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011edd  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c64  00000000  00000000  00069f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0006cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  0006dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197fe  00000000  00000000  0006ea27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ae7  00000000  00000000  00088225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ca37  00000000  00000000  0009cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  00139788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000340  00000000  00000000  0013de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080061dc 	.word	0x080061dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080061dc 	.word	0x080061dc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
  MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 8000506:	f001 f907 	bl	8001718 <MCP2515_Reset>
  HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f001 fd6c 	bl	8001fe8 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  RXF1reg.RXF1SIDH = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800054c:	2308      	movs	r3, #8
 800054e:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	77fb      	strb	r3, [r7, #31]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	76fb      	strb	r3, [r7, #27]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8000584:	2300      	movs	r3, #0
 8000586:	74fb      	strb	r3, [r7, #19]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 800058c:	2308      	movs	r3, #8
 800058e:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000598:	f001 f850 	bl	800163c <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
  {
    return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e065      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80005ac:	f001 f868 	bl	8001680 <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
  {
    return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e05b      	b.n	8000678 <CANSPI_Initialize+0x178>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f001 f931 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f001 f92b 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 f924 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f001 f91d 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f001 f916 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f001 f90f 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f001 f908 	bl	8001830 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f001 f901 	bl	8001830 <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f001 f88a 	bl	8001748 <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f001 f8cf 	bl	80017e0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f001 f8cb 	bl	80017e0 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f001 f8c7 	bl	80017e0 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f001 f8c3 	bl	80017e0 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f001 f8bf 	bl	80017e0 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000662:	f001 f83b 	bl	80016dc <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
    return false;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <CANSPI_Initialize+0x178>
  
  return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000694:	2200      	movs	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000698:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800069a:	2200      	movs	r2, #0
 800069c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <CANSPI_Transmit+0x120>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80006a4:	f001 f940 	bl	8001928 <MCP2515_ReadStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ae:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 80006b0:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f001 f846 	bl	8001748 <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 80006c0:	202d      	movs	r0, #45	@ 0x2d
 80006c2:	f001 f841 	bl	8001748 <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006ca:	2030      	movs	r0, #48	@ 0x30
 80006cc:	f001 f83c 	bl	8001748 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f001 f837 	bl	8001748 <MCP2515_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f001 f832 	bl	8001748 <MCP2515_ReadByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d115      	bne.n	8000722 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6858      	ldr	r0, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4a28      	ldr	r2, [pc, #160]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000700:	4619      	mov	r1, r3
 8000702:	f000 f928 	bl	8000956 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1a      	ldrb	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3309      	adds	r3, #9
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000710:	2040      	movs	r0, #64	@ 0x40
 8000712:	f001 f8bb 	bl	800188c <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000716:	2081      	movs	r0, #129	@ 0x81
 8000718:	f001 f8e8 	bl	80018ec <MCP2515_RequestToSend>
    
    returnValue = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e038      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <CANSPI_Transmit+0x124>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800073a:	4619      	mov	r1, r3
 800073c:	f000 f90b 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a1a      	ldrb	r2, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3309      	adds	r3, #9
 8000748:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800074a:	2042      	movs	r0, #66	@ 0x42
 800074c:	f001 f89e 	bl	800188c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000750:	2082      	movs	r0, #130	@ 0x82
 8000752:	f001 f8cb 	bl	80018ec <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e01b      	b.n	8000794 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <CANSPI_Transmit+0x124>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d114      	bne.n	8000794 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000774:	4619      	mov	r1, r3
 8000776:	f000 f8ee 	bl	8000956 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1a      	ldrb	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3309      	adds	r3, #9
 8000782:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000784:	2044      	movs	r0, #68	@ 0x44
 8000786:	f001 f881 	bl	800188c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800078a:	2084      	movs	r0, #132	@ 0x84
 800078c:	f001 f8ae 	bl	80018ec <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000034 	.word	0x20000034
 80007a4:	20000030 	.word	0x20000030

080007a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80007b4:	f001 f8d8 	bl	8001968 <MCP2515_GetRxStatus>
 80007b8:	4603      	mov	r3, r0
 80007ba:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d066      	beq.n	8000896 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b40      	cmp	r3, #64	@ 0x40
 80007d2:	bf0c      	ite	eq
 80007d4:	2301      	moveq	r3, #1
 80007d6:	2300      	movne	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7b3b      	ldrb	r3, [r7, #12]
 80007dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	220d      	movs	r2, #13
 80007fa:	4619      	mov	r1, r3
 80007fc:	2090      	movs	r0, #144	@ 0x90
 80007fe:	f000 ffc9 	bl	8001794 <MCP2515_ReadRxSequence>
 8000802:	e00c      	b.n	800081e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000804:	7b3b      	ldrb	r3, [r7, #12]
 8000806:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b80      	cmp	r3, #128	@ 0x80
 800080e:	d106      	bne.n	800081e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	220d      	movs	r2, #13
 8000816:	4619      	mov	r1, r3
 8000818:	2094      	movs	r0, #148	@ 0x94
 800081a:	f000 ffbb 	bl	8001794 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800081e:	7b3b      	ldrb	r3, [r7, #12]
 8000820:	f003 0318 	and.w	r3, r3, #24
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b10      	cmp	r3, #16
 8000828:	d10c      	bne.n	8000844 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2202      	movs	r2, #2
 800082e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000830:	7cb8      	ldrb	r0, [r7, #18]
 8000832:	7cf9      	ldrb	r1, [r7, #19]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	f000 f832 	bl	80008a0 <convertReg2ExtendedCANid>
 800083c:	4602      	mov	r2, r0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	e00b      	b.n	800085c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800084a:	7c3b      	ldrb	r3, [r7, #16]
 800084c:	7c7a      	ldrb	r2, [r7, #17]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f863 	bl	800091c <convertReg2StandardCANid>
 8000856:	4602      	mov	r2, r0
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800085c:	7d3a      	ldrb	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000862:	7d7a      	ldrb	r2, [r7, #21]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000868:	7dba      	ldrb	r2, [r7, #22]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800086e:	7dfa      	ldrb	r2, [r7, #23]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000874:	7e3a      	ldrb	r2, [r7, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800087a:	7e7a      	ldrb	r2, [r7, #25]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000880:	7eba      	ldrb	r2, [r7, #26]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000886:	7efa      	ldrb	r2, [r7, #27]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800088c:	7f3a      	ldrb	r2, [r7, #28]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000896:	7ffb      	ldrb	r3, [r7, #31]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	717b      	strb	r3, [r7, #5]
 80008ba:	4613      	mov	r3, r2
 80008bc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008c6:	793b      	ldrb	r3, [r7, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4413      	add	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4413      	add	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4413      	add	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4413      	add	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000910:	697b      	ldr	r3, [r7, #20]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc90      	pop	{r4, r7}
 800091a:	4770      	bx	lr

0800091c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000948:	68fb      	ldr	r3, [r7, #12]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000956:	b480      	push	{r7}
 8000958:	b087      	sub	sp, #28
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	460b      	mov	r3, r1
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d12e      	bne.n	80009cc <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	0a1b      	lsrs	r3, r3, #8
 8000988:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f023 031f 	bic.w	r3, r3, #31
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	4413      	add	r3, r2
 80009a8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	3308      	adds	r3, #8
 80009ae:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	f023 0314 	bic.w	r3, r3, #20
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80009ca:	e013      	b.n	80009f4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	015b      	lsls	r3, r3, #5
 80009dc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a04:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	2400      	movs	r4, #0
 8000a08:	9405      	str	r4, [sp, #20]
 8000a0a:	9406      	str	r4, [sp, #24]
 8000a0c:	9407      	str	r4, [sp, #28]
 8000a0e:	9408      	str	r4, [sp, #32]
 8000a10:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	9400      	str	r4, [sp, #0]
 8000a14:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <MX_GPIO_Init+0x16c>)
 8000a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a18:	f042 0204 	orr.w	r2, r2, #4
 8000a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a20:	f002 0204 	and.w	r2, r2, #4
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a28:	9401      	str	r4, [sp, #4]
 8000a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a30:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a34:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	9402      	str	r4, [sp, #8]
 8000a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a40:	f042 0201 	orr.w	r2, r2, #1
 8000a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a48:	f002 0201 	and.w	r2, r2, #1
 8000a4c:	9202      	str	r2, [sp, #8]
 8000a4e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	9403      	str	r4, [sp, #12]
 8000a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a54:	f042 0202 	orr.w	r2, r2, #2
 8000a58:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a5c:	f002 0202 	and.w	r2, r2, #2
 8000a60:	9203      	str	r2, [sp, #12]
 8000a62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a64:	9404      	str	r4, [sp, #16]
 8000a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a68:	f042 0208 	orr.w	r2, r2, #8
 8000a6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	9304      	str	r3, [sp, #16]
 8000a76:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 8000a78:	4f3d      	ldr	r7, [pc, #244]	@ (8000b70 <MX_GPIO_Init+0x170>)
 8000a7a:	4622      	mov	r2, r4
 8000a7c:	f240 3181 	movw	r1, #897	@ 0x381
 8000a80:	4638      	mov	r0, r7
 8000a82:	f002 fdff 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	210e      	movs	r1, #14
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	f002 fdfa 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a90:	4e38      	ldr	r6, [pc, #224]	@ (8000b74 <MX_GPIO_Init+0x174>)
 8000a92:	4622      	mov	r2, r4
 8000a94:	2120      	movs	r1, #32
 8000a96:	4630      	mov	r0, r6
 8000a98:	f002 fdf4 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	f002 fdee 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin PCHG_RLY_CTRL_Pin AIR_P_CTRL_Pin AIR_N_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin;
 8000aa8:	f240 3381 	movw	r3, #897	@ 0x381
 8000aac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2501      	movs	r5, #1
 8000ab0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	a905      	add	r1, sp, #20
 8000ab8:	4638      	mov	r0, r7
 8000aba:	f002 fc47 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000abe:	f04f 0902 	mov.w	r9, #2
 8000ac2:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	f04f 0803 	mov.w	r8, #3
 8000ace:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	a905      	add	r1, sp, #20
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f002 fc39 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8000ada:	f04f 0a0c 	mov.w	sl, #12
 8000ade:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	a905      	add	r1, sp, #20
 8000aea:	4638      	mov	r0, r7
 8000aec:	f002 fc2e 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af0:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	a905      	add	r1, sp, #20
 8000b04:	4630      	mov	r0, r6
 8000b06:	f002 fc21 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	a905      	add	r1, sp, #20
 8000b16:	4630      	mov	r0, r6
 8000b18:	f002 fc18 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : RTD_BTN_Pin PB5 */
  GPIO_InitStruct.Pin = RTD_BTN_Pin|GPIO_PIN_5;
 8000b1c:	2324      	movs	r3, #36	@ 0x24
 8000b1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	a905      	add	r1, sp, #20
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_GPIO_Init+0x178>)
 8000b28:	f002 fc10 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_BTN_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_BTN_Pin;
 8000b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PRECHARGE_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b36:	a905      	add	r1, sp, #20
 8000b38:	4630      	mov	r0, r6
 8000b3a:	f002 fc07 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8000b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	a905      	add	r1, sp, #20
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f002 fbfc 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	a905      	add	r1, sp, #20
 8000b5e:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <MX_GPIO_Init+0x17c>)
 8000b60:	f002 fbf4 	bl	800334c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	b00a      	add	sp, #40	@ 0x28
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <MX_DMA_Init>:
{
 8000b80:	b510      	push	{r4, lr}
 8000b82:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b84:	2400      	movs	r4, #0
 8000b86:	9400      	str	r4, [sp, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <MX_DMA_Init+0x54>)
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b8c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b94:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000b98:	9200      	str	r2, [sp, #0]
 8000b9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9c:	9401      	str	r4, [sp, #4]
 8000b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ba0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	f002 f822 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f002 f83b 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	2038      	movs	r0, #56	@ 0x38
 8000bc6:	f002 f81a 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bca:	2038      	movs	r0, #56	@ 0x38
 8000bcc:	f002 f833 	bl	8002c36 <HAL_NVIC_EnableIRQ>
}
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <updateRpm>:
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <updateRpm+0x20>)
 8000bda:	7ad3      	ldrb	r3, [r2, #11]
			| (rxMessage.frame.data3 << 8));
 8000bdc:	7b12      	ldrb	r2, [r2, #12]
 8000bde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bee:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <updateRpm+0x24>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200000b8 	.word	0x200000b8
 8000bfc:	20000054 	.word	0x20000054

08000c00 <updateBMSDiagnostics>:
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data0 << 8) | rxMessage.frame.data1);  // Little-endian
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <updateBMSDiagnostics+0x4c>)
 8000c02:	7a53      	ldrb	r3, [r2, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	7a91      	ldrb	r1, [r2, #10]
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	ee07 3a90 	vmov	s15, r3
	float pack_current = pack_current_raw * 0.1f;
 8000c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c14:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000c50 <updateBMSDiagnostics+0x50>
 8000c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
	uint16_t pack_voltage_raw = (rxMessage.frame.data2 << 8) | rxMessage.frame.data3;
 8000c1c:	7ad1      	ldrb	r1, [r2, #11]
 8000c1e:	7b13      	ldrb	r3, [r2, #12]
 8000c20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000c24:	ee07 3a10 	vmov	s14, r3
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c2c:	ee27 7a26 	vmul.f32	s14, s14, s13
	bool is_ready = (rxMessage.frame.data6) & 0x01;
 8000c30:	7bd2      	ldrb	r2, [r2, #15]
 8000c32:	f002 0201 	and.w	r2, r2, #1
	bms_diagnostics.inverterActive = is_ready ? 1 : 0;
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <updateBMSDiagnostics+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
	bms_diagnostics.packCurrent    = (int)pack_current;
 8000c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]
	bms_diagnostics.packVoltage    = (int)pack_voltage;
 8000c42:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000c46:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8000c4a:	4770      	bx	lr
 8000c4c:	200000b8 	.word	0x200000b8
 8000c50:	3dcccccd 	.word	0x3dcccccd
 8000c54:	2000005c 	.word	0x2000005c

08000c58 <updateInverterVolts>:
	int16_t inverter_dc_volts_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <updateInverterVolts+0x28>)
 8000c5a:	7a93      	ldrb	r3, [r2, #10]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	7a52      	ldrb	r2, [r2, #9]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	ee07 3a90 	vmov	s15, r3
	float inverter_dc_volts = inverter_dc_volts_raw * 0.1f;
 8000c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000c84 <updateInverterVolts+0x2c>
 8000c70:	ee67 7a87 	vmul.f32	s15, s15, s14
	inverter_diagnostics.inverterDCVolts    = (int)inverter_dc_volts;
 8000c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <updateInverterVolts+0x30>)
 8000c7a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000c7e:	4770      	bx	lr
 8000c80:	200000b8 	.word	0x200000b8
 8000c84:	3dcccccd 	.word	0x3dcccccd
 8000c88:	20000054 	.word	0x20000054

08000c8c <readFromCAN>:
void readFromCAN() {
 8000c8c:	b508      	push	{r3, lr}
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <readFromCAN+0x30>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c94:	d009      	beq.n	8000caa <readFromCAN+0x1e>
	if (rxMessage.frame.id == INVERTER_VOLTAGE_READ_ID) {
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <readFromCAN+0x30>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2ba7      	cmp	r3, #167	@ 0xa7
 8000c9c:	d008      	beq.n	8000cb0 <readFromCAN+0x24>
	if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <readFromCAN+0x30>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 6fd6 	cmp.w	r3, #1712	@ 0x6b0
 8000ca6:	d006      	beq.n	8000cb6 <readFromCAN+0x2a>
}
 8000ca8:	bd08      	pop	{r3, pc}
		updateRpm();
 8000caa:	f7ff ff95 	bl	8000bd8 <updateRpm>
 8000cae:	e7f2      	b.n	8000c96 <readFromCAN+0xa>
		updateInverterVolts();
 8000cb0:	f7ff ffd2 	bl	8000c58 <updateInverterVolts>
 8000cb4:	e7f3      	b.n	8000c9e <readFromCAN+0x12>
		updateBMSDiagnostics();
 8000cb6:	f7ff ffa3 	bl	8000c00 <updateBMSDiagnostics>
}
 8000cba:	e7f5      	b.n	8000ca8 <readFromCAN+0x1c>
 8000cbc:	200000b8 	.word	0x200000b8

08000cc0 <HAL_ADC_ConvCpltCallback>:
	apps1Value = ADC_Reads[APPS1_RANK-1];
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000cc6:	600a      	str	r2, [r1, #0]
	apps2Value = ADC_Reads[APPS2_RANK-1];
 8000cc8:	4906      	ldr	r1, [pc, #24]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000cca:	600a      	str	r2, [r1, #0]
	bseValue   = ADC_Reads[BSE_RANK-1];
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000cd0:	601a      	str	r2, [r3, #0]
	dma_read_complete = 1;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	200000b4 	.word	0x200000b4
 8000ce4:	200000b0 	.word	0x200000b0
 8000ce8:	200000ac 	.word	0x200000ac
 8000cec:	20000002 	.word	0x20000002

08000cf0 <calculateTorqueRequest>:
 	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <calculateTorqueRequest+0x84>)
 8000cf2:	ed93 7a00 	vldr	s14, [r3]
 8000cf6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000cfa:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8000d78 <calculateTorqueRequest+0x88>
 8000cfe:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000d02:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000d7c <calculateTorqueRequest+0x8c>
 8000d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <calculateTorqueRequest+0x90>)
 8000d0c:	ed93 7a00 	vldr	s14, [r3]
 8000d10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d14:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000d18:	ee87 6a26 	vdiv.f32	s12, s14, s13
 	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 8000d1c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000d20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 	if(appsValue >= 0){
 8000d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d30:	db0b      	blt.n	8000d4a <calculateTorqueRequest+0x5a>
 		requestedTorque = ((float)(MAX_TORQUE-MIN_TORQUE)) * appsValue + MIN_TORQUE;
 8000d32:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000d84 <calculateTorqueRequest+0x94>
 8000d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000d88 <calculateTorqueRequest+0x98>
 8000d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <calculateTorqueRequest+0x9c>)
 8000d44:	edc3 7a00 	vstr	s15, [r3]
 8000d48:	4770      	bx	lr
 		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <calculateTorqueRequest+0xa0>)
 8000d4c:	ed93 7a00 	vldr	s14, [r3]
 8000d50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d54:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000d94 <calculateTorqueRequest+0xa4>
 8000d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000d5c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d64:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000d88 <calculateTorqueRequest+0x98>
 8000d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <calculateTorqueRequest+0x9c>)
 8000d6e:	edc3 7a00 	vstr	s15, [r3]
 }
 8000d72:	4770      	bx	lr
 8000d74:	200000b4 	.word	0x200000b4
 8000d78:	44228000 	.word	0x44228000
 8000d7c:	45576000 	.word	0x45576000
 8000d80:	200000b0 	.word	0x200000b0
 8000d84:	42d80000 	.word	0x42d80000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	200000a8 	.word	0x200000a8
 8000d90:	200000ac 	.word	0x200000ac
 8000d94:	457ff000 	.word	0x457ff000

08000d98 <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000d98:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000d9a:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <checkAPPSPlausibility+0x98>)
 8000d9c:	ed93 7a00 	vldr	s14, [r3]
 8000da0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000da4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000e34 <checkAPPSPlausibility+0x9c>
 8000da8:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000dac:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8000e38 <checkAPPSPlausibility+0xa0>
 8000db0:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8000db4:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8000e3c <checkAPPSPlausibility+0xa4>
 8000db8:	ee67 7a86 	vmul.f32	s15, s15, s12
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <checkAPPSPlausibility+0xa8>)
 8000dbe:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000dc2:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <checkAPPSPlausibility+0xac>)
 8000dc4:	ed93 7a00 	vldr	s14, [r3]
 8000dc8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000dcc:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000dd0:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8000dd4:	ee26 7a86 	vmul.f32	s14, s13, s12
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <checkAPPSPlausibility+0xb0>)
 8000dda:	ed83 7a00 	vstr	s14, [r3]
	float paininmyass = fabsf(apps1_as_percent - apps2_as_percent);
 8000dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
	if (fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000de2:	eef0 7ae7 	vabs.f32	s15, s15
 8000de6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df2:	dc06      	bgt.n	8000e02 <checkAPPSPlausibility+0x6a>
	else if (!apps_plausible
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <checkAPPSPlausibility+0xb4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b173      	cbz	r3, 8000e18 <checkAPPSPlausibility+0x80>
		apps_plausible = 1; // true
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <checkAPPSPlausibility+0xb4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	801a      	strh	r2, [r3, #0]
}
 8000e00:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8000e02:	f001 f8e5 	bl	8001fd0 <HAL_GetTick>
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <checkAPPSPlausibility+0xb8>)
 8000e08:	6018      	str	r0, [r3, #0]
		apps_plausible = 0; // false
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <checkAPPSPlausibility+0xb4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000e10:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <checkAPPSPlausibility+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e7f3      	b.n	8000e00 <checkAPPSPlausibility+0x68>
			&& (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000e18:	f001 f8da 	bl	8001fd0 <HAL_GetTick>
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <checkAPPSPlausibility+0xb8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1ac0      	subs	r0, r0, r3
 8000e22:	2863      	cmp	r0, #99	@ 0x63
 8000e24:	d8e9      	bhi.n	8000dfa <checkAPPSPlausibility+0x62>
		requestedTorque = 0;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <checkAPPSPlausibility+0xbc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e7e8      	b.n	8000e00 <checkAPPSPlausibility+0x68>
 8000e2e:	bf00      	nop
 8000e30:	200000b4 	.word	0x200000b4
 8000e34:	44228000 	.word	0x44228000
 8000e38:	45576000 	.word	0x45576000
 8000e3c:	42c80000 	.word	0x42c80000
 8000e40:	20000084 	.word	0x20000084
 8000e44:	200000b0 	.word	0x200000b0
 8000e48:	20000080 	.word	0x20000080
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	20000098 	.word	0x20000098
 8000e54:	200000a8 	.word	0x200000a8

08000e58 <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000e58:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <checkCrossCheck+0xac>)
 8000e5a:	ed93 7a00 	vldr	s14, [r3]
 8000e5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
					/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000e62:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000f08 <checkCrossCheck+0xb0>
 8000e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e6a:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000f0c <checkCrossCheck+0xb4>
 8000e6e:	ee67 7a86 	vmul.f32	s15, s15, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000e72:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <checkCrossCheck+0xb8>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <checkCrossCheck+0xbc>)
 8000e7a:	ed93 7a00 	vldr	s14, [r3]
 8000e7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000e82:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8000f18 <checkCrossCheck+0xc0>
 8000e86:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000e8a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8000f1c <checkCrossCheck+0xc4>
 8000e8e:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e92:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e96:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <checkCrossCheck+0xc8>)
 8000e98:	ed93 7a00 	vldr	s14, [r3]
 8000e9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000ea0:	ee37 7a66 	vsub.f32	s14, s14, s13
					/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000ea4:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ea8:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000eb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8000eb8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	dd0b      	ble.n	8000ede <checkCrossCheck+0x86>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <checkCrossCheck+0xac>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000ece:	d906      	bls.n	8000ede <checkCrossCheck+0x86>
		cross_check_plausible = 0;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <checkCrossCheck+0xcc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <checkCrossCheck+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4770      	bx	lr
	else if (!cross_check_plausible
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <checkCrossCheck+0xcc>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b953      	cbnz	r3, 8000efa <checkCrossCheck+0xa2>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 8000ee4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	dd03      	ble.n	8000efa <checkCrossCheck+0xa2>
		requestedTorque = 0;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <checkCrossCheck+0xd0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4770      	bx	lr
		cross_check_plausible = 1;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <checkCrossCheck+0xcc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	801a      	strh	r2, [r3, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200000ac 	.word	0x200000ac
 8000f08:	457ff000 	.word	0x457ff000
 8000f0c:	42c80000 	.word	0x42c80000
 8000f10:	2000007c 	.word	0x2000007c
 8000f14:	200000b4 	.word	0x200000b4
 8000f18:	44228000 	.word	0x44228000
 8000f1c:	45576000 	.word	0x45576000
 8000f20:	200000b0 	.word	0x200000b0
 8000f24:	20000000 	.word	0x20000000
 8000f28:	200000a8 	.word	0x200000a8

08000f2c <sendTorqueCommand>:
void sendTorqueCommand(void) {
 8000f2c:	b510      	push	{r4, lr}
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <sendTorqueCommand+0x5c>)
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f40:	ee17 2a90 	vmov	r2, s15
	char msg1 = (torqueValue >> 8) & 0xFF;
 8000f44:	f3c2 2007 	ubfx	r0, r2, #8, #8
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	7019      	strb	r1, [r3, #0]
	txMessage.frame.id = 0x0C0;
 8000f4e:	24c0      	movs	r4, #192	@ 0xc0
 8000f50:	605c      	str	r4, [r3, #4]
	txMessage.frame.dlc = 8;
 8000f52:	f04f 0c08 	mov.w	ip, #8
 8000f56:	f883 c008 	strb.w	ip, [r3, #8]
	txMessage.frame.data0 = msg0; //torque request
 8000f5a:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1 = msg1;
 8000f5c:	7298      	strb	r0, [r3, #10]
	txMessage.frame.data2 = 0; // speed request (only maters in speed mode)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 8000f62:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 1; //direction
 8000f64:	7359      	strb	r1, [r3, #13]
	if(beginTorqueRequests){
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <sendTorqueCommand+0x64>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b143      	cbz	r3, 8000f7e <sendTorqueCommand+0x52>
		txMessage.frame.data5 = 1; //
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f6e:	7399      	strb	r1, [r3, #14]
	txMessage.frame.data6 = 0;
 8000f70:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73c3      	strb	r3, [r0, #15]
	txMessage.frame.data7 = 0;
 8000f76:	7403      	strb	r3, [r0, #16]
	CANSPI_Transmit(&txMessage);
 8000f78:	f7ff fb82 	bl	8000680 <CANSPI_Transmit>
}
 8000f7c:	bd10      	pop	{r4, pc}
		txMessage.frame.data5 = 0;
 8000f7e:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <sendTorqueCommand+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	739a      	strb	r2, [r3, #14]
 8000f84:	e7f4      	b.n	8000f70 <sendTorqueCommand+0x44>
 8000f86:	bf00      	nop
 8000f88:	200000a8 	.word	0x200000a8
 8000f8c:	200000cc 	.word	0x200000cc
 8000f90:	2000009c 	.word	0x2000009c

08000f94 <checkReadyToDrive>:
void checkReadyToDrive(void) {
 8000f94:	b510      	push	{r4, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port, RTD_BTN_Pin);
 8000f96:	2104      	movs	r1, #4
 8000f98:	481a      	ldr	r0, [pc, #104]	@ (8001004 <checkReadyToDrive+0x70>)
 8000f9a:	f002 fb5b 	bl	8003654 <HAL_GPIO_ReadPin>
 8000f9e:	4604      	mov	r4, r0
	cpockandballs = HAL_GetTick() -millis_RTD;
 8000fa0:	f001 f816 	bl	8001fd0 <HAL_GetTick>
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <checkReadyToDrive+0x74>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1ac0      	subs	r0, r0, r3
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <checkReadyToDrive+0x78>)
 8000fac:	6018      	str	r0, [r3, #0]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8000fae:	2c01      	cmp	r4, #1
 8000fb0:	d00c      	beq.n	8000fcc <checkReadyToDrive+0x38>
	else if (pinState == GPIO_PIN_RESET || bseValue < BRAKE_ACTIVATED_ADC_VAL || !bms_diagnostics.inverterActive ){
 8000fb2:	b13c      	cbz	r4, 8000fc4 <checkReadyToDrive+0x30>
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <checkReadyToDrive+0x7c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000fbc:	d302      	bcc.n	8000fc4 <checkReadyToDrive+0x30>
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <checkReadyToDrive+0x80>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	b9c3      	cbnz	r3, 8000ff6 <checkReadyToDrive+0x62>
		rtdState = false;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <checkReadyToDrive+0x84>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
}
 8000fca:	bd10      	pop	{r4, pc}
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <checkReadyToDrive+0x7c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000fd4:	d9ed      	bls.n	8000fb2 <checkReadyToDrive+0x1e>
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <checkReadyToDrive+0x80>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0e9      	beq.n	8000fb2 <checkReadyToDrive+0x1e>
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <checkReadyToDrive+0x84>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1e5      	bne.n	8000fb2 <checkReadyToDrive+0x1e>
		rtdState = true;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <checkReadyToDrive+0x84>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
		millis_RTD = HAL_GetTick();
 8000fec:	f000 fff0 	bl	8001fd0 <HAL_GetTick>
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <checkReadyToDrive+0x74>)
 8000ff2:	6018      	str	r0, [r3, #0]
 8000ff4:	e7e9      	b.n	8000fca <checkReadyToDrive+0x36>
	else if(cpockandballs >= RTD_BUTTON_PRESS_MILLIS){
 8000ff6:	2863      	cmp	r0, #99	@ 0x63
 8000ff8:	d9e7      	bls.n	8000fca <checkReadyToDrive+0x36>
		readyToDrive = true;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <checkReadyToDrive+0x88>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	e7e3      	b.n	8000fca <checkReadyToDrive+0x36>
 8001002:	bf00      	nop
 8001004:	40020400 	.word	0x40020400
 8001008:	20000070 	.word	0x20000070
 800100c:	20000074 	.word	0x20000074
 8001010:	200000ac 	.word	0x200000ac
 8001014:	2000005c 	.word	0x2000005c
 8001018:	20000078 	.word	0x20000078
 800101c:	20000079 	.word	0x20000079

08001020 <prechargeSequence>:
uint8_t prechargeSequence(void){
 8001020:	b538      	push	{r3, r4, r5, lr}
	 startPrechargeTime = HAL_GetTick();
 8001022:	f000 ffd5 	bl	8001fd0 <HAL_GetTick>
 8001026:	4c2f      	ldr	r4, [pc, #188]	@ (80010e4 <prechargeSequence+0xc4>)
 8001028:	6020      	str	r0, [r4, #0]
	 HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f000 ffdc 	bl	8001fe8 <HAL_Delay>
	  HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_SET); //steps 1 and 2
 8001030:	4d2d      	ldr	r5, [pc, #180]	@ (80010e8 <prechargeSequence+0xc8>)
 8001032:	2201      	movs	r2, #1
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	4628      	mov	r0, r5
 8001038:	f002 fb24 	bl	8003684 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 ffd3 	bl	8001fe8 <HAL_Delay>
	  HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_SET); //steps 1 and 2
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001048:	4628      	mov	r0, r5
 800104a:	f002 fb1b 	bl	8003684 <HAL_GPIO_WritePin>
	  penis = HAL_GetTick() - startPrechargeTime;
 800104e:	f000 ffbf 	bl	8001fd0 <HAL_GetTick>
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	1ac3      	subs	r3, r0, r3
 8001056:	4a25      	ldr	r2, [pc, #148]	@ (80010ec <prechargeSequence+0xcc>)
 8001058:	6013      	str	r3, [r2, #0]
	  while (penis < PRECHARGE_TIMEOUT_MS && HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin) == GPIO_PIN_SET) { //loop for 4
 800105a:	e00d      	b.n	8001078 <prechargeSequence+0x58>
		  if (bms_diagnostics.packVoltage - inverter_diagnostics.inverterDCVolts < PRECHARGE_VOLTAGE_DIFF) {
 800105c:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <prechargeSequence+0xd0>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a24      	ldr	r2, [pc, #144]	@ (80010f4 <prechargeSequence+0xd4>)
 8001062:	6852      	ldr	r2, [r2, #4]
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	2b13      	cmp	r3, #19
 8001068:	dd2a      	ble.n	80010c0 <prechargeSequence+0xa0>
		  penis = HAL_GetTick() - startPrechargeTime;
 800106a:	f000 ffb1 	bl	8001fd0 <HAL_GetTick>
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <prechargeSequence+0xc4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	1ac0      	subs	r0, r0, r3
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <prechargeSequence+0xcc>)
 8001076:	6018      	str	r0, [r3, #0]
	  while (penis < PRECHARGE_TIMEOUT_MS && HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin) == GPIO_PIN_SET) { //loop for 4
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <prechargeSequence+0xcc>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001080:	429a      	cmp	r2, r3
 8001082:	d80d      	bhi.n	80010a0 <prechargeSequence+0x80>
 8001084:	2104      	movs	r1, #4
 8001086:	481c      	ldr	r0, [pc, #112]	@ (80010f8 <prechargeSequence+0xd8>)
 8001088:	f002 fae4 	bl	8003654 <HAL_GPIO_ReadPin>
 800108c:	2801      	cmp	r0, #1
 800108e:	d107      	bne.n	80010a0 <prechargeSequence+0x80>
		  if (CANSPI_Receive(&rxMessage)) {
 8001090:	481a      	ldr	r0, [pc, #104]	@ (80010fc <prechargeSequence+0xdc>)
 8001092:	f7ff fb89 	bl	80007a8 <CANSPI_Receive>
 8001096:	2800      	cmp	r0, #0
 8001098:	d0e0      	beq.n	800105c <prechargeSequence+0x3c>
			  readFromCAN();
 800109a:	f7ff fdf7 	bl	8000c8c <readFromCAN>
 800109e:	e7dd      	b.n	800105c <prechargeSequence+0x3c>
	  HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET);
 80010a0:	4c11      	ldr	r4, [pc, #68]	@ (80010e8 <prechargeSequence+0xc8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	2180      	movs	r1, #128	@ 0x80
 80010a6:	4620      	mov	r0, r4
 80010a8:	f002 faec 	bl	8003684 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 80010ac:	2005      	movs	r0, #5
 80010ae:	f000 ff9b 	bl	8001fe8 <HAL_Delay>
	  HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b8:	4620      	mov	r0, r4
 80010ba:	f002 fae3 	bl	8003684 <HAL_GPIO_WritePin>
	  while (1) {
 80010be:	e7fe      	b.n	80010be <prechargeSequence+0x9e>
			  HAL_GPIO_WritePin(AIR_P_CTRL_GPIO_Port, AIR_P_CTRL_Pin, GPIO_PIN_SET); //step 4
 80010c0:	4c09      	ldr	r4, [pc, #36]	@ (80010e8 <prechargeSequence+0xc8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c8:	4620      	mov	r0, r4
 80010ca:	f002 fadb 	bl	8003684 <HAL_GPIO_WritePin>
			  HAL_Delay(5);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f000 ff8a 	bl	8001fe8 <HAL_Delay>
			  HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	4620      	mov	r0, r4
 80010da:	f002 fad3 	bl	8003684 <HAL_GPIO_WritePin>
}
 80010de:	2001      	movs	r0, #1
 80010e0:	bd38      	pop	{r3, r4, r5, pc}
 80010e2:	bf00      	nop
 80010e4:	20000040 	.word	0x20000040
 80010e8:	40020800 	.word	0x40020800
 80010ec:	2000003c 	.word	0x2000003c
 80010f0:	2000005c 	.word	0x2000005c
 80010f4:	20000054 	.word	0x20000054
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	200000b8 	.word	0x200000b8

08001100 <sendPrechargeRequest>:
void sendPrechargeRequest(void){
 8001100:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_BTN_GPIO_Port, PRECHARGE_BTN_Pin);
 8001102:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001106:	4812      	ldr	r0, [pc, #72]	@ (8001150 <sendPrechargeRequest+0x50>)
 8001108:	f002 faa4 	bl	8003654 <HAL_GPIO_ReadPin>
		if(pinState == GPIO_PIN_SET && !prechargeState){
 800110c:	2801      	cmp	r0, #1
 800110e:	d004      	beq.n	800111a <sendPrechargeRequest+0x1a>
		else if (pinState == GPIO_PIN_RESET){
 8001110:	b978      	cbnz	r0, 8001132 <sendPrechargeRequest+0x32>
			prechargeState = false;
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <sendPrechargeRequest+0x54>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bd08      	pop	{r3, pc}
		if(pinState == GPIO_PIN_SET && !prechargeState){
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <sendPrechargeRequest+0x54>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f6      	bne.n	8001110 <sendPrechargeRequest+0x10>
			prechargeState = true;
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <sendPrechargeRequest+0x54>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			millis_precharge = HAL_GetTick();
 8001128:	f000 ff52 	bl	8001fd0 <HAL_GetTick>
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <sendPrechargeRequest+0x58>)
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	e7f2      	b.n	8001118 <sendPrechargeRequest+0x18>
		else if(HAL_GetTick()-millis_precharge >= PRECHARGE_BUTTON_PRESS_MILLIS){
 8001132:	f000 ff4d 	bl	8001fd0 <HAL_GetTick>
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <sendPrechargeRequest+0x58>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1ac0      	subs	r0, r0, r3
 800113c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001140:	d3ea      	bcc.n	8001118 <sendPrechargeRequest+0x18>
			prechargeSequence();
 8001142:	f7ff ff6d 	bl	8001020 <prechargeSequence>
			prechargeFinished = true;
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <sendPrechargeRequest+0x5c>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	e7e4      	b.n	8001118 <sendPrechargeRequest+0x18>
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000
 8001154:	2000006d 	.word	0x2000006d
 8001158:	20000068 	.word	0x20000068
 800115c:	2000006c 	.word	0x2000006c

08001160 <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <HAL_I2S_TxCpltCallback+0x50>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d000      	beq.n	800116a <HAL_I2S_TxCpltCallback+0xa>
 8001168:	4770      	bx	lr
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_I2S_TxCpltCallback+0x54>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1fa      	bne.n	8001168 <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_I2S_TxCpltCallback+0x58>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_I2S_TxCpltCallback+0x5c>)
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	d214      	bcs.n	80011a8 <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800117e:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 8001180:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8001182:	f247 5130 	movw	r1, #30000	@ 0x7530
 8001186:	428a      	cmp	r2, r1
 8001188:	d80b      	bhi.n	80011a2 <HAL_I2S_TxCpltCallback+0x42>
 800118a:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <HAL_I2S_TxCpltCallback+0x60>)
 800118e:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 8001190:	18d4      	adds	r4, r2, r3
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <HAL_I2S_TxCpltCallback+0x58>)
 8001194:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 8001196:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800119a:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <HAL_I2S_TxCpltCallback+0x64>)
 800119c:	f002 fbcc 	bl	8003938 <HAL_I2S_Transmit_DMA>
}
 80011a0:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 80011a2:	f247 5230 	movw	r2, #30000	@ 0x7530
 80011a6:	e7f1      	b.n	800118c <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 80011a8:	4b02      	ldr	r3, [pc, #8]	@ (80011b4 <HAL_I2S_TxCpltCallback+0x54>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	4770      	bx	lr
 80011b0:	40003800 	.word	0x40003800
 80011b4:	20000044 	.word	0x20000044
 80011b8:	20000050 	.word	0x20000050
 80011bc:	20000048 	.word	0x20000048
 80011c0:	2000004c 	.word	0x2000004c
 80011c4:	200001e0 	.word	0x200001e0

080011c8 <PlayStartupSoundOnce>:
void PlayStartupSoundOnce(void) {
 80011c8:	b508      	push	{r3, lr}
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 80011ca:	4909      	ldr	r1, [pc, #36]	@ (80011f0 <PlayStartupSoundOnce+0x28>)
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <PlayStartupSoundOnce+0x2c>)
 80011ce:	6019      	str	r1, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <PlayStartupSoundOnce+0x30>)
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <PlayStartupSoundOnce+0x34>)
 80011d4:	601a      	str	r2, [r3, #0]
	wavPos = 0;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <PlayStartupSoundOnce+0x38>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 80011dc:	4809      	ldr	r0, [pc, #36]	@ (8001204 <PlayStartupSoundOnce+0x3c>)
 80011de:	7002      	strb	r2, [r0, #0]
	wavPos += thisChunk;
 80011e0:	f247 5230 	movw	r2, #30000	@ 0x7530
 80011e4:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <PlayStartupSoundOnce+0x40>)
 80011e8:	f002 fba6 	bl	8003938 <HAL_I2S_Transmit_DMA>
}
 80011ec:	bd08      	pop	{r3, pc}
 80011ee:	bf00      	nop
 80011f0:	08006220 	.word	0x08006220
 80011f4:	2000004c 	.word	0x2000004c
 80011f8:	20000048 	.word	0x20000048
 80011fc:	00028056 	.word	0x00028056
 8001200:	20000050 	.word	0x20000050
 8001204:	20000044 	.word	0x20000044
 8001208:	200001e0 	.word	0x200001e0

0800120c <lookForRTD>:
void lookForRTD(void) {
 800120c:	b538      	push	{r3, r4, r5, lr}
	if (rtdoverride == 1) {
 800120e:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <lookForRTD+0xd4>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d125      	bne.n	8001262 <lookForRTD+0x56>
		beginTorqueRequests = true;
 8001216:	4b33      	ldr	r3, [pc, #204]	@ (80012e4 <lookForRTD+0xd8>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
		PlayStartupSoundOnce();
 800121c:	f7ff ffd4 	bl	80011c8 <PlayStartupSoundOnce>
}
 8001220:	bd38      	pop	{r3, r4, r5, pc}
			readFromCAN();
 8001222:	f7ff fd33 	bl	8000c8c <readFromCAN>
 8001226:	e025      	b.n	8001274 <lookForRTD+0x68>
		  HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f000 fedd 	bl	8001fe8 <HAL_Delay>
		while (HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin) == GPIO_PIN_RESET) {
 800122e:	2104      	movs	r1, #4
 8001230:	482d      	ldr	r0, [pc, #180]	@ (80012e8 <lookForRTD+0xdc>)
 8001232:	f002 fa0f 	bl	8003654 <HAL_GPIO_ReadPin>
 8001236:	2800      	cmp	r0, #0
 8001238:	d0f6      	beq.n	8001228 <lookForRTD+0x1c>
 800123a:	e001      	b.n	8001240 <lookForRTD+0x34>
			sendPrechargeRequest();
 800123c:	f7ff ff60 	bl	8001100 <sendPrechargeRequest>
		while(!prechargeFinished){
 8001240:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <lookForRTD+0xe0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b93b      	cbnz	r3, 8001256 <lookForRTD+0x4a>
			if (CANSPI_Receive(&rxMessage)) {
 8001246:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <lookForRTD+0xe4>)
 8001248:	f7ff faae 	bl	80007a8 <CANSPI_Receive>
 800124c:	2800      	cmp	r0, #0
 800124e:	d0f5      	beq.n	800123c <lookForRTD+0x30>
				readFromCAN();
 8001250:	f7ff fd1c 	bl	8000c8c <readFromCAN>
 8001254:	e7f2      	b.n	800123c <lookForRTD+0x30>
		uint8_t prevReadyToDrive = readyToDrive;
 8001256:	4c27      	ldr	r4, [pc, #156]	@ (80012f4 <lookForRTD+0xe8>)
 8001258:	7825      	ldrb	r5, [r4, #0]
		checkReadyToDrive();
 800125a:	f7ff fe9b 	bl	8000f94 <checkReadyToDrive>
		if (readyToDrive) {
 800125e:	7823      	ldrb	r3, [r4, #0]
 8001260:	b9cb      	cbnz	r3, 8001296 <lookForRTD+0x8a>
	while(!readyToDrive) {
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <lookForRTD+0xe8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1da      	bne.n	8001220 <lookForRTD+0x14>
		if (CANSPI_Receive(&rxMessage)) {
 800126a:	4821      	ldr	r0, [pc, #132]	@ (80012f0 <lookForRTD+0xe4>)
 800126c:	f7ff fa9c 	bl	80007a8 <CANSPI_Receive>
 8001270:	2800      	cmp	r0, #0
 8001272:	d1d6      	bne.n	8001222 <lookForRTD+0x16>
		if(dma_read_complete){
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <lookForRTD+0xec>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0d8      	beq.n	800122e <lookForRTD+0x22>
			HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 800127c:	2203      	movs	r2, #3
 800127e:	491f      	ldr	r1, [pc, #124]	@ (80012fc <lookForRTD+0xf0>)
 8001280:	481f      	ldr	r0, [pc, #124]	@ (8001300 <lookForRTD+0xf4>)
 8001282:	f001 f829 	bl	80022d8 <HAL_ADC_Start_DMA>
			dma_read_complete = 0;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <lookForRTD+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
			millis_since_dma_read = HAL_GetTick();
 800128c:	f000 fea0 	bl	8001fd0 <HAL_GetTick>
 8001290:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <lookForRTD+0xf8>)
 8001292:	6018      	str	r0, [r3, #0]
 8001294:	e7cb      	b.n	800122e <lookForRTD+0x22>
			if(!prevReadyToDrive){
 8001296:	b11d      	cbz	r5, 80012a0 <lookForRTD+0x94>
				beginTorqueRequests = false;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <lookForRTD+0xd8>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e7e0      	b.n	8001262 <lookForRTD+0x56>
				beginTorqueRequests = true;
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <lookForRTD+0xd8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
				PlayStartupSoundOnce();
 80012a6:	f7ff ff8f 	bl	80011c8 <PlayStartupSoundOnce>
				for (int erectiledysfunction = 0; erectiledysfunction < 3; erectiledysfunction++) {
 80012aa:	2400      	movs	r4, #0
 80012ac:	e015      	b.n	80012da <lookForRTD+0xce>
					txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80012ae:	4816      	ldr	r0, [pc, #88]	@ (8001308 <lookForRTD+0xfc>)
 80012b0:	2301      	movs	r3, #1
 80012b2:	7003      	strb	r3, [r0, #0]
					txMessage.frame.id = 0x0C0;
 80012b4:	23c0      	movs	r3, #192	@ 0xc0
 80012b6:	6043      	str	r3, [r0, #4]
					txMessage.frame.dlc = 8;
 80012b8:	2308      	movs	r3, #8
 80012ba:	7203      	strb	r3, [r0, #8]
					txMessage.frame.data0 = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	7243      	strb	r3, [r0, #9]
					txMessage.frame.data1 = 0;
 80012c0:	7283      	strb	r3, [r0, #10]
					txMessage.frame.data2 = 0;
 80012c2:	72c3      	strb	r3, [r0, #11]
					txMessage.frame.data3 = 0;
 80012c4:	7303      	strb	r3, [r0, #12]
					txMessage.frame.data4 = 0;
 80012c6:	7343      	strb	r3, [r0, #13]
					txMessage.frame.data5 = 0;
 80012c8:	7383      	strb	r3, [r0, #14]
					txMessage.frame.data6 = 0;
 80012ca:	73c3      	strb	r3, [r0, #15]
					txMessage.frame.data7 = 0;
 80012cc:	7403      	strb	r3, [r0, #16]
					CANSPI_Transmit(&txMessage);
 80012ce:	f7ff f9d7 	bl	8000680 <CANSPI_Transmit>
					HAL_Delay(100);
 80012d2:	2064      	movs	r0, #100	@ 0x64
 80012d4:	f000 fe88 	bl	8001fe8 <HAL_Delay>
				for (int erectiledysfunction = 0; erectiledysfunction < 3; erectiledysfunction++) {
 80012d8:	3401      	adds	r4, #1
 80012da:	2c02      	cmp	r4, #2
 80012dc:	dde7      	ble.n	80012ae <lookForRTD+0xa2>
 80012de:	e7c0      	b.n	8001262 <lookForRTD+0x56>
 80012e0:	20000038 	.word	0x20000038
 80012e4:	2000009c 	.word	0x2000009c
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	2000006c 	.word	0x2000006c
 80012f0:	200000b8 	.word	0x200000b8
 80012f4:	20000079 	.word	0x20000079
 80012f8:	20000002 	.word	0x20000002
 80012fc:	20000088 	.word	0x20000088
 8001300:	20000288 	.word	0x20000288
 8001304:	20000094 	.word	0x20000094
 8001308:	200000cc 	.word	0x200000cc

0800130c <checkShutdown>:
void checkShutdown(){
 800130c:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 800130e:	2104      	movs	r1, #4
 8001310:	4807      	ldr	r0, [pc, #28]	@ (8001330 <checkShutdown+0x24>)
 8001312:	f002 f99f 	bl	8003654 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_RESET) {
 8001316:	b100      	cbz	r0, 800131a <checkShutdown+0xe>
}
 8001318:	bd08      	pop	{r3, pc}
		requestedTorque = 0;
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <checkShutdown+0x28>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 8001320:	f7ff fe04 	bl	8000f2c <sendTorqueCommand>
		readyToDrive = false;
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <checkShutdown+0x2c>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		lookForRTD();
 800132a:	f7ff ff6f 	bl	800120c <lookForRTD>
}
 800132e:	e7f3      	b.n	8001318 <checkShutdown+0xc>
 8001330:	40020c00 	.word	0x40020c00
 8001334:	200000a8 	.word	0x200000a8
 8001338:	20000079 	.word	0x20000079

0800133c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800133e:	e7fe      	b.n	800133e <Error_Handler+0x2>

08001340 <MX_ADC1_Init>:
{
 8001340:	b500      	push	{lr}
 8001342:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800134e:	4821      	ldr	r0, [pc, #132]	@ (80013d4 <MX_ADC1_Init+0x94>)
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <MX_ADC1_Init+0x98>)
 8001352:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001354:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001358:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800135c:	2201      	movs	r2, #1
 800135e:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001360:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001362:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800136a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800136c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001370:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001374:	2203      	movs	r2, #3
 8001376:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001378:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800137c:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137e:	f000 fe57 	bl	8002030 <HAL_ADC_Init>
 8001382:	b9f0      	cbnz	r0, 80013c2 <MX_ADC1_Init+0x82>
  sConfig.Channel = ADC_CHANNEL_14;
 8001384:	230e      	movs	r3, #14
 8001386:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800138c:	2303      	movs	r3, #3
 800138e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	4669      	mov	r1, sp
 8001392:	4810      	ldr	r0, [pc, #64]	@ (80013d4 <MX_ADC1_Init+0x94>)
 8001394:	f001 f8ae 	bl	80024f4 <HAL_ADC_ConfigChannel>
 8001398:	b9a8      	cbnz	r0, 80013c6 <MX_ADC1_Init+0x86>
  sConfig.Channel = ADC_CHANNEL_15;
 800139a:	230f      	movs	r3, #15
 800139c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 800139e:	2303      	movs	r3, #3
 80013a0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	4669      	mov	r1, sp
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <MX_ADC1_Init+0x94>)
 80013a6:	f001 f8a5 	bl	80024f4 <HAL_ADC_ConfigChannel>
 80013aa:	b970      	cbnz	r0, 80013ca <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80013b0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	4669      	mov	r1, sp
 80013b4:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_ADC1_Init+0x94>)
 80013b6:	f001 f89d 	bl	80024f4 <HAL_ADC_ConfigChannel>
 80013ba:	b940      	cbnz	r0, 80013ce <MX_ADC1_Init+0x8e>
}
 80013bc:	b005      	add	sp, #20
 80013be:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013c2:	f7ff ffbb 	bl	800133c <Error_Handler>
    Error_Handler();
 80013c6:	f7ff ffb9 	bl	800133c <Error_Handler>
    Error_Handler();
 80013ca:	f7ff ffb7 	bl	800133c <Error_Handler>
    Error_Handler();
 80013ce:	f7ff ffb5 	bl	800133c <Error_Handler>
 80013d2:	bf00      	nop
 80013d4:	20000288 	.word	0x20000288
 80013d8:	40012000 	.word	0x40012000

080013dc <MX_TIM3_Init>:
{
 80013dc:	b500      	push	{lr}
 80013de:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e0:	2300      	movs	r3, #0
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	9303      	str	r3, [sp, #12]
 80013e6:	9304      	str	r3, [sp, #16]
 80013e8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 80013ee:	4814      	ldr	r0, [pc, #80]	@ (8001440 <MX_TIM3_Init+0x64>)
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <MX_TIM3_Init+0x68>)
 80013f2:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 80013f4:	2204      	movs	r2, #4
 80013f6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 10001;
 80013fa:	f242 7211 	movw	r2, #10001	@ 0x2711
 80013fe:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001404:	f004 fa82 	bl	800590c <HAL_TIM_Base_Init>
 8001408:	b998      	cbnz	r0, 8001432 <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001410:	a902      	add	r1, sp, #8
 8001412:	480b      	ldr	r0, [pc, #44]	@ (8001440 <MX_TIM3_Init+0x64>)
 8001414:	f004 fc14 	bl	8005c40 <HAL_TIM_ConfigClockSource>
 8001418:	b968      	cbnz	r0, 8001436 <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800141a:	2320      	movs	r3, #32
 800141c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	4669      	mov	r1, sp
 8001424:	4806      	ldr	r0, [pc, #24]	@ (8001440 <MX_TIM3_Init+0x64>)
 8001426:	f004 fe2b 	bl	8006080 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	b930      	cbnz	r0, 800143a <MX_TIM3_Init+0x5e>
}
 800142c:	b007      	add	sp, #28
 800142e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001432:	f7ff ff83 	bl	800133c <Error_Handler>
    Error_Handler();
 8001436:	f7ff ff81 	bl	800133c <Error_Handler>
    Error_Handler();
 800143a:	f7ff ff7f 	bl	800133c <Error_Handler>
 800143e:	bf00      	nop
 8001440:	200000e0 	.word	0x200000e0
 8001444:	40000400 	.word	0x40000400

08001448 <MX_SPI3_Init>:
{
 8001448:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <MX_SPI3_Init+0x38>)
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <MX_SPI3_Init+0x3c>)
 800144e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001450:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001454:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001456:	2300      	movs	r3, #0
 8001458:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800145a:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145e:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001464:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001466:	2210      	movs	r2, #16
 8001468:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146a:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800146c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001470:	230a      	movs	r3, #10
 8001472:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001474:	f003 fc6a 	bl	8004d4c <HAL_SPI_Init>
 8001478:	b900      	cbnz	r0, 800147c <MX_SPI3_Init+0x34>
}
 800147a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800147c:	f7ff ff5e 	bl	800133c <Error_Handler>
 8001480:	20000128 	.word	0x20000128
 8001484:	40003c00 	.word	0x40003c00

08001488 <MX_I2S2_Init>:
{
 8001488:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 800148a:	480b      	ldr	r0, [pc, #44]	@ (80014b8 <MX_I2S2_Init+0x30>)
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_I2S2_Init+0x34>)
 800148e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001494:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001496:	2300      	movs	r3, #0
 8001498:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800149a:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800149c:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800149e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80014a2:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80014a4:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80014a6:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80014aa:	f002 f905 	bl	80036b8 <HAL_I2S_Init>
 80014ae:	b900      	cbnz	r0, 80014b2 <MX_I2S2_Init+0x2a>
}
 80014b0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80014b2:	f7ff ff43 	bl	800133c <Error_Handler>
 80014b6:	bf00      	nop
 80014b8:	200001e0 	.word	0x200001e0
 80014bc:	40003800 	.word	0x40003800

080014c0 <SystemClock_Config>:
{
 80014c0:	b500      	push	{lr}
 80014c2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c4:	2230      	movs	r2, #48	@ 0x30
 80014c6:	2100      	movs	r1, #0
 80014c8:	a808      	add	r0, sp, #32
 80014ca:	f004 fe5b 	bl	8006184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ce:	2300      	movs	r3, #0
 80014d0:	9303      	str	r3, [sp, #12]
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	9305      	str	r3, [sp, #20]
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	@ (800155c <SystemClock_Config+0x9c>)
 80014de:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80014e0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80014e4:	6411      	str	r1, [r2, #64]	@ 0x40
 80014e6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014e8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	491b      	ldr	r1, [pc, #108]	@ (8001560 <SystemClock_Config+0xa0>)
 80014f4:	680a      	ldr	r2, [r1, #0]
 80014f6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80014fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014fe:	600a      	str	r2, [r1, #0]
 8001500:	680a      	ldr	r2, [r1, #0]
 8001502:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001506:	9202      	str	r2, [sp, #8]
 8001508:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150a:	2202      	movs	r2, #2
 800150c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	2101      	movs	r1, #1
 8001510:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001512:	2110      	movs	r1, #16
 8001514:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151a:	2308      	movs	r3, #8
 800151c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800151e:	2354      	movs	r3, #84	@ 0x54
 8001520:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001522:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001524:	2307      	movs	r3, #7
 8001526:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	a808      	add	r0, sp, #32
 800152a:	f002 fe5d 	bl	80041e8 <HAL_RCC_OscConfig>
 800152e:	b980      	cbnz	r0, 8001552 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2102      	movs	r1, #2
 8001536:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001540:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001544:	a803      	add	r0, sp, #12
 8001546:	f003 f8c7 	bl	80046d8 <HAL_RCC_ClockConfig>
 800154a:	b920      	cbnz	r0, 8001556 <SystemClock_Config+0x96>
}
 800154c:	b015      	add	sp, #84	@ 0x54
 800154e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001552:	f7ff fef3 	bl	800133c <Error_Handler>
    Error_Handler();
 8001556:	f7ff fef1 	bl	800133c <Error_Handler>
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <main>:
 {
 8001564:	b508      	push	{r3, lr}
  HAL_Init();
 8001566:	f000 fccd 	bl	8001f04 <HAL_Init>
  SystemClock_Config();
 800156a:	f7ff ffa9 	bl	80014c0 <SystemClock_Config>
  MX_GPIO_Init();
 800156e:	f7ff fa47 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 8001572:	f7ff fb05 	bl	8000b80 <MX_DMA_Init>
  MX_ADC1_Init();
 8001576:	f7ff fee3 	bl	8001340 <MX_ADC1_Init>
  MX_TIM3_Init();
 800157a:	f7ff ff2f 	bl	80013dc <MX_TIM3_Init>
  MX_SPI3_Init();
 800157e:	f7ff ff63 	bl	8001448 <MX_SPI3_Init>
  MX_I2S2_Init();
 8001582:	f7ff ff81 	bl	8001488 <MX_I2S2_Init>
	HAL_TIM_Base_Start(&htim3);
 8001586:	4821      	ldr	r0, [pc, #132]	@ (800160c <main+0xa8>)
 8001588:	f004 fa10 	bl	80059ac <HAL_TIM_Base_Start>
	if (CANSPI_Initialize() != true) {
 800158c:	f7fe ffb8 	bl	8000500 <CANSPI_Initialize>
 8001590:	b908      	cbnz	r0, 8001596 <main+0x32>
		Error_Handler();
 8001592:	f7ff fed3 	bl	800133c <Error_Handler>
	inverter_diagnostics.motorRpm   = 1;
 8001596:	4b1e      	ldr	r3, [pc, #120]	@ (8001610 <main+0xac>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
	lookForRTD();
 800159c:	f7ff fe36 	bl	800120c <lookForRTD>
 80015a0:	e011      	b.n	80015c6 <main+0x62>
			readFromCAN();
 80015a2:	f7ff fb73 	bl	8000c8c <readFromCAN>
 80015a6:	e013      	b.n	80015d0 <main+0x6c>
			HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 80015a8:	2203      	movs	r2, #3
 80015aa:	491a      	ldr	r1, [pc, #104]	@ (8001614 <main+0xb0>)
 80015ac:	481a      	ldr	r0, [pc, #104]	@ (8001618 <main+0xb4>)
 80015ae:	f000 fe93 	bl	80022d8 <HAL_ADC_Start_DMA>
			dma_read_complete = 0;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <main+0xb8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			millis_since_dma_read = HAL_GetTick();
 80015b8:	f000 fd0a 	bl	8001fd0 <HAL_GetTick>
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <main+0xbc>)
 80015be:	6018      	str	r0, [r3, #0]
 80015c0:	e00a      	b.n	80015d8 <main+0x74>
		if (readyToDrive || rtdoverride == 1) sendTorqueCommand();
 80015c2:	f7ff fcb3 	bl	8000f2c <sendTorqueCommand>
		if (CANSPI_Receive(&rxMessage)) {
 80015c6:	4817      	ldr	r0, [pc, #92]	@ (8001624 <main+0xc0>)
 80015c8:	f7ff f8ee 	bl	80007a8 <CANSPI_Receive>
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1e8      	bne.n	80015a2 <main+0x3e>
		if(dma_read_complete){
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <main+0xb8>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e7      	bne.n	80015a8 <main+0x44>
		updateBMSDiagnostics();
 80015d8:	f7ff fb12 	bl	8000c00 <updateBMSDiagnostics>
		calculateTorqueRequest();
 80015dc:	f7ff fb88 	bl	8000cf0 <calculateTorqueRequest>
		checkAPPSPlausibility();
 80015e0:	f7ff fbda 	bl	8000d98 <checkAPPSPlausibility>
		checkCrossCheck();
 80015e4:	f7ff fc38 	bl	8000e58 <checkCrossCheck>
		checkShutdown();  // If pin is high, torque->0, block
 80015e8:	f7ff fe90 	bl	800130c <checkShutdown>
		finalTorqueRequest   = requestedTorque;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <main+0xc4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <main+0xc8>)
 80015f2:	6013      	str	r3, [r2, #0]
		lastRequestedTorque  = requestedTorque;
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <main+0xcc>)
 80015f6:	6013      	str	r3, [r2, #0]
		if (readyToDrive || rtdoverride == 1) sendTorqueCommand();
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <main+0xd0>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e0      	bne.n	80015c2 <main+0x5e>
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <main+0xd4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d1de      	bne.n	80015c6 <main+0x62>
 8001608:	e7db      	b.n	80015c2 <main+0x5e>
 800160a:	bf00      	nop
 800160c:	200000e0 	.word	0x200000e0
 8001610:	20000054 	.word	0x20000054
 8001614:	20000088 	.word	0x20000088
 8001618:	20000288 	.word	0x20000288
 800161c:	20000002 	.word	0x20000002
 8001620:	20000094 	.word	0x20000094
 8001624:	200000b8 	.word	0x200000b8
 8001628:	200000a8 	.word	0x200000a8
 800162c:	200000a0 	.word	0x200000a0
 8001630:	200000a4 	.word	0x200000a4
 8001634:	20000079 	.word	0x20000079
 8001638:	20000038 	.word	0x20000038

0800163c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001648:	480b      	ldr	r0, [pc, #44]	@ (8001678 <MCP2515_Initialize+0x3c>)
 800164a:	f002 f81b 	bl	8003684 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 800164e:	230a      	movs	r3, #10
 8001650:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <MCP2515_Initialize+0x40>)
 8001654:	f004 f809 	bl	800566a <HAL_SPI_GetState>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <MCP2515_Initialize+0x26>
      return true;
 800165e:	2301      	movs	r3, #1
 8001660:	e006      	b.n	8001670 <MCP2515_Initialize+0x34>
    
    loop--;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	3b01      	subs	r3, #1
 8001666:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f1      	bne.n	8001652 <MCP2515_Initialize+0x16>
      
  return false;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020000 	.word	0x40020000
 800167c:	20000128 	.word	0x20000128

08001680 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	200f      	movs	r0, #15
 800168a:	f000 f8a9 	bl	80017e0 <MCP2515_WriteByte>
  HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	@ 0x64
 8001690:	f000 fcaa 	bl	8001fe8 <HAL_Delay>
  uint8_t loop = 10;
 8001694:	230a      	movs	r3, #10
 8001696:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f8a0 	bl	80017e0 <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 80016a0:	200e      	movs	r0, #14
 80016a2:	f000 f851 	bl	8001748 <MCP2515_ReadByte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80016aa:	2030      	movs	r0, #48	@ 0x30
 80016ac:	f000 f84c 	bl	8001748 <MCP2515_ReadByte>
 80016b0:	4603      	mov	r3, r0
 80016b2:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80016ba:	2b80      	cmp	r3, #128	@ 0x80
 80016bc:	d101      	bne.n	80016c2 <MCP2515_SetConfigMode+0x42>
      return true;
 80016be:	2301      	movs	r3, #1
 80016c0:	e008      	b.n	80016d4 <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	@ 0x64
 80016ca:	f000 fc8d 	bl	8001fe8 <HAL_Delay>

  } while(loop > 0);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	e7e1      	b.n	8001698 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 f87b 	bl	80017e0 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80016ea:	230a      	movs	r3, #10
 80016ec:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80016ee:	200e      	movs	r0, #14
 80016f0:	f000 f82a 	bl	8001748 <MCP2515_ReadByte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <MCP2515_SetNormalMode+0x26>
      return true;
 80016fe:	2301      	movs	r3, #1
 8001700:	e006      	b.n	8001710 <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	3b01      	subs	r3, #1
 8001706:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ef      	bne.n	80016ee <MCP2515_SetNormalMode+0x12>
  
  return false;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001722:	4808      	ldr	r0, [pc, #32]	@ (8001744 <MCP2515_Reset+0x2c>)
 8001724:	f001 ffae 	bl	8003684 <HAL_GPIO_WritePin>
 8001728:	2001      	movs	r0, #1
 800172a:	f000 fc5d 	bl	8001fe8 <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 800172e:	20c0      	movs	r0, #192	@ 0xc0
 8001730:	f000 f93a 	bl	80019a8 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800173a:	4802      	ldr	r0, [pc, #8]	@ (8001744 <MCP2515_Reset+0x2c>)
 800173c:	f001 ffa2 	bl	8003684 <HAL_GPIO_WritePin>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40020000 	.word	0x40020000

08001748 <MCP2515_ReadByte>:



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001758:	480d      	ldr	r0, [pc, #52]	@ (8001790 <MCP2515_ReadByte+0x48>)
 800175a:	f001 ff93 	bl	8003684 <HAL_GPIO_WritePin>
 800175e:	2001      	movs	r0, #1
 8001760:	f000 fc42 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f91f 	bl	80019a8 <SPI_Tx>
  SPI_Tx(address);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f91b 	bl	80019a8 <SPI_Tx>
  retVal = SPI_Rx();
 8001772:	f000 f93f 	bl	80019f4 <SPI_Rx>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001780:	4803      	ldr	r0, [pc, #12]	@ (8001790 <MCP2515_ReadByte+0x48>)
 8001782:	f001 ff7f 	bl	8003684 <HAL_GPIO_WritePin>
  
  return retVal;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020000 	.word	0x40020000

08001794 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	480c      	ldr	r0, [pc, #48]	@ (80017dc <MCP2515_ReadRxSequence+0x48>)
 80017ac:	f001 ff6a 	bl	8003684 <HAL_GPIO_WritePin>
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fc19 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(instruction);        
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f8f5 	bl	80019a8 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	4619      	mov	r1, r3
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f000 f926 	bl	8001a14 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ce:	4803      	ldr	r0, [pc, #12]	@ (80017dc <MCP2515_ReadRxSequence+0x48>)
 80017d0:	f001 ff58 	bl	8003684 <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020000 	.word	0x40020000

080017e0 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	460a      	mov	r2, r1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	4613      	mov	r3, r2
 80017ee:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <MCP2515_WriteByte+0x4c>)
 80017f8:	f001 ff44 	bl	8003684 <HAL_GPIO_WritePin>
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 fbf3 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001802:	2002      	movs	r0, #2
 8001804:	f000 f8d0 	bl	80019a8 <SPI_Tx>
  SPI_Tx(address);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f8cc 	bl	80019a8 <SPI_Tx>
  SPI_Tx(data);  
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f8c8 	bl	80019a8 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <MCP2515_WriteByte+0x4c>)
 8001820:	f001 ff30 	bl	8003684 <HAL_GPIO_WritePin>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40020000 	.word	0x40020000

08001830 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	603a      	str	r2, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	460b      	mov	r3, r1
 800183e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001846:	4810      	ldr	r0, [pc, #64]	@ (8001888 <MCP2515_WriteByteSequence+0x58>)
 8001848:	f001 ff1c 	bl	8003684 <HAL_GPIO_WritePin>
 800184c:	2001      	movs	r0, #1
 800184e:	f000 fbcb 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8001852:	2002      	movs	r0, #2
 8001854:	f000 f8a8 	bl	80019a8 <SPI_Tx>
  SPI_Tx(startAddress);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f8a4 	bl	80019a8 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001860:	79ba      	ldrb	r2, [r7, #6]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	3301      	adds	r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f000 f8ac 	bl	80019cc <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187a:	4803      	ldr	r0, [pc, #12]	@ (8001888 <MCP2515_WriteByteSequence+0x58>)
 800187c:	f001 ff02 	bl	8003684 <HAL_GPIO_WritePin>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40020000 	.word	0x40020000

0800188c <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	4613      	mov	r3, r2
 800189c:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018a4:	4810      	ldr	r0, [pc, #64]	@ (80018e8 <MCP2515_LoadTxSequence+0x5c>)
 80018a6:	f001 feed 	bl	8003684 <HAL_GPIO_WritePin>
 80018aa:	2001      	movs	r0, #1
 80018ac:	f000 fb9c 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(instruction);
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f878 	bl	80019a8 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80018b8:	2104      	movs	r1, #4
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 f886 	bl	80019cc <SPI_TxBuffer>
  SPI_Tx(dlc);
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f870 	bl	80019a8 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f87d 	bl	80019cc <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <MCP2515_LoadTxSequence+0x5c>)
 80018da:	f001 fed3 	bl	8003684 <HAL_GPIO_WritePin>
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020000 	.word	0x40020000

080018ec <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <MCP2515_RequestToSend+0x38>)
 80018fe:	f001 fec1 	bl	8003684 <HAL_GPIO_WritePin>
 8001902:	2001      	movs	r0, #1
 8001904:	f000 fb70 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f84c 	bl	80019a8 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001916:	4803      	ldr	r0, [pc, #12]	@ (8001924 <MCP2515_RequestToSend+0x38>)
 8001918:	f001 feb4 	bl	8003684 <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020000 	.word	0x40020000

08001928 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001934:	480b      	ldr	r0, [pc, #44]	@ (8001964 <MCP2515_ReadStatus+0x3c>)
 8001936:	f001 fea5 	bl	8003684 <HAL_GPIO_WritePin>
 800193a:	2001      	movs	r0, #1
 800193c:	f000 fb54 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001940:	20a0      	movs	r0, #160	@ 0xa0
 8001942:	f000 f831 	bl	80019a8 <SPI_Tx>
  retVal = SPI_Rx();
 8001946:	f000 f855 	bl	80019f4 <SPI_Rx>
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001954:	4803      	ldr	r0, [pc, #12]	@ (8001964 <MCP2515_ReadStatus+0x3c>)
 8001956:	f001 fe95 	bl	8003684 <HAL_GPIO_WritePin>
  
  return retVal;
 800195a:	79fb      	ldrb	r3, [r7, #7]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020000 	.word	0x40020000

08001968 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001974:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <MCP2515_GetRxStatus+0x3c>)
 8001976:	f001 fe85 	bl	8003684 <HAL_GPIO_WritePin>
 800197a:	2001      	movs	r0, #1
 800197c:	f000 fb34 	bl	8001fe8 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8001980:	20b0      	movs	r0, #176	@ 0xb0
 8001982:	f000 f811 	bl	80019a8 <SPI_Tx>
  retVal = SPI_Rx();
 8001986:	f000 f835 	bl	80019f4 <SPI_Rx>
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800198e:	2201      	movs	r2, #1
 8001990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <MCP2515_GetRxStatus+0x3c>)
 8001996:	f001 fe75 	bl	8003684 <HAL_GPIO_WritePin>
  
  return retVal;
 800199a:	79fb      	ldrb	r3, [r7, #7]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020000 	.word	0x40020000

080019a8 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80019b2:	1df9      	adds	r1, r7, #7
 80019b4:	230a      	movs	r3, #10
 80019b6:	2201      	movs	r2, #1
 80019b8:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <SPI_Tx+0x20>)
 80019ba:	f003 fa50 	bl	8004e5e <HAL_SPI_Transmit>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000128 	.word	0x20000128

080019cc <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	230a      	movs	r3, #10
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <SPI_TxBuffer+0x24>)
 80019e2:	f003 fa3c 	bl	8004e5e <HAL_SPI_Transmit>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000128 	.word	0x20000128

080019f4 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80019fa:	1df9      	adds	r1, r7, #7
 80019fc:	230a      	movs	r3, #10
 80019fe:	2201      	movs	r2, #1
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <SPI_Rx+0x1c>)
 8001a02:	f003 fb70 	bl	80050e6 <HAL_SPI_Receive>
  return retVal;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000128 	.word	0x20000128

08001a14 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	230a      	movs	r3, #10
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <SPI_RxBuffer+0x24>)
 8001a2a:	f003 fb5c 	bl	80050e6 <HAL_SPI_Receive>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000128 	.word	0x20000128

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f001 f8b4 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a40      	ldr	r2, [pc, #256]	@ (8001bac <HAL_ADC_MspInit+0x120>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d179      	bne.n	8001ba2 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a37      	ldr	r2, [pc, #220]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b35      	ldr	r3, [pc, #212]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b31      	ldr	r3, [pc, #196]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a30      	ldr	r2, [pc, #192]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_ADC_MspInit+0x124>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b02:	2302      	movs	r3, #2
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4827      	ldr	r0, [pc, #156]	@ (8001bb4 <HAL_ADC_MspInit+0x128>)
 8001b16:	f001 fc19 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b1a:	2330      	movs	r3, #48	@ 0x30
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4822      	ldr	r0, [pc, #136]	@ (8001bb8 <HAL_ADC_MspInit+0x12c>)
 8001b2e:	f001 fc0d 	bl	800334c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b34:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_ADC_MspInit+0x134>)
 8001b36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b38:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b76:	4811      	ldr	r0, [pc, #68]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b78:	f001 f878 	bl	8002c6c <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001b82:	f7ff fbdb 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_ADC_MspInit+0x130>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2012      	movs	r0, #18
 8001b98:	f001 f831 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b9c:	2012      	movs	r0, #18
 8001b9e:	f001 f84a 	bl	8002c36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	20000228 	.word	0x20000228
 8001bc0:	40026410 	.word	0x40026410

08001bc4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	@ 0x38
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce8 <HAL_I2S_MspInit+0x124>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d174      	bne.n	8001ce0 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001bfa:	23c0      	movs	r3, #192	@ 0xc0
 8001bfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 ff52 	bl	8004ab0 <HAL_RCCEx_PeriphCLKConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001c12:	f7ff fb93 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_I2S_MspInit+0x128>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a33      	ldr	r2, [pc, #204]	@ (8001cec <HAL_I2S_MspInit+0x128>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <HAL_I2S_MspInit+0x128>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_I2S_MspInit+0x128>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cec <HAL_I2S_MspInit+0x128>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_I2S_MspInit+0x128>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001c4e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c60:	2305      	movs	r3, #5
 8001c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4821      	ldr	r0, [pc, #132]	@ (8001cf0 <HAL_I2S_MspInit+0x12c>)
 8001c6c:	f001 fb6e 	bl	800334c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001c70:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <HAL_I2S_MspInit+0x134>)
 8001c74:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c7e:	2240      	movs	r2, #64	@ 0x40
 8001c80:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c96:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cae:	2204      	movs	r2, #4
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001cc4:	480b      	ldr	r0, [pc, #44]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cc6:	f000 ffd1 	bl	8002c6c <HAL_DMA_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001cd0:	f7ff fb34 	bl	800133c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a07      	ldr	r2, [pc, #28]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cda:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_I2S_MspInit+0x130>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3738      	adds	r7, #56	@ 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40003800 	.word	0x40003800
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	20000180 	.word	0x20000180
 8001cf8:	40026070 	.word	0x40026070

08001cfc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_SPI_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12c      	bne.n	8001d78 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d56:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d68:	2306      	movs	r3, #6
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_SPI_MspInit+0x8c>)
 8001d74:	f001 faea 	bl	800334c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	@ 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40003c00 	.word	0x40003c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020800 	.word	0x40020800

08001d8c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x48>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d115      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	201d      	movs	r0, #29
 8001dc0:	f000 ff1d 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc4:	201d      	movs	r0, #29
 8001dc6:	f000 ff36 	bl	8002c36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40023800 	.word	0x40023800

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <NMI_Handler+0x4>

08001de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <MemManage_Handler+0x4>

08001df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e32:	f000 f8b9 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <DMA1_Stream4_IRQHandler+0x10>)
 8001e42:	f001 f819 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000180 	.word	0x20000180

08001e50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <ADC_IRQHandler+0x10>)
 8001e56:	f000 f92e 	bl	80020b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000288 	.word	0x20000288

08001e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <TIM3_IRQHandler+0x10>)
 8001e6a:	f003 fdf9 	bl	8005a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200000e0 	.word	0x200000e0

08001e78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <DMA2_Stream0_IRQHandler+0x10>)
 8001e7e:	f000 fffb 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000228 	.word	0x20000228

08001e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001eb4:	f7ff ffea 	bl	8001e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	@ (8001eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	@ (8001ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8001efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f004 f959 	bl	8006194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7ff fb3f 	bl	8001564 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ef4:	080562f4 	.word	0x080562f4
  ldr r2, =_sbss
 8001ef8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001efc:	200002d4 	.word	0x200002d4

08001f00 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <DMA1_Stream0_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f08:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <HAL_Init+0x40>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_Init+0x40>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_Init+0x40>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 fe5b 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 f808 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff fd80 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_InitTick+0x54>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_InitTick+0x58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fe73 	bl	8002c52 <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d80a      	bhi.n	8001f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 fe3b 	bl	8002bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f88:	4a06      	ldr	r2, [pc, #24]	@ (8001fa4 <HAL_InitTick+0x5c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	2000000c 	.word	0x2000000c

08001fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_IncTick+0x20>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x24>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <HAL_IncTick+0x24>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000010 	.word	0x20000010
 8001fcc:	200002d0 	.word	0x200002d0

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200002d0 	.word	0x200002d0

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d005      	beq.n	800200e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_Delay+0x44>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200e:	bf00      	nop
 8002010:	f7ff ffde 	bl	8001fd0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8f7      	bhi.n	8002010 <HAL_Delay+0x28>
  {
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000010 	.word	0x20000010

08002030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e033      	b.n	80020ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fd1c 	bl	8001a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002076:	f023 0302 	bic.w	r3, r3, #2
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fb58 	bl	8002738 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
 800209e:	e001      	b.n	80020a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d049      	beq.n	8002180 <HAL_ADC_IRQHandler+0xca>
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d046      	beq.n	8002180 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d12b      	bne.n	8002170 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d127      	bne.n	8002170 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002126:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002138:	2b00      	cmp	r3, #0
 800213a:	d119      	bne.n	8002170 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0220 	bic.w	r2, r2, #32
 800214a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7fe fda5 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f06f 0212 	mvn.w	r2, #18
 800217e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d057      	beq.n	8002246 <HAL_ADC_IRQHandler+0x190>
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d054      	beq.n	8002246 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d139      	bne.n	8002236 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12b      	bne.n	8002236 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d124      	bne.n	8002236 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11d      	bne.n	8002236 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d119      	bne.n	8002236 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002210:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fbfc 	bl	8002a34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 020c 	mvn.w	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002254:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d017      	beq.n	800228c <HAL_ADC_IRQHandler+0x1d6>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d014      	beq.n	800228c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10d      	bne.n	800228c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f925 	bl	80024cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0201 	mvn.w	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800229a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <HAL_ADC_IRQHandler+0x218>
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d012      	beq.n	80022ce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f043 0202 	orr.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0220 	mvn.w	r2, #32
 80022bc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f90e 	bl	80024e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0220 	mvn.w	r2, #32
 80022cc:	601a      	str	r2, [r3, #0]
  }
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Start_DMA+0x1e>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0ce      	b.n	8002494 <HAL_ADC_Start_DMA+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d018      	beq.n	800233e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800231c:	4b5f      	ldr	r3, [pc, #380]	@ (800249c <HAL_ADC_Start_DMA+0x1c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5f      	ldr	r2, [pc, #380]	@ (80024a0 <HAL_ADC_Start_DMA+0x1c8>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9a      	lsrs	r2, r3, #18
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002330:	e002      	b.n	8002338 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3b01      	subs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234c:	d107      	bne.n	800235e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800235c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	f040 8086 	bne.w	800247a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002398:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f023 0206 	bic.w	r2, r3, #6
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ca:	4b36      	ldr	r3, [pc, #216]	@ (80024a4 <HAL_ADC_Start_DMA+0x1cc>)
 80023cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d2:	4a35      	ldr	r2, [pc, #212]	@ (80024a8 <HAL_ADC_Start_DMA+0x1d0>)
 80023d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023da:	4a34      	ldr	r2, [pc, #208]	@ (80024ac <HAL_ADC_Start_DMA+0x1d4>)
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e2:	4a33      	ldr	r2, [pc, #204]	@ (80024b0 <HAL_ADC_Start_DMA+0x1d8>)
 80023e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023fe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800240e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	334c      	adds	r3, #76	@ 0x4c
 800241a:	4619      	mov	r1, r3
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f000 fcd2 	bl	8002dc8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d129      	bne.n	8002492 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	e020      	b.n	8002492 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <HAL_ADC_Start_DMA+0x1dc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11b      	bne.n	8002492 <HAL_ADC_Start_DMA+0x1ba>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d114      	bne.n	8002492 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	e00b      	b.n	8002492 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000008 	.word	0x20000008
 80024a0:	431bde83 	.word	0x431bde83
 80024a4:	40012300 	.word	0x40012300
 80024a8:	08002931 	.word	0x08002931
 80024ac:	080029eb 	.word	0x080029eb
 80024b0:	08002a07 	.word	0x08002a07
 80024b4:	40012000 	.word	0x40012000

080024b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1c>
 800250c:	2302      	movs	r3, #2
 800250e:	e105      	b.n	800271c <HAL_ADC_ConfigChannel+0x228>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b09      	cmp	r3, #9
 800251e:	d925      	bls.n	800256c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	3b1e      	subs	r3, #30
 8002536:	2207      	movs	r2, #7
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43da      	mvns	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	400a      	ands	r2, r1
 8002544:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68d9      	ldr	r1, [r3, #12]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	4603      	mov	r3, r0
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4403      	add	r3, r0
 800255e:	3b1e      	subs	r3, #30
 8002560:	409a      	lsls	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e022      	b.n	80025b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	2207      	movs	r2, #7
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	400a      	ands	r2, r1
 800258e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6919      	ldr	r1, [r3, #16]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4403      	add	r3, r0
 80025a8:	409a      	lsls	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d824      	bhi.n	8002604 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b05      	subs	r3, #5
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b05      	subs	r3, #5
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
 8002602:	e04c      	b.n	800269e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d824      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b23      	subs	r3, #35	@ 0x23
 800261e:	221f      	movs	r2, #31
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43da      	mvns	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	400a      	ands	r2, r1
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b23      	subs	r3, #35	@ 0x23
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
 8002654:	e023      	b.n	800269e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b41      	subs	r3, #65	@ 0x41
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b41      	subs	r3, #65	@ 0x41
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_ADC_ConfigChannel+0x234>)
 80026a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a21      	ldr	r2, [pc, #132]	@ (800272c <HAL_ADC_ConfigChannel+0x238>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d109      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1cc>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_ADC_ConfigChannel+0x238>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d123      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d003      	beq.n	80026da <HAL_ADC_ConfigChannel+0x1e6>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d11b      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d111      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_ADC_ConfigChannel+0x23c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a10      	ldr	r2, [pc, #64]	@ (8002734 <HAL_ADC_ConfigChannel+0x240>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9a      	lsrs	r2, r3, #18
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002704:	e002      	b.n	800270c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b01      	subs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40012300 	.word	0x40012300
 800272c:	40012000 	.word	0x40012000
 8002730:	20000008 	.word	0x20000008
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002740:	4b79      	ldr	r3, [pc, #484]	@ (8002928 <ADC_Init+0x1f0>)
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	4a58      	ldr	r2, [pc, #352]	@ (800292c <ADC_Init+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00f      	b.n	8002836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002872:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	035a      	lsls	r2, r3, #13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e007      	b.n	80028ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ee:	025a      	lsls	r2, r3, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	029a      	lsls	r2, r3, #10
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	0f000001 	.word	0x0f000001

08002930 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d13c      	bne.n	80029c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d12b      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d127      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	d119      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0220 	bic.w	r2, r2, #32
 8002996:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7fe f97f 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029c2:	e00e      	b.n	80029e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff fd85 	bl	80024e0 <HAL_ADC_ErrorCallback>
}
 80029d6:	e004      	b.n	80029e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fd5d 	bl	80024b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2240      	movs	r2, #64	@ 0x40
 8002a18:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fd5a 	bl	80024e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	@ (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	@ (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	@ (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	@ 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	@ 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff8e 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff29 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff3e 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff8e 	bl	8002b3c <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5d 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff31 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff f9aa 	bl	8001fd0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e099      	b.n	8002dbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca8:	e00f      	b.n	8002cca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002caa:	f7ff f991 	bl	8001fd0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d908      	bls.n	8002cca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e078      	b.n	8002dbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e8      	bne.n	8002caa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_DMA_Init+0x158>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d107      	bne.n	8002d34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0307 	bic.w	r3, r3, #7
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d117      	bne.n	8002d8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa6f 	bl	8003254 <DMA_CheckFifoParam>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e016      	b.n	8002dbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa26 	bl	80031e8 <DMA_CalcBaseAndBitshift>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	223f      	movs	r2, #63	@ 0x3f
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	f010803f 	.word	0xf010803f

08002dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_DMA_Start_IT+0x26>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e040      	b.n	8002e70 <HAL_DMA_Start_IT+0xa8>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d12f      	bne.n	8002e62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f9b8 	bl	800318c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	223f      	movs	r2, #63	@ 0x3f
 8002e22:	409a      	lsls	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0216 	orr.w	r2, r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e84:	4b8e      	ldr	r3, [pc, #568]	@ (80030c0 <HAL_DMA_IRQHandler+0x248>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a8e      	ldr	r2, [pc, #568]	@ (80030c4 <HAL_DMA_IRQHandler+0x24c>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a9b      	lsrs	r3, r3, #10
 8002e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01a      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f06:	2201      	movs	r2, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	2204      	movs	r2, #4
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f54:	2210      	movs	r2, #16
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d043      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f72:	2210      	movs	r2, #16
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d024      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	e01f      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e016      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0208 	bic.w	r2, r2, #8
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fec:	2220      	movs	r2, #32
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 808f 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8087 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300e:	2220      	movs	r2, #32
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b05      	cmp	r3, #5
 8003020:	d136      	bne.n	8003090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_IRQHandler+0x1da>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	223f      	movs	r2, #63	@ 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d07e      	beq.n	8003184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
        }
        return;
 800308e:	e079      	b.n	8003184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01d      	beq.n	80030da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e02c      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
 80030be:	bf00      	nop
 80030c0:	20000008 	.word	0x20000008
 80030c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e01e      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d032      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d022      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2205      	movs	r2, #5
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d307      	bcc.n	8003160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f2      	bne.n	8003144 <HAL_DMA_IRQHandler+0x2cc>
 800315e:	e000      	b.n	8003162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e000      	b.n	8003186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003184:	bf00      	nop
    }
  }
}
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b40      	cmp	r3, #64	@ 0x40
 80031b8:	d108      	bne.n	80031cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ca:	e007      	b.n	80031dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3b10      	subs	r3, #16
 80031f8:	4a14      	ldr	r2, [pc, #80]	@ (800324c <DMA_CalcBaseAndBitshift+0x64>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <DMA_CalcBaseAndBitshift+0x68>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d909      	bls.n	800322a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	@ 0x58
 8003228:	e007      	b.n	800323a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	aaaaaaab 	.word	0xaaaaaaab
 8003250:	080562dc 	.word	0x080562dc

08003254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11f      	bne.n	80032ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d856      	bhi.n	8003322 <DMA_CheckFifoParam+0xce>
 8003274:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <DMA_CheckFifoParam+0x28>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	0800328d 	.word	0x0800328d
 8003280:	0800329f 	.word	0x0800329f
 8003284:	0800328d 	.word	0x0800328d
 8003288:	08003323 	.word	0x08003323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d046      	beq.n	8003326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e043      	b.n	8003326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032a6:	d140      	bne.n	800332a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e03d      	b.n	800332a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032b6:	d121      	bne.n	80032fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d837      	bhi.n	800332e <DMA_CheckFifoParam+0xda>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <DMA_CheckFifoParam+0x70>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032db 	.word	0x080032db
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	080032ed 	.word	0x080032ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e030      	b.n	800333c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d025      	beq.n	8003332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ea:	e022      	b.n	8003332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032f4:	d11f      	bne.n	8003336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032fa:	e01c      	b.n	8003336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d903      	bls.n	800330a <DMA_CheckFifoParam+0xb6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003308:	e018      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
      break;
 800330e:	e015      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e00b      	b.n	800333a <DMA_CheckFifoParam+0xe6>
      break;
 8003322:	bf00      	nop
 8003324:	e00a      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003326:	bf00      	nop
 8003328:	e008      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e006      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;   
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
    }
  } 
  
  return status; 
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e159      	b.n	800361c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8148 	bne.w	8003616 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d005      	beq.n	800339e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	2b02      	cmp	r3, #2
 800339c:	d130      	bne.n	8003400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d017      	beq.n	800343c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d123      	bne.n	8003490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a2 	beq.w	8003616 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <HAL_GPIO_Init+0x2e8>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	4a56      	ldr	r2, [pc, #344]	@ (8003634 <HAL_GPIO_Init+0x2e8>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e2:	4b54      	ldr	r3, [pc, #336]	@ (8003634 <HAL_GPIO_Init+0x2e8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ee:	4a52      	ldr	r2, [pc, #328]	@ (8003638 <HAL_GPIO_Init+0x2ec>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a49      	ldr	r2, [pc, #292]	@ (800363c <HAL_GPIO_Init+0x2f0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_Init+0x202>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a48      	ldr	r2, [pc, #288]	@ (8003640 <HAL_GPIO_Init+0x2f4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x1fe>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a47      	ldr	r2, [pc, #284]	@ (8003644 <HAL_GPIO_Init+0x2f8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x1fa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a46      	ldr	r2, [pc, #280]	@ (8003648 <HAL_GPIO_Init+0x2fc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x1f6>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a45      	ldr	r2, [pc, #276]	@ (800364c <HAL_GPIO_Init+0x300>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x1f2>
 800353a:	2304      	movs	r3, #4
 800353c:	e008      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800353e:	2307      	movs	r3, #7
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x204>
 8003542:	2303      	movs	r3, #3
 8003544:	e004      	b.n	8003550 <HAL_GPIO_Init+0x204>
 8003546:	2302      	movs	r3, #2
 8003548:	e002      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x204>
 800354e:	2300      	movs	r3, #0
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f002 0203 	and.w	r2, r2, #3
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	4093      	lsls	r3, r2
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003560:	4935      	ldr	r1, [pc, #212]	@ (8003638 <HAL_GPIO_Init+0x2ec>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003592:	4a2f      	ldr	r2, [pc, #188]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <HAL_GPIO_Init+0x304>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035bc:	4a24      	ldr	r2, [pc, #144]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c2:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ec:	4b18      	ldr	r3, [pc, #96]	@ (8003650 <HAL_GPIO_Init+0x304>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003610:	4a0f      	ldr	r2, [pc, #60]	@ (8003650 <HAL_GPIO_Init+0x304>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	f67f aea2 	bls.w	8003368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	@ 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40013800 	.word	0x40013800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	40020800 	.word	0x40020800
 8003648:	40020c00 	.word	0x40020c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40013c00 	.word	0x40013c00

08003654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e001      	b.n	8003676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036a0:	e003      	b.n	80036aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	041a      	lsls	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e128      	b.n	800391c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a90      	ldr	r2, [pc, #576]	@ (8003924 <HAL_I2S_Init+0x26c>)
 80036e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7fe fa6d 	bl	8001bc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003700:	f023 030f 	bic.w	r3, r3, #15
 8003704:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2202      	movs	r2, #2
 800370c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d060      	beq.n	80037d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800371e:	2310      	movs	r3, #16
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e001      	b.n	8003728 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b20      	cmp	r3, #32
 800372e:	d802      	bhi.n	8003736 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003736:	2001      	movs	r0, #1
 8003738:	f001 faa8 	bl	8004c8c <HAL_RCCEx_GetPeriphCLKFreq>
 800373c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003746:	d125      	bne.n	8003794 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	fbb2 f2f3 	udiv	r2, r2, r3
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	461a      	mov	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	3305      	adds	r3, #5
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e01f      	b.n	80037b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	fbb2 f2f3 	udiv	r2, r2, r3
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	3305      	adds	r3, #5
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	e00e      	b.n	80037b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	fbb2 f2f3 	udiv	r2, r2, r3
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	3305      	adds	r3, #5
 80037b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003928 <HAL_I2S_Init+0x270>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	08db      	lsrs	r3, r3, #3
 80037bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	e003      	b.n	80037e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037d8:	2302      	movs	r3, #2
 80037da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d902      	bls.n	80037ec <HAL_I2S_Init+0x134>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2bff      	cmp	r3, #255	@ 0xff
 80037ea:	d907      	bls.n	80037fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	f043 0210 	orr.w	r2, r3, #16
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e08f      	b.n	800391c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	ea42 0103 	orr.w	r1, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	430a      	orrs	r2, r1
 800380e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800381a:	f023 030f 	bic.w	r3, r3, #15
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6851      	ldr	r1, [r2, #4]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	4311      	orrs	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68d2      	ldr	r2, [r2, #12]
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6992      	ldr	r2, [r2, #24]
 8003832:	430a      	orrs	r2, r1
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d161      	bne.n	800390c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a38      	ldr	r2, [pc, #224]	@ (800392c <HAL_I2S_Init+0x274>)
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a37      	ldr	r2, [pc, #220]	@ (8003930 <HAL_I2S_Init+0x278>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_I2S_Init+0x1a4>
 8003858:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <HAL_I2S_Init+0x27c>)
 800385a:	e001      	b.n	8003860 <HAL_I2S_Init+0x1a8>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	4932      	ldr	r1, [pc, #200]	@ (8003930 <HAL_I2S_Init+0x278>)
 8003868:	428a      	cmp	r2, r1
 800386a:	d101      	bne.n	8003870 <HAL_I2S_Init+0x1b8>
 800386c:	4a31      	ldr	r2, [pc, #196]	@ (8003934 <HAL_I2S_Init+0x27c>)
 800386e:	e001      	b.n	8003874 <HAL_I2S_Init+0x1bc>
 8003870:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003874:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003878:	f023 030f 	bic.w	r3, r3, #15
 800387c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2b      	ldr	r2, [pc, #172]	@ (8003930 <HAL_I2S_Init+0x278>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_I2S_Init+0x1d4>
 8003888:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <HAL_I2S_Init+0x27c>)
 800388a:	e001      	b.n	8003890 <HAL_I2S_Init+0x1d8>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003890:	2202      	movs	r2, #2
 8003892:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a25      	ldr	r2, [pc, #148]	@ (8003930 <HAL_I2S_Init+0x278>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_I2S_Init+0x1ea>
 800389e:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <HAL_I2S_Init+0x27c>)
 80038a0:	e001      	b.n	80038a6 <HAL_I2S_Init+0x1ee>
 80038a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b2:	d003      	beq.n	80038bc <HAL_I2S_Init+0x204>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e001      	b.n	80038c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038dc:	4313      	orrs	r3, r2
 80038de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038e6:	4313      	orrs	r3, r2
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <HAL_I2S_Init+0x278>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_I2S_Init+0x24c>
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_I2S_Init+0x27c>)
 8003902:	e001      	b.n	8003908 <HAL_I2S_Init+0x250>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003908:	897a      	ldrh	r2, [r7, #10]
 800390a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	08003c21 	.word	0x08003c21
 8003928:	cccccccd 	.word	0xcccccccd
 800392c:	08003d35 	.word	0x08003d35
 8003930:	40003800 	.word	0x40003800
 8003934:	40003400 	.word	0x40003400

08003938 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_I2S_Transmit_DMA+0x1a>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e08a      	b.n	8003a6c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	e082      	b.n	8003a6c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_I2S_Transmit_DMA+0x3e>
 8003972:	2302      	movs	r3, #2
 8003974:	e07a      	b.n	8003a6c <HAL_I2S_Transmit_DMA+0x134>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2203      	movs	r2, #3
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d002      	beq.n	80039aa <HAL_I2S_Transmit_DMA+0x72>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d10a      	bne.n	80039c0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039be:	e005      	b.n	80039cc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <HAL_I2S_Transmit_DMA+0x13c>)
 80039d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d8:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_I2S_Transmit_DMA+0x140>)
 80039da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e0:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_I2S_Transmit_DMA+0x144>)
 80039e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039ec:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039f4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039fc:	f7ff f9e4 	bl	8002dc8 <HAL_DMA_Start_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00f      	beq.n	8003a26 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0208 	orr.w	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e022      	b.n	8003a6c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0202 	orr.w	r2, r2, #2
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d107      	bne.n	8003a6a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a68:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	08003aff 	.word	0x08003aff
 8003a78:	08003abd 	.word	0x08003abd
 8003a7c:	08003b1b 	.word	0x08003b1b

08003a80 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10e      	bne.n	8003af0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0202 	bic.w	r2, r2, #2
 8003ae0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7fd fb35 	bl	8001160 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ffb7 	bl	8003a80 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0203 	bic.w	r2, r2, #3
 8003b36:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	f043 0208 	orr.w	r2, r3, #8
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff ffa5 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10e      	bne.n	8003bba <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003baa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fd fad3 	bl	8001160 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10e      	bne.n	8003c18 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ff3e 	bl	8003a94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d13a      	bne.n	8003cb2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d109      	bne.n	8003c5a <I2S_IRQHandler+0x3a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d102      	bne.n	8003c5a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ffb4 	bl	8003bc2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d126      	bne.n	8003cb2 <I2S_IRQHandler+0x92>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d11f      	bne.n	8003cb2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c80:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca4:	f043 0202 	orr.w	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fefb 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d136      	bne.n	8003d2c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d109      	bne.n	8003cdc <I2S_IRQHandler+0xbc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	d102      	bne.n	8003cdc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff45 	bl	8003b66 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d122      	bne.n	8003d2c <I2S_IRQHandler+0x10c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d11b      	bne.n	8003d2c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d02:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff febe 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a92      	ldr	r2, [pc, #584]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d4e:	4b92      	ldr	r3, [pc, #584]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a8b      	ldr	r2, [pc, #556]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6e:	e001      	b.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d80:	d004      	beq.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8099 	bne.w	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d107      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f925 	bl	8003ff0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9c8 	bl	8004150 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d13a      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d035      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dde:	4b6e      	ldr	r3, [pc, #440]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de0:	e001      	b.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003de2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4969      	ldr	r1, [pc, #420]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dee:	428b      	cmp	r3, r1
 8003df0:	d101      	bne.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003df2:	4b69      	ldr	r3, [pc, #420]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df4:	e001      	b.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003df6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fe34 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	f040 80c3 	bne.w	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80bd 	beq.w	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a49      	ldr	r2, [pc, #292]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e72:	4b49      	ldr	r3, [pc, #292]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4944      	ldr	r1, [pc, #272]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e86:	4b44      	ldr	r3, [pc, #272]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fdf6 	bl	8003aa8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ebc:	e089      	b.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8be 	bl	8004054 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f8fd 	bl	80040ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d12f      	bne.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f22:	e001      	b.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4919      	ldr	r1, [pc, #100]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f34:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f36:	e001      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fda6 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d136      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d031      	beq.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a07      	ldr	r2, [pc, #28]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f7a:	4b07      	ldr	r3, [pc, #28]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4902      	ldr	r1, [pc, #8]	@ (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8a:	428b      	cmp	r3, r1
 8003f8c:	d106      	bne.n	8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f8e:	4b02      	ldr	r3, [pc, #8]	@ (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f90:	e006      	b.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f92:	bf00      	nop
 8003f94:	40003800 	.word	0x40003800
 8003f98:	40003400 	.word	0x40003400
 8003f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fb4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fd6c 	bl	8003aa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd2:	bf00      	nop
}
 8003fd4:	bf00      	nop
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c99      	adds	r1, r3, #2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6251      	str	r1, [r2, #36]	@ 0x24
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d113      	bne.n	800404a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004030:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ffc9 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	1c99      	adds	r1, r3, #2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6251      	str	r1, [r2, #36]	@ 0x24
 8004066:	8819      	ldrh	r1, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	@ (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <I2SEx_TxISR_I2SExt+0x22>
 8004072:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004074:	e001      	b.n	800407a <I2SEx_TxISR_I2SExt+0x26>
 8004076:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800407a:	460a      	mov	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a12      	ldr	r2, [pc, #72]	@ (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <I2SEx_TxISR_I2SExt+0x50>
 80040a0:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 80040a2:	e001      	b.n	80040a8 <I2SEx_TxISR_I2SExt+0x54>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	490d      	ldr	r1, [pc, #52]	@ (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d101      	bne.n	80040b8 <I2SEx_TxISR_I2SExt+0x64>
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 80040b6:	e001      	b.n	80040bc <I2SEx_TxISR_I2SExt+0x68>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d106      	bne.n	80040da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff81 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40003800 	.word	0x40003800
 80040e8:	40003400 	.word	0x40003400

080040ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68d8      	ldr	r0, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	1c99      	adds	r1, r3, #2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004104:	b282      	uxth	r2, r0
 8004106:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d113      	bne.n	8004148 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800412e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff4a 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a20      	ldr	r2, [pc, #128]	@ (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <I2SEx_RxISR_I2SExt+0x16>
 8004162:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004164:	e001      	b.n	800416a <I2SEx_RxISR_I2SExt+0x1a>
 8004166:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800416a:	68d8      	ldr	r0, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	1c99      	adds	r1, r3, #2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004176:	b282      	uxth	r2, r0
 8004178:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a12      	ldr	r2, [pc, #72]	@ (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <I2SEx_RxISR_I2SExt+0x50>
 800419c:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 800419e:	e001      	b.n	80041a4 <I2SEx_RxISR_I2SExt+0x54>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	490d      	ldr	r1, [pc, #52]	@ (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d101      	bne.n	80041b4 <I2SEx_RxISR_I2SExt+0x64>
 80041b0:	4b0c      	ldr	r3, [pc, #48]	@ (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 80041b2:	e001      	b.n	80041b8 <I2SEx_RxISR_I2SExt+0x68>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff03 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40003800 	.word	0x40003800
 80041e4:	40003400 	.word	0x40003400

080041e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e267      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d075      	beq.n	80042f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004206:	4b88      	ldr	r3, [pc, #544]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00c      	beq.n	800422c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b85      	ldr	r3, [pc, #532]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800421a:	2b08      	cmp	r3, #8
 800421c:	d112      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421e:	4b82      	ldr	r3, [pc, #520]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800422a:	d10b      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	4b7e      	ldr	r3, [pc, #504]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d05b      	beq.n	80042f0 <HAL_RCC_OscConfig+0x108>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d157      	bne.n	80042f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e242      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x74>
 800424e:	4b76      	ldr	r3, [pc, #472]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a75      	ldr	r2, [pc, #468]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e01d      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x98>
 8004266:	4b70      	ldr	r3, [pc, #448]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6f      	ldr	r2, [pc, #444]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6d      	ldr	r3, [pc, #436]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6c      	ldr	r2, [pc, #432]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 8004280:	4b69      	ldr	r3, [pc, #420]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a68      	ldr	r2, [pc, #416]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a65      	ldr	r2, [pc, #404]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd fe96 	bl	8001fd0 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd fe92 	bl	8001fd0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e207      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xc0>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd fe82 	bl	8001fd0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fd fe7e 	bl	8001fd0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	@ 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1f3      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	4b51      	ldr	r3, [pc, #324]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0xe8>
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d063      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004312:	2b08      	cmp	r3, #8
 8004314:	d11c      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b44      	ldr	r3, [pc, #272]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d116      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	4b41      	ldr	r3, [pc, #260]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e1c7      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b3b      	ldr	r3, [pc, #236]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4937      	ldr	r1, [pc, #220]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434e:	e03a      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004358:	4b34      	ldr	r3, [pc, #208]	@ (800442c <HAL_RCC_OscConfig+0x244>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fd fe37 	bl	8001fd0 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004366:	f7fd fe33 	bl	8001fd0 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e1a8      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b28      	ldr	r3, [pc, #160]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4925      	ldr	r1, [pc, #148]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439a:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_RCC_OscConfig+0x244>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fe16 	bl	8001fd0 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a8:	f7fd fe12 	bl	8001fd0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e187      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d036      	beq.n	8004440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_RCC_OscConfig+0x248>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd fdf6 	bl	8001fd0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fd fdf2 	bl	8001fd0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e167      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_OscConfig+0x240>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x200>
 8004406:	e01b      	b.n	8004440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004408:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <HAL_RCC_OscConfig+0x248>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fd fddf 	bl	8001fd0 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	e00e      	b.n	8004434 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004416:	f7fd fddb 	bl	8001fd0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d907      	bls.n	8004434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e150      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	42470000 	.word	0x42470000
 8004430:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	4b88      	ldr	r3, [pc, #544]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8097 	beq.w	800457c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b81      	ldr	r3, [pc, #516]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	4b7d      	ldr	r3, [pc, #500]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	4a7c      	ldr	r2, [pc, #496]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446c:	6413      	str	r3, [r2, #64]	@ 0x40
 800446e:	4b7a      	ldr	r3, [pc, #488]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b77      	ldr	r3, [pc, #476]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448a:	4b74      	ldr	r3, [pc, #464]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a73      	ldr	r2, [pc, #460]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fd fd9b 	bl	8001fd0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fd fd97 	bl	8001fd0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e10c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	4b6a      	ldr	r3, [pc, #424]	@ (800465c <HAL_RCC_OscConfig+0x474>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ea>
 80044c4:	4b64      	ldr	r3, [pc, #400]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c8:	4a63      	ldr	r2, [pc, #396]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d0:	e01c      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x30c>
 80044da:	4b5f      	ldr	r3, [pc, #380]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044de:	4a5e      	ldr	r2, [pc, #376]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044f4:	4b58      	ldr	r3, [pc, #352]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f8:	4a57      	ldr	r2, [pc, #348]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004500:	4b55      	ldr	r3, [pc, #340]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004504:	4a54      	ldr	r2, [pc, #336]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004506:	f023 0304 	bic.w	r3, r3, #4
 800450a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fd fd5c 	bl	8001fd0 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fd fd58 	bl	8001fd0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0cb      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	4b49      	ldr	r3, [pc, #292]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ee      	beq.n	800451c <HAL_RCC_OscConfig+0x334>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fd fd46 	bl	8001fd0 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd fd42 	bl	8001fd0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0b5      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	4a38      	ldr	r2, [pc, #224]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a1 	beq.w	80046c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004586:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b08      	cmp	r3, #8
 8004590:	d05c      	beq.n	800464c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d141      	bne.n	800461e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fd fd16 	bl	8001fd0 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fd fd12 	bl	8001fd0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e087      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	019b      	lsls	r3, r3, #6
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	491b      	ldr	r1, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_RCC_OscConfig+0x478>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd fceb 	bl	8001fd0 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fd fce7 	bl	8001fd0 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e05c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	4b11      	ldr	r3, [pc, #68]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x416>
 800461c:	e054      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCC_OscConfig+0x478>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fd fcd4 	bl	8001fd0 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7fd fcd0 	bl	8001fd0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e045      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_RCC_OscConfig+0x470>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x444>
 800464a:	e03d      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e038      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000
 8004660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_RCC_OscConfig+0x4ec>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d028      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d121      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11a      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800469a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0cc      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b68      	ldr	r3, [pc, #416]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d90c      	bls.n	8004714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b65      	ldr	r3, [pc, #404]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b63      	ldr	r3, [pc, #396]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b8      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800472c:	4b59      	ldr	r3, [pc, #356]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a58      	ldr	r2, [pc, #352]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004744:	4b53      	ldr	r3, [pc, #332]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a52      	ldr	r2, [pc, #328]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800474e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4b50      	ldr	r3, [pc, #320]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	494d      	ldr	r1, [pc, #308]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d044      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d119      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b3f      	ldr	r3, [pc, #252]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e06f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e067      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	4b37      	ldr	r3, [pc, #220]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4934      	ldr	r1, [pc, #208]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c8:	f7fd fc02 	bl	8001fd0 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d0:	f7fd fbfe 	bl	8001fd0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e04f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 020c 	and.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1eb      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d20c      	bcs.n	8004820 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e032      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4916      	ldr	r1, [pc, #88]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	490e      	ldr	r1, [pc, #56]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485e:	f000 f821 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490a      	ldr	r1, [pc, #40]	@ (8004898 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a09      	ldr	r2, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fb62 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023c00 	.word	0x40023c00
 8004894:	40023800 	.word	0x40023800
 8004898:	080562cc 	.word	0x080562cc
 800489c:	20000008 	.word	0x20000008
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a8:	b094      	sub	sp, #80	@ 0x50
 80048aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048bc:	4b79      	ldr	r3, [pc, #484]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d00d      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x40>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	f200 80e1 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x34>
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d003      	beq.n	80048de <HAL_RCC_GetSysClockFreq+0x3a>
 80048d6:	e0db      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b73      	ldr	r3, [pc, #460]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048dc:	e0db      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048de:	4b73      	ldr	r3, [pc, #460]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x208>)
 80048e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048e2:	e0d8      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e4:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ee:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004904:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	633b      	str	r3, [r7, #48]	@ 0x30
 800490e:	2300      	movs	r3, #0
 8004910:	637b      	str	r3, [r7, #52]	@ 0x34
 8004912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	0159      	lsls	r1, r3, #5
 8004924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004928:	0150      	lsls	r0, r2, #5
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4621      	mov	r1, r4
 8004930:	1a51      	subs	r1, r2, r1
 8004932:	6139      	str	r1, [r7, #16]
 8004934:	4629      	mov	r1, r5
 8004936:	eb63 0301 	sbc.w	r3, r3, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004948:	4659      	mov	r1, fp
 800494a:	018b      	lsls	r3, r1, #6
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004952:	4651      	mov	r1, sl
 8004954:	018a      	lsls	r2, r1, #6
 8004956:	4651      	mov	r1, sl
 8004958:	ebb2 0801 	subs.w	r8, r2, r1
 800495c:	4659      	mov	r1, fp
 800495e:	eb63 0901 	sbc.w	r9, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004976:	4690      	mov	r8, r2
 8004978:	4699      	mov	r9, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb18 0303 	adds.w	r3, r8, r3
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	462b      	mov	r3, r5
 8004984:	eb49 0303 	adc.w	r3, r9, r3
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004996:	4629      	mov	r1, r5
 8004998:	024b      	lsls	r3, r1, #9
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a0:	4621      	mov	r1, r4
 80049a2:	024a      	lsls	r2, r1, #9
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049b4:	f7fb fc0e 	bl	80001d4 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c0:	e058      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b38      	ldr	r3, [pc, #224]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	2200      	movs	r2, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	4611      	mov	r1, r2
 80049ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049d2:	623b      	str	r3, [r7, #32]
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	f04f 0000 	mov.w	r0, #0
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	0159      	lsls	r1, r3, #5
 80049ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ee:	0150      	lsls	r0, r2, #5
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4641      	mov	r1, r8
 80049f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049fa:	4649      	mov	r1, r9
 80049fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a14:	ebb2 040a 	subs.w	r4, r2, sl
 8004a18:	eb63 050b 	sbc.w	r5, r3, fp
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	464b      	mov	r3, r9
 8004a38:	eb45 0303 	adc.w	r3, r5, r3
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	028b      	lsls	r3, r1, #10
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a54:	4621      	mov	r1, r4
 8004a56:	028a      	lsls	r2, r1, #10
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	61fa      	str	r2, [r7, #28]
 8004a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a68:	f7fb fbb4 	bl	80001d4 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3750      	adds	r7, #80	@ 0x50
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d035      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ad8:	4b67      	ldr	r3, [pc, #412]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fa77 	bl	8001fd0 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ae6:	f7fd fa73 	bl	8001fd0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0ba      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004af8:	4b60      	ldr	r3, [pc, #384]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f0      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	019a      	lsls	r2, r3, #6
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	071b      	lsls	r3, r3, #28
 8004b10:	495a      	ldr	r1, [pc, #360]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b18:	4b57      	ldr	r3, [pc, #348]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1e:	f7fd fa57 	bl	8001fd0 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b26:	f7fd fa53 	bl	8001fd0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e09a      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b38:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8083 	beq.w	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	4b49      	ldr	r3, [pc, #292]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	4a48      	ldr	r2, [pc, #288]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b62:	4b46      	ldr	r3, [pc, #280]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b6e:	4b44      	ldr	r3, [pc, #272]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a43      	ldr	r2, [pc, #268]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7a:	f7fd fa29 	bl	8001fd0 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fd fa25 	bl	8001fd0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e06c      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b94:	4b3a      	ldr	r3, [pc, #232]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ba0:	4b36      	ldr	r3, [pc, #216]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02f      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d028      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bce:	4b2d      	ldr	r3, [pc, #180]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bd4:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bda:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d114      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd f9f3 	bl	8001fd0 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bee:	f7fd f9ef 	bl	8001fd0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e034      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ee      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c1c:	d10d      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c1e:	4b17      	ldr	r3, [pc, #92]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c32:	4912      	ldr	r1, [pc, #72]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
 8004c38:	e005      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c40:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c44:	6093      	str	r3, [r2, #8]
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c52:	490a      	ldr	r1, [pc, #40]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	7c1a      	ldrb	r2, [r3, #16]
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c6a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	42470068 	.word	0x42470068
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	42470e40 	.word	0x42470e40
 8004c88:	424711e0 	.word	0x424711e0

08004c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d13f      	bne.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004caa:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cb2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cc0:	d12f      	bne.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cc4:	617b      	str	r3, [r7, #20]
          break;
 8004cc6:	e02f      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cd4:	d108      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cd6:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cde:	4a19      	ldr	r2, [pc, #100]	@ (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e007      	b.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ce8:	4b14      	ldr	r3, [pc, #80]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cf0:	4a15      	ldr	r2, [pc, #84]	@ (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cf8:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cfe:	099b      	lsrs	r3, r3, #6
 8004d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d12:	0f1b      	lsrs	r3, r3, #28
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	617b      	str	r3, [r7, #20]
          break;
 8004d20:	e002      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
          break;
 8004d26:	bf00      	nop
        }
      }
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004d2a:	bf00      	nop
    }
  }
  return frequency;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	00bb8000 	.word	0x00bb8000
 8004d44:	007a1200 	.word	0x007a1200
 8004d48:	00f42400 	.word	0x00f42400

08004d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07b      	b.n	8004e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6e:	d009      	beq.n	8004d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
 8004d76:	e005      	b.n	8004d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc ffac 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e08:	ea42 0103 	orr.w	r1, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0104 	and.w	r1, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	f003 0210 	and.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6e:	f7fd f8af 	bl	8001fd0 <HAL_GetTick>
 8004e72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
 8004e86:	e12a      	b.n	80050de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit+0x36>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e122      	b.n	80050de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Transmit+0x48>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e11b      	b.n	80050de <HAL_SPI_Transmit+0x280>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef4:	d10f      	bne.n	8004f16 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d007      	beq.n	8004f34 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3c:	d152      	bne.n	8004fe4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Transmit+0xee>
 8004f46:	8b7b      	ldrh	r3, [r7, #26]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d145      	bne.n	8004fd8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f70:	e032      	b.n	8004fd8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d112      	bne.n	8004fa6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fa4:	e018      	b.n	8004fd8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa6:	f7fd f813 	bl	8001fd0 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d803      	bhi.n	8004fbe <HAL_SPI_Transmit+0x160>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_Transmit+0x166>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e082      	b.n	80050de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1c7      	bne.n	8004f72 <HAL_SPI_Transmit+0x114>
 8004fe2:	e053      	b.n	800508c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_Transmit+0x194>
 8004fec:	8b7b      	ldrh	r3, [r7, #26]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d147      	bne.n	8005082 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005018:	e033      	b.n	8005082 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d113      	bne.n	8005050 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800504e:	e018      	b.n	8005082 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005050:	f7fc ffbe 	bl	8001fd0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d803      	bhi.n	8005068 <HAL_SPI_Transmit+0x20a>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d102      	bne.n	800506e <HAL_SPI_Transmit+0x210>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e02d      	b.n	80050de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1c6      	bne.n	800501a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fbe7 	bl	8005864 <SPI_EndRxTxTransaction>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af02      	add	r7, sp, #8
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	e104      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d112      	bne.n	8005136 <HAL_SPI_Receive+0x50>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10e      	bne.n	8005136 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2204      	movs	r2, #4
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f8f3 	bl	8005318 <HAL_SPI_TransmitReceive>
 8005132:	4603      	mov	r3, r0
 8005134:	e0ec      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005136:	f7fc ff4b 	bl	8001fd0 <HAL_GetTick>
 800513a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_SPI_Receive+0x62>
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0e1      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_SPI_Receive+0x74>
 8005156:	2302      	movs	r3, #2
 8005158:	e0da      	b.n	8005310 <HAL_SPI_Receive+0x22a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2204      	movs	r2, #4
 8005166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a8:	d10f      	bne.n	80051ca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d170      	bne.n	80052d2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051f0:	e035      	b.n	800525e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d115      	bne.n	800522c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f103 020c 	add.w	r2, r3, #12
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800522a:	e018      	b.n	800525e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522c:	f7fc fed0 	bl	8001fd0 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d803      	bhi.n	8005244 <HAL_SPI_Receive+0x15e>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d102      	bne.n	800524a <HAL_SPI_Receive+0x164>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e058      	b.n	8005310 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1c4      	bne.n	80051f2 <HAL_SPI_Receive+0x10c>
 8005268:	e038      	b.n	80052dc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d113      	bne.n	80052a0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	b292      	uxth	r2, r2
 8005284:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800529e:	e018      	b.n	80052d2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a0:	f7fc fe96 	bl	8001fd0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d803      	bhi.n	80052b8 <HAL_SPI_Receive+0x1d2>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Receive+0x1d8>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e01e      	b.n	8005310 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1c6      	bne.n	800526a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fa59 	bl	8005798 <SPI_EndRxTransaction>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800530e:	2300      	movs	r3, #0
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	@ 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005326:	2301      	movs	r3, #1
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800532a:	f7fc fe51 	bl	8001fd0 <HAL_GetTick>
 800532e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005336:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005342:	7ffb      	ldrb	r3, [r7, #31]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d00c      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x4a>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800534e:	d106      	bne.n	800535e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_SPI_TransmitReceive+0x46>
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d001      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	e17f      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x5c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x5c>
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e174      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x6e>
 8005382:	2302      	movs	r3, #2
 8005384:	e16d      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b04      	cmp	r3, #4
 8005398:	d003      	beq.n	80053a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2205      	movs	r2, #5
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	887a      	ldrh	r2, [r7, #2]
 80053ca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d007      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fe:	d17e      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_SPI_TransmitReceive+0xf6>
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d16c      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	881a      	ldrh	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	1c9a      	adds	r2, r3, #2
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005432:	e059      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d11b      	bne.n	800547a <HAL_SPI_TransmitReceive+0x162>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d016      	beq.n	800547a <HAL_SPI_TransmitReceive+0x162>
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	2b01      	cmp	r3, #1
 8005450:	d113      	bne.n	800547a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d119      	bne.n	80054bc <HAL_SPI_TransmitReceive+0x1a4>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d014      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	b292      	uxth	r2, r2
 800549e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054b8:	2301      	movs	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054bc:	f7fc fd88 	bl	8001fd0 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d80d      	bhi.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d009      	beq.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0bc      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1a0      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x11c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d19b      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x11c>
 80054fc:	e082      	b.n	8005604 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_TransmitReceive+0x1f4>
 8005506:	8afb      	ldrh	r3, [r7, #22]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d171      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005532:	e05d      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b02      	cmp	r3, #2
 8005540:	d11c      	bne.n	800557c <HAL_SPI_TransmitReceive+0x264>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d017      	beq.n	800557c <HAL_SPI_TransmitReceive+0x264>
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	2b01      	cmp	r3, #1
 8005550:	d114      	bne.n	800557c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d119      	bne.n	80055be <HAL_SPI_TransmitReceive+0x2a6>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d014      	beq.n	80055be <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055be:	f7fc fd07 	bl	8001fd0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d803      	bhi.n	80055d6 <HAL_SPI_TransmitReceive+0x2be>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d102      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x2c4>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e038      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d19c      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x21c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d197      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f92b 	bl	8005864 <SPI_EndRxTxTransaction>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e01d      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3728      	adds	r7, #40	@ 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005678:	b2db      	uxtb	r3, r3
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005698:	f7fc fc9a 	bl	8001fd0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	4413      	add	r3, r2
 80056a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056a8:	f7fc fc92 	bl	8001fd0 <HAL_GetTick>
 80056ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ae:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	015b      	lsls	r3, r3, #5
 80056b4:	0d1b      	lsrs	r3, r3, #20
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056be:	e054      	b.n	800576a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d050      	beq.n	800576a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056c8:	f7fc fc82 	bl	8001fd0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d902      	bls.n	80056de <SPI_WaitFlagStateUntilTimeout+0x56>
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d13d      	bne.n	800575a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f6:	d111      	bne.n	800571c <SPI_WaitFlagStateUntilTimeout+0x94>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005700:	d004      	beq.n	800570c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570a:	d107      	bne.n	800571c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800571a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005724:	d10f      	bne.n	8005746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e017      	b.n	800578a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	3b01      	subs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d19b      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000008 	.word	0x20000008

08005798 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ac:	d111      	bne.n	80057d2 <SPI_EndRxTransaction+0x3a>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b6:	d004      	beq.n	80057c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c0:	d107      	bne.n	80057d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057da:	d12a      	bne.n	8005832 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e4:	d012      	beq.n	800580c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	2180      	movs	r1, #128	@ 0x80
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff ff49 	bl	8005688 <SPI_WaitFlagStateUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02d      	beq.n	8005858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e026      	b.n	800585a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2200      	movs	r2, #0
 8005814:	2101      	movs	r1, #1
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff ff36 	bl	8005688 <SPI_WaitFlagStateUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01a      	beq.n	8005858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e013      	b.n	800585a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2200      	movs	r2, #0
 800583a:	2101      	movs	r1, #1
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff23 	bl	8005688 <SPI_WaitFlagStateUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e000      	b.n	800585a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2201      	movs	r2, #1
 8005878:	2102      	movs	r1, #2
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff ff04 	bl	8005688 <SPI_WaitFlagStateUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e032      	b.n	80058fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005896:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <SPI_EndRxTxTransaction+0xa0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1b      	ldr	r2, [pc, #108]	@ (8005908 <SPI_EndRxTxTransaction+0xa4>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	0d5b      	lsrs	r3, r3, #21
 80058a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b4:	d112      	bne.n	80058dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2200      	movs	r2, #0
 80058be:	2180      	movs	r1, #128	@ 0x80
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff fee1 	bl	8005688 <SPI_WaitFlagStateUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d0:	f043 0220 	orr.w	r2, r3, #32
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e00f      	b.n	80058fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d0f2      	beq.n	80058dc <SPI_EndRxTxTransaction+0x78>
 80058f6:	e000      	b.n	80058fa <SPI_EndRxTxTransaction+0x96>
        break;
 80058f8:	bf00      	nop
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000008 	.word	0x20000008
 8005908:	165e9f81 	.word	0x165e9f81

0800590c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e041      	b.n	80059a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fc fa2a 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3304      	adds	r3, #4
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fa72 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e03c      	b.n	8005a3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a4c <HAL_TIM_Base_Start+0xa0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059de:	d013      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <HAL_TIM_Base_Start+0xa4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <HAL_TIM_Base_Start+0xa8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a17      	ldr	r2, [pc, #92]	@ (8005a58 <HAL_TIM_Base_Start+0xac>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_Base_Start+0x5c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <HAL_TIM_Base_Start+0xb0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d111      	bne.n	8005a2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d010      	beq.n	8005a3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	e007      	b.n	8005a3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40014000 	.word	0x40014000

08005a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0202 	mvn.w	r2, #2
 8005a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9a3 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f995 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f9a6 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d020      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0204 	mvn.w	r2, #4
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f97d 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f96f 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f980 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0208 	mvn.w	r2, #8
 8005b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2204      	movs	r2, #4
 8005b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f957 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f949 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f95a 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0210 	mvn.w	r2, #16
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f931 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f923 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f934 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00c      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0201 	mvn.w	r2, #1
 8005bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f901 	bl	8005dce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fac0 	bl	8006170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f905 	bl	8005e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0220 	mvn.w	r2, #32
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa92 	bl	800615c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_TIM_ConfigClockSource+0x1c>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0b4      	b.n	8005dc6 <HAL_TIM_ConfigClockSource+0x186>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c94:	d03e      	beq.n	8005d14 <HAL_TIM_ConfigClockSource+0xd4>
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c9a:	f200 8087 	bhi.w	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca2:	f000 8086 	beq.w	8005db2 <HAL_TIM_ConfigClockSource+0x172>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005caa:	d87f      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b70      	cmp	r3, #112	@ 0x70
 8005cae:	d01a      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8005cb0:	2b70      	cmp	r3, #112	@ 0x70
 8005cb2:	d87b      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b60      	cmp	r3, #96	@ 0x60
 8005cb6:	d050      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x11a>
 8005cb8:	2b60      	cmp	r3, #96	@ 0x60
 8005cba:	d877      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b50      	cmp	r3, #80	@ 0x50
 8005cbe:	d03c      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0xfa>
 8005cc0:	2b50      	cmp	r3, #80	@ 0x50
 8005cc2:	d873      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d058      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x13a>
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d86f      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b30      	cmp	r3, #48	@ 0x30
 8005cce:	d064      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x15a>
 8005cd0:	2b30      	cmp	r3, #48	@ 0x30
 8005cd2:	d86b      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d060      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x15a>
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d867      	bhi.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d05c      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x15a>
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d05a      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	e062      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf6:	f000 f9a3 	bl	8006040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	609a      	str	r2, [r3, #8]
      break;
 8005d12:	e04f      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d24:	f000 f98c 	bl	8006040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d36:	609a      	str	r2, [r3, #8]
      break;
 8005d38:	e03c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 f900 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2150      	movs	r1, #80	@ 0x50
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f959 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005d58:	e02c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 f91f 	bl	8005faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2160      	movs	r1, #96	@ 0x60
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f949 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005d78:	e01c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 f8e0 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2140      	movs	r1, #64	@ 0x40
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f939 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005d98:	e00c      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f000 f930 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005daa:	e003      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e000      	b.n	8005db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a3a      	ldr	r2, [pc, #232]	@ (8005f30 <TIM_Base_SetConfig+0xfc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00f      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e52:	d00b      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a37      	ldr	r2, [pc, #220]	@ (8005f34 <TIM_Base_SetConfig+0x100>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d007      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a36      	ldr	r2, [pc, #216]	@ (8005f38 <TIM_Base_SetConfig+0x104>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <TIM_Base_SetConfig+0x108>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2b      	ldr	r2, [pc, #172]	@ (8005f30 <TIM_Base_SetConfig+0xfc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01b      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8c:	d017      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a28      	ldr	r2, [pc, #160]	@ (8005f34 <TIM_Base_SetConfig+0x100>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a27      	ldr	r2, [pc, #156]	@ (8005f38 <TIM_Base_SetConfig+0x104>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00f      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a26      	ldr	r2, [pc, #152]	@ (8005f3c <TIM_Base_SetConfig+0x108>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a25      	ldr	r2, [pc, #148]	@ (8005f40 <TIM_Base_SetConfig+0x10c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a24      	ldr	r2, [pc, #144]	@ (8005f44 <TIM_Base_SetConfig+0x110>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a23      	ldr	r2, [pc, #140]	@ (8005f48 <TIM_Base_SetConfig+0x114>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d108      	bne.n	8005ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8005f30 <TIM_Base_SetConfig+0xfc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d103      	bne.n	8005f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d105      	bne.n	8005f22 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	611a      	str	r2, [r3, #16]
  }
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40010000 	.word	0x40010000
 8005f34:	40000400 	.word	0x40000400
 8005f38:	40000800 	.word	0x40000800
 8005f3c:	40000c00 	.word	0x40000c00
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800

08005f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 030a 	bic.w	r3, r3, #10
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0210 	bic.w	r2, r3, #16
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	f043 0307 	orr.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	431a      	orrs	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e050      	b.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e4:	d013      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a18      	ldr	r2, [pc, #96]	@ (800614c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a13      	ldr	r2, [pc, #76]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d10c      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40014000 	.word	0x40014000

0800615c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <memset>:
 8006184:	4402      	add	r2, r0
 8006186:	4603      	mov	r3, r0
 8006188:	4293      	cmp	r3, r2
 800618a:	d100      	bne.n	800618e <memset+0xa>
 800618c:	4770      	bx	lr
 800618e:	f803 1b01 	strb.w	r1, [r3], #1
 8006192:	e7f9      	b.n	8006188 <memset+0x4>

08006194 <__libc_init_array>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4d0d      	ldr	r5, [pc, #52]	@ (80061cc <__libc_init_array+0x38>)
 8006198:	4c0d      	ldr	r4, [pc, #52]	@ (80061d0 <__libc_init_array+0x3c>)
 800619a:	1b64      	subs	r4, r4, r5
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	2600      	movs	r6, #0
 80061a0:	42a6      	cmp	r6, r4
 80061a2:	d109      	bne.n	80061b8 <__libc_init_array+0x24>
 80061a4:	4d0b      	ldr	r5, [pc, #44]	@ (80061d4 <__libc_init_array+0x40>)
 80061a6:	4c0c      	ldr	r4, [pc, #48]	@ (80061d8 <__libc_init_array+0x44>)
 80061a8:	f000 f818 	bl	80061dc <_init>
 80061ac:	1b64      	subs	r4, r4, r5
 80061ae:	10a4      	asrs	r4, r4, #2
 80061b0:	2600      	movs	r6, #0
 80061b2:	42a6      	cmp	r6, r4
 80061b4:	d105      	bne.n	80061c2 <__libc_init_array+0x2e>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061bc:	4798      	blx	r3
 80061be:	3601      	adds	r6, #1
 80061c0:	e7ee      	b.n	80061a0 <__libc_init_array+0xc>
 80061c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c6:	4798      	blx	r3
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7f2      	b.n	80061b2 <__libc_init_array+0x1e>
 80061cc:	080562ec 	.word	0x080562ec
 80061d0:	080562ec 	.word	0x080562ec
 80061d4:	080562ec 	.word	0x080562ec
 80061d8:	080562f0 	.word	0x080562f0

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
