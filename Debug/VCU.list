
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005480  08005480  00006480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005638  08005638  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005640  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000014  08005654  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08005654  00007244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001110f  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b1  00000000  00000000  00018153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce0  00000000  00000000  0001b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001840c  00000000  00000000  0001c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012318  00000000  00000000  00034864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c131  00000000  00000000  00046b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  000e2cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e72b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005468 	.word	0x08005468

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08005468 	.word	0x08005468

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 80004ca:	f001 f929 	bl	8001720 <MCP2515_Reset>
  HAL_Delay(10);
 80004ce:	200a      	movs	r0, #10
 80004d0:	f001 fd0e 	bl	8001ef0 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004d4:	2300      	movs	r3, #0
 80004d6:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004d8:	2300      	movs	r3, #0
 80004da:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004dc:	2300      	movs	r3, #0
 80004de:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80004e4:	2300      	movs	r3, #0
 80004e6:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004e8:	2300      	movs	r3, #0
 80004ea:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004ec:	2300      	movs	r3, #0
 80004ee:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80004f4:	2300      	movs	r3, #0
 80004f6:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004f8:	2300      	movs	r3, #0
 80004fa:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80004fc:	2300      	movs	r3, #0
 80004fe:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000504:	2300      	movs	r3, #0
 8000506:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000508:	2308      	movs	r3, #8
 800050a:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800050c:	2300      	movs	r3, #0
 800050e:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000544:	2300      	movs	r3, #0
 8000546:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000548:	2308      	movs	r3, #8
 800054a:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000554:	f001 f872 	bl	800163c <MCP2515_Initialize>
 8000558:	4603      	mov	r3, r0
 800055a:	f083 0301 	eor.w	r3, r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <CANSPI_Initialize+0xa4>
  {
    return false;
 8000564:	2300      	movs	r3, #0
 8000566:	e05e      	b.n	8000626 <CANSPI_Initialize+0x162>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000568:	f001 f88a 	bl	8001680 <MCP2515_SetConfigMode>
 800056c:	4603      	mov	r3, r0
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <CANSPI_Initialize+0xb8>
  {
    return false;
 8000578:	2300      	movs	r3, #0
 800057a:	e054      	b.n	8000626 <CANSPI_Initialize+0x162>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	461a      	mov	r2, r3
 8000580:	2123      	movs	r1, #35	@ 0x23
 8000582:	2020      	movs	r0, #32
 8000584:	f001 f958 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000588:	463b      	mov	r3, r7
 800058a:	461a      	mov	r2, r3
 800058c:	2127      	movs	r1, #39	@ 0x27
 800058e:	2024      	movs	r0, #36	@ 0x24
 8000590:	f001 f952 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	461a      	mov	r2, r3
 800059a:	2103      	movs	r1, #3
 800059c:	2000      	movs	r0, #0
 800059e:	f001 f94b 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	461a      	mov	r2, r3
 80005a8:	2107      	movs	r1, #7
 80005aa:	2004      	movs	r0, #4
 80005ac:	f001 f944 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	461a      	mov	r2, r3
 80005b6:	210b      	movs	r1, #11
 80005b8:	2008      	movs	r0, #8
 80005ba:	f001 f93d 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	461a      	mov	r2, r3
 80005c4:	2113      	movs	r1, #19
 80005c6:	2010      	movs	r0, #16
 80005c8:	f001 f936 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	461a      	mov	r2, r3
 80005d2:	2117      	movs	r1, #23
 80005d4:	2014      	movs	r0, #20
 80005d6:	f001 f92f 	bl	8001838 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	461a      	mov	r2, r3
 80005e0:	211b      	movs	r1, #27
 80005e2:	2018      	movs	r0, #24
 80005e4:	f001 f928 	bl	8001838 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005e8:	2104      	movs	r1, #4
 80005ea:	2060      	movs	r0, #96	@ 0x60
 80005ec:	f001 f8fc 	bl	80017e8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005f0:	2101      	movs	r1, #1
 80005f2:	2070      	movs	r0, #112	@ 0x70
 80005f4:	f001 f8f8 	bl	80017e8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80005f8:	2100      	movs	r1, #0
 80005fa:	202a      	movs	r0, #42	@ 0x2a
 80005fc:	f001 f8f4 	bl	80017e8 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xF0);
 8000600:	21f0      	movs	r1, #240	@ 0xf0
 8000602:	2029      	movs	r0, #41	@ 0x29
 8000604:	f001 f8f0 	bl	80017e8 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000608:	2183      	movs	r1, #131	@ 0x83
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f001 f8ec 	bl	80017e8 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000610:	f001 f864 	bl	80016dc <MCP2515_SetNormalMode>
 8000614:	4603      	mov	r3, r0
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <CANSPI_Initialize+0x160>
    return false;
 8000620:	2300      	movs	r3, #0
 8000622:	e000      	b.n	8000626 <CANSPI_Initialize+0x162>
  
  return true;
 8000624:	2301      	movs	r3, #1
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800063c:	4b44      	ldr	r3, [pc, #272]	@ (8000750 <CANSPI_Transmit+0x120>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000642:	4b43      	ldr	r3, [pc, #268]	@ (8000750 <CANSPI_Transmit+0x120>)
 8000644:	2200      	movs	r2, #0
 8000646:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000648:	4b41      	ldr	r3, [pc, #260]	@ (8000750 <CANSPI_Transmit+0x120>)
 800064a:	2200      	movs	r2, #0
 800064c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800064e:	4b40      	ldr	r3, [pc, #256]	@ (8000750 <CANSPI_Transmit+0x120>)
 8000650:	2200      	movs	r2, #0
 8000652:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000654:	f001 f96c 	bl	8001930 <MCP2515_ReadStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b3d      	ldr	r3, [pc, #244]	@ (8000754 <CANSPI_Transmit+0x124>)
 800065e:	701a      	strb	r2, [r3, #0]
  uint8_t dingus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <CANSPI_Transmit+0x124>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	73bb      	strb	r3, [r7, #14]
  uint8_t dingus2 = MCP2515_ReadByte(MCP2515_CANCTRL);
 8000666:	200f      	movs	r0, #15
 8000668:	f001 f872 	bl	8001750 <MCP2515_ReadByte>
 800066c:	4603      	mov	r3, r0
 800066e:	737b      	strb	r3, [r7, #13]
  uint8_t efl = MCP2515_ReadByte(MCP2515_EFLG);
 8000670:	202d      	movs	r0, #45	@ 0x2d
 8000672:	f001 f86d 	bl	8001750 <MCP2515_ReadByte>
 8000676:	4603      	mov	r3, r0
 8000678:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800067a:	2030      	movs	r0, #48	@ 0x30
 800067c:	f001 f868 	bl	8001750 <MCP2515_ReadByte>
 8000680:	4603      	mov	r3, r0
 8000682:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 8000684:	2040      	movs	r0, #64	@ 0x40
 8000686:	f001 f863 	bl	8001750 <MCP2515_ReadByte>
 800068a:	4603      	mov	r3, r0
 800068c:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 800068e:	2050      	movs	r0, #80	@ 0x50
 8000690:	f001 f85e 	bl	8001750 <MCP2515_ReadByte>
 8000694:	4603      	mov	r3, r0
 8000696:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000698:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <CANSPI_Transmit+0x124>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d115      	bne.n	80006d2 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6858      	ldr	r0, [r3, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <CANSPI_Transmit+0x120>)
 80006b0:	4619      	mov	r1, r3
 80006b2:	f000 f928 	bl	8000906 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7a1a      	ldrb	r2, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3309      	adds	r3, #9
 80006be:	4924      	ldr	r1, [pc, #144]	@ (8000750 <CANSPI_Transmit+0x120>)
 80006c0:	2040      	movs	r0, #64	@ 0x40
 80006c2:	f001 f8e7 	bl	8001894 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006c6:	2081      	movs	r0, #129	@ 0x81
 80006c8:	f001 f914 	bl	80018f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e038      	b.n	8000744 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <CANSPI_Transmit+0x124>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d115      	bne.n	800070c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6858      	ldr	r0, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <CANSPI_Transmit+0x120>)
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 f90b 	bl	8000906 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7a1a      	ldrb	r2, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3309      	adds	r3, #9
 80006f8:	4915      	ldr	r1, [pc, #84]	@ (8000750 <CANSPI_Transmit+0x120>)
 80006fa:	2042      	movs	r0, #66	@ 0x42
 80006fc:	f001 f8ca 	bl	8001894 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000700:	2082      	movs	r0, #130	@ 0x82
 8000702:	f001 f8f7 	bl	80018f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e01b      	b.n	8000744 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <CANSPI_Transmit+0x124>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d114      	bne.n	8000744 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6858      	ldr	r0, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <CANSPI_Transmit+0x120>)
 8000724:	4619      	mov	r1, r3
 8000726:	f000 f8ee 	bl	8000906 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7a1a      	ldrb	r2, [r3, #8]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3309      	adds	r3, #9
 8000732:	4907      	ldr	r1, [pc, #28]	@ (8000750 <CANSPI_Transmit+0x120>)
 8000734:	2044      	movs	r0, #68	@ 0x44
 8000736:	f001 f8ad 	bl	8001894 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800073a:	2084      	movs	r0, #132	@ 0x84
 800073c:	f001 f8da 	bl	80018f4 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000034 	.word	0x20000034
 8000754:	20000030 	.word	0x20000030

08000758 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000764:	f001 f906 	bl	8001974 <MCP2515_GetRxStatus>
 8000768:	4603      	mov	r3, r0
 800076a:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 800076c:	7b3b      	ldrb	r3, [r7, #12]
 800076e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d066      	beq.n	8000846 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000778:	7b3b      	ldrb	r3, [r7, #12]
 800077a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b40      	cmp	r3, #64	@ 0x40
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2da      	uxtb	r2, r3
 800078a:	7b3b      	ldrb	r3, [r7, #12]
 800078c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2bc0      	cmp	r3, #192	@ 0xc0
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d007      	beq.n	80007b4 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	220d      	movs	r2, #13
 80007aa:	4619      	mov	r1, r3
 80007ac:	2090      	movs	r0, #144	@ 0x90
 80007ae:	f000 fff5 	bl	800179c <MCP2515_ReadRxSequence>
 80007b2:	e00c      	b.n	80007ce <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007b4:	7b3b      	ldrb	r3, [r7, #12]
 80007b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b80      	cmp	r3, #128	@ 0x80
 80007be:	d106      	bne.n	80007ce <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	220d      	movs	r2, #13
 80007c6:	4619      	mov	r1, r3
 80007c8:	2094      	movs	r0, #148	@ 0x94
 80007ca:	f000 ffe7 	bl	800179c <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007ce:	7b3b      	ldrb	r3, [r7, #12]
 80007d0:	f003 0318 	and.w	r3, r3, #24
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	d10c      	bne.n	80007f4 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2202      	movs	r2, #2
 80007de:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007e0:	7cb8      	ldrb	r0, [r7, #18]
 80007e2:	7cf9      	ldrb	r1, [r7, #19]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	7c7b      	ldrb	r3, [r7, #17]
 80007e8:	f000 f832 	bl	8000850 <convertReg2ExtendedCANid>
 80007ec:	4602      	mov	r2, r0
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	e00b      	b.n	800080c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007fa:	7c3b      	ldrb	r3, [r7, #16]
 80007fc:	7c7a      	ldrb	r2, [r7, #17]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f863 	bl	80008cc <convertReg2StandardCANid>
 8000806:	4602      	mov	r2, r0
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800080c:	7d3a      	ldrb	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000812:	7d7a      	ldrb	r2, [r7, #21]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000818:	7dba      	ldrb	r2, [r7, #22]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800081e:	7dfa      	ldrb	r2, [r7, #23]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000824:	7e3a      	ldrb	r2, [r7, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800082a:	7e7a      	ldrb	r2, [r7, #25]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000830:	7eba      	ldrb	r2, [r7, #26]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000836:	7efa      	ldrb	r2, [r7, #27]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800083c:	7f3a      	ldrb	r2, [r7, #28]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000846:	7ffb      	ldrb	r3, [r7, #31]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000850:	b490      	push	{r4, r7}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	4604      	mov	r4, r0
 8000858:	4608      	mov	r0, r1
 800085a:	4611      	mov	r1, r2
 800085c:	461a      	mov	r2, r3
 800085e:	4623      	mov	r3, r4
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	4603      	mov	r3, r0
 8000864:	71bb      	strb	r3, [r7, #6]
 8000866:	460b      	mov	r3, r1
 8000868:	717b      	strb	r3, [r7, #5]
 800086a:	4613      	mov	r3, r2
 800086c:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000876:	793b      	ldrb	r3, [r7, #4]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800087e:	793b      	ldrb	r3, [r7, #4]
 8000880:	095b      	lsrs	r3, r3, #5
 8000882:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4413      	add	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4413      	add	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4413      	add	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4413      	add	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008c0:	697b      	ldr	r3, [r7, #20]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc90      	pop	{r4, r7}
 80008ca:	4770      	bx	lr

080008cc <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	095b      	lsrs	r3, r3, #5
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 80008f8:	68fb      	ldr	r3, [r7, #12]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000906:	b480      	push	{r7}
 8000908:	b087      	sub	sp, #28
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	460b      	mov	r3, r1
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8000918:	7afb      	ldrb	r3, [r7, #11]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d12e      	bne.n	800097c <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f023 031f 	bic.w	r3, r3, #31
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7dfb      	ldrb	r3, [r7, #23]
 8000956:	4413      	add	r3, r2
 8000958:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	3308      	adds	r3, #8
 800095e:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	f023 0314 	bic.w	r3, r3, #20
 8000966:	b2da      	uxtb	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800097a:	e013      	b.n	80009a4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	015b      	lsls	r3, r3, #5
 800098c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	701a      	strb	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <updateRpm>:

/*            VCU Method Declarations  end         */


//TODO: I have no idea if this is what this function is supposed to do, it doesn't feel correct, but it's all I could do with the info provided
 void updateRpm(){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
 	inverter_diagnostics.motorRpm = (float)(rxMessage.frame.data0 | (rxMessage.frame.data1 << 8));
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <updateRpm+0x30>)
 80009b6:	7a5b      	ldrb	r3, [r3, #9]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <updateRpm+0x30>)
 80009bc:	7a9b      	ldrb	r3, [r3, #10]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	4313      	orrs	r3, r2
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ce:	ee17 2a90 	vmov	r2, s15
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <updateRpm+0x34>)
 80009d4:	601a      	str	r2, [r3, #0]
 }
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200001dc 	.word	0x200001dc
 80009e4:	2000023c 	.word	0x2000023c

080009e8 <readFromCAN>:

 void readFromCAN(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
 	if(rxMessage.frame.id == RPM_READ_ID){
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <readFromCAN+0x18>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <readFromCAN+0x12>
 		updateRpm();
 80009f6:	f7ff ffdb 	bl	80009b0 <updateRpm>
 	}
 }
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200001dc 	.word	0x200001dc

08000a04 <updateBMSDiagnostics>:

void updateBMSDiagnostics(void){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <readAPPSandBSE>:

void readAPPSandBSE(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

	// ADC Read Code
	HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <readAPPSandBSE+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4917      	ldr	r1, [pc, #92]	@ (8000a7c <readAPPSandBSE+0x68>)
 8000a20:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <readAPPSandBSE+0x6c>)
 8000a22:	f001 facd 	bl	8001fc0 <HAL_ADC_Start_DMA>
	if(HAL_GetTick() - millis_since_dma_read >DMA_READ_TIMEOUT){
 8000a26:	f001 fa57 	bl	8001ed8 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <readAPPSandBSE+0x70>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	220a      	movs	r2, #10
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d91c      	bls.n	8000a72 <readAPPSandBSE+0x5e>
		apps1Value = ADC_Reads[APPS1_RANK];
 8000a38:	2300      	movs	r3, #0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <readAPPSandBSE+0x68>)
 8000a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <readAPPSandBSE+0x74>)
 8000a46:	801a      	strh	r2, [r3, #0]
		apps2Value = ADC_Reads[APPS2_RANK];
 8000a48:	2301      	movs	r3, #1
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <readAPPSandBSE+0x68>)
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <readAPPSandBSE+0x78>)
 8000a56:	801a      	strh	r2, [r3, #0]
		bseValue = ADC_Reads[BSE_RANK];
 8000a58:	2302      	movs	r3, #2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <readAPPSandBSE+0x68>)
 8000a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <readAPPSandBSE+0x7c>)
 8000a66:	801a      	strh	r2, [r3, #0]

		millis_since_dma_read = HAL_GetTick();
 8000a68:	f001 fa36 	bl	8001ed8 <HAL_GetTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <readAPPSandBSE+0x70>)
 8000a70:	6013      	str	r3, [r2, #0]
	}

//	HAL_ADC_Stop_DMA(&hadc1);


}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000004 	.word	0x20000004
 8000a7c:	2000020c 	.word	0x2000020c
 8000a80:	20000038 	.word	0x20000038
 8000a84:	20000208 	.word	0x20000208
 8000a88:	200001f0 	.word	0x200001f0
 8000a8c:	200001f2 	.word	0x200001f2
 8000a90:	200001f4 	.word	0x200001f4

08000a94 <calculateTorqueRequest>:

void calculateTorqueRequest(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b095      	sub	sp, #84	@ 0x54
 8000a98:	af00      	add	r7, sp, #0

	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 8000a9a:	4ba7      	ldr	r3, [pc, #668]	@ (8000d38 <calculateTorqueRequest+0x2a4>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ab4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000ab8:	461a      	mov	r2, r3
 8000aba:	230a      	movs	r3, #10
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	ee07 3a90 	vmov	s15, r3
 8000ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aca:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 8000ace:	4b9b      	ldr	r3, [pc, #620]	@ (8000d3c <calculateTorqueRequest+0x2a8>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	ee07 3a90 	vmov	s15, r3
 8000ad6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ada:	230a      	movs	r3, #10
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ae8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000aec:	461a      	mov	r2, r3
 8000aee:	230a      	movs	r3, #10
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000afe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 8000b02:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000b06:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b0e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000b12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b16:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	if(appsValue > 0){
 8000b1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b26:	f340 80d5 	ble.w	8000cd4 <calculateTorqueRequest+0x240>
	 		int numPedalSteps = 10;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
	 		int numRpmSteps = 10;
 8000b2e:	230a      	movs	r3, #10
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30

	 		float pedalStepSize = 100 / (numPedalSteps - 1);
 8000b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b34:	3b01      	subs	r3, #1
 8000b36:	2264      	movs	r2, #100	@ 0x64
 8000b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b44:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	 		float rpmStepSize = MAX_RPM / (numRpmSteps - 1);
 8000b48:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8000d40 <calculateTorqueRequest+0x2ac>
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b5c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	 		int pedalLowIndx = (int)(appsValue/pedalStepSize);
 8000b60:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8000b64:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b70:	ee17 3a90 	vmov	r3, s15
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
	 		int pedalHighIndx = pedalLowIndx + 1;
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	3301      	adds	r3, #1
 8000b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 		if (pedalHighIndx >= numPedalSteps) pedalHighIndx = numPedalSteps - 1;
 8000b7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b80:	429a      	cmp	r2, r3
 8000b82:	db02      	blt.n	8000b8a <calculateTorqueRequest+0xf6>
 8000b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b86:	3b01      	subs	r3, #1
 8000b88:	64fb      	str	r3, [r7, #76]	@ 0x4c

	 		int rpmLowIndx = (int)(inverter_diagnostics.motorRpm / rpmStepSize);
 8000b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8000d44 <calculateTorqueRequest+0x2b0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	ee07 3a90 	vmov	s15, r3
 8000b92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba2:	ee17 3a90 	vmov	r3, s15
 8000ba6:	623b      	str	r3, [r7, #32]
	 		int rpmHighIndx = rpmLowIndx + 1;
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	3301      	adds	r3, #1
 8000bac:	64bb      	str	r3, [r7, #72]	@ 0x48
	 		if (rpmHighIndx >= numRpmSteps) rpmHighIndx = numRpmSteps - 1;
 8000bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	db02      	blt.n	8000bbc <calculateTorqueRequest+0x128>
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	64bb      	str	r3, [r7, #72]	@ 0x48

	 	    float T00 = TORQUE_ARRAY[pedalLowIndx][rpmLowIndx];  // Lower-left
 8000bbc:	4962      	ldr	r1, [pc, #392]	@ (8000d48 <calculateTorqueRequest+0x2b4>)
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	6a3a      	ldr	r2, [r7, #32]
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	61fb      	str	r3, [r7, #28]
	 	    float T10 = TORQUE_ARRAY[pedalHighIndx][rpmLowIndx]; // Upper-left
 8000bd4:	495c      	ldr	r1, [pc, #368]	@ (8000d48 <calculateTorqueRequest+0x2b4>)
 8000bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	6a3a      	ldr	r2, [r7, #32]
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	61bb      	str	r3, [r7, #24]
	 	    float T01 = TORQUE_ARRAY[pedalLowIndx][rpmHighIndx]; // Lower-right
 8000bec:	4956      	ldr	r1, [pc, #344]	@ (8000d48 <calculateTorqueRequest+0x2b4>)
 8000bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	617b      	str	r3, [r7, #20]
	 	    float T11 = TORQUE_ARRAY[pedalHighIndx][rpmHighIndx]; // Upper-right
 8000c04:	4950      	ldr	r1, [pc, #320]	@ (8000d48 <calculateTorqueRequest+0x2b4>)
 8000c06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c12:	4413      	add	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	613b      	str	r3, [r7, #16]

	 	    // Compute interpolation weights
	 	    float pedalLerp = (appsValue - (pedalLowIndx * pedalStepSize)) / pedalStepSize;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000c32:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c36:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3e:	edc7 7a03 	vstr	s15, [r7, #12]
	 	    float rpmLerp = (inverter_diagnostics.motorRpm - (rpmLowIndx * rpmStepSize)) / rpmStepSize;
 8000c42:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <calculateTorqueRequest+0x2b0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	ee07 3a90 	vmov	s15, r3
 8000c54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c58:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c64:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c6c:	edc7 7a02 	vstr	s15, [r7, #8]

	 	    float torqueLow = T00 + (T01 - T00) * rpmLerp;
 8000c70:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c74:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c84:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c8c:	edc7 7a01 	vstr	s15, [r7, #4]
	 	    float torqueHigh = T10 + (T11 - T10) * rpmLerp;
 8000c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c94:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cac:	edc7 7a00 	vstr	s15, [r7]

	 		requestedTorque =  torqueLow + (torqueHigh - torqueLow) * pedalLerp;
 8000cb0:	ed97 7a00 	vldr	s14, [r7]
 8000cb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <calculateTorqueRequest+0x2b8>)
 8000cce:	edc3 7a00 	vstr	s15, [r3]

	}else{
		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
	}
}
 8000cd2:	e02a      	b.n	8000d2a <calculateTorqueRequest+0x296>
		float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <calculateTorqueRequest+0x2bc>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000cee:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d04:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000d08:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000d0c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000d54 <calculateTorqueRequest+0x2c0>
 8000d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d14:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d1c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000d54 <calculateTorqueRequest+0x2c0>
 8000d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <calculateTorqueRequest+0x2b8>)
 8000d26:	edc3 7a00 	vstr	s15, [r3]
}
 8000d2a:	bf00      	nop
 8000d2c:	3754      	adds	r7, #84	@ 0x54
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200001f0 	.word	0x200001f0
 8000d3c:	200001f2 	.word	0x200001f2
 8000d40:	463b8000 	.word	0x463b8000
 8000d44:	2000023c 	.word	0x2000023c
 8000d48:	08005480 	.word	0x08005480
 8000d4c:	200001f8 	.word	0x200001f8
 8000d50:	200001f4 	.word	0x200001f4
 8000d54:	00000000 	.word	0x00000000

08000d58 <checkAPPSPlausibility>:

void checkAPPSPlausibility(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL) * 100;
 8000d5c:	4b39      	ldr	r3, [pc, #228]	@ (8000e44 <checkAPPSPlausibility+0xec>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d68:	230a      	movs	r3, #10
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d76:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000e48 <checkAPPSPlausibility+0xf0>
 8000d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d94:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <checkAPPSPlausibility+0xf4>)
 8000d96:	edc3 7a00 	vstr	s15, [r3]
  apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL) * 100;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <checkAPPSPlausibility+0xf8>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000da6:	230a      	movs	r3, #10
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000db4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000db8:	461a      	mov	r2, r3
 8000dba:	230a      	movs	r3, #10
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	ee07 3a90 	vmov	s15, r3
 8000dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dca:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000e48 <checkAPPSPlausibility+0xf0>
 8000dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd2:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <checkAPPSPlausibility+0xfc>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]

  if(abs(apps1_as_percent-apps2_as_percent)> APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE){
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <checkAPPSPlausibility+0xf4>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <checkAPPSPlausibility+0xfc>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dec:	ee17 3a90 	vmov	r3, s15
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bfb8      	it	lt
 8000df4:	425b      	neglt	r3, r3
 8000df6:	220a      	movs	r2, #10
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	dd0c      	ble.n	8000e16 <checkAPPSPlausibility+0xbe>
	  millis_since_apps_implausible = HAL_GetTick();
 8000dfc:	f001 f86c 	bl	8001ed8 <HAL_GetTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a15      	ldr	r2, [pc, #84]	@ (8000e58 <checkAPPSPlausibility+0x100>)
 8000e04:	6013      	str	r3, [r2, #0]
	  apps_plausible = false;
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <checkAPPSPlausibility+0x104>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	801a      	strh	r2, [r3, #0]
	  requestedTorque = 0;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <checkAPPSPlausibility+0x108>)
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
  }else if(!apps_plausible && HAL_GetTick()-millis_since_apps_implausible<APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS){
	  requestedTorque = 0;
  }else{
	  apps_plausible = true;
  }
}
 8000e14:	e014      	b.n	8000e40 <checkAPPSPlausibility+0xe8>
  }else if(!apps_plausible && HAL_GetTick()-millis_since_apps_implausible<APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS){
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <checkAPPSPlausibility+0x104>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10d      	bne.n	8000e3a <checkAPPSPlausibility+0xe2>
 8000e1e:	f001 f85b 	bl	8001ed8 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <checkAPPSPlausibility+0x100>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2264      	movs	r2, #100	@ 0x64
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d204      	bcs.n	8000e3a <checkAPPSPlausibility+0xe2>
	  requestedTorque = 0;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <checkAPPSPlausibility+0x108>)
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	e002      	b.n	8000e40 <checkAPPSPlausibility+0xe8>
	  apps_plausible = true;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <checkAPPSPlausibility+0x104>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	801a      	strh	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200001f0 	.word	0x200001f0
 8000e48:	42c80000 	.word	0x42c80000
 8000e4c:	20000218 	.word	0x20000218
 8000e50:	200001f2 	.word	0x200001f2
 8000e54:	2000021c 	.word	0x2000021c
 8000e58:	20000204 	.word	0x20000204
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	200001f8 	.word	0x200001f8

08000e64 <checkCrossCheck>:

void checkCrossCheck(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0

	bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL) * 100;
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa8 <checkCrossCheck+0x144>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e76:	2300      	movs	r3, #0
 8000e78:	ee07 3a90 	vmov	s15, r3
 8000e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e84:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000fac <checkCrossCheck+0x148>
 8000e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea2:	4b43      	ldr	r3, [pc, #268]	@ (8000fb0 <checkCrossCheck+0x14c>)
 8000ea4:	edc3 7a00 	vstr	s15, [r3]
	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL) * 100;
 8000ea8:	4b42      	ldr	r3, [pc, #264]	@ (8000fb4 <checkCrossCheck+0x150>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ebe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ec2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	230a      	movs	r3, #10
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000fac <checkCrossCheck+0x148>
 8000edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee0:	edc7 7a03 	vstr	s15, [r7, #12]
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL) * 100;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	@ (8000fb8 <checkCrossCheck+0x154>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000efe:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000f02:	461a      	mov	r2, r3
 8000f04:	230a      	movs	r3, #10
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f14:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000fac <checkCrossCheck+0x148>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1c:	edc7 7a02 	vstr	s15, [r7, #8]
	float apps_as_percent = ((float)apps1_as_percent+apps2_as_percent)/2;
 8000f20:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f2c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f34:	edc7 7a01 	vstr	s15, [r7, #4]

	if(apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT && bseValue > BRAKE_ACTIVATED_ADC_VAL){
 8000f38:	2319      	movs	r3, #25
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f42:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	dd0c      	ble.n	8000f6a <checkCrossCheck+0x106>
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <checkCrossCheck+0x144>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2264      	movs	r2, #100	@ 0x64
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d907      	bls.n	8000f6a <checkCrossCheck+0x106>
	  cross_check_plausible = false;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <checkCrossCheck+0x158>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	801a      	strh	r2, [r3, #0]
	  requestedTorque = 0;
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <checkCrossCheck+0x15c>)
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e018      	b.n	8000f9c <checkCrossCheck+0x138>
	}else if(!cross_check_plausible && apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT){
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <checkCrossCheck+0x158>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d110      	bne.n	8000f94 <checkCrossCheck+0x130>
 8000f72:	2305      	movs	r3, #5
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	dd04      	ble.n	8000f94 <checkCrossCheck+0x130>
		requestedTorque = 0;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <checkCrossCheck+0x15c>)
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e003      	b.n	8000f9c <checkCrossCheck+0x138>
	}else{
		cross_check_plausible = true;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <checkCrossCheck+0x158>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	801a      	strh	r2, [r3, #0]
	}

}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	200001f4 	.word	0x200001f4
 8000fac:	42c80000 	.word	0x42c80000
 8000fb0:	20000220 	.word	0x20000220
 8000fb4:	200001f0 	.word	0x200001f0
 8000fb8:	200001f2 	.word	0x200001f2
 8000fbc:	20000002 	.word	0x20000002
 8000fc0:	200001f8 	.word	0x200001f8

08000fc4 <sendTorqueCommand>:

void sendTorqueCommand(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

	int torqueValue = (int)(requestedTorque * 10);  // Convert to integer, multiply by 10
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <sendTorqueCommand+0x78>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fdc:	ee17 3a90 	vmov	r3, s15
 8000fe0:	607b      	str	r3, [r7, #4]

	// Break the torqueValue into two bytes (little-endian)
	char msg0 = torqueValue & 0xFF;  // Low byte
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	70fb      	strb	r3, [r7, #3]
	char msg1 = (torqueValue >> 8) & 0xFF;  // High byte
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	121b      	asrs	r3, r3, #8
 8000fea:	70bb      	strb	r3, [r7, #2]

	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <sendTorqueCommand+0x7c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
	txMessage.frame.id = 0x0C0;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <sendTorqueCommand+0x7c>)
 8000ff4:	22c0      	movs	r2, #192	@ 0xc0
 8000ff6:	605a      	str	r2, [r3, #4]
	txMessage.frame.dlc = 8;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <sendTorqueCommand+0x7c>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0 = msg0;
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <sendTorqueCommand+0x7c>)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	7253      	strb	r3, [r2, #9]
	txMessage.frame.data1 = msg1;
 8001004:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <sendTorqueCommand+0x7c>)
 8001006:	78bb      	ldrb	r3, [r7, #2]
 8001008:	7293      	strb	r3, [r2, #10]
	txMessage.frame.data2 = 0;
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <sendTorqueCommand+0x7c>)
 800100c:	2200      	movs	r2, #0
 800100e:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <sendTorqueCommand+0x7c>)
 8001012:	2200      	movs	r2, #0
 8001014:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 0;
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <sendTorqueCommand+0x7c>)
 8001018:	2200      	movs	r2, #0
 800101a:	735a      	strb	r2, [r3, #13]
	txMessage.frame.data5 = 0;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <sendTorqueCommand+0x7c>)
 800101e:	2200      	movs	r2, #0
 8001020:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = 0;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <sendTorqueCommand+0x7c>)
 8001024:	2200      	movs	r2, #0
 8001026:	73da      	strb	r2, [r3, #15]
	txMessage.frame.data7 = 0;
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <sendTorqueCommand+0x7c>)
 800102a:	2200      	movs	r2, #0
 800102c:	741a      	strb	r2, [r3, #16]
	CANSPI_Transmit(&txMessage);
 800102e:	4804      	ldr	r0, [pc, #16]	@ (8001040 <sendTorqueCommand+0x7c>)
 8001030:	f7ff fafe 	bl	8000630 <CANSPI_Transmit>

}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001f8 	.word	0x200001f8
 8001040:	200001c8 	.word	0x200001c8

08001044 <checkReadyToDrive>:

void checkReadyToDrive(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	uint8_t pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800104a:	2120      	movs	r1, #32
 800104c:	4809      	ldr	r0, [pc, #36]	@ (8001074 <checkReadyToDrive+0x30>)
 800104e:	f002 f96b 	bl	8003328 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <checkReadyToDrive+0x28>
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <checkReadyToDrive+0x34>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	2264      	movs	r2, #100	@ 0x64
 8001062:	4293      	cmp	r3, r2
 8001064:	d902      	bls.n	800106c <checkReadyToDrive+0x28>
	    readyToDrive = true;
 8001066:	4b05      	ldr	r3, [pc, #20]	@ (800107c <checkReadyToDrive+0x38>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
	}
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020000 	.word	0x40020000
 8001078:	200001f4 	.word	0x200001f4
 800107c:	20000224 	.word	0x20000224

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fec2 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f852 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 f9f8 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8001090:	f000 f9d6 	bl	8001440 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001094:	f000 f9aa 	bl	80013ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001098:	f000 f8b4 	bl	8001204 <MX_ADC1_Init>
  MX_TIM3_Init();
 800109c:	f000 f958 	bl	8001350 <MX_TIM3_Init>
  MX_SPI3_Init();
 80010a0:	f000 f920 	bl	80012e4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 80010a4:	481a      	ldr	r0, [pc, #104]	@ (8001110 <main+0x90>)
 80010a6:	f003 fc39 	bl	800491c <HAL_TIM_Base_Start>

  /* initalized to be 500kbps, see canspi.c line 131-133 for details */
  if (CANSPI_Initialize() != true)
 80010aa:	f7ff fa0b 	bl	80004c4 <CANSPI_Initialize>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f083 0301 	eor.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <main+0x3e>
  {
	  Error_Handler();
 80010ba:	f000 fab9 	bl	8001630 <Error_Handler>
  }


  bms_diagnostics.inverterActive = 0;
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <main+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
  inverter_diagnostics.motorRpm = 0;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <main+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  /* USER CODE BEGIN WHILE */

	 if(CANSPI_Receive(&rxMessage)){
 80010ca:	4814      	ldr	r0, [pc, #80]	@ (800111c <main+0x9c>)
 80010cc:	f7ff fb44 	bl	8000758 <CANSPI_Receive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <main+0x5a>
		 readFromCAN();
 80010d6:	f7ff fc87 	bl	80009e8 <readFromCAN>
	 }


	 readAPPSandBSE();
 80010da:	f7ff fc9b 	bl	8000a14 <readAPPSandBSE>
	 calculateTorqueRequest();
 80010de:	f7ff fcd9 	bl	8000a94 <calculateTorqueRequest>
	 checkAPPSPlausibility();
 80010e2:	f7ff fe39 	bl	8000d58 <checkAPPSPlausibility>
	 checkCrossCheck();
 80010e6:	f7ff febd 	bl	8000e64 <checkCrossCheck>
	 checkReadyToDrive();
 80010ea:	f7ff ffab 	bl	8001044 <checkReadyToDrive>
	 updateBMSDiagnostics();
 80010ee:	f7ff fc89 	bl	8000a04 <updateBMSDiagnostics>

	 finalTorqueRequest = requestedTorque;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <main+0xa0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <main+0xa4>)
 80010f8:	6013      	str	r3, [r2, #0]
	 lastRequestedTorque = requestedTorque;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <main+0xa0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <main+0xa8>)
 8001100:	6013      	str	r3, [r2, #0]

	 if(readyToDrive){
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <main+0xac>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0df      	beq.n	80010ca <main+0x4a>
		 sendTorqueCommand();
 800110a:	f7ff ff5b 	bl	8000fc4 <sendTorqueCommand>
	 if(CANSPI_Receive(&rxMessage)){
 800110e:	e7dc      	b.n	80010ca <main+0x4a>
 8001110:	20000138 	.word	0x20000138
 8001114:	20000228 	.word	0x20000228
 8001118:	2000023c 	.word	0x2000023c
 800111c:	200001dc 	.word	0x200001dc
 8001120:	200001f8 	.word	0x200001f8
 8001124:	20000200 	.word	0x20000200
 8001128:	200001fc 	.word	0x200001fc
 800112c:	20000224 	.word	0x20000224

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	@ 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	@ 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f004 f966 	bl	8005410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <SystemClock_Config+0xcc>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	@ 0x40
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800117c:	4a20      	ldr	r2, [pc, #128]	@ (8001200 <SystemClock_Config+0xd0>)
 800117e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a4:	2308      	movs	r3, #8
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011a8:	2354      	movs	r3, #84	@ 0x54
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f8e7 	bl	800338c <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011c4:	f000 fa34 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2102      	movs	r1, #2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fb49 	bl	800387c <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f0:	f000 fa1e 	bl	8001630 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3750      	adds	r7, #80	@ 0x50
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001216:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001218:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <MX_ADC1_Init+0xdc>)
 800121a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800121c:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <MX_ADC1_Init+0xd8>)
 800121e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001222:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001224:	4b2d      	ldr	r3, [pc, #180]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800122a:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <MX_ADC1_Init+0xd8>)
 800122c:	2201      	movs	r2, #1
 800122e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001230:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001236:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800123e:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001244:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001248:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001256:	2203      	movs	r2, #3
 8001258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <MX_ADC1_Init+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <MX_ADC1_Init+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001268:	481c      	ldr	r0, [pc, #112]	@ (80012dc <MX_ADC1_Init+0xd8>)
 800126a:	f000 fe65 	bl	8001f38 <HAL_ADC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001274:	f000 f9dc 	bl	8001630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001278:	2301      	movs	r3, #1
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001280:	2304      	movs	r3, #4
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4814      	ldr	r0, [pc, #80]	@ (80012dc <MX_ADC1_Init+0xd8>)
 800128a:	f000 ffa7 	bl	80021dc <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001294:	f000 f9cc 	bl	8001630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001298:	2304      	movs	r3, #4
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800129c:	2303      	movs	r3, #3
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	480d      	ldr	r0, [pc, #52]	@ (80012dc <MX_ADC1_Init+0xd8>)
 80012a6:	f000 ff99 	bl	80021dc <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80012b0:	f000 f9be 	bl	8001630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012bc:	2301      	movs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_ADC1_Init+0xd8>)
 80012c6:	f000 ff89 	bl	80021dc <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80012d0:	f000 f9ae 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000038 	.word	0x20000038
 80012e0:	40012000 	.word	0x40012000

080012e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012e8:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_SPI3_Init+0x64>)
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <MX_SPI3_Init+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_SPI3_Init+0x64>)
 80012f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_SPI3_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_SPI3_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_SPI3_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_SPI3_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_SPI3_Init+0x64>)
 8001310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001314:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_SPI3_Init+0x64>)
 8001318:	2210      	movs	r2, #16
 800131a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_SPI3_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_SPI3_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_SPI3_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_SPI3_Init+0x64>)
 8001330:	220a      	movs	r2, #10
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_SPI3_Init+0x64>)
 8001336:	f002 fcc1 	bl	8003cbc <HAL_SPI_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001340:	f000 f976 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000e0 	.word	0x200000e0
 800134c:	40003c00 	.word	0x40003c00

08001350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_TIM3_Init+0x94>)
 800136e:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <MX_TIM3_Init+0x98>)
 8001370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001374:	2204      	movs	r2, #4
 8001376:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_TIM3_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001384:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_TIM3_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001392:	4814      	ldr	r0, [pc, #80]	@ (80013e4 <MX_TIM3_Init+0x94>)
 8001394:	f003 fa72 	bl	800487c <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 f947 	bl	8001630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x94>)
 80013b0:	f003 fb0e 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f939 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013be:	2320      	movs	r3, #32
 80013c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MX_TIM3_Init+0x94>)
 80013cc:	f003 fcee 	bl	8004dac <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013d6:	f000 f92b 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000138 	.word	0x20000138
 80013e8:	40000400 	.word	0x40000400

080013ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_USART2_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_USART2_UART_Init+0x4c>)
 8001424:	f003 fd30 	bl	8004e88 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f000 f8ff 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000180 	.word	0x20000180
 800143c:	40004400 	.word	0x40004400

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <MX_DMA_Init+0x3c>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_DMA_Init+0x3c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2038      	movs	r0, #56	@ 0x38
 8001468:	f001 fa33 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800146c:	2038      	movs	r0, #56	@ 0x38
 800146e:	f001 fa4c 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b61      	ldr	r3, [pc, #388]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a60      	ldr	r2, [pc, #384]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a59      	ldr	r2, [pc, #356]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b57      	ldr	r3, [pc, #348]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a52      	ldr	r2, [pc, #328]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b50      	ldr	r3, [pc, #320]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b49      	ldr	r3, [pc, #292]	@ (8001620 <MX_GPIO_Init+0x1a0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2103      	movs	r1, #3
 800150a:	4846      	ldr	r0, [pc, #280]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 800150c:	f001 ff24 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_RESET_GPIO_Port, MCP2515_RESET_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2104      	movs	r1, #4
 8001514:	4843      	ldr	r0, [pc, #268]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 8001516:	f001 ff1f 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2120      	movs	r1, #32
 800151e:	4842      	ldr	r0, [pc, #264]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 8001520:	f001 ff1a 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800152a:	483f      	ldr	r0, [pc, #252]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 800152c:	f001 ff14 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2110      	movs	r1, #16
 8001534:	483d      	ldr	r0, [pc, #244]	@ (800162c <MX_GPIO_Init+0x1ac>)
 8001536:	f001 ff0f 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001540:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4834      	ldr	r0, [pc, #208]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 8001552:	f001 fd65 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	482d      	ldr	r0, [pc, #180]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 800156e:	f001 fd57 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8001572:	2302      	movs	r3, #2
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4826      	ldr	r0, [pc, #152]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 800158a:	f001 fd49 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_RESET_Pin */
  GPIO_InitStruct.Pin = MCP2515_RESET_Pin;
 800158e:	2304      	movs	r3, #4
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_RESET_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	481f      	ldr	r0, [pc, #124]	@ (8001624 <MX_GPIO_Init+0x1a4>)
 80015a6:	f001 fd3b 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80015aa:	2320      	movs	r3, #32
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4819      	ldr	r0, [pc, #100]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 80015c2:	f001 fd2d 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 80015c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4812      	ldr	r0, [pc, #72]	@ (8001628 <MX_GPIO_Init+0x1a8>)
 80015e0:	f001 fd1e 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e4:	2310      	movs	r3, #16
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_GPIO_Init+0x1ac>)
 80015fc:	f001 fd10 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001600:	2320      	movs	r3, #32
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <MX_GPIO_Init+0x1ac>)
 8001614:	f001 fd04 	bl	8003020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40020800 	.word	0x40020800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001648:	480b      	ldr	r0, [pc, #44]	@ (8001678 <MCP2515_Initialize+0x3c>)
 800164a:	f001 fe85 	bl	8003358 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 800164e:	230a      	movs	r3, #10
 8001650:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <MCP2515_Initialize+0x40>)
 8001654:	f002 ffc1 	bl	80045da <HAL_SPI_GetState>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <MCP2515_Initialize+0x26>
      return true;
 800165e:	2301      	movs	r3, #1
 8001660:	e006      	b.n	8001670 <MCP2515_Initialize+0x34>
    
    loop--;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	3b01      	subs	r3, #1
 8001666:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f1      	bne.n	8001652 <MCP2515_Initialize+0x16>
      
  return false;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020000 	.word	0x40020000
 800167c:	200000e0 	.word	0x200000e0

08001680 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001686:	2180      	movs	r1, #128	@ 0x80
 8001688:	200f      	movs	r0, #15
 800168a:	f000 f8ad 	bl	80017e8 <MCP2515_WriteByte>
  HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	@ 0x64
 8001690:	f000 fc2e 	bl	8001ef0 <HAL_Delay>
  uint8_t loop = 10;
 8001694:	230a      	movs	r3, #10
 8001696:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f8a4 	bl	80017e8 <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 80016a0:	200e      	movs	r0, #14
 80016a2:	f000 f855 	bl	8001750 <MCP2515_ReadByte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80016aa:	2030      	movs	r0, #48	@ 0x30
 80016ac:	f000 f850 	bl	8001750 <MCP2515_ReadByte>
 80016b0:	4603      	mov	r3, r0
 80016b2:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80016ba:	2b80      	cmp	r3, #128	@ 0x80
 80016bc:	d101      	bne.n	80016c2 <MCP2515_SetConfigMode+0x42>
      return true;
 80016be:	2301      	movs	r3, #1
 80016c0:	e008      	b.n	80016d4 <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 80016c8:	2064      	movs	r0, #100	@ 0x64
 80016ca:	f000 fc11 	bl	8001ef0 <HAL_Delay>

  } while(loop > 0);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	e7e1      	b.n	8001698 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 f87f 	bl	80017e8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80016ea:	230a      	movs	r3, #10
 80016ec:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80016ee:	200e      	movs	r0, #14
 80016f0:	f000 f82e 	bl	8001750 <MCP2515_ReadByte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <MCP2515_SetNormalMode+0x26>
      return true;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00a      	b.n	8001718 <MCP2515_SetNormalMode+0x3c>
    
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001702:	2100      	movs	r1, #0
 8001704:	200f      	movs	r0, #15
 8001706:	f000 f86f 	bl	80017e8 <MCP2515_WriteByte>
    loop--;
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	3b01      	subs	r3, #1
 800170e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1eb      	bne.n	80016ee <MCP2515_SetNormalMode+0x12>
  
  return false;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{    
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800172a:	4808      	ldr	r0, [pc, #32]	@ (800174c <MCP2515_Reset+0x2c>)
 800172c:	f001 fe14 	bl	8003358 <HAL_GPIO_WritePin>
 8001730:	2001      	movs	r0, #1
 8001732:	f000 fbdd 	bl	8001ef0 <HAL_Delay>
      
  SPI_Tx(MCP2515_RESET);
 8001736:	20c0      	movs	r0, #192	@ 0xc0
 8001738:	f000 f93c 	bl	80019b4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001742:	4802      	ldr	r0, [pc, #8]	@ (800174c <MCP2515_Reset+0x2c>)
 8001744:	f001 fe08 	bl	8003358 <HAL_GPIO_WritePin>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40020000 	.word	0x40020000

08001750 <MCP2515_ReadByte>:

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001760:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MCP2515_ReadByte+0x48>)
 8001762:	f001 fdf9 	bl	8003358 <HAL_GPIO_WritePin>
 8001766:	2001      	movs	r0, #1
 8001768:	f000 fbc2 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f921 	bl	80019b4 <SPI_Tx>
  SPI_Tx(address);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f91d 	bl	80019b4 <SPI_Tx>
  retVal = SPI_Rx();
 800177a:	f000 f941 	bl	8001a00 <SPI_Rx>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MCP2515_ReadByte+0x48>)
 800178a:	f001 fde5 	bl	8003358 <HAL_GPIO_WritePin>
  
  return retVal;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020000 	.word	0x40020000

0800179c <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MCP2515_ReadRxSequence+0x48>)
 80017b4:	f001 fdd0 	bl	8003358 <HAL_GPIO_WritePin>
 80017b8:	2001      	movs	r0, #1
 80017ba:	f000 fb99 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(instruction);        
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f8f7 	bl	80019b4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	4619      	mov	r1, r3
 80017ca:	6838      	ldr	r0, [r7, #0]
 80017cc:	f000 f928 	bl	8001a20 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <MCP2515_ReadRxSequence+0x48>)
 80017d8:	f001 fdbe 	bl	8003358 <HAL_GPIO_WritePin>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40020000 	.word	0x40020000

080017e8 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017fe:	480d      	ldr	r0, [pc, #52]	@ (8001834 <MCP2515_WriteByte+0x4c>)
 8001800:	f001 fdaa 	bl	8003358 <HAL_GPIO_WritePin>
 8001804:	2001      	movs	r0, #1
 8001806:	f000 fb73 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 800180a:	2002      	movs	r0, #2
 800180c:	f000 f8d2 	bl	80019b4 <SPI_Tx>
  SPI_Tx(address);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f8ce 	bl	80019b4 <SPI_Tx>
  SPI_Tx(data);  
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f8ca 	bl	80019b4 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001826:	4803      	ldr	r0, [pc, #12]	@ (8001834 <MCP2515_WriteByte+0x4c>)
 8001828:	f001 fd96 	bl	8003358 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40020000 	.word	0x40020000

08001838 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	603a      	str	r2, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
 8001844:	460b      	mov	r3, r1
 8001846:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800184e:	4810      	ldr	r0, [pc, #64]	@ (8001890 <MCP2515_WriteByteSequence+0x58>)
 8001850:	f001 fd82 	bl	8003358 <HAL_GPIO_WritePin>
 8001854:	2001      	movs	r0, #1
 8001856:	f000 fb4b 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 800185a:	2002      	movs	r0, #2
 800185c:	f000 f8aa 	bl	80019b4 <SPI_Tx>
  SPI_Tx(startAddress);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f8a6 	bl	80019b4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001868:	79ba      	ldrb	r2, [r7, #6]
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4619      	mov	r1, r3
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f000 f8ae 	bl	80019d8 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001882:	4803      	ldr	r0, [pc, #12]	@ (8001890 <MCP2515_WriteByteSequence+0x58>)
 8001884:	f001 fd68 	bl	8003358 <HAL_GPIO_WritePin>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40020000 	.word	0x40020000

08001894 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	4613      	mov	r3, r2
 80018a4:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ac:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <MCP2515_LoadTxSequence+0x5c>)
 80018ae:	f001 fd53 	bl	8003358 <HAL_GPIO_WritePin>
 80018b2:	2001      	movs	r0, #1
 80018b4:	f000 fb1c 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(instruction);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f87a 	bl	80019b4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80018c0:	2104      	movs	r1, #4
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f000 f888 	bl	80019d8 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f872 	bl	80019b4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f87f 	bl	80019d8 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018e0:	4803      	ldr	r0, [pc, #12]	@ (80018f0 <MCP2515_LoadTxSequence+0x5c>)
 80018e2:	f001 fd39 	bl	8003358 <HAL_GPIO_WritePin>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020000 	.word	0x40020000

080018f4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <MCP2515_RequestToSend+0x38>)
 8001906:	f001 fd27 	bl	8003358 <HAL_GPIO_WritePin>
 800190a:	2001      	movs	r0, #1
 800190c:	f000 faf0 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(instruction);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f84e 	bl	80019b4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800191e:	4803      	ldr	r0, [pc, #12]	@ (800192c <MCP2515_RequestToSend+0x38>)
 8001920:	f001 fd1a 	bl	8003358 <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020000 	.word	0x40020000

08001930 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193c:	480c      	ldr	r0, [pc, #48]	@ (8001970 <MCP2515_ReadStatus+0x40>)
 800193e:	f001 fd0b 	bl	8003358 <HAL_GPIO_WritePin>
 8001942:	2001      	movs	r0, #1
 8001944:	f000 fad4 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8001948:	20a0      	movs	r0, #160	@ 0xa0
 800194a:	f000 f833 	bl	80019b4 <SPI_Tx>
  retVal = SPI_Rx();
 800194e:	f000 f857 	bl	8001a00 <SPI_Rx>
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  uint8_t dingus = retVal;
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	71bb      	strb	r3, [r7, #6]
        
  MCP2515_CS_HIGH();
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <MCP2515_ReadStatus+0x40>)
 8001962:	f001 fcf9 	bl	8003358 <HAL_GPIO_WritePin>
  
  return retVal;
 8001966:	79fb      	ldrb	r3, [r7, #7]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020000 	.word	0x40020000

08001974 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001980:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <MCP2515_GetRxStatus+0x3c>)
 8001982:	f001 fce9 	bl	8003358 <HAL_GPIO_WritePin>
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fab2 	bl	8001ef0 <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 800198c:	20b0      	movs	r0, #176	@ 0xb0
 800198e:	f000 f811 	bl	80019b4 <SPI_Tx>
  retVal = SPI_Rx();
 8001992:	f000 f835 	bl	8001a00 <SPI_Rx>
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a0:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <MCP2515_GetRxStatus+0x3c>)
 80019a2:	f001 fcd9 	bl	8003358 <HAL_GPIO_WritePin>
  
  return retVal;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020000 	.word	0x40020000

080019b4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80019be:	1df9      	adds	r1, r7, #7
 80019c0:	230a      	movs	r3, #10
 80019c2:	2201      	movs	r2, #1
 80019c4:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <SPI_Tx+0x20>)
 80019c6:	f002 fa02 	bl	8003dce <HAL_SPI_Transmit>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000e0 	.word	0x200000e0

080019d8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	230a      	movs	r3, #10
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4803      	ldr	r0, [pc, #12]	@ (80019fc <SPI_TxBuffer+0x24>)
 80019ee:	f002 f9ee 	bl	8003dce <HAL_SPI_Transmit>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000e0 	.word	0x200000e0

08001a00 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001a06:	1df9      	adds	r1, r7, #7
 8001a08:	230a      	movs	r3, #10
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <SPI_Rx+0x1c>)
 8001a0e:	f002 fb22 	bl	8004056 <HAL_SPI_Receive>
  return retVal;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200000e0 	.word	0x200000e0

08001a20 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	230a      	movs	r3, #10
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <SPI_RxBuffer+0x24>)
 8001a36:	f002 fb0e 	bl	8004056 <HAL_SPI_Receive>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200000e0 	.word	0x200000e0

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a86:	2007      	movs	r0, #7
 8001a88:	f000 ff18 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba4 <HAL_ADC_MspInit+0x10c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d170      	bne.n	8001b9c <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a39      	ldr	r2, [pc, #228]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a32      	ldr	r2, [pc, #200]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b30      	ldr	r3, [pc, #192]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <HAL_ADC_MspInit+0x110>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4822      	ldr	r0, [pc, #136]	@ (8001bac <HAL_ADC_MspInit+0x114>)
 8001b22:	f001 fa7d 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b26:	2301      	movs	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	481d      	ldr	r0, [pc, #116]	@ (8001bb0 <HAL_ADC_MspInit+0x118>)
 8001b3a:	f001 fa71 	bl	8003020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b40:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb8 <HAL_ADC_MspInit+0x120>)
 8001b42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b82:	f000 fedd 	bl	8002940 <HAL_DMA_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001b8c:	f7ff fd50 	bl	8001630 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b96:	4a07      	ldr	r2, [pc, #28]	@ (8001bb4 <HAL_ADC_MspInit+0x11c>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	@ 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	20000080 	.word	0x20000080
 8001bb8:	40026410 	.word	0x40026410

08001bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_SPI_MspInit+0x84>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12c      	bne.n	8001c38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c16:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c28:	2306      	movs	r3, #6
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001c34:	f001 f9f4 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40003c00 	.word	0x40003c00
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020800 	.word	0x40020800

08001c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <HAL_TIM_Base_MspInit+0x3c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10d      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_TIM_Base_MspInit+0x40>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_TIM_Base_MspInit+0x40>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_TIM_Base_MspInit+0x40>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_UART_MspInit+0x84>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12b      	bne.n	8001d0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_UART_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cea:	230c      	movs	r3, #12
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <HAL_UART_MspInit+0x8c>)
 8001d06:	f001 f98b 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40004400 	.word	0x40004400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <NMI_Handler+0x4>

08001d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d76:	f000 f89b 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <DMA2_Stream0_IRQHandler+0x10>)
 8001d86:	f000 fee1 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000080 	.word	0x20000080

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df0 <LoopFillZerobss+0xe>
 8001dbc:	f7ff ffea 	bl	8001d94 <SystemInit>
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x12>)
 8001dc2:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x16>)
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <LoopFillZerobss+0x1a>)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:
 8001dca:	58d4      	ldr	r4, [r2, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:
 8001dd0:	18c4      	adds	r4, r0, r3
 8001dd2:	428c      	cmp	r4, r1
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x1e>)
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e04 <LoopFillZerobss+0x22>)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:
 8001de2:	42a2      	cmp	r2, r4
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>
 8001de6:	f003 fb1b 	bl	8005420 <__libc_init_array>
 8001dea:	f7ff f949 	bl	8001080 <main>
 8001dee:	4770      	bx	lr
 8001df0:	20018000 	.word	0x20018000
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000014 	.word	0x20000014
 8001dfc:	08005640 	.word	0x08005640
 8001e00:	20000014 	.word	0x20000014
 8001e04:	20000244 	.word	0x20000244

08001e08 <ADC_IRQHandler>:
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fd41 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fe02 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fd59 	bl	8002926 <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e8c:	f000 fd21 	bl	80028d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000010 	.word	0x20000010
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	20000240 	.word	0x20000240

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000240 	.word	0x20000240

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000010 	.word	0x20000010

08001f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e033      	b.n	8001fb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fd9e 	bl	8001a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa48 	bl	8002420 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fa6:	e001      	b.n	8001fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start_DMA+0x1e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0ce      	b.n	800217c <HAL_ADC_Start_DMA+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <HAL_ADC_Start_DMA+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5f      	ldr	r2, [pc, #380]	@ (8002188 <HAL_ADC_Start_DMA+0x1c8>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3b01      	subs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002034:	d107      	bne.n	8002046 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002044:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	f040 8086 	bne.w	8002162 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002080:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002094:	d106      	bne.n	80020a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f023 0206 	bic.w	r2, r3, #6
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <HAL_ADC_Start_DMA+0x1cc>)
 80020b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ba:	4a35      	ldr	r2, [pc, #212]	@ (8002190 <HAL_ADC_Start_DMA+0x1d0>)
 80020bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c2:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <HAL_ADC_Start_DMA+0x1d4>)
 80020c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ca:	4a33      	ldr	r2, [pc, #204]	@ (8002198 <HAL_ADC_Start_DMA+0x1d8>)
 80020cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80020d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80020e6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020f6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	334c      	adds	r3, #76	@ 0x4c
 8002102:	4619      	mov	r1, r3
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f000 fcc8 	bl	8002a9c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10f      	bne.n	8002138 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d129      	bne.n	800217a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	e020      	b.n	800217a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_ADC_Start_DMA+0x1dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d11b      	bne.n	800217a <HAL_ADC_Start_DMA+0x1ba>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d114      	bne.n	800217a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	e00b      	b.n	800217a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000008 	.word	0x20000008
 8002188:	431bde83 	.word	0x431bde83
 800218c:	40012300 	.word	0x40012300
 8002190:	08002619 	.word	0x08002619
 8002194:	080026d3 	.word	0x080026d3
 8002198:	080026ef 	.word	0x080026ef
 800219c:	40012000 	.word	0x40012000

080021a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x1c>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e105      	b.n	8002404 <HAL_ADC_ConfigChannel+0x228>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b09      	cmp	r3, #9
 8002206:	d925      	bls.n	8002254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	3b1e      	subs	r3, #30
 800221e:	2207      	movs	r2, #7
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43da      	mvns	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	400a      	ands	r2, r1
 800222c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68d9      	ldr	r1, [r3, #12]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	4603      	mov	r3, r0
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4403      	add	r3, r0
 8002246:	3b1e      	subs	r3, #30
 8002248:	409a      	lsls	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	e022      	b.n	800229a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	2207      	movs	r2, #7
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6919      	ldr	r1, [r3, #16]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	4603      	mov	r3, r0
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4403      	add	r3, r0
 8002290:	409a      	lsls	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d824      	bhi.n	80022ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	3b05      	subs	r3, #5
 80022b4:	221f      	movs	r2, #31
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b05      	subs	r3, #5
 80022de:	fa00 f203 	lsl.w	r2, r0, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ea:	e04c      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	d824      	bhi.n	800233e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	3b23      	subs	r3, #35	@ 0x23
 8002306:	221f      	movs	r2, #31
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43da      	mvns	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	400a      	ands	r2, r1
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	3b23      	subs	r3, #35	@ 0x23
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
 800233c:	e023      	b.n	8002386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b41      	subs	r3, #65	@ 0x41
 8002350:	221f      	movs	r2, #31
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	400a      	ands	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b41      	subs	r3, #65	@ 0x41
 800237a:	fa00 f203 	lsl.w	r2, r0, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002386:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <HAL_ADC_ConfigChannel+0x234>)
 8002388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	@ (8002414 <HAL_ADC_ConfigChannel+0x238>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b12      	cmp	r3, #18
 800239a:	d105      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <HAL_ADC_ConfigChannel+0x238>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d123      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x21e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d003      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x1e6>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b11      	cmp	r3, #17
 80023c0:	d11b      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d111      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <HAL_ADC_ConfigChannel+0x23c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a10      	ldr	r2, [pc, #64]	@ (800241c <HAL_ADC_ConfigChannel+0x240>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	0c9a      	lsrs	r2, r3, #18
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40012300 	.word	0x40012300
 8002414:	40012000 	.word	0x40012000
 8002418:	20000008 	.word	0x20000008
 800241c:	431bde83 	.word	0x431bde83

08002420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002428:	4b79      	ldr	r3, [pc, #484]	@ (8002610 <ADC_Init+0x1f0>)
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	021a      	lsls	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800249a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	4a58      	ldr	r2, [pc, #352]	@ (8002614 <ADC_Init+0x1f4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6899      	ldr	r1, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	e00f      	b.n	800251e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800250c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800251c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0202 	bic.w	r2, r2, #2
 800252c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e1b      	ldrb	r3, [r3, #24]
 8002538:	005a      	lsls	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800255a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800256a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	3b01      	subs	r3, #1
 8002578:	035a      	lsls	r2, r3, #13
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	e007      	b.n	8002594 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002592:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	051a      	lsls	r2, r3, #20
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6899      	ldr	r1, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025d6:	025a      	lsls	r2, r3, #9
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	029a      	lsls	r2, r3, #10
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40012300 	.word	0x40012300
 8002614:	0f000001 	.word	0x0f000001

08002618 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13c      	bne.n	80026ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d12b      	bne.n	80026a4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d127      	bne.n	80026a4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800266c:	2b00      	cmp	r3, #0
 800266e:	d119      	bne.n	80026a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0220 	bic.w	r2, r2, #32
 800267e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fd7b 	bl	80021a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026aa:	e00e      	b.n	80026ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff fd85 	bl	80021c8 <HAL_ADC_ErrorCallback>
}
 80026be:	e004      	b.n	80026ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026de:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fd67 	bl	80021b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2240      	movs	r2, #64	@ 0x40
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fd5a 	bl	80021c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	@ (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	@ (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	@ (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff29 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff3e 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff31 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff fac4 	bl	8001ed8 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e099      	b.n	8002a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297c:	e00f      	b.n	800299e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297e:	f7ff faab 	bl	8001ed8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b05      	cmp	r3, #5
 800298a:	d908      	bls.n	800299e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e078      	b.n	8002a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e8      	bne.n	800297e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4b38      	ldr	r3, [pc, #224]	@ (8002a98 <HAL_DMA_Init+0x158>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	4313      	orrs	r3, r2
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d117      	bne.n	8002a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa6f 	bl	8002f28 <DMA_CheckFifoParam>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e016      	b.n	8002a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa26 	bl	8002ebc <DMA_CalcBaseAndBitshift>
 8002a70:	4603      	mov	r3, r0
 8002a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	223f      	movs	r2, #63	@ 0x3f
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	f010803f 	.word	0xf010803f

08002a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Start_IT+0x26>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e040      	b.n	8002b44 <HAL_DMA_Start_IT+0xa8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d12f      	bne.n	8002b36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f9b8 	bl	8002e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	223f      	movs	r2, #63	@ 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0216 	orr.w	r2, r2, #22
 8002b0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0208 	orr.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e005      	b.n	8002b42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b58:	4b8e      	ldr	r3, [pc, #568]	@ (8002d94 <HAL_DMA_IRQHandler+0x248>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d98 <HAL_DMA_IRQHandler+0x24c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	2208      	movs	r2, #8
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f043 0202 	orr.w	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2204      	movs	r2, #4
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	2210      	movs	r2, #16
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d043      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03c      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	2210      	movs	r2, #16
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d024      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
 8002c7a:	e01f      	b.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01b      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e016      	b.n	8002cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0208 	bic.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 808f 	beq.w	8002dec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8087 	beq.w	8002dec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d136      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0216 	bic.w	r2, r2, #22
 8002d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x1da>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0208 	bic.w	r2, r2, #8
 8002d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	223f      	movs	r2, #63	@ 0x3f
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d07e      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
        }
        return;
 8002d62:	e079      	b.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d031      	beq.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
 8002d90:	e02c      	b.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
 8002d92:	bf00      	nop
 8002d94:	20000008 	.word	0x20000008
 8002d98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d023      	beq.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
 8002dac:	e01e      	b.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0210 	bic.w	r2, r2, #16
 8002dca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d032      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2205      	movs	r2, #5
 8002e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d307      	bcc.n	8002e34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f2      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x2cc>
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e58:	bf00      	nop
    }
  }
}
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b40      	cmp	r3, #64	@ 0x40
 8002e8c:	d108      	bne.n	8002ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e9e:	e007      	b.n	8002eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3b10      	subs	r3, #16
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <DMA_CalcBaseAndBitshift+0x64>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ed6:	4a13      	ldr	r2, [pc, #76]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x68>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d909      	bls.n	8002efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002efc:	e007      	b.n	8002f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	aaaaaaab 	.word	0xaaaaaaab
 8002f24:	08005628 	.word	0x08005628

08002f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11f      	bne.n	8002f82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d856      	bhi.n	8002ff6 <DMA_CheckFifoParam+0xce>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <DMA_CheckFifoParam+0x28>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f73 	.word	0x08002f73
 8002f58:	08002f61 	.word	0x08002f61
 8002f5c:	08002ff7 	.word	0x08002ff7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d046      	beq.n	8002ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f70:	e043      	b.n	8002ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f7a:	d140      	bne.n	8002ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e03d      	b.n	8002ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f8a:	d121      	bne.n	8002fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d837      	bhi.n	8003002 <DMA_CheckFifoParam+0xda>
 8002f92:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <DMA_CheckFifoParam+0x70>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002faf 	.word	0x08002faf
 8002fa0:	08002fa9 	.word	0x08002fa9
 8002fa4:	08002fc1 	.word	0x08002fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      break;
 8002fac:	e030      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d025      	beq.n	8003006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbe:	e022      	b.n	8003006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fce:	e01c      	b.n	800300a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d903      	bls.n	8002fde <DMA_CheckFifoParam+0xb6>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d003      	beq.n	8002fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fdc:	e018      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe2:	e015      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e00b      	b.n	800300e <DMA_CheckFifoParam+0xe6>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e00a      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e008      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
 8003000:	e006      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
 8003004:	e004      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;   
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
    }
  } 
  
  return status; 
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	e159      	b.n	80032f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800303c:	2201      	movs	r2, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	f040 8148 	bne.w	80032ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d005      	beq.n	8003072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306e:	2b02      	cmp	r3, #2
 8003070:	d130      	bne.n	80030d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a8:	2201      	movs	r2, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 0201 	and.w	r2, r3, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d017      	beq.n	8003110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d123      	bne.n	8003164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	69b9      	ldr	r1, [r7, #24]
 8003160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a2 	beq.w	80032ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b57      	ldr	r3, [pc, #348]	@ (8003308 <HAL_GPIO_Init+0x2e8>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	4a56      	ldr	r2, [pc, #344]	@ (8003308 <HAL_GPIO_Init+0x2e8>)
 80031b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031b6:	4b54      	ldr	r3, [pc, #336]	@ (8003308 <HAL_GPIO_Init+0x2e8>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c2:	4a52      	ldr	r2, [pc, #328]	@ (800330c <HAL_GPIO_Init+0x2ec>)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a49      	ldr	r2, [pc, #292]	@ (8003310 <HAL_GPIO_Init+0x2f0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d019      	beq.n	8003222 <HAL_GPIO_Init+0x202>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a48      	ldr	r2, [pc, #288]	@ (8003314 <HAL_GPIO_Init+0x2f4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x1fe>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a47      	ldr	r2, [pc, #284]	@ (8003318 <HAL_GPIO_Init+0x2f8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00d      	beq.n	800321a <HAL_GPIO_Init+0x1fa>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a46      	ldr	r2, [pc, #280]	@ (800331c <HAL_GPIO_Init+0x2fc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d007      	beq.n	8003216 <HAL_GPIO_Init+0x1f6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a45      	ldr	r2, [pc, #276]	@ (8003320 <HAL_GPIO_Init+0x300>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_GPIO_Init+0x1f2>
 800320e:	2304      	movs	r3, #4
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x204>
 8003212:	2307      	movs	r3, #7
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x204>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x204>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x204>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x204>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4935      	ldr	r1, [pc, #212]	@ (800330c <HAL_GPIO_Init+0x2ec>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003242:	4b38      	ldr	r3, [pc, #224]	@ (8003324 <HAL_GPIO_Init+0x304>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003266:	4a2f      	ldr	r2, [pc, #188]	@ (8003324 <HAL_GPIO_Init+0x304>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800326c:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <HAL_GPIO_Init+0x304>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003290:	4a24      	ldr	r2, [pc, #144]	@ (8003324 <HAL_GPIO_Init+0x304>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003296:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <HAL_GPIO_Init+0x304>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <HAL_GPIO_Init+0x304>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c0:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <HAL_GPIO_Init+0x304>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003324 <HAL_GPIO_Init+0x304>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f aea2 	bls.w	800303c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3724      	adds	r7, #36	@ 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40013800 	.word	0x40013800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020400 	.word	0x40020400
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40013c00 	.word	0x40013c00

08003328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e001      	b.n	800334a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
 8003364:	4613      	mov	r3, r2
 8003366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003374:	e003      	b.n	800337e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	041a      	lsls	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	619a      	str	r2, [r3, #24]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e267      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033aa:	4b88      	ldr	r3, [pc, #544]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b85      	ldr	r3, [pc, #532]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b82      	ldr	r3, [pc, #520]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	4b7e      	ldr	r3, [pc, #504]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05b      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e242      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b76      	ldr	r3, [pc, #472]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b70      	ldr	r3, [pc, #448]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6f      	ldr	r2, [pc, #444]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003424:	4b69      	ldr	r3, [pc, #420]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b66      	ldr	r3, [pc, #408]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fd48 	bl	8001ed8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fd44 	bl	8001ed8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e207      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b5b      	ldr	r3, [pc, #364]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xc0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fd34 	bl	8001ed8 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fd30 	bl	8001ed8 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	@ 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1f3      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b51      	ldr	r3, [pc, #324]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034a2:	4b4a      	ldr	r3, [pc, #296]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1c7      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <HAL_RCC_OscConfig+0x244>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe fce9 	bl	8001ed8 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe fce5 	bl	8001ed8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1a8      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_RCC_OscConfig+0x244>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fcc8 	bl	8001ed8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe fcc4 	bl	8001ed8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e187      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <HAL_RCC_OscConfig+0x248>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fca8 	bl	8001ed8 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fca4 	bl	8001ed8 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e167      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x200>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_OscConfig+0x248>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fc91 	bl	8001ed8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe fc8d 	bl	8001ed8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e150      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7d      	ldr	r3, [pc, #500]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	4a7c      	ldr	r2, [pc, #496]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	@ 0x40
 8003612:	4b7a      	ldr	r3, [pc, #488]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b77      	ldr	r3, [pc, #476]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b74      	ldr	r3, [pc, #464]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe fc4d 	bl	8001ed8 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe fc49 	bl	8001ed8 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e10c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x2ea>
 8003668:	4b64      	ldr	r3, [pc, #400]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a63      	ldr	r2, [pc, #396]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x30c>
 800367e:	4b5f      	ldr	r3, [pc, #380]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003682:	4a5e      	ldr	r2, [pc, #376]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70
 800368a:	4b5c      	ldr	r3, [pc, #368]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	@ 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003698:	4b58      	ldr	r3, [pc, #352]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	4a57      	ldr	r2, [pc, #348]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fc0e 	bl	8001ed8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe fc0a 	bl	8001ed8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0cb      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fe fbf8 	bl	8001ed8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe fbf4 	bl	8001ed8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b5      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b3e      	ldr	r3, [pc, #248]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	4a38      	ldr	r2, [pc, #224]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a1 	beq.w	800386c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b34      	ldr	r3, [pc, #208]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d05c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d141      	bne.n	80037c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b31      	ldr	r3, [pc, #196]	@ (8003804 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fbc8 	bl	8001ed8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fbc4 	bl	8001ed8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e087      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	491b      	ldr	r1, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_RCC_OscConfig+0x478>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe fb9d 	bl	8001ed8 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe fb99 	bl	8001ed8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e05c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x416>
 80037c0:	e054      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fb86 	bl	8001ed8 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fb82 	bl	8001ed8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e045      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
 80037ee:	e03d      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e038      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000
 8003804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x4ec>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d028      	beq.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d121      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d11a      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800383e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	3b01      	subs	r3, #1
 8003852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe fab4 	bl	8001ed8 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe fab0 	bl	8001ed8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	@ (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fa14 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	08005610 	.word	0x08005610
 8003a40:	20000008 	.word	0x20000008
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b094      	sub	sp, #80	@ 0x50
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80e1 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e0db      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a80:	e0db      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b73      	ldr	r3, [pc, #460]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a86:	e0d8      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b6f      	ldr	r3, [pc, #444]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a92:	4b6d      	ldr	r3, [pc, #436]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	6139      	str	r1, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	ebb2 0801 	subs.w	r8, r2, r1
 8003b00:	4659      	mov	r1, fp
 8003b02:	eb63 0901 	sbc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb49 0303 	adc.w	r3, r9, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	024b      	lsls	r3, r1, #9
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b44:	4621      	mov	r1, r4
 8003b46:	024a      	lsls	r2, r1, #9
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b58:	f7fc fb3c 	bl	80001d4 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4611      	mov	r1, r2
 8003b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	464b      	mov	r3, r9
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	61fa      	str	r2, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	f7fc fae2 	bl	80001d4 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3750      	adds	r7, #80	@ 0x50
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	007a1200 	.word	0x007a1200

08003c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000008 	.word	0x20000008

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	08005620 	.word	0x08005620

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffdc 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	08005620 	.word	0x08005620

08003cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e07b      	b.n	8003dc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cde:	d009      	beq.n	8003cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61da      	str	r2, [r3, #28]
 8003ce6:	e005      	b.n	8003cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd ff54 	bl	8001bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d78:	ea42 0103 	orr.w	r1, r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0104 	and.w	r1, r3, #4
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	f003 0210 	and.w	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dde:	f7fe f87b 	bl	8001ed8 <HAL_GetTick>
 8003de2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	e12a      	b.n	800404e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Transmit+0x36>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e122      	b.n	800404e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_SPI_Transmit+0x48>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e11b      	b.n	800404e <HAL_SPI_Transmit+0x280>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2203      	movs	r2, #3
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e64:	d10f      	bne.n	8003e86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d007      	beq.n	8003ea4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eac:	d152      	bne.n	8003f54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Transmit+0xee>
 8003eb6:	8b7b      	ldrh	r3, [r7, #26]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d145      	bne.n	8003f48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ee0:	e032      	b.n	8003f48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d112      	bne.n	8003f16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	881a      	ldrh	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	1c9a      	adds	r2, r3, #2
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f14:	e018      	b.n	8003f48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f16:	f7fd ffdf 	bl	8001ed8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d803      	bhi.n	8003f2e <HAL_SPI_Transmit+0x160>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f2c:	d102      	bne.n	8003f34 <HAL_SPI_Transmit+0x166>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e082      	b.n	800404e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1c7      	bne.n	8003ee2 <HAL_SPI_Transmit+0x114>
 8003f52:	e053      	b.n	8003ffc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_Transmit+0x194>
 8003f5c:	8b7b      	ldrh	r3, [r7, #26]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d147      	bne.n	8003ff2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f88:	e033      	b.n	8003ff2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d113      	bne.n	8003fc0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	7812      	ldrb	r2, [r2, #0]
 8003fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fbe:	e018      	b.n	8003ff2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc0:	f7fd ff8a 	bl	8001ed8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d803      	bhi.n	8003fd8 <HAL_SPI_Transmit+0x20a>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Transmit+0x210>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e02d      	b.n	800404e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1c6      	bne.n	8003f8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fbe7 	bl	80047d4 <SPI_EndRxTxTransaction>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800404c:	2300      	movs	r3, #0
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b088      	sub	sp, #32
 800405a:	af02      	add	r7, sp, #8
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d001      	beq.n	8004076 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	e104      	b.n	8004280 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407e:	d112      	bne.n	80040a6 <HAL_SPI_Receive+0x50>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10e      	bne.n	80040a6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2204      	movs	r2, #4
 800408c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f8f3 	bl	8004288 <HAL_SPI_TransmitReceive>
 80040a2:	4603      	mov	r3, r0
 80040a4:	e0ec      	b.n	8004280 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a6:	f7fd ff17 	bl	8001ed8 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Receive+0x62>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0e1      	b.n	8004280 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_SPI_Receive+0x74>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0da      	b.n	8004280 <HAL_SPI_Receive+0x22a>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2204      	movs	r2, #4
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004118:	d10f      	bne.n	800413a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d007      	beq.n	8004158 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d170      	bne.n	8004242 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004160:	e035      	b.n	80041ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d115      	bne.n	800419c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f103 020c 	add.w	r2, r3, #12
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800419a:	e018      	b.n	80041ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419c:	f7fd fe9c 	bl	8001ed8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d803      	bhi.n	80041b4 <HAL_SPI_Receive+0x15e>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Receive+0x164>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e058      	b.n	8004280 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1c4      	bne.n	8004162 <HAL_SPI_Receive+0x10c>
 80041d8:	e038      	b.n	800424c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d113      	bne.n	8004210 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	b292      	uxth	r2, r2
 80041f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800420e:	e018      	b.n	8004242 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004210:	f7fd fe62 	bl	8001ed8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d803      	bhi.n	8004228 <HAL_SPI_Receive+0x1d2>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004226:	d102      	bne.n	800422e <HAL_SPI_Receive+0x1d8>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e01e      	b.n	8004280 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1c6      	bne.n	80041da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	6839      	ldr	r1, [r7, #0]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fa59 	bl	8004708 <SPI_EndRxTransaction>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800427e:	2300      	movs	r3, #0
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429a:	f7fd fe1d 	bl	8001ed8 <HAL_GetTick>
 800429e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d00c      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x4a>
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042be:	d106      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x46>
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d001      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	e17f      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x5c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x5c>
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e174      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x6e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e16d      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b04      	cmp	r3, #4
 8004308:	d003      	beq.n	8004312 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2205      	movs	r2, #5
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	887a      	ldrh	r2, [r7, #2]
 8004322:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	887a      	ldrh	r2, [r7, #2]
 800433a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b40      	cmp	r3, #64	@ 0x40
 8004354:	d007      	beq.n	8004366 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800436e:	d17e      	bne.n	800446e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_SPI_TransmitReceive+0xf6>
 8004378:	8afb      	ldrh	r3, [r7, #22]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d16c      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	881a      	ldrh	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	1c9a      	adds	r2, r3, #2
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	e059      	b.n	8004458 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d11b      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x162>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d016      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x162>
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d113      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	1c9a      	adds	r2, r3, #2
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d119      	bne.n	800442c <HAL_SPI_TransmitReceive+0x1a4>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d014      	beq.n	800442c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	b292      	uxth	r2, r2
 800440e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004428:	2301      	movs	r3, #1
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800442c:	f7fd fd54 	bl	8001ed8 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004438:	429a      	cmp	r2, r3
 800443a:	d80d      	bhi.n	8004458 <HAL_SPI_TransmitReceive+0x1d0>
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004442:	d009      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0bc      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1a0      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x11c>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d19b      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x11c>
 800446c:	e082      	b.n	8004574 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_SPI_TransmitReceive+0x1f4>
 8004476:	8afb      	ldrh	r3, [r7, #22]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d171      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a2:	e05d      	b.n	8004560 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d11c      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x264>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d017      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x264>
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d114      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	330c      	adds	r3, #12
 80044cc:	7812      	ldrb	r2, [r2, #0]
 80044ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d119      	bne.n	800452e <HAL_SPI_TransmitReceive+0x2a6>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d014      	beq.n	800452e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800452a:	2301      	movs	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800452e:	f7fd fcd3 	bl	8001ed8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453a:	429a      	cmp	r2, r3
 800453c:	d803      	bhi.n	8004546 <HAL_SPI_TransmitReceive+0x2be>
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004544:	d102      	bne.n	800454c <HAL_SPI_TransmitReceive+0x2c4>
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e038      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d19c      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x21c>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d197      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f92b 	bl	80047d4 <SPI_EndRxTxTransaction>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e01d      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3728      	adds	r7, #40	@ 0x28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045e8:	b2db      	uxtb	r3, r3
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004608:	f7fd fc66 	bl	8001ed8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	4413      	add	r3, r2
 8004616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004618:	f7fd fc5e 	bl	8001ed8 <HAL_GetTick>
 800461c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800461e:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	0d1b      	lsrs	r3, r3, #20
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462e:	e054      	b.n	80046da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004636:	d050      	beq.n	80046da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004638:	f7fd fc4e 	bl	8001ed8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	429a      	cmp	r2, r3
 8004646:	d902      	bls.n	800464e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d13d      	bne.n	80046ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800465c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004666:	d111      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004670:	d004      	beq.n	800467c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467a:	d107      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800468a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004694:	d10f      	bne.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e017      	b.n	80046fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d19b      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000008 	.word	0x20000008

08004708 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471c:	d111      	bne.n	8004742 <SPI_EndRxTransaction+0x3a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004726:	d004      	beq.n	8004732 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d107      	bne.n	8004742 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004740:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474a:	d12a      	bne.n	80047a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004754:	d012      	beq.n	800477c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	2180      	movs	r1, #128	@ 0x80
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff ff49 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02d      	beq.n	80047c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e026      	b.n	80047ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	2101      	movs	r1, #1
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff36 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01a      	beq.n	80047c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e013      	b.n	80047ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2101      	movs	r1, #1
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff ff23 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047bc:	f043 0220 	orr.w	r2, r3, #32
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e000      	b.n	80047ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2201      	movs	r2, #1
 80047e8:	2102      	movs	r1, #2
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ff04 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e032      	b.n	800486c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004806:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <SPI_EndRxTxTransaction+0xa0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	@ (8004878 <SPI_EndRxTxTransaction+0xa4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0d5b      	lsrs	r3, r3, #21
 8004812:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004824:	d112      	bne.n	800484c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	2180      	movs	r1, #128	@ 0x80
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff fee1 	bl	80045f8 <SPI_WaitFlagStateUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d016      	beq.n	800486a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e00f      	b.n	800486c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3b01      	subs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b80      	cmp	r3, #128	@ 0x80
 8004864:	d0f2      	beq.n	800484c <SPI_EndRxTxTransaction+0x78>
 8004866:	e000      	b.n	800486a <SPI_EndRxTxTransaction+0x96>
        break;
 8004868:	bf00      	nop
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000008 	.word	0x20000008
 8004878:	165e9f81 	.word	0x165e9f81

0800487c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e041      	b.n	8004912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd f9d2 	bl	8001c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 f950 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d001      	beq.n	8004934 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e03c      	b.n	80049ae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1e      	ldr	r2, [pc, #120]	@ (80049bc <HAL_TIM_Base_Start+0xa0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d018      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494e:	d013      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <HAL_TIM_Base_Start+0xa4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00e      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a19      	ldr	r2, [pc, #100]	@ (80049c4 <HAL_TIM_Base_Start+0xa8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_TIM_Base_Start+0xac>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_TIM_Base_Start+0x5c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <HAL_TIM_Base_Start+0xb0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d111      	bne.n	800499c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b06      	cmp	r3, #6
 8004988:	d010      	beq.n	80049ac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	e007      	b.n	80049ac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40014000 	.word	0x40014000

080049d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_ConfigClockSource+0x1c>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e0b4      	b.n	8004b56 <HAL_TIM_ConfigClockSource+0x186>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a24:	d03e      	beq.n	8004aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	f200 8087 	bhi.w	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a32:	f000 8086 	beq.w	8004b42 <HAL_TIM_ConfigClockSource+0x172>
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3a:	d87f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b70      	cmp	r3, #112	@ 0x70
 8004a3e:	d01a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xa6>
 8004a40:	2b70      	cmp	r3, #112	@ 0x70
 8004a42:	d87b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d050      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x11a>
 8004a48:	2b60      	cmp	r3, #96	@ 0x60
 8004a4a:	d877      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b50      	cmp	r3, #80	@ 0x50
 8004a4e:	d03c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xfa>
 8004a50:	2b50      	cmp	r3, #80	@ 0x50
 8004a52:	d873      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d058      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x13a>
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d86f      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b30      	cmp	r3, #48	@ 0x30
 8004a5e:	d064      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d86b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d060      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d867      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05c      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d05a      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x15a>
 8004a74:	e062      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a86:	f000 f971 	bl	8004d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
      break;
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	f000 f95a 	bl	8004d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ac6:	609a      	str	r2, [r3, #8]
      break;
 8004ac8:	e03c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 f8ce 	bl	8004c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2150      	movs	r1, #80	@ 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f927 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e02c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 f8ed 	bl	8004cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2160      	movs	r1, #96	@ 0x60
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f917 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e01c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 f8ae 	bl	8004c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2140      	movs	r1, #64	@ 0x40
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f907 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f000 f8fe 	bl	8004d36 <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3a      	ldr	r2, [pc, #232]	@ (8004c5c <TIM_Base_SetConfig+0xfc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7e:	d00b      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <TIM_Base_SetConfig+0x100>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a36      	ldr	r2, [pc, #216]	@ (8004c64 <TIM_Base_SetConfig+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_Base_SetConfig+0x38>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <TIM_Base_SetConfig+0x108>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d108      	bne.n	8004baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	@ (8004c5c <TIM_Base_SetConfig+0xfc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01b      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb8:	d017      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a28      	ldr	r2, [pc, #160]	@ (8004c60 <TIM_Base_SetConfig+0x100>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	@ (8004c64 <TIM_Base_SetConfig+0x104>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00f      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a26      	ldr	r2, [pc, #152]	@ (8004c68 <TIM_Base_SetConfig+0x108>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a25      	ldr	r2, [pc, #148]	@ (8004c6c <TIM_Base_SetConfig+0x10c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a24      	ldr	r2, [pc, #144]	@ (8004c70 <TIM_Base_SetConfig+0x110>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <TIM_Base_SetConfig+0x114>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0e      	ldr	r2, [pc, #56]	@ (8004c5c <TIM_Base_SetConfig+0xfc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]
  }
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 030a 	bic.w	r3, r3, #10
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f023 0210 	bic.w	r2, r3, #16
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	031b      	lsls	r3, r3, #12
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f043 0307 	orr.w	r3, r3, #7
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e050      	b.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e10:	d013      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a13      	ldr	r2, [pc, #76]	@ (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10c      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e042      	b.n	8004f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc feee 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	@ 0x24
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f82b 	bl	8004f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f2c:	b0c0      	sub	sp, #256	@ 0x100
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	ea40 0301 	orr.w	r3, r0, r1
 8004f50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f80:	f021 010c 	bic.w	r1, r1, #12
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	6999      	ldr	r1, [r3, #24]
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	ea40 0301 	orr.w	r3, r0, r1
 8004fae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d005      	beq.n	8004fc8 <UART_SetConfig+0xa0>
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80051f8 <UART_SetConfig+0x2d0>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d104      	bne.n	8004fd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe fe64 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fd0:	e003      	b.n	8004fda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd2:	f7fe fe4b 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 8004fd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe4:	f040 810c 	bne.w	8005200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ff2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005002:	415b      	adcs	r3, r3
 8005004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800500a:	4621      	mov	r1, r4
 800500c:	eb12 0801 	adds.w	r8, r2, r1
 8005010:	4629      	mov	r1, r5
 8005012:	eb43 0901 	adc.w	r9, r3, r1
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	4623      	mov	r3, r4
 8005030:	eb18 0303 	adds.w	r3, r8, r3
 8005034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005038:	462b      	mov	r3, r5
 800503a:	eb49 0303 	adc.w	r3, r9, r3
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800504e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005056:	460b      	mov	r3, r1
 8005058:	18db      	adds	r3, r3, r3
 800505a:	653b      	str	r3, [r7, #80]	@ 0x50
 800505c:	4613      	mov	r3, r2
 800505e:	eb42 0303 	adc.w	r3, r2, r3
 8005062:	657b      	str	r3, [r7, #84]	@ 0x54
 8005064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800506c:	f7fb f8b2 	bl	80001d4 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4b61      	ldr	r3, [pc, #388]	@ (80051fc <UART_SetConfig+0x2d4>)
 8005076:	fba3 2302 	umull	r2, r3, r3, r2
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	011c      	lsls	r4, r3, #4
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005088:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800508c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005098:	415b      	adcs	r3, r3
 800509a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050a0:	4641      	mov	r1, r8
 80050a2:	eb12 0a01 	adds.w	sl, r2, r1
 80050a6:	4649      	mov	r1, r9
 80050a8:	eb43 0b01 	adc.w	fp, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c0:	4692      	mov	sl, r2
 80050c2:	469b      	mov	fp, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	eb1a 0303 	adds.w	r3, sl, r3
 80050ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050ce:	464b      	mov	r3, r9
 80050d0:	eb4b 0303 	adc.w	r3, fp, r3
 80050d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ec:	460b      	mov	r3, r1
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050f2:	4613      	mov	r3, r2
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005102:	f7fb f867 	bl	80001d4 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4611      	mov	r1, r2
 800510c:	4b3b      	ldr	r3, [pc, #236]	@ (80051fc <UART_SetConfig+0x2d4>)
 800510e:	fba3 2301 	umull	r2, r3, r3, r1
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2264      	movs	r2, #100	@ 0x64
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	1acb      	subs	r3, r1, r3
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005122:	4b36      	ldr	r3, [pc, #216]	@ (80051fc <UART_SetConfig+0x2d4>)
 8005124:	fba3 2302 	umull	r2, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005130:	441c      	add	r4, r3
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800513c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800514c:	415b      	adcs	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6339      	str	r1, [r7, #48]	@ 0x30
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051be:	f7fb f809 	bl	80001d4 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <UART_SetConfig+0x2d4>)
 80051c8:	fba3 1302 	umull	r1, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2164      	movs	r1, #100	@ 0x64
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	3332      	adds	r3, #50	@ 0x32
 80051da:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <UART_SetConfig+0x2d4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	f003 0207 	and.w	r2, r3, #7
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4422      	add	r2, r4
 80051ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f0:	e106      	b.n	8005400 <UART_SetConfig+0x4d8>
 80051f2:	bf00      	nop
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40011400 	.word	0x40011400
 80051fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800520a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800520e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005212:	4642      	mov	r2, r8
 8005214:	464b      	mov	r3, r9
 8005216:	1891      	adds	r1, r2, r2
 8005218:	6239      	str	r1, [r7, #32]
 800521a:	415b      	adcs	r3, r3
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
 800521e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005222:	4641      	mov	r1, r8
 8005224:	1854      	adds	r4, r2, r1
 8005226:	4649      	mov	r1, r9
 8005228:	eb43 0501 	adc.w	r5, r3, r1
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	00eb      	lsls	r3, r5, #3
 8005236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	4614      	mov	r4, r2
 800523e:	461d      	mov	r5, r3
 8005240:	4643      	mov	r3, r8
 8005242:	18e3      	adds	r3, r4, r3
 8005244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005248:	464b      	mov	r3, r9
 800524a:	eb45 0303 	adc.w	r3, r5, r3
 800524e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800525e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800526e:	4629      	mov	r1, r5
 8005270:	008b      	lsls	r3, r1, #2
 8005272:	4621      	mov	r1, r4
 8005274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005278:	4621      	mov	r1, r4
 800527a:	008a      	lsls	r2, r1, #2
 800527c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005280:	f7fa ffa8 	bl	80001d4 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4b60      	ldr	r3, [pc, #384]	@ (800540c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	011c      	lsls	r4, r3, #4
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800529c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	61b9      	str	r1, [r7, #24]
 80052ac:	415b      	adcs	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6139      	str	r1, [r7, #16]
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052e8:	464b      	mov	r3, r9
 80052ea:	460a      	mov	r2, r1
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800531e:	f7fa ff59 	bl	80001d4 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4611      	mov	r1, r2
 8005328:	4b38      	ldr	r3, [pc, #224]	@ (800540c <UART_SetConfig+0x4e4>)
 800532a:	fba3 2301 	umull	r2, r3, r3, r1
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2264      	movs	r2, #100	@ 0x64
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	1acb      	subs	r3, r1, r3
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	3332      	adds	r3, #50	@ 0x32
 800533c:	4a33      	ldr	r2, [pc, #204]	@ (800540c <UART_SetConfig+0x4e4>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005348:	441c      	add	r4, r3
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	673b      	str	r3, [r7, #112]	@ 0x70
 8005352:	677a      	str	r2, [r7, #116]	@ 0x74
 8005354:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	415b      	adcs	r3, r3
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005368:	4641      	mov	r1, r8
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	4649      	mov	r1, r9
 8005370:	414b      	adcs	r3, r1
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005380:	4659      	mov	r1, fp
 8005382:	00cb      	lsls	r3, r1, #3
 8005384:	4651      	mov	r1, sl
 8005386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538a:	4651      	mov	r1, sl
 800538c:	00ca      	lsls	r2, r1, #3
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	4603      	mov	r3, r0
 8005394:	4642      	mov	r2, r8
 8005396:	189b      	adds	r3, r3, r2
 8005398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800539a:	464b      	mov	r3, r9
 800539c:	460a      	mov	r2, r1
 800539e:	eb42 0303 	adc.w	r3, r2, r3
 80053a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80053ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053bc:	4649      	mov	r1, r9
 80053be:	008b      	lsls	r3, r1, #2
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c6:	4641      	mov	r1, r8
 80053c8:	008a      	lsls	r2, r1, #2
 80053ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053ce:	f7fa ff01 	bl	80001d4 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <UART_SetConfig+0x4e4>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	@ 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	3332      	adds	r3, #50	@ 0x32
 80053ea:	4a08      	ldr	r2, [pc, #32]	@ (800540c <UART_SetConfig+0x4e4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f003 020f 	and.w	r2, r3, #15
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4422      	add	r2, r4
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005406:	46bd      	mov	sp, r7
 8005408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540c:	51eb851f 	.word	0x51eb851f

08005410 <memset>:
 8005410:	4402      	add	r2, r0
 8005412:	4603      	mov	r3, r0
 8005414:	4293      	cmp	r3, r2
 8005416:	d100      	bne.n	800541a <memset+0xa>
 8005418:	4770      	bx	lr
 800541a:	f803 1b01 	strb.w	r1, [r3], #1
 800541e:	e7f9      	b.n	8005414 <memset+0x4>

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4d0d      	ldr	r5, [pc, #52]	@ (8005458 <__libc_init_array+0x38>)
 8005424:	4c0d      	ldr	r4, [pc, #52]	@ (800545c <__libc_init_array+0x3c>)
 8005426:	1b64      	subs	r4, r4, r5
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	2600      	movs	r6, #0
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	4d0b      	ldr	r5, [pc, #44]	@ (8005460 <__libc_init_array+0x40>)
 8005432:	4c0c      	ldr	r4, [pc, #48]	@ (8005464 <__libc_init_array+0x44>)
 8005434:	f000 f818 	bl	8005468 <_init>
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	2600      	movs	r6, #0
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08005638 	.word	0x08005638
 800545c:	08005638 	.word	0x08005638
 8005460:	08005638 	.word	0x08005638
 8005464:	0800563c 	.word	0x0800563c

08005468 <_init>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	bf00      	nop
 800546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546e:	bc08      	pop	{r3}
 8005470:	469e      	mov	lr, r3
 8005472:	4770      	bx	lr

08005474 <_fini>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr
