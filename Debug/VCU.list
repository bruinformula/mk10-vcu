
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006f0e0  08006d20  08006d20  00007d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08075e00  08075e00  00077014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08075e00  08075e00  00076e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08075e08  08075e08  00077014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08075e08  08075e08  00076e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08075e0c  08075e0c  00076e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08075e10  00077000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000014  08075e24  00077014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08075e24  00077390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00077014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125cc  00000000  00000000  00077044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c38  00000000  00000000  00089610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0008c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db8  00000000  00000000  0008d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019816  00000000  00000000  0008e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152bf  00000000  00000000  000a799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc5e  00000000  00000000  000bcc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001598bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  00159900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000425  00000000  00000000  0015e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0015e619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006d08 	.word	0x08006d08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08006d08 	.word	0x08006d08

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CANSPI_Initialize>:
    MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
    MCP2515_Reset();
 8000506:	f001 fb5b 	bl	8001bc0 <MCP2515_Reset>
    HAL_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f002 f80c 	bl	8002528 <HAL_Delay>
    RXF5 RXF5reg;
    RXM0 RXM0reg;
    RXM1 RXM1reg;

    /* Initialize Rx Mask values */
    RXM0reg.RXM0SIDH = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	723b      	strb	r3, [r7, #8]
    RXM0reg.RXM0SIDL = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	727b      	strb	r3, [r7, #9]
    RXM0reg.RXM0EID8 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	72bb      	strb	r3, [r7, #10]
    RXM0reg.RXM0EID0 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    RXM1reg.RXM1SIDH = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	713b      	strb	r3, [r7, #4]
    RXM1reg.RXM1SIDL = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	717b      	strb	r3, [r7, #5]
    RXM1reg.RXM1EID8 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	71bb      	strb	r3, [r7, #6]
    RXM1reg.RXM1EID0 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]

    /* Initialize Rx Filter values */
    RXF0reg.RXF0SIDH = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3020 	strb.w	r3, [r7, #32]
    RXF0reg.RXF0SIDL = 0x00;      // Standard Filter
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    RXF0reg.RXF0EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    RXF0reg.RXF0EID0 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    RXF1reg.RXF1SIDH = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	773b      	strb	r3, [r7, #28]
    RXF1reg.RXF1SIDL = 0x08;      // Extended Filter
 800054c:	2308      	movs	r3, #8
 800054e:	777b      	strb	r3, [r7, #29]
    RXF1reg.RXF1EID8 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	77bb      	strb	r3, [r7, #30]
    RXF1reg.RXF1EID0 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	77fb      	strb	r3, [r7, #31]

    RXF2reg.RXF2SIDH = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	763b      	strb	r3, [r7, #24]
    RXF2reg.RXF2SIDL = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
    RXF2reg.RXF2EID8 = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	76bb      	strb	r3, [r7, #26]
    RXF2reg.RXF2EID0 = 0x00;
 8000564:	2300      	movs	r3, #0
 8000566:	76fb      	strb	r3, [r7, #27]

    RXF3reg.RXF3SIDH = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	753b      	strb	r3, [r7, #20]
    RXF3reg.RXF3SIDL = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	757b      	strb	r3, [r7, #21]
    RXF3reg.RXF3EID8 = 0x00;
 8000570:	2300      	movs	r3, #0
 8000572:	75bb      	strb	r3, [r7, #22]
    RXF3reg.RXF3EID0 = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]

    RXF4reg.RXF4SIDH = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	743b      	strb	r3, [r7, #16]
    RXF4reg.RXF4SIDL = 0x00;
 800057c:	2300      	movs	r3, #0
 800057e:	747b      	strb	r3, [r7, #17]
    RXF4reg.RXF4EID8 = 0x00;
 8000580:	2300      	movs	r3, #0
 8000582:	74bb      	strb	r3, [r7, #18]
    RXF4reg.RXF4EID0 = 0x00;
 8000584:	2300      	movs	r3, #0
 8000586:	74fb      	strb	r3, [r7, #19]

    RXF5reg.RXF5SIDH = 0x00;
 8000588:	2300      	movs	r3, #0
 800058a:	733b      	strb	r3, [r7, #12]
    RXF5reg.RXF5SIDL = 0x08;
 800058c:	2308      	movs	r3, #8
 800058e:	737b      	strb	r3, [r7, #13]
    RXF5reg.RXF5EID8 = 0x00;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
    RXF5reg.RXF5EID0 = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]

    /* Initialize MCP2515, check SPI */
    if(!MCP2515_Initialize())
 8000598:	f001 faa2 	bl	8001ae0 <MCP2515_Initialize>
 800059c:	4603      	mov	r3, r0
 800059e:	f083 0301 	eor.w	r3, r3, #1
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <CANSPI_Initialize+0xac>
    {
        return false;
 80005a8:	2300      	movs	r3, #0
 80005aa:	e065      	b.n	8000678 <CANSPI_Initialize+0x178>
    }

    /* Change mode to configuration mode */
    if(!MCP2515_SetConfigMode())
 80005ac:	f001 faba 	bl	8001b24 <MCP2515_SetConfigMode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <CANSPI_Initialize+0xc0>
    {
        return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e05b      	b.n	8000678 <CANSPI_Initialize+0x178>
    }

    /* Configure filter & mask */
    MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	461a      	mov	r2, r3
 80005c6:	2123      	movs	r1, #35	@ 0x23
 80005c8:	2020      	movs	r0, #32
 80005ca:	f001 fb85 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	461a      	mov	r2, r3
 80005d2:	2127      	movs	r1, #39	@ 0x27
 80005d4:	2024      	movs	r0, #36	@ 0x24
 80005d6:	f001 fb7f 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	461a      	mov	r2, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 fb78 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	461a      	mov	r2, r3
 80005ee:	2107      	movs	r1, #7
 80005f0:	2004      	movs	r0, #4
 80005f2:	f001 fb71 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	461a      	mov	r2, r3
 80005fc:	210b      	movs	r1, #11
 80005fe:	2008      	movs	r0, #8
 8000600:	f001 fb6a 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	461a      	mov	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2010      	movs	r0, #16
 800060e:	f001 fb63 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	461a      	mov	r2, r3
 8000618:	2117      	movs	r1, #23
 800061a:	2014      	movs	r0, #20
 800061c:	f001 fb5c 	bl	8001cd8 <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	461a      	mov	r2, r3
 8000626:	211b      	movs	r1, #27
 8000628:	2018      	movs	r0, #24
 800062a:	f001 fb55 	bl	8001cd8 <MCP2515_WriteByteSequence>

    /* Just for debugging, read back one filter register */
    uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 800062e:	2014      	movs	r0, #20
 8000630:	f001 fade 	bl	8001bf0 <MCP2515_ReadByte>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    (void)rxf4sidh; // Mark as used to avoid "unused variable" warning

    /* Accept All (Standard + Extended) */
    MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04); //Enable BUKT, Accept Filter 0
 800063a:	2104      	movs	r1, #4
 800063c:	2060      	movs	r0, #96	@ 0x60
 800063e:	f001 fb23 	bl	8001c88 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01); //Accept Filter 1
 8000642:	2101      	movs	r1, #1
 8000644:	2070      	movs	r0, #112	@ 0x70
 8000646:	f001 fb1f 	bl	8001c88 <MCP2515_WriteByte>
     * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
     * 16tq = 2us = 500kbps
     */

    /* 00(SJW 1tq) 000000 */
    MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800064a:	2100      	movs	r1, #0
 800064c:	202a      	movs	r0, #42	@ 0x2a
 800064e:	f001 fb1b 	bl	8001c88 <MCP2515_WriteByte>

    /* 1 1 100(5tq) 101(6tq) => 0xE5 */
    MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000652:	21e5      	movs	r1, #229	@ 0xe5
 8000654:	2029      	movs	r0, #41	@ 0x29
 8000656:	f001 fb17 	bl	8001c88 <MCP2515_WriteByte>

    /* 1 0 000 011(4tq) => 0x83 */
    MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800065a:	2183      	movs	r1, #131	@ 0x83
 800065c:	2028      	movs	r0, #40	@ 0x28
 800065e:	f001 fb13 	bl	8001c88 <MCP2515_WriteByte>

    /* Normal mode */
    if(!MCP2515_SetNormalMode())
 8000662:	f001 fa8e 	bl	8001b82 <MCP2515_SetNormalMode>
 8000666:	4603      	mov	r3, r0
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <CANSPI_Initialize+0x176>
        return false;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <CANSPI_Initialize+0x178>

    return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    uint8_t returnValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

    idReg.tempSIDH = 0;
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
    idReg.tempSIDL = 0;
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000694:	2200      	movs	r2, #0
 8000696:	705a      	strb	r2, [r3, #1]
    idReg.tempEID8 = 0;
 8000698:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800069a:	2200      	movs	r2, #0
 800069c:	709a      	strb	r2, [r3, #2]
    idReg.tempEID0 = 0;
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <CANSPI_Transmit+0x120>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	70da      	strb	r2, [r3, #3]

    ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80006a4:	f001 fb94 	bl	8001dd0 <MCP2515_ReadStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ae:	701a      	strb	r2, [r3, #0]
    uint8_t ctrlstatus = ctrlStatus.ctrl_status;       // For debugging
 80006b0:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	73bb      	strb	r3, [r7, #14]
    uint8_t canctrl    = MCP2515_ReadByte(MCP2515_CANCTRL);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f001 fa9a 	bl	8001bf0 <MCP2515_ReadByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	737b      	strb	r3, [r7, #13]
    uint8_t eflag      = MCP2515_ReadByte(MCP2515_EFLG);
 80006c0:	202d      	movs	r0, #45	@ 0x2d
 80006c2:	f001 fa95 	bl	8001bf0 <MCP2515_ReadByte>
 80006c6:	4603      	mov	r3, r0
 80006c8:	733b      	strb	r3, [r7, #12]
    uint8_t txb0ctrl   = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 80006ca:	2030      	movs	r0, #48	@ 0x30
 80006cc:	f001 fa90 	bl	8001bf0 <MCP2515_ReadByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	72fb      	strb	r3, [r7, #11]
    uint8_t txb1ctrl   = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f001 fa8b 	bl	8001bf0 <MCP2515_ReadByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	72bb      	strb	r3, [r7, #10]
    uint8_t txb2ctrl   = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006de:	2050      	movs	r0, #80	@ 0x50
 80006e0:	f001 fa86 	bl	8001bf0 <MCP2515_ReadByte>
 80006e4:	4603      	mov	r3, r0
 80006e6:	727b      	strb	r3, [r7, #9]
    (void)txb0ctrl;
    (void)txb1ctrl;
    (void)txb2ctrl;

    /* Finding empty buffer */
    if (ctrlStatus.TXB0REQ != 1)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	@ (80007a4 <CANSPI_Transmit+0x124>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d115      	bne.n	8000722 <CANSPI_Transmit+0xa2>
    {
        /* convert CAN ID for register */
        convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6858      	ldr	r0, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4a28      	ldr	r2, [pc, #160]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000700:	4619      	mov	r1, r3
 8000702:	f000 f91e 	bl	8000942 <convertCANid2Reg>

        /* Load data to Tx Buffer */
        MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1a      	ldrb	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3309      	adds	r3, #9
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000710:	2040      	movs	r0, #64	@ 0x40
 8000712:	f001 fb0f 	bl	8001d34 <MCP2515_LoadTxSequence>

        /* Request to transmit */
        MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000716:	2081      	movs	r0, #129	@ 0x81
 8000718:	f001 fb3c 	bl	8001d94 <MCP2515_RequestToSend>

        returnValue = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e038      	b.n	8000794 <CANSPI_Transmit+0x114>
    }
    else if (ctrlStatus.TXB1REQ != 1)
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <CANSPI_Transmit+0x124>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d115      	bne.n	800075c <CANSPI_Transmit+0xdc>
    {
        convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6858      	ldr	r0, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800073a:	4619      	mov	r1, r3
 800073c:	f000 f901 	bl	8000942 <convertCANid2Reg>
        MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a1a      	ldrb	r2, [r3, #8]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3309      	adds	r3, #9
 8000748:	4915      	ldr	r1, [pc, #84]	@ (80007a0 <CANSPI_Transmit+0x120>)
 800074a:	2042      	movs	r0, #66	@ 0x42
 800074c:	f001 faf2 	bl	8001d34 <MCP2515_LoadTxSequence>
        MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000750:	2082      	movs	r0, #130	@ 0x82
 8000752:	f001 fb1f 	bl	8001d94 <MCP2515_RequestToSend>
        returnValue = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e01b      	b.n	8000794 <CANSPI_Transmit+0x114>
    }
    else if (ctrlStatus.TXB2REQ != 1)
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <CANSPI_Transmit+0x124>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d114      	bne.n	8000794 <CANSPI_Transmit+0x114>
    {
        convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000774:	4619      	mov	r1, r3
 8000776:	f000 f8e4 	bl	8000942 <convertCANid2Reg>
        MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1a      	ldrb	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3309      	adds	r3, #9
 8000782:	4907      	ldr	r1, [pc, #28]	@ (80007a0 <CANSPI_Transmit+0x120>)
 8000784:	2044      	movs	r0, #68	@ 0x44
 8000786:	f001 fad5 	bl	8001d34 <MCP2515_LoadTxSequence>
        MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800078a:	2084      	movs	r0, #132	@ 0x84
 800078c:	f001 fb02 	bl	8001d94 <MCP2515_RequestToSend>
        returnValue = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
    }

    return (returnValue);
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000034 	.word	0x20000034
 80007a4:	20000030 	.word	0x20000030

080007a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    uint8_t returnValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	77fb      	strb	r3, [r7, #31]
    rx_reg_t        rxReg;
    ctrl_rx_status_t rxStatus;

    rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80007b4:	f001 fb2c 	bl	8001e10 <MCP2515_GetRxStatus>
 80007b8:	4603      	mov	r3, r0
 80007ba:	733b      	strb	r3, [r7, #12]

    /* Check receive buffer */
    if (rxStatus.rxBuffer != 0)
 80007bc:	7b3b      	ldrb	r3, [r7, #12]
 80007be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d05c      	beq.n	8000882 <CANSPI_Receive+0xda>
    {
        /* find which buffer has a message */
        if ((rxStatus.rxBuffer == MSG_IN_RXB0) || (rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b40      	cmp	r3, #64	@ 0x40
 80007d2:	d005      	beq.n	80007e0 <CANSPI_Receive+0x38>
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80007de:	d107      	bne.n	80007f0 <CANSPI_Receive+0x48>
        {
            MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	220d      	movs	r2, #13
 80007e6:	4619      	mov	r1, r3
 80007e8:	2090      	movs	r0, #144	@ 0x90
 80007ea:	f001 fa27 	bl	8001c3c <MCP2515_ReadRxSequence>
 80007ee:	e00c      	b.n	800080a <CANSPI_Receive+0x62>
        }
        else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007f0:	7b3b      	ldrb	r3, [r7, #12]
 80007f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b80      	cmp	r3, #128	@ 0x80
 80007fa:	d106      	bne.n	800080a <CANSPI_Receive+0x62>
        {
            MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	220d      	movs	r2, #13
 8000802:	4619      	mov	r1, r3
 8000804:	2094      	movs	r0, #148	@ 0x94
 8000806:	f001 fa19 	bl	8001c3c <MCP2515_ReadRxSequence>
        }

        /* if the message is extended CAN type */
        if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800080a:	7b3b      	ldrb	r3, [r7, #12]
 800080c:	f003 0318 	and.w	r3, r3, #24
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b10      	cmp	r3, #16
 8000814:	d10c      	bne.n	8000830 <CANSPI_Receive+0x88>
        {
            tempCanMsg->frame.idType = (uint8_t)dEXTENDED_CAN_MSG_ID_2_0B;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2202      	movs	r2, #2
 800081a:	701a      	strb	r2, [r3, #0]
            tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800081c:	7cb8      	ldrb	r0, [r7, #18]
 800081e:	7cf9      	ldrb	r1, [r7, #19]
 8000820:	7c3a      	ldrb	r2, [r7, #16]
 8000822:	7c7b      	ldrb	r3, [r7, #17]
 8000824:	f000 f832 	bl	800088c <convertReg2ExtendedCANid>
 8000828:	4602      	mov	r2, r0
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	e00b      	b.n	8000848 <CANSPI_Receive+0xa0>
        }
        else
        {
            /* Standard type */
            tempCanMsg->frame.idType = (uint8_t)dSTANDARD_CAN_MSG_ID_2_0B;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
            tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000836:	7c3b      	ldrb	r3, [r7, #16]
 8000838:	7c7a      	ldrb	r2, [r7, #17]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f863 	bl	8000908 <convertReg2StandardCANid>
 8000842:	4602      	mov	r2, r0
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	605a      	str	r2, [r3, #4]
        }

        tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000848:	7d3a      	ldrb	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	721a      	strb	r2, [r3, #8]
        tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800084e:	7d7a      	ldrb	r2, [r7, #21]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	725a      	strb	r2, [r3, #9]
        tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000854:	7dba      	ldrb	r2, [r7, #22]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	729a      	strb	r2, [r3, #10]
        tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800085a:	7dfa      	ldrb	r2, [r7, #23]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	72da      	strb	r2, [r3, #11]
        tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000860:	7e3a      	ldrb	r2, [r7, #24]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	731a      	strb	r2, [r3, #12]
        tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000866:	7e7a      	ldrb	r2, [r7, #25]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	735a      	strb	r2, [r3, #13]
        tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800086c:	7eba      	ldrb	r2, [r7, #26]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	739a      	strb	r2, [r3, #14]
        tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000872:	7efa      	ldrb	r2, [r7, #27]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	73da      	strb	r2, [r3, #15]
        tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000878:	7f3a      	ldrb	r2, [r7, #28]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	741a      	strb	r2, [r3, #16]

        returnValue = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	77fb      	strb	r3, [r7, #31]
    }

    return (returnValue);
 8000882:	7ffb      	ldrb	r3, [r7, #31]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <convertReg2ExtendedCANid>:
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL,
                                         uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800088c:	b490      	push	{r4, r7}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4604      	mov	r4, r0
 8000894:	4608      	mov	r0, r1
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	4623      	mov	r3, r4
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4603      	mov	r3, r0
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	460b      	mov	r3, r1
 80008a4:	717b      	strb	r3, [r7, #5]
 80008a6:	4613      	mov	r3, r2
 80008a8:	713b      	strb	r3, [r7, #4]
    uint32_t returnValue = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
    uint32_t ConvertedID = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
    uint8_t  CAN_standardLo_ID_lo2bits;
    uint8_t  CAN_standardLo_ID_hi3bits;

    CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80008b2:	793b      	ldrb	r3, [r7, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	73fb      	strb	r3, [r7, #15]
    CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80008ba:	793b      	ldrb	r3, [r7, #4]
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	73bb      	strb	r3, [r7, #14]

    ConvertedID  = (tempRXBn_SIDH << 3);
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	613b      	str	r3, [r7, #16]
    ConvertedID += CAN_standardLo_ID_hi3bits;
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4413      	add	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
    ConvertedID  = (ConvertedID << 2);
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
    ConvertedID += CAN_standardLo_ID_lo2bits;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4413      	add	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
    ConvertedID  = (ConvertedID << 8);
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	613b      	str	r3, [r7, #16]
    ConvertedID += tempRXBn_EIDH;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4413      	add	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
    ConvertedID  = (ConvertedID << 8);
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	613b      	str	r3, [r7, #16]
    ConvertedID += tempRXBn_EIDL;
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4413      	add	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
    returnValue  = ConvertedID;
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	617b      	str	r3, [r7, #20]
    return (returnValue);
 80008fc:	697b      	ldr	r3, [r7, #20]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bc90      	pop	{r4, r7}
 8000906:	4770      	bx	lr

08000908 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
    uint32_t returnValue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
    uint32_t ConvertedID;

    ConvertedID  = (tempRXBn_SIDH << 3);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	60bb      	str	r3, [r7, #8]
    ConvertedID += (tempRXBn_SIDL >> 5);
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	095b      	lsrs	r3, r3, #5
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	4413      	add	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
    returnValue  = ConvertedID;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60fb      	str	r3, [r7, #12]

    return (returnValue);
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000942:	b480      	push	{r7}
 8000944:	b087      	sub	sp, #28
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	460b      	mov	r3, r1
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	72fb      	strb	r3, [r7, #11]
    uint8_t wipSIDL = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	75fb      	strb	r3, [r7, #23]

    if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d12e      	bne.n	80009b8 <convertCANid2Reg+0x76>
    {
        // EID0
        passedIdReg->tempEID0 = (uint8_t)(tempPassedInID & 0xFF);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	70da      	strb	r2, [r3, #3]
        tempPassedInID >>= 8;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]

        // EID8
        passedIdReg->tempEID8 = (uint8_t)(tempPassedInID & 0xFF);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	709a      	strb	r2, [r3, #2]
        tempPassedInID >>= 8;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	60fb      	str	r3, [r7, #12]

        // SIDL
        wipSIDL = (uint8_t)(tempPassedInID & 0x03);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	75fb      	strb	r3, [r7, #23]
        tempPassedInID <<= 3;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	60fb      	str	r3, [r7, #12]
        wipSIDL = (uint8_t)((0xE0 & tempPassedInID) + wipSIDL);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f023 031f 	bic.w	r3, r3, #31
 800098e:	b2da      	uxtb	r2, r3
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	4413      	add	r3, r2
 8000994:	75fb      	strb	r3, [r7, #23]
        wipSIDL = (uint8_t)(wipSIDL + 0x08);
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	3308      	adds	r3, #8
 800099a:	75fb      	strb	r3, [r7, #23]
        passedIdReg->tempSIDL = (uint8_t)(0xEB & wipSIDL);
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	f023 0314 	bic.w	r3, r3, #20
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	705a      	strb	r2, [r3, #1]

        // SIDH
        tempPassedInID >>= 8;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDH = (uint8_t)(tempPassedInID & 0xFF);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	701a      	strb	r2, [r3, #0]
        tempPassedInID <<= 5;
        passedIdReg->tempSIDL = (uint8_t)(tempPassedInID & 0xFF);
        tempPassedInID >>= 8;
        passedIdReg->tempSIDH = (uint8_t)(tempPassedInID & 0xFF);
    }
}
 80009b6:	e013      	b.n	80009e0 <convertCANid2Reg+0x9e>
        passedIdReg->tempEID8 = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	709a      	strb	r2, [r3, #2]
        passedIdReg->tempEID0 = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	70da      	strb	r2, [r3, #3]
        tempPassedInID <<= 5;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDL = (uint8_t)(tempPassedInID & 0xFF);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	705a      	strb	r2, [r3, #1]
        tempPassedInID >>= 8;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
        passedIdReg->tempSIDH = (uint8_t)(tempPassedInID & 0xFF);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	701a      	strb	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <compare_uint32_t>:

	CANSPI_Transmit(&diagMessage);
}

int compare_uint32_t(const void *a, const void *b) {
	return (*(uint32_t*)a - *(uint32_t*)b);
 80009ec:	6800      	ldr	r0, [r0, #0]
 80009ee:	680b      	ldr	r3, [r1, #0]
}
 80009f0:	1ac0      	subs	r0, r0, r3
 80009f2:	4770      	bx	lr

080009f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f8:	b08b      	sub	sp, #44	@ 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	2400      	movs	r4, #0
 80009fc:	9405      	str	r4, [sp, #20]
 80009fe:	9406      	str	r4, [sp, #24]
 8000a00:	9407      	str	r4, [sp, #28]
 8000a02:	9408      	str	r4, [sp, #32]
 8000a04:	9409      	str	r4, [sp, #36]	@ 0x24
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	9400      	str	r4, [sp, #0]
 8000a08:	4b62      	ldr	r3, [pc, #392]	@ (8000b94 <MX_GPIO_Init+0x1a0>)
 8000a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a0c:	f042 0204 	orr.w	r2, r2, #4
 8000a10:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a14:	f002 0204 	and.w	r2, r2, #4
 8000a18:	9200      	str	r2, [sp, #0]
 8000a1a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1c:	9401      	str	r4, [sp, #4]
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a24:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a28:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	9402      	str	r4, [sp, #8]
 8000a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a34:	f042 0201 	orr.w	r2, r2, #1
 8000a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a3c:	f002 0201 	and.w	r2, r2, #1
 8000a40:	9202      	str	r2, [sp, #8]
 8000a42:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	9403      	str	r4, [sp, #12]
 8000a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a48:	f042 0202 	orr.w	r2, r2, #2
 8000a4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a50:	f002 0202 	and.w	r2, r2, #2
 8000a54:	9203      	str	r2, [sp, #12]
 8000a56:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	9404      	str	r4, [sp, #16]
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a5c:	f042 0208 	orr.w	r2, r2, #8
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	9304      	str	r3, [sp, #16]
 8000a6a:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED1_Pin|PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 8000a6c:	4f4a      	ldr	r7, [pc, #296]	@ (8000b98 <MX_GPIO_Init+0x1a4>)
 8000a6e:	4622      	mov	r2, r4
 8000a70:	f240 3181 	movw	r1, #897	@ 0x381
 8000a74:	4638      	mov	r0, r7
 8000a76:	f003 f8a5 	bl	8003bc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	210e      	movs	r1, #14
 8000a7e:	4638      	mov	r0, r7
 8000a80:	f003 f8a0 	bl	8003bc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a84:	4e45      	ldr	r6, [pc, #276]	@ (8000b9c <MX_GPIO_Init+0x1a8>)
 8000a86:	4622      	mov	r2, r4
 8000a88:	2120      	movs	r1, #32
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	f003 f89a 	bl	8003bc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a90:	f8df a110 	ldr.w	sl, [pc, #272]	@ 8000ba4 <MX_GPIO_Init+0x1b0>
 8000a94:	2201      	movs	r2, #1
 8000a96:	2102      	movs	r1, #2
 8000a98:	4650      	mov	r0, sl
 8000a9a:	f003 f893 	bl	8003bc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f003 f88d 	bl	8003bc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000aaa:	2501      	movs	r5, #1
 8000aac:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	a905      	add	r1, sp, #20
 8000ab6:	4638      	mov	r0, r7
 8000ab8:	f002 fee8 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_CS_Pin */
	GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000abc:	f04f 0802 	mov.w	r8, #2
 8000ac0:	f8cd 8014 	str.w	r8, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac6:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	f04f 0903 	mov.w	r9, #3
 8000acc:	f8cd 9020 	str.w	r9, [sp, #32]
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	a905      	add	r1, sp, #20
 8000ad2:	4638      	mov	r0, r7
 8000ad4:	f002 feda 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
	GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8000ad8:	f04f 0b0c 	mov.w	fp, #12
 8000adc:	f8cd b014 	str.w	fp, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	a905      	add	r1, sp, #20
 8000ae8:	4638      	mov	r0, r7
 8000aea:	f002 fecf 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aee:	f8cd b014 	str.w	fp, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	f8cd 8018 	str.w	r8, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	f8cd 9020 	str.w	r9, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afc:	2307      	movs	r3, #7
 8000afe:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	a905      	add	r1, sp, #20
 8000b02:	4630      	mov	r0, r6
 8000b04:	f002 fec2 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b12:	a905      	add	r1, sp, #20
 8000b14:	4630      	mov	r0, r6
 8000b16:	f002 feb9 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b1a:	f8cd 8014 	str.w	r8, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	a905      	add	r1, sp, #20
 8000b26:	4650      	mov	r0, sl
 8000b28:	f002 feb0 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pins : RTD_BTN_Pin PB5 */
	GPIO_InitStruct.Pin = RTD_BTN_Pin|GPIO_PIN_5;
 8000b2c:	2324      	movs	r3, #36	@ 0x24
 8000b2e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	a905      	add	r1, sp, #20
 8000b36:	4650      	mov	r0, sl
 8000b38:	f002 fea8 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pins : PCHG_RLY_CTRL_Pin AIR_P_CTRL_Pin AIR_N_CTRL_Pin */
	GPIO_InitStruct.Pin = PCHG_RLY_CTRL_Pin|AIR_P_CTRL_Pin|AIR_N_CTRL_Pin;
 8000b3c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000b40:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b44:	f8cd 801c 	str.w	r8, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	a905      	add	r1, sp, #20
 8000b4c:	4638      	mov	r0, r7
 8000b4e:	f002 fe9d 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pin : PRECHARGE_BTN_Pin */
	GPIO_InitStruct.Pin = PRECHARGE_BTN_Pin;
 8000b52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b56:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(PRECHARGE_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	a905      	add	r1, sp, #20
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f002 fe94 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN2_CS_Pin */
	GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8000b64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b68:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	f8cd 9020 	str.w	r9, [sp, #32]
	HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b72:	a905      	add	r1, sp, #20
 8000b74:	4630      	mov	r0, r6
 8000b76:	f002 fe89 	bl	800388c <HAL_GPIO_Init>

	/*Configure GPIO pin : SHUTDOWN_Pin */
	GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b80:	f8cd 801c 	str.w	r8, [sp, #28]
	HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000b84:	a905      	add	r1, sp, #20
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_GPIO_Init+0x1ac>)
 8000b88:	f002 fe80 	bl	800388c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	b00b      	add	sp, #44	@ 0x2c
 8000b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <MX_DMA_Init>:
{
 8000ba8:	b510      	push	{r4, lr}
 8000baa:	b082      	sub	sp, #8
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000bac:	2400      	movs	r4, #0
 8000bae:	9400      	str	r4, [sp, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_DMA_Init+0x54>)
 8000bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bb4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000bb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bbc:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bc4:	9401      	str	r4, [sp, #4]
 8000bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bc8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bd8:	4622      	mov	r2, r4
 8000bda:	4621      	mov	r1, r4
 8000bdc:	200f      	movs	r0, #15
 8000bde:	f002 faae 	bl	800313e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f002 fac7 	bl	8003176 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000be8:	4622      	mov	r2, r4
 8000bea:	4621      	mov	r1, r4
 8000bec:	2038      	movs	r0, #56	@ 0x38
 8000bee:	f002 faa6 	bl	800313e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bf2:	2038      	movs	r0, #56	@ 0x38
 8000bf4:	f002 fabf 	bl	8003176 <HAL_NVIC_EnableIRQ>
}
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd10      	pop	{r4, pc}
 8000bfc:	40023800 	.word	0x40023800

08000c00 <sendDiagMsg>:
void sendDiagMsg(void) {
 8000c00:	b510      	push	{r4, lr}
	char msg0 = ((int)(inverter_diagnostics.carSpeed * 100) ) & 0xff;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <sendDiagMsg+0xac>)
 8000c04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c08:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000cb0 <sendDiagMsg+0xb0>
 8000c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c14:	ee17 3a90 	vmov	r3, s15
	char msg1 = (((int)(inverter_diagnostics.carSpeed * 100) ) >> 8) & 0xff;
 8000c18:	f3c3 2207 	ubfx	r2, r3, #8, #8
	diagMessage.frame.data0 = msg0; //feedback speed
 8000c1c:	4c25      	ldr	r4, [pc, #148]	@ (8000cb4 <sendDiagMsg+0xb4>)
 8000c1e:	7263      	strb	r3, [r4, #9]
	diagMessage.frame.data1 = msg1;
 8000c20:	72a2      	strb	r2, [r4, #10]
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8000c22:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <sendDiagMsg+0xb8>)
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	ee17 3a90 	vmov	r3, s15
	msg1 = (torqueValue >> 8) & 0xFF;
 8000c38:	f3c3 2207 	ubfx	r2, r3, #8, #8
	diagMessage.frame.data2 = msg0; // torque request
 8000c3c:	72e3      	strb	r3, [r4, #11]
	diagMessage.frame.data3 = msg1;
 8000c3e:	7322      	strb	r2, [r4, #12]
	diagMessage.frame.data4 = (int)(apps1_as_percent); //apps1%
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <sendDiagMsg+0xbc>)
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c4a:	ee17 3a90 	vmov	r3, s15
 8000c4e:	7363      	strb	r3, [r4, #13]
	diagMessage.frame.data5 = (int)(apps2_as_percent);
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <sendDiagMsg+0xc0>)
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	73a3      	strb	r3, [r4, #14]
	diagMessage.frame.data6 = bse_as_percent;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <sendDiagMsg+0xc4>)
 8000c62:	edd3 7a00 	vldr	s15, [r3]
 8000c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c6a:	ee17 3a90 	vmov	r3, s15
 8000c6e:	73e3      	strb	r3, [r4, #15]
	diagMessage.frame.data7 = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin) << 1;
 8000c70:	2104      	movs	r1, #4
 8000c72:	4815      	ldr	r0, [pc, #84]	@ (8000cc8 <sendDiagMsg+0xc8>)
 8000c74:	f002 ff8e 	bl	8003b94 <HAL_GPIO_ReadPin>
 8000c78:	0042      	lsls	r2, r0, #1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	7422      	strb	r2, [r4, #16]
	diagMessage.frame.data7 = (diagMessage.frame.data7 | readyToDrive) << 1;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <sendDiagMsg+0xcc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	0052      	lsls	r2, r2, #1
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	7422      	strb	r2, [r4, #16]
	diagMessage.frame.data7 = (diagMessage.frame.data7 | readyToDrive) << 1;
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	005a      	lsls	r2, r3, #1
 8000c8e:	7422      	strb	r2, [r4, #16]
	diagMessage.frame.data7 = diagMessage.frame.data7 << 3; //will set accy relay states as i go
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	7423      	strb	r3, [r4, #16]
	diagMessage.frame.data7 = (diagMessage.frame.data7 | cross_check_plausible) << 1;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <sendDiagMsg+0xd0>)
 8000c98:	8812      	ldrh	r2, [r2, #0]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	7423      	strb	r3, [r4, #16]
	CANSPI_Transmit(&diagMessage);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff fcec 	bl	8000680 <CANSPI_Transmit>
}
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	bf00      	nop
 8000cac:	2000005c 	.word	0x2000005c
 8000cb0:	42c80000 	.word	0x42c80000
 8000cb4:	20000118 	.word	0x20000118
 8000cb8:	200000b4 	.word	0x200000b4
 8000cbc:	20000090 	.word	0x20000090
 8000cc0:	2000008c 	.word	0x2000008c
 8000cc4:	20000088 	.word	0x20000088
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	20000085 	.word	0x20000085
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <median_uint32_t>:
uint32_t median_uint32_t(uint32_t *buffer, uint8_t size) {
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	460c      	mov	r4, r1
	memcpy(temp, buffer, size * sizeof(uint32_t));
 8000cda:	008a      	lsls	r2, r1, #2
 8000cdc:	4601      	mov	r1, r0
 8000cde:	a801      	add	r0, sp, #4
 8000ce0:	f006 f804 	bl	8006cec <memcpy>
	qsort(temp, size, sizeof(uint32_t), compare_uint32_t);
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <median_uint32_t+0x30>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4621      	mov	r1, r4
 8000cea:	eb0d 0002 	add.w	r0, sp, r2
 8000cee:	f005 fe8a 	bl	8006a06 <qsort>
	return temp[size / 2];
 8000cf2:	0864      	lsrs	r4, r4, #1
 8000cf4:	ab06      	add	r3, sp, #24
 8000cf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
}
 8000cfa:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	bf00      	nop
 8000d04:	080009ed 	.word	0x080009ed

08000d08 <updateRpm>:
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2 | (rxMessage.frame.data3 << 8));
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <updateRpm+0x38>)
 8000d0a:	7ad3      	ldrb	r3, [r2, #11]
 8000d0c:	7b12      	ldrb	r2, [r2, #12]
 8000d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <updateRpm+0x3c>)
 8000d20:	edc3 7a00 	vstr	s15, [r3]
	inverter_diagnostics.carSpeed = (float)(inverter_diagnostics.motorRpm) * RPM_TO_CARSPEED_CONVFACTOR;
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000d48 <updateRpm+0x40>
 8000d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d30:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000d4c <updateRpm+0x44>
 8000d34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d38:	ed83 7a02 	vstr	s14, [r3, #8]
}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000012c 	.word	0x2000012c
 8000d44:	2000005c 	.word	0x2000005c
 8000d48:	48adc4eb 	.word	0x48adc4eb
 8000d4c:	48e6af27 	.word	0x48e6af27

08000d50 <updateBMSDiagnostics>:
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data0 << 8) | rxMessage.frame.data1);  // Little-endian
 8000d50:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <updateBMSDiagnostics+0x4c>)
 8000d52:	7a53      	ldrb	r3, [r2, #9]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	7a91      	ldrb	r1, [r2, #10]
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	ee07 3a90 	vmov	s15, r3
	float pack_current = pack_current_raw * 0.1f;
 8000d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <updateBMSDiagnostics+0x50>
 8000d68:	ee67 7aa6 	vmul.f32	s15, s15, s13
	uint16_t pack_voltage_raw = (rxMessage.frame.data2 << 8) | rxMessage.frame.data3;
 8000d6c:	7ad1      	ldrb	r1, [r2, #11]
 8000d6e:	7b13      	ldrb	r3, [r2, #12]
 8000d70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000d74:	ee07 3a10 	vmov	s14, r3
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000d7c:	ee27 7a26 	vmul.f32	s14, s14, s13
	bool is_ready = (rxMessage.frame.data6) & 0x01;
 8000d80:	7bd2      	ldrb	r2, [r2, #15]
 8000d82:	f002 0201 	and.w	r2, r2, #1
	bms_diagnostics.inverterActive = is_ready ? 1 : 0;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <updateBMSDiagnostics+0x54>)
 8000d88:	601a      	str	r2, [r3, #0]
	bms_diagnostics.packCurrent    = (int)pack_current;
 8000d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8e:	edc3 7a02 	vstr	s15, [r3, #8]
	bms_diagnostics.packVoltage    = (int)pack_voltage;
 8000d92:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000d96:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8000d9a:	4770      	bx	lr
 8000d9c:	2000012c 	.word	0x2000012c
 8000da0:	3dcccccd 	.word	0x3dcccccd
 8000da4:	20000068 	.word	0x20000068

08000da8 <updateInverterVolts>:
	int16_t inverter_dc_volts_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000da8:	4a09      	ldr	r2, [pc, #36]	@ (8000dd0 <updateInverterVolts+0x28>)
 8000daa:	7a93      	ldrb	r3, [r2, #10]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	7a52      	ldrb	r2, [r2, #9]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	ee07 3a90 	vmov	s15, r3
	float inverter_dc_volts = inverter_dc_volts_raw * 0.1f;
 8000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dbc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000dd4 <updateInverterVolts+0x2c>
 8000dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
	inverter_diagnostics.inverterDCVolts    = (int)inverter_dc_volts;
 8000dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <updateInverterVolts+0x30>)
 8000dca:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000dce:	4770      	bx	lr
 8000dd0:	2000012c 	.word	0x2000012c
 8000dd4:	3dcccccd 	.word	0x3dcccccd
 8000dd8:	2000005c 	.word	0x2000005c

08000ddc <readFromCAN>:
void readFromCAN() {
 8000ddc:	b508      	push	{r3, lr}
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <readFromCAN+0x30>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2ba5      	cmp	r3, #165	@ 0xa5
 8000de4:	d009      	beq.n	8000dfa <readFromCAN+0x1e>
	if (rxMessage.frame.id == INVERTER_VOLTAGE_READ_ID) {
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <readFromCAN+0x30>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2ba7      	cmp	r3, #167	@ 0xa7
 8000dec:	d008      	beq.n	8000e00 <readFromCAN+0x24>
	if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <readFromCAN+0x30>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 6fd6 	cmp.w	r3, #1712	@ 0x6b0
 8000df6:	d006      	beq.n	8000e06 <readFromCAN+0x2a>
}
 8000df8:	bd08      	pop	{r3, pc}
		updateRpm();
 8000dfa:	f7ff ff85 	bl	8000d08 <updateRpm>
 8000dfe:	e7f2      	b.n	8000de6 <readFromCAN+0xa>
		updateInverterVolts();
 8000e00:	f7ff ffd2 	bl	8000da8 <updateInverterVolts>
 8000e04:	e7f3      	b.n	8000dee <readFromCAN+0x12>
		updateBMSDiagnostics();
 8000e06:	f7ff ffa3 	bl	8000d50 <updateBMSDiagnostics>
}
 8000e0a:	e7f5      	b.n	8000df8 <readFromCAN+0x1c>
 8000e0c:	2000012c 	.word	0x2000012c

08000e10 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000e10:	b538      	push	{r3, r4, r5, lr}
	apps1Buffer[adcBufferIndex] = ADC_Reads[APPS1_RANK-1];
 8000e12:	4916      	ldr	r1, [pc, #88]	@ (8000e6c <HAL_ADC_ConvCpltCallback+0x5c>)
 8000e14:	780b      	ldrb	r3, [r1, #0]
 8000e16:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <HAL_ADC_ConvCpltCallback+0x60>)
 8000e18:	6814      	ldr	r4, [r2, #0]
 8000e1a:	4816      	ldr	r0, [pc, #88]	@ (8000e74 <HAL_ADC_ConvCpltCallback+0x64>)
 8000e1c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	apps2Buffer[adcBufferIndex] = ADC_Reads[APPS2_RANK-1];
 8000e20:	6854      	ldr	r4, [r2, #4]
 8000e22:	4d15      	ldr	r5, [pc, #84]	@ (8000e78 <HAL_ADC_ConvCpltCallback+0x68>)
 8000e24:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	bseBuffer[adcBufferIndex]   = ADC_Reads[BSE_RANK-1];
 8000e28:	6892      	ldr	r2, [r2, #8]
 8000e2a:	4c14      	ldr	r4, [pc, #80]	@ (8000e7c <HAL_ADC_ConvCpltCallback+0x6c>)
 8000e2c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	adcBufferIndex = (adcBufferIndex + 1) % ADC_READ_BUFFER;
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <HAL_ADC_ConvCpltCallback+0x70>)
 8000e34:	fb83 c302 	smull	ip, r3, r3, r2
 8000e38:	105b      	asrs	r3, r3, #1
 8000e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	700b      	strb	r3, [r1, #0]
	apps1Value = median_uint32_t(apps1Buffer, ADC_READ_BUFFER);
 8000e42:	2105      	movs	r1, #5
 8000e44:	f7ff ff46 	bl	8000cd4 <median_uint32_t>
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_ADC_ConvCpltCallback+0x74>)
 8000e4a:	6018      	str	r0, [r3, #0]
	apps2Value = median_uint32_t(apps2Buffer, ADC_READ_BUFFER);
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f7ff ff40 	bl	8000cd4 <median_uint32_t>
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_ADC_ConvCpltCallback+0x78>)
 8000e56:	6018      	str	r0, [r3, #0]
	bseValue   = median_uint32_t(bseBuffer, ADC_READ_BUFFER);
 8000e58:	2105      	movs	r1, #5
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ff3a 	bl	8000cd4 <median_uint32_t>
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e62:	6018      	str	r0, [r3, #0]
	dma_read_complete = 1;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_ADC_ConvCpltCallback+0x80>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}
 8000e6c:	200000b8 	.word	0x200000b8
 8000e70:	20000094 	.word	0x20000094
 8000e74:	200000e4 	.word	0x200000e4
 8000e78:	200000d0 	.word	0x200000d0
 8000e7c:	200000bc 	.word	0x200000bc
 8000e80:	66666667 	.word	0x66666667
 8000e84:	20000100 	.word	0x20000100
 8000e88:	200000fc 	.word	0x200000fc
 8000e8c:	200000f8 	.word	0x200000f8
 8000e90:	20000002 	.word	0x20000002

08000e94 <calculateTorqueRequest>:
	float apps1_as_percent = ((float)apps1Value-APPS_1_ADC_MIN_VAL)/(APPS_1_ADC_MAX_VAL-APPS_1_ADC_MIN_VAL);
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <calculateTorqueRequest+0xc4>)
 8000e96:	ed93 7a00 	vldr	s14, [r3]
 8000e9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000e9e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8000f5c <calculateTorqueRequest+0xc8>
 8000ea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea6:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8000f60 <calculateTorqueRequest+0xcc>
 8000eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float apps2_as_percent = ((float)apps2Value-APPS_2_ADC_MIN_VAL)/(APPS_2_ADC_MAX_VAL-APPS_2_ADC_MIN_VAL);
 8000eae:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <calculateTorqueRequest+0xd0>)
 8000eb0:	ed93 7a00 	vldr	s14, [r3]
 8000eb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000eb8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000f68 <calculateTorqueRequest+0xd4>
 8000ebc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000ec0:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8000f6c <calculateTorqueRequest+0xd8>
 8000ec4:	eec7 6a06 	vdiv.f32	s13, s14, s12
	float appsValue = ((float)apps1_as_percent + apps2_as_percent)/2;
 8000ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ecc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
	if(appsValue >= 0){ //apps travel is in range for forward torque
 8000ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	db14      	blt.n	8000f08 <calculateTorqueRequest+0x74>
		requestedTorque = ((float)(MAX_TORQUE-MIN_TORQUE)) * appsValue + MIN_TORQUE;
 8000ede:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000f70 <calculateTorqueRequest+0xdc>
 8000ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <calculateTorqueRequest+0xe0>)
 8000ef0:	edc3 7a00 	vstr	s15, [r3]
		if (requestedTorque >= MAX_TORQUE) {
 8000ef4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000f78 <calculateTorqueRequest+0xe4>
 8000ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f00:	db28      	blt.n	8000f54 <calculateTorqueRequest+0xc0>
			requestedTorque = MAX_TORQUE;
 8000f02:	ed83 7a00 	vstr	s14, [r3]
 8000f06:	4770      	bx	lr
		if (inverter_diagnostics.carSpeed < 5.0f && VCUMODE != CALIBRATE_PEDALS) {
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <calculateTorqueRequest+0xe8>)
 8000f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0e:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 8000f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	d503      	bpl.n	8000f24 <calculateTorqueRequest+0x90>
			requestedTorque = 0;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <calculateTorqueRequest+0xe0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	4770      	bx	lr
			float bse_as_percent = ((float)bseValue-BSE_ADC_MIN_VAL)/(BSE_ADC_MAX_VAL-BSE_ADC_MIN_VAL);
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <calculateTorqueRequest+0xec>)
 8000f26:	ed93 7a00 	vldr	s14, [r3]
 8000f2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000f2e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8000f84 <calculateTorqueRequest+0xf0>
 8000f32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f36:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000f88 <calculateTorqueRequest+0xf4>
 8000f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
			requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)*bse_as_percent + REGEN_BASELINE_TORQUE;
 8000f3e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f46:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000f8c <calculateTorqueRequest+0xf8>
 8000f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <calculateTorqueRequest+0xe0>)
 8000f50:	edc3 7a00 	vstr	s15, [r3]
}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000100 	.word	0x20000100
 8000f5c:	439c0000 	.word	0x439c0000
 8000f60:	452f4000 	.word	0x452f4000
 8000f64:	200000fc 	.word	0x200000fc
 8000f68:	43ba0000 	.word	0x43ba0000
 8000f6c:	45512000 	.word	0x45512000
 8000f70:	42aa0000 	.word	0x42aa0000
 8000f74:	200000b4 	.word	0x200000b4
 8000f78:	42960000 	.word	0x42960000
 8000f7c:	2000005c 	.word	0x2000005c
 8000f80:	200000f8 	.word	0x200000f8
 8000f84:	43b98000 	.word	0x43b98000
 8000f88:	45682000 	.word	0x45682000
 8000f8c:	00000000 	.word	0x00000000

08000f90 <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000f90:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000f92:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <checkAPPSPlausibility+0xa0>)
 8000f94:	ed93 7a00 	vldr	s14, [r3]
 8000f98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000f9c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8001034 <checkAPPSPlausibility+0xa4>
 8000fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
							/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000fa4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001038 <checkAPPSPlausibility+0xa8>
 8000fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fac:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 800103c <checkAPPSPlausibility+0xac>
 8000fb0:	ee67 7a86 	vmul.f32	s15, s15, s12
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <checkAPPSPlausibility+0xb0>)
 8000fb6:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <checkAPPSPlausibility+0xb4>)
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000fc4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001048 <checkAPPSPlausibility+0xb8>
 8000fc8:	ee37 7a66 	vsub.f32	s14, s14, s13
							/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000fcc:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 800104c <checkAPPSPlausibility+0xbc>
 8000fd0:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8000fd4:	ee26 7a86 	vmul.f32	s14, s13, s12
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <checkAPPSPlausibility+0xc0>)
 8000fda:	ed83 7a00 	vstr	s14, [r3]
	float paininmyass = fabsf(apps1_as_percent - apps2_as_percent);
 8000fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
	if (fabsf(apps1_as_percent - apps2_as_percent)
 8000fe2:	eef0 7ae7 	vabs.f32	s15, s15
 8000fe6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	dc06      	bgt.n	8001002 <checkAPPSPlausibility+0x72>
	else if (!apps_plausible && (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <checkAPPSPlausibility+0xc4>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b173      	cbz	r3, 8001018 <checkAPPSPlausibility+0x88>
		apps_plausible = 1;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <checkAPPSPlausibility+0xc4>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	801a      	strh	r2, [r3, #0]
}
 8001000:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8001002:	f001 fa85 	bl	8002510 <HAL_GetTick>
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <checkAPPSPlausibility+0xc8>)
 8001008:	6018      	str	r0, [r3, #0]
		apps_plausible = 0;
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <checkAPPSPlausibility+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <checkAPPSPlausibility+0xcc>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e7f3      	b.n	8001000 <checkAPPSPlausibility+0x70>
	else if (!apps_plausible && (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8001018:	f001 fa7a 	bl	8002510 <HAL_GetTick>
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <checkAPPSPlausibility+0xc8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1ac0      	subs	r0, r0, r3
 8001022:	2863      	cmp	r0, #99	@ 0x63
 8001024:	d8e9      	bhi.n	8000ffa <checkAPPSPlausibility+0x6a>
		requestedTorque = 0;
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <checkAPPSPlausibility+0xcc>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e7e8      	b.n	8001000 <checkAPPSPlausibility+0x70>
 800102e:	bf00      	nop
 8001030:	20000100 	.word	0x20000100
 8001034:	439c0000 	.word	0x439c0000
 8001038:	452f4000 	.word	0x452f4000
 800103c:	42c80000 	.word	0x42c80000
 8001040:	20000090 	.word	0x20000090
 8001044:	200000fc 	.word	0x200000fc
 8001048:	43ba0000 	.word	0x43ba0000
 800104c:	45512000 	.word	0x45512000
 8001050:	2000008c 	.word	0x2000008c
 8001054:	20000004 	.word	0x20000004
 8001058:	200000a4 	.word	0x200000a4
 800105c:	200000b4 	.word	0x200000b4

08001060 <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8001060:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <checkCrossCheck+0xbc>)
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001120 <checkCrossCheck+0xc0>
 800106e:	ee77 7ac7 	vsub.f32	s15, s15, s14
							/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8001072:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001124 <checkCrossCheck+0xc4>
 8001076:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800107a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8001128 <checkCrossCheck+0xc8>
 800107e:	ee67 7a06 	vmul.f32	s15, s14, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <checkCrossCheck+0xcc>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <checkCrossCheck+0xd0>)
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001092:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8001134 <checkCrossCheck+0xd4>
 8001096:	ee37 7a67 	vsub.f32	s14, s14, s15
							/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 800109a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001138 <checkCrossCheck+0xd8>
 800109e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 80010a2:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <checkCrossCheck+0xdc>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80010b0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001140 <checkCrossCheck+0xe0>
 80010b4:	ee37 7a66 	vsub.f32	s14, s14, s13
							/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 80010b8:	eddf 5a22 	vldr	s11, [pc, #136]	@ 8001144 <checkCrossCheck+0xe4>
 80010bc:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 80010c0:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 80010c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010cc:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT &&
 80010d0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80010d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd0b      	ble.n	80010f6 <checkCrossCheck+0x96>
			bseValue > BRAKE_ACTIVATED_ADC_VAL)
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <checkCrossCheck+0xbc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT &&
 80010e2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80010e6:	d906      	bls.n	80010f6 <checkCrossCheck+0x96>
		cross_check_plausible = 0;
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <checkCrossCheck+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <checkCrossCheck+0xec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4770      	bx	lr
	else if (!cross_check_plausible &&
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <checkCrossCheck+0xe8>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b953      	cbnz	r3, 8001112 <checkCrossCheck+0xb2>
 80010fc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dd03      	ble.n	8001112 <checkCrossCheck+0xb2>
		requestedTorque = 0;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <checkCrossCheck+0xec>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	4770      	bx	lr
		cross_check_plausible = 1;
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <checkCrossCheck+0xe8>)
 8001114:	2201      	movs	r2, #1
 8001116:	801a      	strh	r2, [r3, #0]
}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200000f8 	.word	0x200000f8
 8001120:	43b98000 	.word	0x43b98000
 8001124:	45682000 	.word	0x45682000
 8001128:	42c80000 	.word	0x42c80000
 800112c:	20000088 	.word	0x20000088
 8001130:	20000100 	.word	0x20000100
 8001134:	439c0000 	.word	0x439c0000
 8001138:	452f4000 	.word	0x452f4000
 800113c:	200000fc 	.word	0x200000fc
 8001140:	43ba0000 	.word	0x43ba0000
 8001144:	45512000 	.word	0x45512000
 8001148:	20000000 	.word	0x20000000
 800114c:	200000b4 	.word	0x200000b4

08001150 <sendTorqueCommand>:
void sendTorqueCommand(void) {
 8001150:	b508      	push	{r3, lr}
	if (requestedTorque >= 94) {
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <sendTorqueCommand+0x70>)
 8001154:	ed93 7a00 	vldr	s14, [r3]
 8001158:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80011c4 <sendTorqueCommand+0x74>
 800115c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	db01      	blt.n	800116a <sendTorqueCommand+0x1a>
		requestedTorque = 94;
 8001166:	edc3 7a00 	vstr	s15, [r3]
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <sendTorqueCommand+0x70>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800117c:	ee17 2a90 	vmov	r2, s15
	uint8_t msg1 = (uint8_t)((torqueValue >> 8) & 0xFF);
 8001180:	f3c2 2107 	ubfx	r1, r2, #8, #8
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <sendTorqueCommand+0x78>)
 8001186:	2001      	movs	r0, #1
 8001188:	7018      	strb	r0, [r3, #0]
	txMessage.frame.id     = 0x0C0;
 800118a:	20c0      	movs	r0, #192	@ 0xc0
 800118c:	6058      	str	r0, [r3, #4]
	txMessage.frame.dlc    = 8;
 800118e:	2008      	movs	r0, #8
 8001190:	7218      	strb	r0, [r3, #8]
	txMessage.frame.data0 = msg0; //torque request
 8001192:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1 = msg1;
 8001194:	7299      	strb	r1, [r3, #10]
	txMessage.frame.data2 = 0; // speed request (only maters in speed mode)
 8001196:	2200      	movs	r2, #0
 8001198:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = 0;
 800119a:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = 0; //direction
 800119c:	735a      	strb	r2, [r3, #13]
	if(beginTorqueRequests){
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <sendTorqueCommand+0x7c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b14b      	cbz	r3, 80011b8 <sendTorqueCommand+0x68>
		txMessage.frame.data5 = 1;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <sendTorqueCommand+0x78>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = 0;
 80011aa:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <sendTorqueCommand+0x78>)
 80011ac:	2300      	movs	r3, #0
 80011ae:	73c3      	strb	r3, [r0, #15]
	txMessage.frame.data7 = 0;
 80011b0:	7403      	strb	r3, [r0, #16]
	CANSPI_Transmit(&txMessage);
 80011b2:	f7ff fa65 	bl	8000680 <CANSPI_Transmit>
}
 80011b6:	bd08      	pop	{r3, pc}
		txMessage.frame.data5 = 0;
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <sendTorqueCommand+0x78>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	739a      	strb	r2, [r3, #14]
 80011be:	e7f4      	b.n	80011aa <sendTorqueCommand+0x5a>
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	42bc0000 	.word	0x42bc0000
 80011c8:	20000140 	.word	0x20000140
 80011cc:	200000a8 	.word	0x200000a8

080011d0 <checkShutdown>:
void checkShutdown(){
 80011d0:	b510      	push	{r4, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 80011d2:	2104      	movs	r1, #4
 80011d4:	482c      	ldr	r0, [pc, #176]	@ (8001288 <checkShutdown+0xb8>)
 80011d6:	f002 fcdd 	bl	8003b94 <HAL_GPIO_ReadPin>
 80011da:	4604      	mov	r4, r0
	sendDiagMsg();
 80011dc:	f7ff fd10 	bl	8000c00 <sendDiagMsg>
	if (pinState == GPIO_PIN_RESET) {
 80011e0:	b104      	cbz	r4, 80011e4 <checkShutdown+0x14>
}
 80011e2:	bd10      	pop	{r4, pc}
		requestedTorque = 0;
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <checkShutdown+0xbc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 80011ea:	f7ff ffb1 	bl	8001150 <sendTorqueCommand>
		txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80011ee:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <checkShutdown+0xc0>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(AIR_P_CTRL_GPIO_Port, AIR_P_CTRL_Pin, GPIO_PIN_RESET); //steps 1 and 2
 80011f4:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80011f8:	f504 3402 	add.w	r4, r4, #133120	@ 0x20800
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001202:	4620      	mov	r0, r4
 8001204:	f002 fcde 	bl	8003bc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001208:	2005      	movs	r0, #5
 800120a:	f001 f98d 	bl	8002528 <HAL_Delay>
		HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_RESET); //steps 1 and 2
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001214:	4620      	mov	r0, r4
 8001216:	f002 fcd5 	bl	8003bc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800121a:	2005      	movs	r0, #5
 800121c:	f001 f984 	bl	8002528 <HAL_Delay>
		HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET); //steps 1 and 2
 8001220:	2200      	movs	r2, #0
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	4620      	mov	r0, r4
 8001226:	f002 fccd 	bl	8003bc4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800122a:	2005      	movs	r0, #5
 800122c:	f001 f97c 	bl	8002528 <HAL_Delay>
		readyToDrive = false;
 8001230:	2400      	movs	r4, #0
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <checkShutdown+0xc4>)
 8001234:	701c      	strb	r4, [r3, #0]
		prechargeState = false;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <checkShutdown+0xc8>)
 8001238:	701c      	strb	r4, [r3, #0]
		rtdState = false;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <checkShutdown+0xcc>)
 800123c:	701c      	strb	r4, [r3, #0]
		prechargeFinished = false;
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <checkShutdown+0xd0>)
 8001240:	701c      	strb	r4, [r3, #0]
		cpockandballs = 0;
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <checkShutdown+0xd4>)
 8001244:	601c      	str	r4, [r3, #0]
		for (int i = 0; i < 3; i++) {
 8001246:	e010      	b.n	800126a <checkShutdown+0x9a>
			txMessage.frame.id = 0x0C0;
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <checkShutdown+0xc0>)
 800124a:	23c0      	movs	r3, #192	@ 0xc0
 800124c:	6043      	str	r3, [r0, #4]
			txMessage.frame.dlc = 8;
 800124e:	2308      	movs	r3, #8
 8001250:	7203      	strb	r3, [r0, #8]
			txMessage.frame.data0 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	7243      	strb	r3, [r0, #9]
			txMessage.frame.data1 = 0;
 8001256:	7283      	strb	r3, [r0, #10]
			txMessage.frame.data2 = 0;
 8001258:	72c3      	strb	r3, [r0, #11]
			txMessage.frame.data3 = 0;
 800125a:	7303      	strb	r3, [r0, #12]
			txMessage.frame.data4 = 0;
 800125c:	7343      	strb	r3, [r0, #13]
			txMessage.frame.data5 = 0;
 800125e:	7383      	strb	r3, [r0, #14]
			txMessage.frame.data6 = 0;
 8001260:	73c3      	strb	r3, [r0, #15]
			txMessage.frame.data7 = 0;
 8001262:	7403      	strb	r3, [r0, #16]
			CANSPI_Transmit(&txMessage);
 8001264:	f7ff fa0c 	bl	8000680 <CANSPI_Transmit>
		for (int i = 0; i < 3; i++) {
 8001268:	3401      	adds	r4, #1
 800126a:	2c02      	cmp	r4, #2
 800126c:	ddec      	ble.n	8001248 <checkShutdown+0x78>
		diagMessage.frame.data7 = diagMessage.frame.data7 & 0b00000110;
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <checkShutdown+0xd8>)
 8001270:	7c13      	ldrb	r3, [r2, #16]
 8001272:	f003 0306 	and.w	r3, r3, #6
 8001276:	7413      	strb	r3, [r2, #16]
		sendDiagMsg();
 8001278:	f7ff fcc2 	bl	8000c00 <sendDiagMsg>
		HAL_Delay(5000);
 800127c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001280:	f001 f952 	bl	8002528 <HAL_Delay>
}
 8001284:	e7ad      	b.n	80011e2 <checkShutdown+0x12>
 8001286:	bf00      	nop
 8001288:	40020c00 	.word	0x40020c00
 800128c:	200000b4 	.word	0x200000b4
 8001290:	20000140 	.word	0x20000140
 8001294:	20000085 	.word	0x20000085
 8001298:	20000079 	.word	0x20000079
 800129c:	20000084 	.word	0x20000084
 80012a0:	20000078 	.word	0x20000078
 80012a4:	20000080 	.word	0x20000080
 80012a8:	20000118 	.word	0x20000118

080012ac <sendFanCommand>:
void sendFanCommand(void) {
 80012ac:	b508      	push	{r3, lr}
	fanMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <sendFanCommand+0x34>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
	fanMessage.frame.id = 0x501;
 80012b4:	f240 5201 	movw	r2, #1281	@ 0x501
 80012b8:	605a      	str	r2, [r3, #4]
	fanMessage.frame.dlc = 2;
 80012ba:	2202      	movs	r2, #2
 80012bc:	721a      	strb	r2, [r3, #8]
	if (readyToDrive) {
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <sendFanCommand+0x38>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b13b      	cbz	r3, 80012d4 <sendFanCommand+0x28>
		fanMessage.frame.data0 = 0xFF;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <sendFanCommand+0x34>)
 80012c6:	22ff      	movs	r2, #255	@ 0xff
 80012c8:	725a      	strb	r2, [r3, #9]
		fanMessage.frame.data1 = 0xFF;
 80012ca:	729a      	strb	r2, [r3, #10]
	CANSPI_Transmit(&diagMessage);
 80012cc:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <sendFanCommand+0x3c>)
 80012ce:	f7ff f9d7 	bl	8000680 <CANSPI_Transmit>
}
 80012d2:	bd08      	pop	{r3, pc}
		fanMessage.frame.data0 = 0x00;
 80012d4:	4b02      	ldr	r3, [pc, #8]	@ (80012e0 <sendFanCommand+0x34>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	725a      	strb	r2, [r3, #9]
		fanMessage.frame.data1 = 0x00;
 80012da:	729a      	strb	r2, [r3, #10]
 80012dc:	e7f6      	b.n	80012cc <sendFanCommand+0x20>
 80012de:	bf00      	nop
 80012e0:	20000104 	.word	0x20000104
 80012e4:	20000085 	.word	0x20000085
 80012e8:	20000118 	.word	0x20000118

080012ec <checkReadyToDrive>:
void checkReadyToDrive(void) {
 80012ec:	b538      	push	{r3, r4, r5, lr}
	pinState = HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port, RTD_BTN_Pin);
 80012ee:	4d20      	ldr	r5, [pc, #128]	@ (8001370 <checkReadyToDrive+0x84>)
 80012f0:	2104      	movs	r1, #4
 80012f2:	4628      	mov	r0, r5
 80012f4:	f002 fc4e 	bl	8003b94 <HAL_GPIO_ReadPin>
 80012f8:	4c1e      	ldr	r4, [pc, #120]	@ (8001374 <checkReadyToDrive+0x88>)
 80012fa:	7020      	strb	r0, [r4, #0]
	penispenispenis = HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port, RTD_BTN_Pin);
 80012fc:	2104      	movs	r1, #4
 80012fe:	4628      	mov	r0, r5
 8001300:	f002 fc48 	bl	8003b94 <HAL_GPIO_ReadPin>
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <checkReadyToDrive+0x8c>)
 8001306:	6018      	str	r0, [r3, #0]
	cpockandballs = HAL_GetTick() -millis_RTD;
 8001308:	f001 f902 	bl	8002510 <HAL_GetTick>
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <checkReadyToDrive+0x90>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1ac0      	subs	r0, r0, r3
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <checkReadyToDrive+0x94>)
 8001314:	6018      	str	r0, [r3, #0]
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8001316:	7823      	ldrb	r3, [r4, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00c      	beq.n	8001336 <checkReadyToDrive+0x4a>
	else if (pinState == GPIO_PIN_RESET || bseValue < BRAKE_ACTIVATED_ADC_VAL || !bms_diagnostics.inverterActive ){
 800131c:	b13b      	cbz	r3, 800132e <checkReadyToDrive+0x42>
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <checkReadyToDrive+0x98>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001326:	d302      	bcc.n	800132e <checkReadyToDrive+0x42>
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <checkReadyToDrive+0x9c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b9c3      	cbnz	r3, 8001360 <checkReadyToDrive+0x74>
		rtdState = false;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <checkReadyToDrive+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
}
 8001334:	bd38      	pop	{r3, r4, r5, pc}
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && bms_diagnostics.inverterActive &&!rtdState) {
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <checkReadyToDrive+0x98>)
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800133e:	d9ed      	bls.n	800131c <checkReadyToDrive+0x30>
 8001340:	4a11      	ldr	r2, [pc, #68]	@ (8001388 <checkReadyToDrive+0x9c>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	2a00      	cmp	r2, #0
 8001346:	d0e9      	beq.n	800131c <checkReadyToDrive+0x30>
 8001348:	4a10      	ldr	r2, [pc, #64]	@ (800138c <checkReadyToDrive+0xa0>)
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	2a00      	cmp	r2, #0
 800134e:	d1e5      	bne.n	800131c <checkReadyToDrive+0x30>
		rtdState = true;
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <checkReadyToDrive+0xa0>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
		millis_RTD = HAL_GetTick();
 8001356:	f001 f8db 	bl	8002510 <HAL_GetTick>
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <checkReadyToDrive+0x90>)
 800135c:	6018      	str	r0, [r3, #0]
 800135e:	e7e9      	b.n	8001334 <checkReadyToDrive+0x48>
	else if(cpockandballs >= RTD_BUTTON_PRESS_MILLIS){
 8001360:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001364:	d3e6      	bcc.n	8001334 <checkReadyToDrive+0x48>
		readyToDrive = true;
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <checkReadyToDrive+0xa4>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
}
 800136c:	e7e2      	b.n	8001334 <checkReadyToDrive+0x48>
 800136e:	bf00      	nop
 8001370:	40020400 	.word	0x40020400
 8001374:	20000044 	.word	0x20000044
 8001378:	20000048 	.word	0x20000048
 800137c:	2000007c 	.word	0x2000007c
 8001380:	20000080 	.word	0x20000080
 8001384:	200000f8 	.word	0x200000f8
 8001388:	20000068 	.word	0x20000068
 800138c:	20000084 	.word	0x20000084
 8001390:	20000085 	.word	0x20000085

08001394 <prechargeSequence>:
uint8_t prechargeSequence(void){
 8001394:	b538      	push	{r3, r4, r5, lr}
	startPrechargeTime = HAL_GetTick();
 8001396:	f001 f8bb 	bl	8002510 <HAL_GetTick>
 800139a:	4d4c      	ldr	r5, [pc, #304]	@ (80014cc <prechargeSequence+0x138>)
 800139c:	6028      	str	r0, [r5, #0]
	HAL_Delay(10);
 800139e:	200a      	movs	r0, #10
 80013a0:	f001 f8c2 	bl	8002528 <HAL_Delay>
	diagMessage.frame.data7 = diagMessage.frame.data7 | 0b00110000;
 80013a4:	4a4a      	ldr	r2, [pc, #296]	@ (80014d0 <prechargeSequence+0x13c>)
 80013a6:	7c13      	ldrb	r3, [r2, #16]
 80013a8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80013ac:	7413      	strb	r3, [r2, #16]
	sendDiagMsg();
 80013ae:	f7ff fc27 	bl	8000c00 <sendDiagMsg>
	HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_SET); //steps 1 and 2
 80013b2:	4c48      	ldr	r4, [pc, #288]	@ (80014d4 <prechargeSequence+0x140>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	4620      	mov	r0, r4
 80013ba:	f002 fc03 	bl	8003bc4 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 80013be:	2003      	movs	r0, #3
 80013c0:	f001 f8b2 	bl	8002528 <HAL_Delay>
	HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_SET); //steps 1 and 2
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ca:	4620      	mov	r0, r4
 80013cc:	f002 fbfa 	bl	8003bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIR_P_CTRL_GPIO_Port, AIR_P_CTRL_Pin, GPIO_PIN_RESET); //steps 1 and 2
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d6:	4620      	mov	r0, r4
 80013d8:	f002 fbf4 	bl	8003bc4 <HAL_GPIO_WritePin>
	penis = HAL_GetTick() - startPrechargeTime;
 80013dc:	f001 f898 	bl	8002510 <HAL_GetTick>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	1ac0      	subs	r0, r0, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <prechargeSequence+0x144>)
 80013e6:	6018      	str	r0, [r3, #0]
	while (penis < PRECHARGE_TIMEOUT_MS && HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin) == GPIO_PIN_SET) { //loop for 4
 80013e8:	e00f      	b.n	800140a <prechargeSequence+0x76>
		if (bms_diagnostics.packVoltage - inverter_diagnostics.inverterDCVolts < PRECHARGE_VOLTAGE_DIFF) {
 80013ea:	4b3c      	ldr	r3, [pc, #240]	@ (80014dc <prechargeSequence+0x148>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a3c      	ldr	r2, [pc, #240]	@ (80014e0 <prechargeSequence+0x14c>)
 80013f0:	6852      	ldr	r2, [r2, #4]
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	2b18      	cmp	r3, #24
 80013f6:	dd1d      	ble.n	8001434 <prechargeSequence+0xa0>
		penis = HAL_GetTick() - startPrechargeTime;
 80013f8:	f001 f88a 	bl	8002510 <HAL_GetTick>
 80013fc:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <prechargeSequence+0x138>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1ac0      	subs	r0, r0, r3
 8001402:	4b35      	ldr	r3, [pc, #212]	@ (80014d8 <prechargeSequence+0x144>)
 8001404:	6018      	str	r0, [r3, #0]
		sendDiagMsg();
 8001406:	f7ff fbfb 	bl	8000c00 <sendDiagMsg>
	while (penis < PRECHARGE_TIMEOUT_MS && HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin) == GPIO_PIN_SET) { //loop for 4
 800140a:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <prechargeSequence+0x144>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001412:	429a      	cmp	r2, r3
 8001414:	d82f      	bhi.n	8001476 <prechargeSequence+0xe2>
 8001416:	2104      	movs	r1, #4
 8001418:	4832      	ldr	r0, [pc, #200]	@ (80014e4 <prechargeSequence+0x150>)
 800141a:	f002 fbbb 	bl	8003b94 <HAL_GPIO_ReadPin>
 800141e:	4604      	mov	r4, r0
 8001420:	2801      	cmp	r0, #1
 8001422:	d128      	bne.n	8001476 <prechargeSequence+0xe2>
		if (CANSPI_Receive(&rxMessage)) {
 8001424:	4830      	ldr	r0, [pc, #192]	@ (80014e8 <prechargeSequence+0x154>)
 8001426:	f7ff f9bf 	bl	80007a8 <CANSPI_Receive>
 800142a:	2800      	cmp	r0, #0
 800142c:	d0dd      	beq.n	80013ea <prechargeSequence+0x56>
			readFromCAN();
 800142e:	f7ff fcd5 	bl	8000ddc <readFromCAN>
 8001432:	e7da      	b.n	80013ea <prechargeSequence+0x56>
			HAL_GPIO_WritePin(AIR_P_CTRL_GPIO_Port, AIR_P_CTRL_Pin, GPIO_PIN_SET); //step 4
 8001434:	4d27      	ldr	r5, [pc, #156]	@ (80014d4 <prechargeSequence+0x140>)
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143c:	4628      	mov	r0, r5
 800143e:	f002 fbc1 	bl	8003bc4 <HAL_GPIO_WritePin>
			HAL_Delay(5);
 8001442:	2005      	movs	r0, #5
 8001444:	f001 f870 	bl	8002528 <HAL_Delay>
			HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	4628      	mov	r0, r5
 800144e:	f002 fbb9 	bl	8003bc4 <HAL_GPIO_WritePin>
			prechargeFinished = true;
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <prechargeSequence+0x158>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
			penispenispenis = bms_diagnostics.packVoltage - inverter_diagnostics.inverterDCVolts;
 8001458:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <prechargeSequence+0x148>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <prechargeSequence+0x14c>)
 800145e:	6852      	ldr	r2, [r2, #4]
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	4a23      	ldr	r2, [pc, #140]	@ (80014f0 <prechargeSequence+0x15c>)
 8001464:	6013      	str	r3, [r2, #0]
			diagMessage.frame.data7 = diagMessage.frame.data7 | 0b00011000;
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <prechargeSequence+0x13c>)
 8001468:	7c13      	ldrb	r3, [r2, #16]
 800146a:	f043 0318 	orr.w	r3, r3, #24
 800146e:	7413      	strb	r3, [r2, #16]
			sendDiagMsg();
 8001470:	f7ff fbc6 	bl	8000c00 <sendDiagMsg>
			return 1;
 8001474:	e027      	b.n	80014c6 <prechargeSequence+0x132>
	HAL_GPIO_WritePin(PCHG_RLY_CTRL_GPIO_Port, PCHG_RLY_CTRL_Pin, GPIO_PIN_RESET);
 8001476:	4c17      	ldr	r4, [pc, #92]	@ (80014d4 <prechargeSequence+0x140>)
 8001478:	2200      	movs	r2, #0
 800147a:	2180      	movs	r1, #128	@ 0x80
 800147c:	4620      	mov	r0, r4
 800147e:	f002 fba1 	bl	8003bc4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001482:	2005      	movs	r0, #5
 8001484:	f001 f850 	bl	8002528 <HAL_Delay>
	HAL_GPIO_WritePin(AIR_N_CTRL_GPIO_Port, AIR_N_CTRL_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148e:	4620      	mov	r0, r4
 8001490:	f002 fb98 	bl	8003bc4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001494:	2005      	movs	r0, #5
 8001496:	f001 f847 	bl	8002528 <HAL_Delay>
	HAL_GPIO_WritePin(AIR_P_CTRL_GPIO_Port, AIR_P_CTRL_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a0:	4620      	mov	r0, r4
 80014a2:	f002 fb8f 	bl	8003bc4 <HAL_GPIO_WritePin>
	diagMessage.frame.data7 = diagMessage.frame.data7 & 0b11000111;
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <prechargeSequence+0x13c>)
 80014a8:	7c13      	ldrb	r3, [r2, #16]
 80014aa:	f003 03c7 	and.w	r3, r3, #199	@ 0xc7
 80014ae:	7413      	strb	r3, [r2, #16]
	sendDiagMsg();
 80014b0:	f7ff fba6 	bl	8000c00 <sendDiagMsg>
	HAL_Delay(5000);
 80014b4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014b8:	f001 f836 	bl	8002528 <HAL_Delay>
	prechargeState = false;
 80014bc:	2400      	movs	r4, #0
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <prechargeSequence+0x160>)
 80014c0:	701c      	strb	r4, [r3, #0]
	prechargeFinished = false;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <prechargeSequence+0x158>)
 80014c4:	701c      	strb	r4, [r3, #0]
}
 80014c6:	4620      	mov	r0, r4
 80014c8:	bd38      	pop	{r3, r4, r5, pc}
 80014ca:	bf00      	nop
 80014cc:	20000040 	.word	0x20000040
 80014d0:	20000118 	.word	0x20000118
 80014d4:	40020800 	.word	0x40020800
 80014d8:	2000003c 	.word	0x2000003c
 80014dc:	20000068 	.word	0x20000068
 80014e0:	2000005c 	.word	0x2000005c
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	2000012c 	.word	0x2000012c
 80014ec:	20000078 	.word	0x20000078
 80014f0:	20000048 	.word	0x20000048
 80014f4:	20000079 	.word	0x20000079

080014f8 <sendPrechargeRequest>:
void sendPrechargeRequest(void){
 80014f8:	b508      	push	{r3, lr}
	while(!prechargeFinished){
 80014fa:	e015      	b.n	8001528 <sendPrechargeRequest+0x30>
			readFromCAN();
 80014fc:	f7ff fc6e 	bl	8000ddc <readFromCAN>
 8001500:	e01c      	b.n	800153c <sendPrechargeRequest+0x44>
			if(pinState == GPIO_PIN_SET && !prechargeState){
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <sendPrechargeRequest+0x6c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	bb03      	cbnz	r3, 800154a <sendPrechargeRequest+0x52>
				prechargeState = true;
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <sendPrechargeRequest+0x6c>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
				millis_precharge = HAL_GetTick();
 800150e:	f000 ffff 	bl	8002510 <HAL_GetTick>
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <sendPrechargeRequest+0x70>)
 8001514:	6018      	str	r0, [r3, #0]
 8001516:	e007      	b.n	8001528 <sendPrechargeRequest+0x30>
			else if(HAL_GetTick()-millis_precharge >= PRECHARGE_BUTTON_PRESS_MILLIS){
 8001518:	f000 fffa 	bl	8002510 <HAL_GetTick>
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <sendPrechargeRequest+0x70>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	1ac0      	subs	r0, r0, r3
 8001522:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001526:	d216      	bcs.n	8001556 <sendPrechargeRequest+0x5e>
	while(!prechargeFinished){
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <sendPrechargeRequest+0x74>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b9cb      	cbnz	r3, 8001562 <sendPrechargeRequest+0x6a>
		sendDiagMsg();
 800152e:	f7ff fb67 	bl	8000c00 <sendDiagMsg>
		if (CANSPI_Receive(&rxMessage)) {
 8001532:	480f      	ldr	r0, [pc, #60]	@ (8001570 <sendPrechargeRequest+0x78>)
 8001534:	f7ff f938 	bl	80007a8 <CANSPI_Receive>
 8001538:	2800      	cmp	r0, #0
 800153a:	d1df      	bne.n	80014fc <sendPrechargeRequest+0x4>
		uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_BTN_GPIO_Port, PRECHARGE_BTN_Pin);
 800153c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <sendPrechargeRequest+0x7c>)
 8001542:	f002 fb27 	bl	8003b94 <HAL_GPIO_ReadPin>
			if(pinState == GPIO_PIN_SET && !prechargeState){
 8001546:	2801      	cmp	r0, #1
 8001548:	d0db      	beq.n	8001502 <sendPrechargeRequest+0xa>
			else if (pinState == GPIO_PIN_RESET){
 800154a:	2800      	cmp	r0, #0
 800154c:	d1e4      	bne.n	8001518 <sendPrechargeRequest+0x20>
				prechargeState = false;
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <sendPrechargeRequest+0x6c>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e7e8      	b.n	8001528 <sendPrechargeRequest+0x30>
				prechargeSequence();
 8001556:	f7ff ff1d 	bl	8001394 <prechargeSequence>
				prechargeFinished = true;
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <sendPrechargeRequest+0x74>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e7e2      	b.n	8001528 <sendPrechargeRequest+0x30>
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	20000079 	.word	0x20000079
 8001568:	20000074 	.word	0x20000074
 800156c:	20000078 	.word	0x20000078
 8001570:	2000012c 	.word	0x2000012c
 8001574:	40020000 	.word	0x40020000

08001578 <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_I2S_TxCpltCallback+0x50>)
 800157c:	429a      	cmp	r2, r3
 800157e:	d000      	beq.n	8001582 <HAL_I2S_TxCpltCallback+0xa>
 8001580:	4770      	bx	lr
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_I2S_TxCpltCallback+0x54>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1fa      	bne.n	8001580 <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_I2S_TxCpltCallback+0x58>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a11      	ldr	r2, [pc, #68]	@ (80015d4 <HAL_I2S_TxCpltCallback+0x5c>)
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	4293      	cmp	r3, r2
 8001594:	d214      	bcs.n	80015c0 <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001596:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 8001598:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS)
 800159a:	f247 5130 	movw	r1, #30000	@ 0x7530
 800159e:	428a      	cmp	r2, r1
 80015a0:	d80b      	bhi.n	80015ba <HAL_I2S_TxCpltCallback+0x42>
 80015a2:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <HAL_I2S_TxCpltCallback+0x60>)
 80015a6:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 80015a8:	18d4      	adds	r4, r2, r3
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <HAL_I2S_TxCpltCallback+0x58>)
 80015ac:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)chunkPtr, thisChunk);
 80015ae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80015b2:	480a      	ldr	r0, [pc, #40]	@ (80015dc <HAL_I2S_TxCpltCallback+0x64>)
 80015b4:	f002 fc60 	bl	8003e78 <HAL_I2S_Transmit_DMA>
}
 80015b8:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS)
 80015ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80015be:	e7f1      	b.n	80015a4 <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 80015c0:	4b02      	ldr	r3, [pc, #8]	@ (80015cc <HAL_I2S_TxCpltCallback+0x54>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
}
 80015c6:	4770      	bx	lr
 80015c8:	40003800 	.word	0x40003800
 80015cc:	2000004c 	.word	0x2000004c
 80015d0:	20000058 	.word	0x20000058
 80015d4:	20000050 	.word	0x20000050
 80015d8:	20000054 	.word	0x20000054
 80015dc:	2000029c 	.word	0x2000029c

080015e0 <PlayStartupSoundOnce>:
void PlayStartupSoundOnce(void) {
 80015e0:	b508      	push	{r3, lr}
	wavePCM = (const uint16_t*)(&startup_sound[WAV_HEADER_SIZE]);
 80015e2:	4909      	ldr	r1, [pc, #36]	@ (8001608 <PlayStartupSoundOnce+0x28>)
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <PlayStartupSoundOnce+0x2c>)
 80015e6:	6019      	str	r1, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <PlayStartupSoundOnce+0x30>)
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <PlayStartupSoundOnce+0x34>)
 80015ec:	601a      	str	r2, [r3, #0]
	wavPos        = 0;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <PlayStartupSoundOnce+0x38>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
	waveFinished  = 0;
 80015f4:	4809      	ldr	r0, [pc, #36]	@ (800161c <PlayStartupSoundOnce+0x3c>)
 80015f6:	7002      	strb	r2, [r0, #0]
	wavPos += thisChunk;
 80015f8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80015fc:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)chunkPtr, thisChunk);
 80015fe:	4808      	ldr	r0, [pc, #32]	@ (8001620 <PlayStartupSoundOnce+0x40>)
 8001600:	f002 fc3a 	bl	8003e78 <HAL_I2S_Transmit_DMA>
}
 8001604:	bd08      	pop	{r3, pc}
 8001606:	bf00      	nop
 8001608:	08006d4c 	.word	0x08006d4c
 800160c:	20000054 	.word	0x20000054
 8001610:	20000050 	.word	0x20000050
 8001614:	0003784e 	.word	0x0003784e
 8001618:	20000058 	.word	0x20000058
 800161c:	2000004c 	.word	0x2000004c
 8001620:	2000029c 	.word	0x2000029c

08001624 <lookForRTD>:
void lookForRTD(void) {
 8001624:	b538      	push	{r3, r4, r5, lr}
	if (rtdoverride == 1) {
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <lookForRTD+0xd4>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d005      	beq.n	800163a <lookForRTD+0x16>
	diagMessage.frame.data7 = diagMessage.frame.data7 | 1;
 800162e:	4a33      	ldr	r2, [pc, #204]	@ (80016fc <lookForRTD+0xd8>)
 8001630:	7c13      	ldrb	r3, [r2, #16]
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	7413      	strb	r3, [r2, #16]
	while(!readyToDrive) {
 8001638:	e03b      	b.n	80016b2 <lookForRTD+0x8e>
		beginTorqueRequests = true;
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <lookForRTD+0xdc>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
		PlayStartupSoundOnce();
 8001640:	f7ff ffce 	bl	80015e0 <PlayStartupSoundOnce>
}
 8001644:	bd38      	pop	{r3, r4, r5, pc}
			readFromCAN();
 8001646:	f7ff fbc9 	bl	8000ddc <readFromCAN>
 800164a:	e03b      	b.n	80016c4 <lookForRTD+0xa0>
			HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 800164c:	2203      	movs	r2, #3
 800164e:	492d      	ldr	r1, [pc, #180]	@ (8001704 <lookForRTD+0xe0>)
 8001650:	482d      	ldr	r0, [pc, #180]	@ (8001708 <lookForRTD+0xe4>)
 8001652:	f001 f8e1 	bl	8002818 <HAL_ADC_Start_DMA>
			dma_read_complete = 0;
 8001656:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <lookForRTD+0xe8>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
			millis_since_dma_read = HAL_GetTick();
 800165c:	f000 ff58 	bl	8002510 <HAL_GetTick>
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <lookForRTD+0xec>)
 8001662:	6018      	str	r0, [r3, #0]
 8001664:	e032      	b.n	80016cc <lookForRTD+0xa8>
				beginTorqueRequests = true;
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <lookForRTD+0xdc>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
				PlayStartupSoundOnce();
 800166c:	f7ff ffb8 	bl	80015e0 <PlayStartupSoundOnce>
				diagMessage.frame.data7 = diagMessage.frame.data7 | 0x10000000;
 8001670:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <lookForRTD+0xd8>)
 8001672:	7c13      	ldrb	r3, [r2, #16]
				diagMessage.frame.data7 = diagMessage.frame.data7 & 0x11111110;
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	7413      	strb	r3, [r2, #16]
				for (int erectiledysfunction = 0; erectiledysfunction < 3; erectiledysfunction++) {
 800167a:	2400      	movs	r4, #0
 800167c:	e015      	b.n	80016aa <lookForRTD+0x86>
					txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800167e:	4825      	ldr	r0, [pc, #148]	@ (8001714 <lookForRTD+0xf0>)
 8001680:	2301      	movs	r3, #1
 8001682:	7003      	strb	r3, [r0, #0]
					txMessage.frame.id = 0x0C0;
 8001684:	23c0      	movs	r3, #192	@ 0xc0
 8001686:	6043      	str	r3, [r0, #4]
					txMessage.frame.dlc = 8;
 8001688:	2308      	movs	r3, #8
 800168a:	7203      	strb	r3, [r0, #8]
					txMessage.frame.data0 = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	7243      	strb	r3, [r0, #9]
					txMessage.frame.data1 = 0;
 8001690:	7283      	strb	r3, [r0, #10]
					txMessage.frame.data2 = 0;
 8001692:	72c3      	strb	r3, [r0, #11]
					txMessage.frame.data3 = 0;
 8001694:	7303      	strb	r3, [r0, #12]
					txMessage.frame.data4 = 0;
 8001696:	7343      	strb	r3, [r0, #13]
					txMessage.frame.data5 = 0;
 8001698:	7383      	strb	r3, [r0, #14]
					txMessage.frame.data6 = 0;
 800169a:	73c3      	strb	r3, [r0, #15]
					txMessage.frame.data7 = 0;
 800169c:	7403      	strb	r3, [r0, #16]
					CANSPI_Transmit(&txMessage);
 800169e:	f7fe ffef 	bl	8000680 <CANSPI_Transmit>
					HAL_Delay(100);
 80016a2:	2064      	movs	r0, #100	@ 0x64
 80016a4:	f000 ff40 	bl	8002528 <HAL_Delay>
				for (int erectiledysfunction = 0; erectiledysfunction < 3; erectiledysfunction++) {
 80016a8:	3401      	adds	r4, #1
 80016aa:	2c02      	cmp	r4, #2
 80016ac:	dde7      	ble.n	800167e <lookForRTD+0x5a>
		sendDiagMsg();
 80016ae:	f7ff faa7 	bl	8000c00 <sendDiagMsg>
	while(!readyToDrive) {
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <lookForRTD+0xf4>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1c4      	bne.n	8001644 <lookForRTD+0x20>
		if (CANSPI_Receive(&rxMessage)) {
 80016ba:	4818      	ldr	r0, [pc, #96]	@ (800171c <lookForRTD+0xf8>)
 80016bc:	f7ff f874 	bl	80007a8 <CANSPI_Receive>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d1c0      	bne.n	8001646 <lookForRTD+0x22>
		if(dma_read_complete){
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <lookForRTD+0xe8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1bf      	bne.n	800164c <lookForRTD+0x28>
		ballsandcock = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 80016cc:	2104      	movs	r1, #4
 80016ce:	4814      	ldr	r0, [pc, #80]	@ (8001720 <lookForRTD+0xfc>)
 80016d0:	f002 fa60 	bl	8003b94 <HAL_GPIO_ReadPin>
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <lookForRTD+0x100>)
 80016d6:	7018      	strb	r0, [r3, #0]
		sendPrechargeRequest();
 80016d8:	f7ff ff0e 	bl	80014f8 <sendPrechargeRequest>
		uint8_t prevReadyToDrive = readyToDrive;
 80016dc:	4c0e      	ldr	r4, [pc, #56]	@ (8001718 <lookForRTD+0xf4>)
 80016de:	7825      	ldrb	r5, [r4, #0]
		checkReadyToDrive();
 80016e0:	f7ff fe04 	bl	80012ec <checkReadyToDrive>
		if (readyToDrive) {
 80016e4:	7823      	ldrb	r3, [r4, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0e1      	beq.n	80016ae <lookForRTD+0x8a>
			if(!prevReadyToDrive){
 80016ea:	2d00      	cmp	r5, #0
 80016ec:	d0bb      	beq.n	8001666 <lookForRTD+0x42>
				beginTorqueRequests = false;
 80016ee:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <lookForRTD+0xdc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e7db      	b.n	80016ae <lookForRTD+0x8a>
 80016f6:	bf00      	nop
 80016f8:	20000039 	.word	0x20000039
 80016fc:	20000118 	.word	0x20000118
 8001700:	200000a8 	.word	0x200000a8
 8001704:	20000094 	.word	0x20000094
 8001708:	20000344 	.word	0x20000344
 800170c:	20000002 	.word	0x20000002
 8001710:	200000a0 	.word	0x200000a0
 8001714:	20000140 	.word	0x20000140
 8001718:	20000085 	.word	0x20000085
 800171c:	2000012c 	.word	0x2000012c
 8001720:	40020c00 	.word	0x40020c00
 8001724:	20000038 	.word	0x20000038

08001728 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800172a:	e7fe      	b.n	800172a <Error_Handler+0x2>

0800172c <MX_ADC1_Init>:
{
 800172c:	b500      	push	{lr}
 800172e:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 800173a:	4821      	ldr	r0, [pc, #132]	@ (80017c0 <MX_ADC1_Init+0x94>)
 800173c:	4a21      	ldr	r2, [pc, #132]	@ (80017c4 <MX_ADC1_Init+0x98>)
 800173e:	6002      	str	r2, [r0, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001740:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001744:	6042      	str	r2, [r0, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001746:	6083      	str	r3, [r0, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001748:	2201      	movs	r2, #1
 800174a:	6102      	str	r2, [r0, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800174c:	7603      	strb	r3, [r0, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174e:	f880 3020 	strb.w	r3, [r0, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001756:	62c2      	str	r2, [r0, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001758:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800175c:	6282      	str	r2, [r0, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175e:	60c3      	str	r3, [r0, #12]
	hadc1.Init.NbrOfConversion = 3;
 8001760:	2203      	movs	r2, #3
 8001762:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001764:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001768:	6143      	str	r3, [r0, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800176a:	f000 ff01 	bl	8002570 <HAL_ADC_Init>
 800176e:	b9f0      	cbnz	r0, 80017ae <MX_ADC1_Init+0x82>
	sConfig.Channel = ADC_CHANNEL_14;
 8001770:	230e      	movs	r3, #14
 8001772:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 2;
 8001774:	2302      	movs	r3, #2
 8001776:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001778:	2303      	movs	r3, #3
 800177a:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177c:	4669      	mov	r1, sp
 800177e:	4810      	ldr	r0, [pc, #64]	@ (80017c0 <MX_ADC1_Init+0x94>)
 8001780:	f001 f958 	bl	8002a34 <HAL_ADC_ConfigChannel>
 8001784:	b9a8      	cbnz	r0, 80017b2 <MX_ADC1_Init+0x86>
	sConfig.Channel = ADC_CHANNEL_15;
 8001786:	230f      	movs	r3, #15
 8001788:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 3;
 800178a:	2303      	movs	r3, #3
 800178c:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178e:	4669      	mov	r1, sp
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <MX_ADC1_Init+0x94>)
 8001792:	f001 f94f 	bl	8002a34 <HAL_ADC_ConfigChannel>
 8001796:	b970      	cbnz	r0, 80017b6 <MX_ADC1_Init+0x8a>
	sConfig.Channel = ADC_CHANNEL_1;
 8001798:	2301      	movs	r3, #1
 800179a:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 800179c:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179e:	4669      	mov	r1, sp
 80017a0:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <MX_ADC1_Init+0x94>)
 80017a2:	f001 f947 	bl	8002a34 <HAL_ADC_ConfigChannel>
 80017a6:	b940      	cbnz	r0, 80017ba <MX_ADC1_Init+0x8e>
}
 80017a8:	b005      	add	sp, #20
 80017aa:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80017ae:	f7ff ffbb 	bl	8001728 <Error_Handler>
		Error_Handler();
 80017b2:	f7ff ffb9 	bl	8001728 <Error_Handler>
		Error_Handler();
 80017b6:	f7ff ffb7 	bl	8001728 <Error_Handler>
		Error_Handler();
 80017ba:	f7ff ffb5 	bl	8001728 <Error_Handler>
 80017be:	bf00      	nop
 80017c0:	20000344 	.word	0x20000344
 80017c4:	40012000 	.word	0x40012000

080017c8 <MX_SPI3_Init>:
{
 80017c8:	b508      	push	{r3, lr}
	hspi3.Instance = SPI3;
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <MX_SPI3_Init+0x38>)
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <MX_SPI3_Init+0x3c>)
 80017ce:	6003      	str	r3, [r0, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80017d0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80017d4:	6043      	str	r3, [r0, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017d6:	2300      	movs	r3, #0
 80017d8:	6083      	str	r3, [r0, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017da:	60c3      	str	r3, [r0, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017dc:	6103      	str	r3, [r0, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017de:	6143      	str	r3, [r0, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80017e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e4:	6182      	str	r2, [r0, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017e6:	2210      	movs	r2, #16
 80017e8:	61c2      	str	r2, [r0, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ea:	6203      	str	r3, [r0, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ec:	6243      	str	r3, [r0, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ee:	6283      	str	r3, [r0, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 10;
 80017f0:	230a      	movs	r3, #10
 80017f2:	62c3      	str	r3, [r0, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017f4:	f003 fd4a 	bl	800528c <HAL_SPI_Init>
 80017f8:	b900      	cbnz	r0, 80017fc <MX_SPI3_Init+0x34>
}
 80017fa:	bd08      	pop	{r3, pc}
		Error_Handler();
 80017fc:	f7ff ff94 	bl	8001728 <Error_Handler>
 8001800:	200001e4 	.word	0x200001e4
 8001804:	40003c00 	.word	0x40003c00

08001808 <MX_I2S2_Init>:
{
 8001808:	b508      	push	{r3, lr}
	hi2s2.Instance = SPI2;
 800180a:	480b      	ldr	r0, [pc, #44]	@ (8001838 <MX_I2S2_Init+0x30>)
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <MX_I2S2_Init+0x34>)
 800180e:	6003      	str	r3, [r0, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001814:	6043      	str	r3, [r0, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001816:	2300      	movs	r3, #0
 8001818:	6083      	str	r3, [r0, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800181a:	60c3      	str	r3, [r0, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800181c:	6103      	str	r3, [r0, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800181e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001822:	6142      	str	r2, [r0, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001824:	6183      	str	r3, [r0, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001826:	61c3      	str	r3, [r0, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001828:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800182a:	f002 f9e5 	bl	8003bf8 <HAL_I2S_Init>
 800182e:	b900      	cbnz	r0, 8001832 <MX_I2S2_Init+0x2a>
}
 8001830:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001832:	f7ff ff79 	bl	8001728 <Error_Handler>
 8001836:	bf00      	nop
 8001838:	2000029c 	.word	0x2000029c
 800183c:	40003800 	.word	0x40003800

08001840 <MX_TIM4_Init>:
{
 8001840:	b500      	push	{lr}
 8001842:	b08b      	sub	sp, #44	@ 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	2300      	movs	r3, #0
 8001846:	9308      	str	r3, [sp, #32]
 8001848:	9309      	str	r3, [sp, #36]	@ 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	9303      	str	r3, [sp, #12]
 8001850:	9304      	str	r3, [sp, #16]
 8001852:	9305      	str	r3, [sp, #20]
 8001854:	9306      	str	r3, [sp, #24]
 8001856:	9307      	str	r3, [sp, #28]
	htim4.Instance = TIM4;
 8001858:	4817      	ldr	r0, [pc, #92]	@ (80018b8 <MX_TIM4_Init+0x78>)
 800185a:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <MX_TIM4_Init+0x7c>)
 800185c:	6002      	str	r2, [r0, #0]
	htim4.Init.Prescaler = 3360;
 800185e:	f44f 6252 	mov.w	r2, #3360	@ 0xd20
 8001862:	6042      	str	r2, [r0, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	6083      	str	r3, [r0, #8]
	htim4.Init.Period = 255;
 8001866:	22ff      	movs	r2, #255	@ 0xff
 8001868:	60c2      	str	r2, [r0, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186a:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800186e:	f004 fb97 	bl	8005fa0 <HAL_TIM_PWM_Init>
 8001872:	b9d0      	cbnz	r0, 80018aa <MX_TIM4_Init+0x6a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800187a:	a908      	add	r1, sp, #32
 800187c:	480e      	ldr	r0, [pc, #56]	@ (80018b8 <MX_TIM4_Init+0x78>)
 800187e:	f005 f81b 	bl	80068b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	b9a0      	cbnz	r0, 80018ae <MX_TIM4_Init+0x6e>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001884:	2360      	movs	r3, #96	@ 0x60
 8001886:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 127;
 8001888:	237f      	movs	r3, #127	@ 0x7f
 800188a:	9302      	str	r3, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001890:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001892:	220c      	movs	r2, #12
 8001894:	a901      	add	r1, sp, #4
 8001896:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <MX_TIM4_Init+0x78>)
 8001898:	f004 fbd2 	bl	8006040 <HAL_TIM_PWM_ConfigChannel>
 800189c:	b948      	cbnz	r0, 80018b2 <MX_TIM4_Init+0x72>
	HAL_TIM_MspPostInit(&htim4);
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <MX_TIM4_Init+0x78>)
 80018a0:	f000 fd0c 	bl	80022bc <HAL_TIM_MspPostInit>
}
 80018a4:	b00b      	add	sp, #44	@ 0x2c
 80018a6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80018aa:	f7ff ff3d 	bl	8001728 <Error_Handler>
		Error_Handler();
 80018ae:	f7ff ff3b 	bl	8001728 <Error_Handler>
		Error_Handler();
 80018b2:	f7ff ff39 	bl	8001728 <Error_Handler>
 80018b6:	bf00      	nop
 80018b8:	20000154 	.word	0x20000154
 80018bc:	40000800 	.word	0x40000800

080018c0 <MX_TIM3_Init>:
{
 80018c0:	b500      	push	{lr}
 80018c2:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c4:	2300      	movs	r3, #0
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	9303      	str	r3, [sp, #12]
 80018ca:	9304      	str	r3, [sp, #16]
 80018cc:	9305      	str	r3, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	9301      	str	r3, [sp, #4]
	htim3.Instance = TIM3;
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <MX_TIM3_Init+0x64>)
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <MX_TIM3_Init+0x68>)
 80018d6:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 4;
 80018d8:	2204      	movs	r2, #4
 80018da:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 10001;
 80018de:	f242 7211 	movw	r2, #10001	@ 0x2711
 80018e2:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e8:	f004 fab0 	bl	8005e4c <HAL_TIM_Base_Init>
 80018ec:	b998      	cbnz	r0, 8001916 <MX_TIM3_Init+0x56>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f2:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f4:	a902      	add	r1, sp, #8
 80018f6:	480b      	ldr	r0, [pc, #44]	@ (8001924 <MX_TIM3_Init+0x64>)
 80018f8:	f004 fc64 	bl	80061c4 <HAL_TIM_ConfigClockSource>
 80018fc:	b968      	cbnz	r0, 800191a <MX_TIM3_Init+0x5a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018fe:	2320      	movs	r3, #32
 8001900:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001906:	4669      	mov	r1, sp
 8001908:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_TIM3_Init+0x64>)
 800190a:	f004 ffd5 	bl	80068b8 <HAL_TIMEx_MasterConfigSynchronization>
 800190e:	b930      	cbnz	r0, 800191e <MX_TIM3_Init+0x5e>
}
 8001910:	b007      	add	sp, #28
 8001912:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001916:	f7ff ff07 	bl	8001728 <Error_Handler>
		Error_Handler();
 800191a:	f7ff ff05 	bl	8001728 <Error_Handler>
		Error_Handler();
 800191e:	f7ff ff03 	bl	8001728 <Error_Handler>
 8001922:	bf00      	nop
 8001924:	2000019c 	.word	0x2000019c
 8001928:	40000400 	.word	0x40000400

0800192c <SystemClock_Config>:
{
 800192c:	b500      	push	{lr}
 800192e:	b095      	sub	sp, #84	@ 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001930:	2230      	movs	r2, #48	@ 0x30
 8001932:	2100      	movs	r1, #0
 8001934:	a808      	add	r0, sp, #32
 8001936:	f005 f9ad 	bl	8006c94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193a:	2300      	movs	r3, #0
 800193c:	9303      	str	r3, [sp, #12]
 800193e:	9304      	str	r3, [sp, #16]
 8001940:	9305      	str	r3, [sp, #20]
 8001942:	9306      	str	r3, [sp, #24]
 8001944:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	4a1f      	ldr	r2, [pc, #124]	@ (80019c8 <SystemClock_Config+0x9c>)
 800194a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800194c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001950:	6411      	str	r1, [r2, #64]	@ 0x40
 8001952:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001954:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	491b      	ldr	r1, [pc, #108]	@ (80019cc <SystemClock_Config+0xa0>)
 8001960:	680a      	ldr	r2, [r1, #0]
 8001962:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001966:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196a:	600a      	str	r2, [r1, #0]
 800196c:	680a      	ldr	r2, [r1, #0]
 800196e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001972:	9202      	str	r2, [sp, #8]
 8001974:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001976:	2202      	movs	r2, #2
 8001978:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800197a:	2101      	movs	r1, #1
 800197c:	910b      	str	r1, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197e:	2110      	movs	r1, #16
 8001980:	910c      	str	r1, [sp, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	920e      	str	r2, [sp, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001984:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001986:	2308      	movs	r3, #8
 8001988:	9310      	str	r3, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800198a:	2354      	movs	r3, #84	@ 0x54
 800198c:	9311      	str	r3, [sp, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198e:	9212      	str	r2, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001990:	2307      	movs	r3, #7
 8001992:	9313      	str	r3, [sp, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	a808      	add	r0, sp, #32
 8001996:	f002 fec7 	bl	8004728 <HAL_RCC_OscConfig>
 800199a:	b980      	cbnz	r0, 80019be <SystemClock_Config+0x92>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	230f      	movs	r3, #15
 800199e:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a0:	2102      	movs	r1, #2
 80019a2:	9104      	str	r1, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019ac:	9206      	str	r2, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b0:	a803      	add	r0, sp, #12
 80019b2:	f003 f931 	bl	8004c18 <HAL_RCC_ClockConfig>
 80019b6:	b920      	cbnz	r0, 80019c2 <SystemClock_Config+0x96>
}
 80019b8:	b015      	add	sp, #84	@ 0x54
 80019ba:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80019be:	f7ff feb3 	bl	8001728 <Error_Handler>
		Error_Handler();
 80019c2:	f7ff feb1 	bl	8001728 <Error_Handler>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <main>:
{
 80019d0:	b508      	push	{r3, lr}
	HAL_Init();
 80019d2:	f000 fd37 	bl	8002444 <HAL_Init>
	SystemClock_Config();
 80019d6:	f7ff ffa9 	bl	800192c <SystemClock_Config>
	MX_GPIO_Init();
 80019da:	f7ff f80b 	bl	80009f4 <MX_GPIO_Init>
	MX_DMA_Init();
 80019de:	f7ff f8e3 	bl	8000ba8 <MX_DMA_Init>
	MX_ADC1_Init();
 80019e2:	f7ff fea3 	bl	800172c <MX_ADC1_Init>
	MX_SPI3_Init();
 80019e6:	f7ff feef 	bl	80017c8 <MX_SPI3_Init>
	MX_I2S2_Init();
 80019ea:	f7ff ff0d 	bl	8001808 <MX_I2S2_Init>
	MX_TIM4_Init();
 80019ee:	f7ff ff27 	bl	8001840 <MX_TIM4_Init>
	MX_TIM3_Init();
 80019f2:	f7ff ff65 	bl	80018c0 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 80019f6:	482d      	ldr	r0, [pc, #180]	@ (8001aac <main+0xdc>)
 80019f8:	f004 fa78 	bl	8005eec <HAL_TIM_Base_Start>
	if (CANSPI_Initialize() != true) {
 80019fc:	f7fe fd80 	bl	8000500 <CANSPI_Initialize>
 8001a00:	b198      	cbz	r0, 8001a2a <main+0x5a>
	inverter_diagnostics.motorRpm   = 1;
 8001a02:	2201      	movs	r2, #1
 8001a04:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab0 <main+0xe0>)
 8001a06:	601a      	str	r2, [r3, #0]
	diagMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001a08:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <main+0xe4>)
 8001a0a:	701a      	strb	r2, [r3, #0]
	diagMessage.frame.id = 0x500;
 8001a0c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001a10:	605a      	str	r2, [r3, #4]
	diagMessage.frame.dlc = 8;
 8001a12:	2208      	movs	r2, #8
 8001a14:	721a      	strb	r2, [r3, #8]
	diagMessage.frame.data0 = 0x00;
 8001a16:	2200      	movs	r2, #0
 8001a18:	725a      	strb	r2, [r3, #9]
	diagMessage.frame.data1 = 0x00;
 8001a1a:	729a      	strb	r2, [r3, #10]
	diagMessage.frame.data2 = 0x00;
 8001a1c:	72da      	strb	r2, [r3, #11]
	diagMessage.frame.data3 = 0x00;
 8001a1e:	731a      	strb	r2, [r3, #12]
	diagMessage.frame.data4 = 0x00;
 8001a20:	735a      	strb	r2, [r3, #13]
	diagMessage.frame.data5 = 0x00;
 8001a22:	739a      	strb	r2, [r3, #14]
	diagMessage.frame.data6 = 0x00;
 8001a24:	73da      	strb	r2, [r3, #15]
	diagMessage.frame.data7 = 0x00;
 8001a26:	741a      	strb	r2, [r3, #16]
	if (VCUMODE == DRIVE) {
 8001a28:	e01a      	b.n	8001a60 <main+0x90>
		Error_Handler();
 8001a2a:	f7ff fe7d 	bl	8001728 <Error_Handler>
				lookForRTD();
 8001a2e:	f7ff fdf9 	bl	8001624 <lookForRTD>
 8001a32:	e019      	b.n	8001a68 <main+0x98>
				readFromCAN();
 8001a34:	f7ff f9d2 	bl	8000ddc <readFromCAN>
 8001a38:	e01b      	b.n	8001a72 <main+0xa2>
				HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	491e      	ldr	r1, [pc, #120]	@ (8001ab8 <main+0xe8>)
 8001a3e:	481f      	ldr	r0, [pc, #124]	@ (8001abc <main+0xec>)
 8001a40:	f000 feea 	bl	8002818 <HAL_ADC_Start_DMA>
				dma_read_complete = 0;
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <main+0xf0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
				millis_since_dma_read = HAL_GetTick();
 8001a4a:	f000 fd61 	bl	8002510 <HAL_GetTick>
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <main+0xf4>)
 8001a50:	6018      	str	r0, [r3, #0]
 8001a52:	e012      	b.n	8001a7a <main+0xaa>
				sendTorqueCommand();
 8001a54:	f7ff fb7c 	bl	8001150 <sendTorqueCommand>
				sendFanCommand();
 8001a58:	f7ff fc28 	bl	80012ac <sendFanCommand>
			sendDiagMsg();
 8001a5c:	f7ff f8d0 	bl	8000c00 <sendDiagMsg>
			if (!readyToDrive) {
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <main+0xf8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0e2      	beq.n	8001a2e <main+0x5e>
			if (CANSPI_Receive(&rxMessage)) {
 8001a68:	4818      	ldr	r0, [pc, #96]	@ (8001acc <main+0xfc>)
 8001a6a:	f7fe fe9d 	bl	80007a8 <CANSPI_Receive>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d1e0      	bne.n	8001a34 <main+0x64>
			if(dma_read_complete){
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <main+0xf0>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1df      	bne.n	8001a3a <main+0x6a>
			updateBMSDiagnostics();
 8001a7a:	f7ff f969 	bl	8000d50 <updateBMSDiagnostics>
			calculateTorqueRequest();
 8001a7e:	f7ff fa09 	bl	8000e94 <calculateTorqueRequest>
			checkAPPSPlausibility();
 8001a82:	f7ff fa85 	bl	8000f90 <checkAPPSPlausibility>
			checkCrossCheck();
 8001a86:	f7ff faeb 	bl	8001060 <checkCrossCheck>
			checkShutdown();  // If pin is low, torque->0, block
 8001a8a:	f7ff fba1 	bl	80011d0 <checkShutdown>
			finalTorqueRequest   = requestedTorque;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <main+0x100>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a10      	ldr	r2, [pc, #64]	@ (8001ad4 <main+0x104>)
 8001a94:	6013      	str	r3, [r2, #0]
			lastRequestedTorque  = requestedTorque;
 8001a96:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <main+0x108>)
 8001a98:	6013      	str	r3, [r2, #0]
			if (readyToDrive || rtdoverride == 1) {
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <main+0xf8>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1d8      	bne.n	8001a54 <main+0x84>
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <main+0x10c>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d1d8      	bne.n	8001a5c <main+0x8c>
 8001aaa:	e7d3      	b.n	8001a54 <main+0x84>
 8001aac:	2000019c 	.word	0x2000019c
 8001ab0:	2000005c 	.word	0x2000005c
 8001ab4:	20000118 	.word	0x20000118
 8001ab8:	20000094 	.word	0x20000094
 8001abc:	20000344 	.word	0x20000344
 8001ac0:	20000002 	.word	0x20000002
 8001ac4:	200000a0 	.word	0x200000a0
 8001ac8:	20000085 	.word	0x20000085
 8001acc:	2000012c 	.word	0x2000012c
 8001ad0:	200000b4 	.word	0x200000b4
 8001ad4:	200000ac 	.word	0x200000ac
 8001ad8:	200000b0 	.word	0x200000b0
 8001adc:	20000039 	.word	0x20000039

08001ae0 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void    SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
    MCP2515_CS_HIGH();
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aec:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <MCP2515_Initialize+0x3c>)
 8001aee:	f002 f869 	bl	8003bc4 <HAL_GPIO_WritePin>

    uint8_t loop = 10;
 8001af2:	230a      	movs	r3, #10
 8001af4:	71fb      	strb	r3, [r7, #7]
    do {
        /* check SPI Ready */
        if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001af6:	480a      	ldr	r0, [pc, #40]	@ (8001b20 <MCP2515_Initialize+0x40>)
 8001af8:	f004 f857 	bl	8005baa <HAL_SPI_GetState>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <MCP2515_Initialize+0x26>
            return true;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e006      	b.n	8001b14 <MCP2515_Initialize+0x34>

        loop--;
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	71fb      	strb	r3, [r7, #7]
    } while(loop > 0);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f1      	bne.n	8001af6 <MCP2515_Initialize+0x16>

    return false;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	200001e4 	.word	0x200001e4

08001b24 <MCP2515_SetConfigMode>:

/* change mode to configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
    /* configure CANCTRL Register */
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f000 f8ab 	bl	8001c88 <MCP2515_WriteByte>
    HAL_Delay(100);
 8001b32:	2064      	movs	r0, #100	@ 0x64
 8001b34:	f000 fcf8 	bl	8002528 <HAL_Delay>

    uint8_t loop = 10;
 8001b38:	230a      	movs	r3, #10
 8001b3a:	71fb      	strb	r3, [r7, #7]
    do {
        // Force config again
        MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f000 f8a2 	bl	8001c88 <MCP2515_WriteByte>

        uint8_t canstat      = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001b44:	200e      	movs	r0, #14
 8001b46:	f000 f853 	bl	8001bf0 <MCP2515_ReadByte>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71bb      	strb	r3, [r7, #6]
        uint8_t SOMETHINGELSE= MCP2515_ReadByte(MCP2515_TXB0CTRL);
 8001b4e:	2030      	movs	r0, #48	@ 0x30
 8001b50:	f000 f84e 	bl	8001bf0 <MCP2515_ReadByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	717b      	strb	r3, [r7, #5]
        (void)SOMETHINGELSE; // avoid "unused variable" warning

        if((canstat & 0xE0) == 0x80)
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001b5e:	2b80      	cmp	r3, #128	@ 0x80
 8001b60:	d101      	bne.n	8001b66 <MCP2515_SetConfigMode+0x42>
            return true;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e009      	b.n	8001b7a <MCP2515_SetConfigMode+0x56>

        loop--;
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(100);
 8001b6c:	2064      	movs	r0, #100	@ 0x64
 8001b6e:	f000 fcdb 	bl	8002528 <HAL_Delay>

    } while(loop > 0);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e1      	bne.n	8001b3c <MCP2515_SetConfigMode+0x18>

    return false;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <MCP2515_SetNormalMode>:

/* change mode to normal mode */
bool MCP2515_SetNormalMode(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
    /* configure CANCTRL Register */
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f87c 	bl	8001c88 <MCP2515_WriteByte>

    uint8_t loop = 10;
 8001b90:	230a      	movs	r3, #10
 8001b92:	71fb      	strb	r3, [r7, #7]
    do {
        /* confirm mode configuration */
        if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001b94:	200e      	movs	r0, #14
 8001b96:	f000 f82b 	bl	8001bf0 <MCP2515_ReadByte>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <MCP2515_SetNormalMode+0x26>
            return true;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e006      	b.n	8001bb6 <MCP2515_SetNormalMode+0x34>

        loop--;
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	71fb      	strb	r3, [r7, #7]
    } while(loop > 0);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ef      	bne.n	8001b94 <MCP2515_SetNormalMode+0x12>

    return false;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <MCP2515_Reset>:
    return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    MCP2515_CS_LOW();
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bca:	4808      	ldr	r0, [pc, #32]	@ (8001bec <MCP2515_Reset+0x2c>)
 8001bcc:	f001 fffa 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f000 fca9 	bl	8002528 <HAL_Delay>
    SPI_Tx(MCP2515_RESET);
 8001bd6:	20c0      	movs	r0, #192	@ 0xc0
 8001bd8:	f000 f93a 	bl	8001e50 <SPI_Tx>
    MCP2515_CS_HIGH();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be2:	4802      	ldr	r0, [pc, #8]	@ (8001bec <MCP2515_Reset+0x2c>)
 8001be4:	f001 ffee 	bl	8003bc4 <HAL_GPIO_WritePin>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40020000 	.word	0x40020000

08001bf0 <MCP2515_ReadByte>:

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal;

    MCP2515_CS_LOW();
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <MCP2515_ReadByte+0x48>)
 8001c02:	f001 ffdf 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001c06:	2001      	movs	r0, #1
 8001c08:	f000 fc8e 	bl	8002528 <HAL_Delay>
    SPI_Tx(MCP2515_READ);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f91f 	bl	8001e50 <SPI_Tx>
    SPI_Tx(address);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f91b 	bl	8001e50 <SPI_Tx>
    retVal = SPI_Rx();
 8001c1a:	f000 f93f 	bl	8001e9c <SPI_Rx>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
    MCP2515_CS_HIGH();
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c28:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <MCP2515_ReadByte+0x48>)
 8001c2a:	f001 ffcb 	bl	8003bc4 <HAL_GPIO_WritePin>

    return retVal;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40020000 	.word	0x40020000

08001c3c <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_LOW();
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c52:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <MCP2515_ReadRxSequence+0x48>)
 8001c54:	f001 ffb6 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 fc65 	bl	8002528 <HAL_Delay>
    SPI_Tx(instruction);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f8f5 	bl	8001e50 <SPI_Tx>
    SPI_RxBuffer(data, length);
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6838      	ldr	r0, [r7, #0]
 8001c6c:	f000 f926 	bl	8001ebc <SPI_RxBuffer>
    MCP2515_CS_HIGH();
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c76:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <MCP2515_ReadRxSequence+0x48>)
 8001c78:	f001 ffa4 	bl	8003bc4 <HAL_GPIO_WritePin>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40020000 	.word	0x40020000

08001c88 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460a      	mov	r2, r1
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	4613      	mov	r3, r2
 8001c96:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_LOW();
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MCP2515_WriteByte+0x4c>)
 8001ca0:	f001 ff90 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f000 fc3f 	bl	8002528 <HAL_Delay>
    SPI_Tx(MCP2515_WRITE);
 8001caa:	2002      	movs	r0, #2
 8001cac:	f000 f8d0 	bl	8001e50 <SPI_Tx>
    SPI_Tx(address);
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f8cc 	bl	8001e50 <SPI_Tx>
    SPI_Tx(data);
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f8c8 	bl	8001e50 <SPI_Tx>
    MCP2515_CS_HIGH();
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cc6:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <MCP2515_WriteByte+0x4c>)
 8001cc8:	f001 ff7c 	bl	8003bc4 <HAL_GPIO_WritePin>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	603a      	str	r2, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_LOW();
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cee:	4810      	ldr	r0, [pc, #64]	@ (8001d30 <MCP2515_WriteByteSequence+0x58>)
 8001cf0:	f001 ff68 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f000 fc17 	bl	8002528 <HAL_Delay>
    SPI_Tx(MCP2515_WRITE);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f000 f8a8 	bl	8001e50 <SPI_Tx>
    SPI_Tx(startAddress);
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f8a4 	bl	8001e50 <SPI_Tx>
    SPI_TxBuffer(data, (uint8_t)(endAddress - startAddress + 1));
 8001d08:	79ba      	ldrb	r2, [r7, #6]
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f000 f8ac 	bl	8001e74 <SPI_TxBuffer>
    MCP2515_CS_HIGH();
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d22:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <MCP2515_WriteByteSequence+0x58>)
 8001d24:	f001 ff4e 	bl	8003bc4 <HAL_GPIO_WritePin>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40020000 	.word	0x40020000

08001d34 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	4613      	mov	r3, r2
 8001d44:	73bb      	strb	r3, [r7, #14]
    MCP2515_CS_LOW();
 8001d46:	2200      	movs	r2, #0
 8001d48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d4c:	4810      	ldr	r0, [pc, #64]	@ (8001d90 <MCP2515_LoadTxSequence+0x5c>)
 8001d4e:	f001 ff39 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 fbe8 	bl	8002528 <HAL_Delay>
    SPI_Tx(instruction);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f878 	bl	8001e50 <SPI_Tx>
    SPI_TxBuffer(idReg, 4);
 8001d60:	2104      	movs	r1, #4
 8001d62:	68b8      	ldr	r0, [r7, #8]
 8001d64:	f000 f886 	bl	8001e74 <SPI_TxBuffer>
    SPI_Tx(dlc);
 8001d68:	7bbb      	ldrb	r3, [r7, #14]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f870 	bl	8001e50 <SPI_Tx>
    SPI_TxBuffer(data, dlc);
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f87d 	bl	8001e74 <SPI_TxBuffer>
    MCP2515_CS_HIGH();
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d80:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <MCP2515_LoadTxSequence+0x5c>)
 8001d82:	f001 ff1f 	bl	8003bc4 <HAL_GPIO_WritePin>
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020000 	.word	0x40020000

08001d94 <MCP2515_RequestToSend>:
    MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_LOW();
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001da4:	4809      	ldr	r0, [pc, #36]	@ (8001dcc <MCP2515_RequestToSend+0x38>)
 8001da6:	f001 ff0d 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001daa:	2001      	movs	r0, #1
 8001dac:	f000 fbbc 	bl	8002528 <HAL_Delay>
    SPI_Tx(instruction);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f84c 	bl	8001e50 <SPI_Tx>
    MCP2515_CS_HIGH();
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dbe:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <MCP2515_RequestToSend+0x38>)
 8001dc0:	f001 ff00 	bl	8003bc4 <HAL_GPIO_WritePin>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020000 	.word	0x40020000

08001dd0 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
    uint8_t retVal;

    MCP2515_CS_LOW();
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ddc:	480b      	ldr	r0, [pc, #44]	@ (8001e0c <MCP2515_ReadStatus+0x3c>)
 8001dde:	f001 fef1 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 fba0 	bl	8002528 <HAL_Delay>
    SPI_Tx(MCP2515_READ_STATUS);
 8001de8:	20a0      	movs	r0, #160	@ 0xa0
 8001dea:	f000 f831 	bl	8001e50 <SPI_Tx>
    retVal = SPI_Rx();
 8001dee:	f000 f855 	bl	8001e9c <SPI_Rx>
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_HIGH();
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dfc:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <MCP2515_ReadStatus+0x3c>)
 8001dfe:	f001 fee1 	bl	8003bc4 <HAL_GPIO_WritePin>

    return retVal;
 8001e02:	79fb      	ldrb	r3, [r7, #7]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40020000 	.word	0x40020000

08001e10 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
    uint8_t retVal;

    MCP2515_CS_LOW();
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e1c:	480b      	ldr	r0, [pc, #44]	@ (8001e4c <MCP2515_GetRxStatus+0x3c>)
 8001e1e:	f001 fed1 	bl	8003bc4 <HAL_GPIO_WritePin>
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fb80 	bl	8002528 <HAL_Delay>
    SPI_Tx(MCP2515_RX_STATUS);
 8001e28:	20b0      	movs	r0, #176	@ 0xb0
 8001e2a:	f000 f811 	bl	8001e50 <SPI_Tx>
    retVal = SPI_Rx();
 8001e2e:	f000 f835 	bl	8001e9c <SPI_Rx>
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_HIGH();
 8001e36:	2201      	movs	r2, #1
 8001e38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e3c:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <MCP2515_GetRxStatus+0x3c>)
 8001e3e:	f001 fec1 	bl	8003bc4 <HAL_GPIO_WritePin>

    return retVal;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40020000 	.word	0x40020000

08001e50 <SPI_Tx>:
    MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001e5a:	1df9      	adds	r1, r7, #7
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <SPI_Tx+0x20>)
 8001e62:	f003 fa9c 	bl	800539e <HAL_SPI_Transmit>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200001e4 	.word	0x200001e4

08001e74 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	230a      	movs	r3, #10
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4803      	ldr	r0, [pc, #12]	@ (8001e98 <SPI_TxBuffer+0x24>)
 8001e8a:	f003 fa88 	bl	800539e <HAL_SPI_Transmit>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200001e4 	.word	0x200001e4

08001e9c <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
    uint8_t retVal;
    HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001ea2:	1df9      	adds	r1, r7, #7
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <SPI_Rx+0x1c>)
 8001eaa:	f003 fbbc 	bl	8005626 <HAL_SPI_Receive>
    return retVal;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200001e4 	.word	0x200001e4

08001ebc <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	230a      	movs	r3, #10
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <SPI_RxBuffer+0x24>)
 8001ed2:	f003 fba8 	bl	8005626 <HAL_SPI_Receive>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200001e4 	.word	0x200001e4

08001ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f22:	2007      	movs	r0, #7
 8001f24:	f001 f900 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a40      	ldr	r2, [pc, #256]	@ (8002054 <HAL_ADC_MspInit+0x120>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d179      	bne.n	800204a <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f66:	4b3c      	ldr	r3, [pc, #240]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b38      	ldr	r3, [pc, #224]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a37      	ldr	r2, [pc, #220]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a30      	ldr	r2, [pc, #192]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002058 <HAL_ADC_MspInit+0x124>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001faa:	2302      	movs	r3, #2
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4827      	ldr	r0, [pc, #156]	@ (800205c <HAL_ADC_MspInit+0x128>)
 8001fbe:	f001 fc65 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fc2:	2330      	movs	r3, #48	@ 0x30
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4822      	ldr	r0, [pc, #136]	@ (8002060 <HAL_ADC_MspInit+0x12c>)
 8001fd6:	f001 fc59 	bl	800388c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8001fdc:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_ADC_MspInit+0x134>)
 8001fde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8001ff4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8001ffc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002000:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002002:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8002004:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002008:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8002012:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002016:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800201e:	4811      	ldr	r0, [pc, #68]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8002020:	f001 f8c4 	bl	80031ac <HAL_DMA_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800202a:	f7ff fb7d 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0c      	ldr	r2, [pc, #48]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8002032:	639a      	str	r2, [r3, #56]	@ 0x38
 8002034:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_ADC_MspInit+0x130>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2012      	movs	r0, #18
 8002040:	f001 f87d 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002044:	2012      	movs	r0, #18
 8002046:	f001 f896 	bl	8003176 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	@ 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40012000 	.word	0x40012000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020800 	.word	0x40020800
 8002064:	200002e4 	.word	0x200002e4
 8002068:	40026410 	.word	0x40026410

0800206c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	@ 0x38
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a3d      	ldr	r2, [pc, #244]	@ (8002190 <HAL_I2S_MspInit+0x124>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d174      	bne.n	8002188 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800209e:	2301      	movs	r3, #1
 80020a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80020a2:	23c0      	movs	r3, #192	@ 0xc0
 80020a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 ff9e 	bl	8004ff0 <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80020ba:	f7ff fb35 	bl	8001728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <HAL_I2S_MspInit+0x128>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	4a33      	ldr	r2, [pc, #204]	@ (8002194 <HAL_I2S_MspInit+0x128>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ce:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <HAL_I2S_MspInit+0x128>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <HAL_I2S_MspInit+0x128>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002194 <HAL_I2S_MspInit+0x128>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_I2S_MspInit+0x128>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80020f6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002108:	2305      	movs	r3, #5
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4821      	ldr	r0, [pc, #132]	@ (8002198 <HAL_I2S_MspInit+0x12c>)
 8002114:	f001 fbba 	bl	800388c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002118:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_I2S_MspInit+0x130>)
 800211a:	4a21      	ldr	r2, [pc, #132]	@ (80021a0 <HAL_I2S_MspInit+0x134>)
 800211c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002120:	2200      	movs	r2, #0
 8002122:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002124:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002126:	2240      	movs	r2, #64	@ 0x40
 8002128:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212a:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <HAL_I2S_MspInit+0x130>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002136:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <HAL_I2S_MspInit+0x130>)
 800213a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800213e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002140:	4b16      	ldr	r3, [pc, #88]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002142:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002146:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_I2S_MspInit+0x130>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002156:	2204      	movs	r2, #4
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <HAL_I2S_MspInit+0x130>)
 800215c:	2201      	movs	r2, #1
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002162:	2200      	movs	r2, #0
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002166:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <HAL_I2S_MspInit+0x130>)
 800216e:	f001 f81d 	bl	80031ac <HAL_DMA_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8002178:	f7ff fad6 	bl	8001728 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a07      	ldr	r2, [pc, #28]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002180:	639a      	str	r2, [r3, #56]	@ 0x38
 8002182:	4a06      	ldr	r2, [pc, #24]	@ (800219c <HAL_I2S_MspInit+0x130>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002188:	bf00      	nop
 800218a:	3738      	adds	r7, #56	@ 0x38
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40003800 	.word	0x40003800
 8002194:	40023800 	.word	0x40023800
 8002198:	40020400 	.word	0x40020400
 800219c:	2000023c 	.word	0x2000023c
 80021a0:	40026070 	.word	0x40026070

080021a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_SPI_MspInit+0x84>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12c      	bne.n	8002220 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	4a17      	ldr	r2, [pc, #92]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_SPI_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021fe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002210:	2306      	movs	r3, #6
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	4805      	ldr	r0, [pc, #20]	@ (8002230 <HAL_SPI_MspInit+0x8c>)
 800221c:	f001 fb36 	bl	800388c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002220:	bf00      	nop
 8002222:	3728      	adds	r7, #40	@ 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40003c00 	.word	0x40003c00
 800222c:	40023800 	.word	0x40023800
 8002230:	40020800 	.word	0x40020800

08002234 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <HAL_TIM_Base_MspInit+0x3c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10d      	bne.n	8002262 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_TIM_Base_MspInit+0x40>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_TIM_Base_MspInit+0x40>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6413      	str	r3, [r2, #64]	@ 0x40
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_TIM_Base_MspInit+0x40>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40000400 	.word	0x40000400
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10d      	bne.n	80022a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_TIM_PWM_MspInit+0x40>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_TIM_PWM_MspInit+0x40>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <HAL_TIM_PWM_MspInit+0x40>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <HAL_TIM_MspPostInit+0x68>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11e      	bne.n	800231c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800230c:	2302      	movs	r3, #2
 800230e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_TIM_MspPostInit+0x70>)
 8002318:	f001 fab8 	bl	800388c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800231c:	bf00      	nop
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40000800 	.word	0x40000800
 8002328:	40023800 	.word	0x40023800
 800232c:	40020400 	.word	0x40020400

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <NMI_Handler+0x4>

08002338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <MemManage_Handler+0x4>

08002348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <BusFault_Handler+0x4>

08002350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <UsageFault_Handler+0x4>

08002358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002386:	f000 f8af 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <DMA1_Stream4_IRQHandler+0x10>)
 8002396:	f001 f80f 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000023c 	.word	0x2000023c

080023a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <ADC_IRQHandler+0x10>)
 80023aa:	f000 f924 	bl	80025f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000344 	.word	0x20000344

080023b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DMA2_Stream0_IRQHandler+0x10>)
 80023be:	f000 fffb 	bl	80033b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002e4 	.word	0x200002e4

080023cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack    		 /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023f4:	f7ff ffea 	bl	80023cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fa:	490d      	ldr	r1, [pc, #52]	@ (8002430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002410:	4c0a      	ldr	r4, [pc, #40]	@ (800243c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800241e:	f004 fc41 	bl	8006ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7ff fad5 	bl	80019d0 <main>
  bx  lr    
 8002426:	4770      	bx	lr
	  ldr   sp, =_estack    		 /* set stack pointer */
 8002428:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002434:	08075e10 	.word	0x08075e10
  ldr r2, =_sbss
 8002438:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800243c:	20000390 	.word	0x20000390

08002440 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <DMA1_Stream0_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <HAL_Init+0x40>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_Init+0x40>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800245e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <HAL_Init+0x40>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 fe5b 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f808 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fd34 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_InitTick+0x54>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_InitTick+0x58>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249e:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fe73 	bl	8003192 <HAL_SYSTICK_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00e      	b.n	80024d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d80a      	bhi.n	80024d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f000 fe3b 	bl	800313e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c8:	4a06      	ldr	r2, [pc, #24]	@ (80024e4 <HAL_InitTick+0x5c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000010 	.word	0x20000010
 80024e4:	2000000c 	.word	0x2000000c

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000010 	.word	0x20000010
 800250c:	2000038c 	.word	0x2000038c

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000038c 	.word	0x2000038c

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000010 	.word	0x20000010

08002570 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e033      	b.n	80025ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fcd0 	bl	8001f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025b6:	f023 0302 	bic.w	r3, r3, #2
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fb58 	bl	8002c78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80025de:	e001      	b.n	80025e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d049      	beq.n	80026c0 <HAL_ADC_IRQHandler+0xca>
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d046      	beq.n	80026c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d12b      	bne.n	80026b0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d127      	bne.n	80026b0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d119      	bne.n	80026b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0220 	bic.w	r2, r2, #32
 800268a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fe fbad 	bl	8000e10 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0212 	mvn.w	r2, #18
 80026be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d057      	beq.n	8002786 <HAL_ADC_IRQHandler+0x190>
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d054      	beq.n	8002786 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d139      	bne.n	8002776 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12b      	bne.n	8002776 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	d124      	bne.n	8002776 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11d      	bne.n	8002776 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d119      	bne.n	8002776 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002750:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fbfc 	bl	8002f74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 020c 	mvn.w	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002794:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <HAL_ADC_IRQHandler+0x1d6>
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10d      	bne.n	80027cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f925 	bl	8002a0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0201 	mvn.w	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d015      	beq.n	800280e <HAL_ADC_IRQHandler+0x218>
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d012      	beq.n	800280e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	f043 0202 	orr.w	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0220 	mvn.w	r2, #32
 80027fc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f90e 	bl	8002a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0220 	mvn.w	r2, #32
 800280c:	601a      	str	r2, [r3, #0]
  }
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Start_DMA+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e0ce      	b.n	80029d4 <HAL_ADC_Start_DMA+0x1bc>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d018      	beq.n	800287e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800285c:	4b5f      	ldr	r3, [pc, #380]	@ (80029dc <HAL_ADC_Start_DMA+0x1c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5f      	ldr	r2, [pc, #380]	@ (80029e0 <HAL_ADC_Start_DMA+0x1c8>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9a      	lsrs	r2, r3, #18
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002870:	e002      	b.n	8002878 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3b01      	subs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800288c:	d107      	bne.n	800289e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800289c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 8086 	bne.w	80029ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f023 0206 	bic.w	r2, r3, #6
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80028fa:	e002      	b.n	8002902 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290a:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <HAL_ADC_Start_DMA+0x1cc>)
 800290c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	4a35      	ldr	r2, [pc, #212]	@ (80029e8 <HAL_ADC_Start_DMA+0x1d0>)
 8002914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	4a34      	ldr	r2, [pc, #208]	@ (80029ec <HAL_ADC_Start_DMA+0x1d4>)
 800291c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	4a33      	ldr	r2, [pc, #204]	@ (80029f0 <HAL_ADC_Start_DMA+0x1d8>)
 8002924:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800292e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800293e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800294e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	334c      	adds	r3, #76	@ 0x4c
 800295a:	4619      	mov	r1, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f000 fcd2 	bl	8003308 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10f      	bne.n	8002990 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d129      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	e020      	b.n	80029d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a17      	ldr	r2, [pc, #92]	@ (80029f4 <HAL_ADC_Start_DMA+0x1dc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d11b      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x1ba>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d114      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	e00b      	b.n	80029d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000008 	.word	0x20000008
 80029e0:	431bde83 	.word	0x431bde83
 80029e4:	40012300 	.word	0x40012300
 80029e8:	08002e71 	.word	0x08002e71
 80029ec:	08002f2b 	.word	0x08002f2b
 80029f0:	08002f47 	.word	0x08002f47
 80029f4:	40012000 	.word	0x40012000

080029f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e105      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x228>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d925      	bls.n	8002aac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68d9      	ldr	r1, [r3, #12]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	3b1e      	subs	r3, #30
 8002a76:	2207      	movs	r2, #7
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	400a      	ands	r2, r1
 8002a84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68d9      	ldr	r1, [r3, #12]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	4603      	mov	r3, r0
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4403      	add	r3, r0
 8002a9e:	3b1e      	subs	r3, #30
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	e022      	b.n	8002af2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6919      	ldr	r1, [r3, #16]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	400a      	ands	r2, r1
 8002ace:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6919      	ldr	r1, [r3, #16]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4403      	add	r3, r0
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d824      	bhi.n	8002b44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b05      	subs	r3, #5
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	3b05      	subs	r3, #5
 8002b36:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b42:	e04c      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d824      	bhi.n	8002b96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b23      	subs	r3, #35	@ 0x23
 8002b5e:	221f      	movs	r2, #31
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43da      	mvns	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	3b23      	subs	r3, #35	@ 0x23
 8002b88:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b94:	e023      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b41      	subs	r3, #65	@ 0x41
 8002ba8:	221f      	movs	r2, #31
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b41      	subs	r3, #65	@ 0x41
 8002bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bde:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_ADC_ConfigChannel+0x234>)
 8002be0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_ADC_ConfigChannel+0x238>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x1cc>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b12      	cmp	r3, #18
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a19      	ldr	r2, [pc, #100]	@ (8002c6c <HAL_ADC_ConfigChannel+0x238>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d123      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x21e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d003      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x1e6>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b11      	cmp	r3, #17
 8002c18:	d11b      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d111      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_ADC_ConfigChannel+0x23c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a10      	ldr	r2, [pc, #64]	@ (8002c74 <HAL_ADC_ConfigChannel+0x240>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	0c9a      	lsrs	r2, r3, #18
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f9      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40012300 	.word	0x40012300
 8002c6c:	40012000 	.word	0x40012000
 8002c70:	20000008 	.word	0x20000008
 8002c74:	431bde83 	.word	0x431bde83

08002c78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c80:	4b79      	ldr	r3, [pc, #484]	@ (8002e68 <ADC_Init+0x1f0>)
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	4a58      	ldr	r2, [pc, #352]	@ (8002e6c <ADC_Init+0x1f4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6899      	ldr	r1, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	e00f      	b.n	8002d76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0202 	bic.w	r2, r2, #2
 8002d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6899      	ldr	r1, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7e1b      	ldrb	r3, [r3, #24]
 8002d90:	005a      	lsls	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	035a      	lsls	r2, r3, #13
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e007      	b.n	8002dec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	051a      	lsls	r2, r3, #20
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e2e:	025a      	lsls	r2, r3, #9
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	029a      	lsls	r2, r3, #10
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40012300 	.word	0x40012300
 8002e6c:	0f000001 	.word	0x0f000001

08002e70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d13c      	bne.n	8002f04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d12b      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d127      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d119      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0220 	bic.w	r2, r2, #32
 8002ed6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7fd ff87 	bl	8000e10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f02:	e00e      	b.n	8002f22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff fd85 	bl	8002a20 <HAL_ADC_ErrorCallback>
}
 8002f16:	e004      	b.n	8002f22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fd5d 	bl	80029f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff fd5a 	bl	8002a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	@ (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff8e 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff29 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff3e 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff8e 	bl	800307c <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5d 	bl	8003028 <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff31 	bl	8002fec <__NVIC_EnableIRQ>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffa2 	bl	80030e4 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff f9aa 	bl	8002510 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e099      	b.n	80032fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e8:	e00f      	b.n	800320a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ea:	f7ff f991 	bl	8002510 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d908      	bls.n	800320a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e078      	b.n	80032fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e8      	bne.n	80031ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4b38      	ldr	r3, [pc, #224]	@ (8003304 <HAL_DMA_Init+0x158>)
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	2b04      	cmp	r3, #4
 800329c:	d117      	bne.n	80032ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fa6f 	bl	8003794 <DMA_CheckFifoParam>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032ca:	2301      	movs	r3, #1
 80032cc:	e016      	b.n	80032fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa26 	bl	8003728 <DMA_CalcBaseAndBitshift>
 80032dc:	4603      	mov	r3, r0
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	223f      	movs	r2, #63	@ 0x3f
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	f010803f 	.word	0xf010803f

08003308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_DMA_Start_IT+0x26>
 800332a:	2302      	movs	r3, #2
 800332c:	e040      	b.n	80033b0 <HAL_DMA_Start_IT+0xa8>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d12f      	bne.n	80033a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f9b8 	bl	80036cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	223f      	movs	r2, #63	@ 0x3f
 8003362:	409a      	lsls	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0216 	orr.w	r2, r2, #22
 8003376:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0208 	orr.w	r2, r2, #8
 800338e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e005      	b.n	80033ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003600 <HAL_DMA_IRQHandler+0x248>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a8e      	ldr	r2, [pc, #568]	@ (8003604 <HAL_DMA_IRQHandler+0x24c>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e2:	2208      	movs	r2, #8
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01a      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	2208      	movs	r2, #8
 8003412:	409a      	lsls	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	f043 0201 	orr.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	2204      	movs	r2, #4
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	2204      	movs	r2, #4
 800347e:	409a      	lsls	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	2210      	movs	r2, #16
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d043      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	2210      	movs	r2, #16
 80034b4:	409a      	lsls	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d024      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e01f      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e016      	b.n	8003528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0208 	bic.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	2220      	movs	r2, #32
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 808f 	beq.w	8003658 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8087 	beq.w	8003658 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	2220      	movs	r2, #32
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d136      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0216 	bic.w	r2, r2, #22
 8003570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <HAL_DMA_IRQHandler+0x1da>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0208 	bic.w	r2, r2, #8
 80035a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	223f      	movs	r2, #63	@ 0x3f
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d07e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
        }
        return;
 80035ce:	e079      	b.n	80036c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01d      	beq.n	800361a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e02c      	b.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008
 8003604:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
 8003618:	e01e      	b.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10f      	bne.n	8003648 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0210 	bic.w	r2, r2, #16
 8003636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	2b00      	cmp	r3, #0
 800365e:	d032      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2205      	movs	r2, #5
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3301      	adds	r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d307      	bcc.n	80036a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f2      	bne.n	8003684 <HAL_DMA_IRQHandler+0x2cc>
 800369e:	e000      	b.n	80036a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
 80036c2:	e000      	b.n	80036c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036c4:	bf00      	nop
    }
  }
}
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b40      	cmp	r3, #64	@ 0x40
 80036f8:	d108      	bne.n	800370c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800370a:	e007      	b.n	800371c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3b10      	subs	r3, #16
 8003738:	4a14      	ldr	r2, [pc, #80]	@ (800378c <DMA_CalcBaseAndBitshift+0x64>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003742:	4a13      	ldr	r2, [pc, #76]	@ (8003790 <DMA_CalcBaseAndBitshift+0x68>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d909      	bls.n	800376a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	1d1a      	adds	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	659a      	str	r2, [r3, #88]	@ 0x58
 8003768:	e007      	b.n	800377a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	aaaaaaab 	.word	0xaaaaaaab
 8003790:	08075df8 	.word	0x08075df8

08003794 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d856      	bhi.n	8003862 <DMA_CheckFifoParam+0xce>
 80037b4:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <DMA_CheckFifoParam+0x28>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037df 	.word	0x080037df
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	08003863 	.word	0x08003863
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d046      	beq.n	8003866 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037dc:	e043      	b.n	8003866 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037e6:	d140      	bne.n	800386a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ec:	e03d      	b.n	800386a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f6:	d121      	bne.n	800383c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d837      	bhi.n	800386e <DMA_CheckFifoParam+0xda>
 80037fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <DMA_CheckFifoParam+0x70>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003815 	.word	0x08003815
 8003808:	0800381b 	.word	0x0800381b
 800380c:	08003815 	.word	0x08003815
 8003810:	0800382d 	.word	0x0800382d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      break;
 8003818:	e030      	b.n	800387c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d025      	beq.n	8003872 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382a:	e022      	b.n	8003872 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003834:	d11f      	bne.n	8003876 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800383a:	e01c      	b.n	8003876 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d903      	bls.n	800384a <DMA_CheckFifoParam+0xb6>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d003      	beq.n	8003850 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003848:	e018      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      break;
 800384e:	e015      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      break;
 8003860:	e00b      	b.n	800387a <DMA_CheckFifoParam+0xe6>
      break;
 8003862:	bf00      	nop
 8003864:	e00a      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
 8003868:	e008      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 800386a:	bf00      	nop
 800386c:	e006      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;   
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
    }
  } 
  
  return status; 
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	@ 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e159      	b.n	8003b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f040 8148 	bne.w	8003b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d005      	beq.n	80038de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d130      	bne.n	8003940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2203      	movs	r2, #3
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003914:	2201      	movs	r2, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 0201 	and.w	r2, r3, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b03      	cmp	r3, #3
 800394a:	d017      	beq.n	800397c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d123      	bne.n	80039d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	220f      	movs	r2, #15
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	69b9      	ldr	r1, [r7, #24]
 80039cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a2 	beq.w	8003b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b57      	ldr	r3, [pc, #348]	@ (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	4a56      	ldr	r2, [pc, #344]	@ (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a22:	4b54      	ldr	r3, [pc, #336]	@ (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2e:	4a52      	ldr	r2, [pc, #328]	@ (8003b78 <HAL_GPIO_Init+0x2ec>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a49      	ldr	r2, [pc, #292]	@ (8003b7c <HAL_GPIO_Init+0x2f0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d019      	beq.n	8003a8e <HAL_GPIO_Init+0x202>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a48      	ldr	r2, [pc, #288]	@ (8003b80 <HAL_GPIO_Init+0x2f4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x1fe>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a47      	ldr	r2, [pc, #284]	@ (8003b84 <HAL_GPIO_Init+0x2f8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x1fa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a46      	ldr	r2, [pc, #280]	@ (8003b88 <HAL_GPIO_Init+0x2fc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x1f6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a45      	ldr	r2, [pc, #276]	@ (8003b8c <HAL_GPIO_Init+0x300>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x1f2>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	e008      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a82:	2303      	movs	r3, #3
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa0:	4935      	ldr	r1, [pc, #212]	@ (8003b78 <HAL_GPIO_Init+0x2ec>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aae:	4b38      	ldr	r3, [pc, #224]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003afc:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b26:	4a1a      	ldr	r2, [pc, #104]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2c:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b50:	4a0f      	ldr	r2, [pc, #60]	@ (8003b90 <HAL_GPIO_Init+0x304>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	f67f aea2 	bls.w	80038a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020800 	.word	0x40020800
 8003b88:	40020c00 	.word	0x40020c00
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e001      	b.n	8003bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	807b      	strh	r3, [r7, #2]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd4:	787b      	ldrb	r3, [r7, #1]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003be0:	e003      	b.n	8003bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	041a      	lsls	r2, r3, #16
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	619a      	str	r2, [r3, #24]
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e128      	b.n	8003e5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a90      	ldr	r2, [pc, #576]	@ (8003e64 <HAL_I2S_Init+0x26c>)
 8003c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fe fa21 	bl	800206c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d060      	beq.n	8003d18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c5e:	2310      	movs	r3, #16
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e001      	b.n	8003c68 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c64:	2320      	movs	r3, #32
 8003c66:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d802      	bhi.n	8003c76 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c76:	2001      	movs	r0, #1
 8003c78:	f001 faa8 	bl	80051cc <HAL_RCCEx_GetPeriphCLKFreq>
 8003c7c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c86:	d125      	bne.n	8003cd4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	3305      	adds	r3, #5
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e01f      	b.n	8003cf2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	3305      	adds	r3, #5
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e00e      	b.n	8003cf2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	3305      	adds	r3, #5
 8003cf0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4a5c      	ldr	r2, [pc, #368]	@ (8003e68 <HAL_I2S_Init+0x270>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	08db      	lsrs	r3, r3, #3
 8003cfc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e003      	b.n	8003d20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d902      	bls.n	8003d2c <HAL_I2S_Init+0x134>
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2bff      	cmp	r3, #255	@ 0xff
 8003d2a:	d907      	bls.n	8003d3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	f043 0210 	orr.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e08f      	b.n	8003e5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	ea42 0103 	orr.w	r1, r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d5a:	f023 030f 	bic.w	r3, r3, #15
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6851      	ldr	r1, [r2, #4]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6892      	ldr	r2, [r2, #8]
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68d2      	ldr	r2, [r2, #12]
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6992      	ldr	r2, [r2, #24]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d161      	bne.n	8003e4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a38      	ldr	r2, [pc, #224]	@ (8003e6c <HAL_I2S_Init+0x274>)
 8003d8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a37      	ldr	r2, [pc, #220]	@ (8003e70 <HAL_I2S_Init+0x278>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_I2S_Init+0x1a4>
 8003d98:	4b36      	ldr	r3, [pc, #216]	@ (8003e74 <HAL_I2S_Init+0x27c>)
 8003d9a:	e001      	b.n	8003da0 <HAL_I2S_Init+0x1a8>
 8003d9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	4932      	ldr	r1, [pc, #200]	@ (8003e70 <HAL_I2S_Init+0x278>)
 8003da8:	428a      	cmp	r2, r1
 8003daa:	d101      	bne.n	8003db0 <HAL_I2S_Init+0x1b8>
 8003dac:	4a31      	ldr	r2, [pc, #196]	@ (8003e74 <HAL_I2S_Init+0x27c>)
 8003dae:	e001      	b.n	8003db4 <HAL_I2S_Init+0x1bc>
 8003db0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003db4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003db8:	f023 030f 	bic.w	r3, r3, #15
 8003dbc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_I2S_Init+0x278>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2S_Init+0x1d4>
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <HAL_I2S_Init+0x27c>)
 8003dca:	e001      	b.n	8003dd0 <HAL_I2S_Init+0x1d8>
 8003dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a25      	ldr	r2, [pc, #148]	@ (8003e70 <HAL_I2S_Init+0x278>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2S_Init+0x1ea>
 8003dde:	4b25      	ldr	r3, [pc, #148]	@ (8003e74 <HAL_I2S_Init+0x27c>)
 8003de0:	e001      	b.n	8003de6 <HAL_I2S_Init+0x1ee>
 8003de2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df2:	d003      	beq.n	8003dfc <HAL_I2S_Init+0x204>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e001      	b.n	8003e08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <HAL_I2S_Init+0x278>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2S_Init+0x24c>
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <HAL_I2S_Init+0x27c>)
 8003e42:	e001      	b.n	8003e48 <HAL_I2S_Init+0x250>
 8003e44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e48:	897a      	ldrh	r2, [r7, #10]
 8003e4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	08004161 	.word	0x08004161
 8003e68:	cccccccd 	.word	0xcccccccd
 8003e6c:	08004275 	.word	0x08004275
 8003e70:	40003800 	.word	0x40003800
 8003e74:	40003400 	.word	0x40003400

08003e78 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_I2S_Transmit_DMA+0x1a>
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e08a      	b.n	8003fac <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e082      	b.n	8003fac <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2S_Transmit_DMA+0x3e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e07a      	b.n	8003fac <HAL_I2S_Transmit_DMA+0x134>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d002      	beq.n	8003eea <HAL_I2S_Transmit_DMA+0x72>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d10a      	bne.n	8003f00 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003efe:	e005      	b.n	8003f0c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f10:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <HAL_I2S_Transmit_DMA+0x13c>)
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	4a27      	ldr	r2, [pc, #156]	@ (8003fb8 <HAL_I2S_Transmit_DMA+0x140>)
 8003f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	4a26      	ldr	r2, [pc, #152]	@ (8003fbc <HAL_I2S_Transmit_DMA+0x144>)
 8003f22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f2c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f34:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f3c:	f7ff f9e4 	bl	8003308 <HAL_DMA_Start_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00f      	beq.n	8003f66 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0208 	orr.w	r2, r3, #8
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e022      	b.n	8003fac <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0202 	orr.w	r2, r2, #2
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fa8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	0800403f 	.word	0x0800403f
 8003fb8:	08003ffd 	.word	0x08003ffd
 8003fbc:	0800405b 	.word	0x0800405b

08003fc0 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0202 	bic.w	r2, r2, #2
 8004020:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7fd faa1 	bl	8001578 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff ffb7 	bl	8003fc0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0203 	bic.w	r2, r2, #3
 8004076:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004090:	f043 0208 	orr.w	r2, r3, #8
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ffa5 	bl	8003fe8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10e      	bne.n	80040fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fd fa3f 	bl	8001578 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	b292      	uxth	r2, r2
 8004116:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10e      	bne.n	8004158 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004148:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff ff3e 	bl	8003fd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b04      	cmp	r3, #4
 800417a:	d13a      	bne.n	80041f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d109      	bne.n	800419a <I2S_IRQHandler+0x3a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b40      	cmp	r3, #64	@ 0x40
 8004192:	d102      	bne.n	800419a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ffb4 	bl	8004102 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b40      	cmp	r3, #64	@ 0x40
 80041a2:	d126      	bne.n	80041f2 <I2S_IRQHandler+0x92>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d11f      	bne.n	80041f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	f043 0202 	orr.w	r2, r3, #2
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fefb 	bl	8003fe8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d136      	bne.n	800426c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d109      	bne.n	800421c <I2S_IRQHandler+0xbc>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004212:	2b80      	cmp	r3, #128	@ 0x80
 8004214:	d102      	bne.n	800421c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff45 	bl	80040a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b08      	cmp	r3, #8
 8004224:	d122      	bne.n	800426c <I2S_IRQHandler+0x10c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b20      	cmp	r3, #32
 8004232:	d11b      	bne.n	800426c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004242:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff febe 	bl	8003fe8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a92      	ldr	r2, [pc, #584]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800428e:	4b92      	ldr	r3, [pc, #584]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004290:	e001      	b.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004292:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a8b      	ldr	r2, [pc, #556]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042ac:	4b8a      	ldr	r3, [pc, #552]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ae:	e001      	b.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c0:	d004      	beq.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 8099 	bne.w	80043fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d107      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f925 	bl	8004530 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9c8 	bl	8004690 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d13a      	bne.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d035      	beq.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6e      	ldr	r2, [pc, #440]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800431e:	4b6e      	ldr	r3, [pc, #440]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004320:	e001      	b.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4969      	ldr	r1, [pc, #420]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800432e:	428b      	cmp	r3, r1
 8004330:	d101      	bne.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004332:	4b69      	ldr	r3, [pc, #420]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004334:	e001      	b.n	800433a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004336:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800433a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800433e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800434e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fe34 	bl	8003fe8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	f040 80c3 	bne.w	8004512 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80bd 	beq.w	8004512 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a49      	ldr	r2, [pc, #292]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043b2:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043b4:	e001      	b.n	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4944      	ldr	r1, [pc, #272]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043c2:	428b      	cmp	r3, r1
 80043c4:	d101      	bne.n	80043ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043c6:	4b44      	ldr	r3, [pc, #272]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043c8:	e001      	b.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80043ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fdf6 	bl	8003fe8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043fc:	e089      	b.n	8004512 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d107      	bne.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8be 	bl	8004594 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8fd 	bl	800462c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b40      	cmp	r3, #64	@ 0x40
 800443a:	d12f      	bne.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004454:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004460:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004462:	e001      	b.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4919      	ldr	r1, [pc, #100]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004470:	428b      	cmp	r3, r1
 8004472:	d101      	bne.n	8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004474:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004476:	e001      	b.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004478:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800447c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004480:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	f043 0202 	orr.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fda6 	bl	8003fe8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d136      	bne.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d031      	beq.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044ba:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044bc:	e001      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4902      	ldr	r1, [pc, #8]	@ (80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d106      	bne.n	80044dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80044ce:	4b02      	ldr	r3, [pc, #8]	@ (80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044d0:	e006      	b.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80044d2:	bf00      	nop
 80044d4:	40003800 	.word	0x40003800
 80044d8:	40003400 	.word	0x40003400
 80044dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fd6c 	bl	8003fe8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004510:	e000      	b.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004512:	bf00      	nop
}
 8004514:	bf00      	nop
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	1c99      	adds	r1, r3, #2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6251      	str	r1, [r2, #36]	@ 0x24
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004570:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ffc9 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	1c99      	adds	r1, r3, #2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80045a6:	8819      	ldrh	r1, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004624 <I2SEx_TxISR_I2SExt+0x90>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <I2SEx_TxISR_I2SExt+0x22>
 80045b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <I2SEx_TxISR_I2SExt+0x94>)
 80045b4:	e001      	b.n	80045ba <I2SEx_TxISR_I2SExt+0x26>
 80045b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045ba:	460a      	mov	r2, r1
 80045bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d121      	bne.n	800461a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <I2SEx_TxISR_I2SExt+0x90>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <I2SEx_TxISR_I2SExt+0x50>
 80045e0:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <I2SEx_TxISR_I2SExt+0x94>)
 80045e2:	e001      	b.n	80045e8 <I2SEx_TxISR_I2SExt+0x54>
 80045e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	490d      	ldr	r1, [pc, #52]	@ (8004624 <I2SEx_TxISR_I2SExt+0x90>)
 80045f0:	428b      	cmp	r3, r1
 80045f2:	d101      	bne.n	80045f8 <I2SEx_TxISR_I2SExt+0x64>
 80045f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <I2SEx_TxISR_I2SExt+0x94>)
 80045f6:	e001      	b.n	80045fc <I2SEx_TxISR_I2SExt+0x68>
 80045f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004600:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff81 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40003800 	.word	0x40003800
 8004628:	40003400 	.word	0x40003400

0800462c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68d8      	ldr	r0, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	1c99      	adds	r1, r3, #2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004644:	b282      	uxth	r2, r0
 8004646:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d113      	bne.n	8004688 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800466e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ff4a 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <I2SEx_RxISR_I2SExt+0x90>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <I2SEx_RxISR_I2SExt+0x16>
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <I2SEx_RxISR_I2SExt+0x94>)
 80046a4:	e001      	b.n	80046aa <I2SEx_RxISR_I2SExt+0x1a>
 80046a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046aa:	68d8      	ldr	r0, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	1c99      	adds	r1, r3, #2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80046b6:	b282      	uxth	r2, r0
 80046b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d121      	bne.n	8004716 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <I2SEx_RxISR_I2SExt+0x90>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <I2SEx_RxISR_I2SExt+0x50>
 80046dc:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <I2SEx_RxISR_I2SExt+0x94>)
 80046de:	e001      	b.n	80046e4 <I2SEx_RxISR_I2SExt+0x54>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	490d      	ldr	r1, [pc, #52]	@ (8004720 <I2SEx_RxISR_I2SExt+0x90>)
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d101      	bne.n	80046f4 <I2SEx_RxISR_I2SExt+0x64>
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <I2SEx_RxISR_I2SExt+0x94>)
 80046f2:	e001      	b.n	80046f8 <I2SEx_RxISR_I2SExt+0x68>
 80046f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff03 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40003800 	.word	0x40003800
 8004724:	40003400 	.word	0x40003400

08004728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e267      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d075      	beq.n	8004832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004746:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d00c      	beq.n	800476c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b85      	ldr	r3, [pc, #532]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800475a:	2b08      	cmp	r3, #8
 800475c:	d112      	bne.n	8004784 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800475e:	4b82      	ldr	r3, [pc, #520]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800476a:	d10b      	bne.n	8004784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	4b7e      	ldr	r3, [pc, #504]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05b      	beq.n	8004830 <HAL_RCC_OscConfig+0x108>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d157      	bne.n	8004830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e242      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800478c:	d106      	bne.n	800479c <HAL_RCC_OscConfig+0x74>
 800478e:	4b76      	ldr	r3, [pc, #472]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a75      	ldr	r2, [pc, #468]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xb0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x98>
 80047a6:	4b70      	ldr	r3, [pc, #448]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xb0>
 80047c0:	4b69      	ldr	r3, [pc, #420]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a68      	ldr	r2, [pc, #416]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b66      	ldr	r3, [pc, #408]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a65      	ldr	r2, [pc, #404]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd fe96 	bl	8002510 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd fe92 	bl	8002510 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	@ 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e207      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xc0>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd fe82 	bl	8002510 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd fe7e 	bl	8002510 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	@ 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1f3      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	4b51      	ldr	r3, [pc, #324]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0xe8>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800483e:	4b4a      	ldr	r3, [pc, #296]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b47      	ldr	r3, [pc, #284]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004852:	2b08      	cmp	r3, #8
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004856:	4b44      	ldr	r3, [pc, #272]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b41      	ldr	r3, [pc, #260]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x152>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1c7      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4937      	ldr	r1, [pc, #220]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e03a      	b.n	8004906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b34      	ldr	r3, [pc, #208]	@ (800496c <HAL_RCC_OscConfig+0x244>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fd fe37 	bl	8002510 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fd fe33 	bl	8002510 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1a8      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b28      	ldr	r3, [pc, #160]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4925      	ldr	r1, [pc, #148]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048da:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_RCC_OscConfig+0x244>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fd fe16 	bl	8002510 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fd fe12 	bl	8002510 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e187      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d036      	beq.n	8004980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_RCC_OscConfig+0x248>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fd fdf6 	bl	8002510 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fd fdf2 	bl	8002510 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e167      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_OscConfig+0x240>)
 800493c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x200>
 8004946:	e01b      	b.n	8004980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <HAL_RCC_OscConfig+0x248>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fd fddf 	bl	8002510 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	e00e      	b.n	8004974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004956:	f7fd fddb 	bl	8002510 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d907      	bls.n	8004974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e150      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
 8004968:	40023800 	.word	0x40023800
 800496c:	42470000 	.word	0x42470000
 8004970:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004974:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ea      	bne.n	8004956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8097 	beq.w	8004abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004992:	4b81      	ldr	r3, [pc, #516]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b77      	ldr	r3, [pc, #476]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d118      	bne.n	80049fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b74      	ldr	r3, [pc, #464]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a73      	ldr	r2, [pc, #460]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fd fd9b 	bl	8002510 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049de:	f7fd fd97 	bl	8002510 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e10c      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b9c <HAL_RCC_OscConfig+0x474>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2ea>
 8004a04:	4b64      	ldr	r3, [pc, #400]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a08:	4a63      	ldr	r2, [pc, #396]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a10:	e01c      	b.n	8004a4c <HAL_RCC_OscConfig+0x324>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x30c>
 8004a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a26:	4b5c      	ldr	r3, [pc, #368]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0x324>
 8004a34:	4b58      	ldr	r3, [pc, #352]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4a57      	ldr	r2, [pc, #348]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a40:	4b55      	ldr	r3, [pc, #340]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	4a54      	ldr	r2, [pc, #336]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 0304 	bic.w	r3, r3, #4
 8004a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fd fd5c 	bl	8002510 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fd58 	bl	8002510 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e0cb      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	4b49      	ldr	r3, [pc, #292]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0ee      	beq.n	8004a5c <HAL_RCC_OscConfig+0x334>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a80:	f7fd fd46 	bl	8002510 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a88:	f7fd fd42 	bl	8002510 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0b5      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ee      	bne.n	8004a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab0:	4b39      	ldr	r3, [pc, #228]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	4a38      	ldr	r2, [pc, #224]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a1 	beq.w	8004c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac6:	4b34      	ldr	r3, [pc, #208]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d05c      	beq.n	8004b8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d141      	bne.n	8004b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b31      	ldr	r3, [pc, #196]	@ (8004ba0 <HAL_RCC_OscConfig+0x478>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fd16 	bl	8002510 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fd fd12 	bl	8002510 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e087      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	491b      	ldr	r1, [pc, #108]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <HAL_RCC_OscConfig+0x478>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fd fceb 	bl	8002510 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fd fce7 	bl	8002510 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e05c      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b50:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x416>
 8004b5c:	e054      	b.n	8004c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_RCC_OscConfig+0x478>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fd fcd4 	bl	8002510 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd fcd0 	bl	8002510 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e045      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_RCC_OscConfig+0x470>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x444>
 8004b8a:	e03d      	b.n	8004c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e038      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c14 <HAL_RCC_OscConfig+0x4ec>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d028      	beq.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d121      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d11a      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d111      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0cc      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b68      	ldr	r3, [pc, #416]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d90c      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b65      	ldr	r3, [pc, #404]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0b8      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c6c:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a58      	ldr	r2, [pc, #352]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c84:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a52      	ldr	r2, [pc, #328]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b50      	ldr	r3, [pc, #320]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	494d      	ldr	r1, [pc, #308]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d044      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d119      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e067      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf6:	4b37      	ldr	r3, [pc, #220]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4934      	ldr	r1, [pc, #208]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d08:	f7fd fc02 	bl	8002510 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fd fbfe 	bl	8002510 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e04f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 020c 	and.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1eb      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d20c      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e032      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d6c:	4b19      	ldr	r3, [pc, #100]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4916      	ldr	r1, [pc, #88]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8a:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	490e      	ldr	r1, [pc, #56]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d9e:	f000 f821 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004da2:	4602      	mov	r2, r0
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	490a      	ldr	r1, [pc, #40]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	5ccb      	ldrb	r3, [r1, r3]
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fb62 	bl	8002488 <HAL_InitTick>

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023c00 	.word	0x40023c00
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	08075de8 	.word	0x08075de8
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de8:	b094      	sub	sp, #80	@ 0x50
 8004dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dfc:	4b79      	ldr	r3, [pc, #484]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d00d      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x40>
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	f200 80e1 	bhi.w	8004fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x34>
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e16:	e0db      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b73      	ldr	r3, [pc, #460]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e1c:	e0db      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e1e:	4b73      	ldr	r3, [pc, #460]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x208>)
 8004e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e22:	e0d8      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e24:	4b6f      	ldr	r3, [pc, #444]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d063      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	2200      	movs	r2, #0
 8004e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e56:	4622      	mov	r2, r4
 8004e58:	462b      	mov	r3, r5
 8004e5a:	f04f 0000 	mov.w	r0, #0
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	0159      	lsls	r1, r3, #5
 8004e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e68:	0150      	lsls	r0, r2, #5
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4621      	mov	r1, r4
 8004e70:	1a51      	subs	r1, r2, r1
 8004e72:	6139      	str	r1, [r7, #16]
 8004e74:	4629      	mov	r1, r5
 8004e76:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e88:	4659      	mov	r1, fp
 8004e8a:	018b      	lsls	r3, r1, #6
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e92:	4651      	mov	r1, sl
 8004e94:	018a      	lsls	r2, r1, #6
 8004e96:	4651      	mov	r1, sl
 8004e98:	ebb2 0801 	subs.w	r8, r2, r1
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eb6:	4690      	mov	r8, r2
 8004eb8:	4699      	mov	r9, r3
 8004eba:	4623      	mov	r3, r4
 8004ebc:	eb18 0303 	adds.w	r3, r8, r3
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	eb49 0303 	adc.w	r3, r9, r3
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	024b      	lsls	r3, r1, #9
 8004eda:	4621      	mov	r1, r4
 8004edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	024a      	lsls	r2, r1, #9
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eea:	2200      	movs	r2, #0
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ef4:	f7fb f96e 	bl	80001d4 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4613      	mov	r3, r2
 8004efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f00:	e058      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f02:	4b38      	ldr	r3, [pc, #224]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	2300      	movs	r3, #0
 8004f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	f04f 0000 	mov.w	r0, #0
 8004f24:	f04f 0100 	mov.w	r1, #0
 8004f28:	0159      	lsls	r1, r3, #5
 8004f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f2e:	0150      	lsls	r0, r2, #5
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4641      	mov	r1, r8
 8004f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f54:	ebb2 040a 	subs.w	r4, r2, sl
 8004f58:	eb63 050b 	sbc.w	r5, r3, fp
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	00eb      	lsls	r3, r5, #3
 8004f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6a:	00e2      	lsls	r2, r4, #3
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	461d      	mov	r5, r3
 8004f70:	4643      	mov	r3, r8
 8004f72:	18e3      	adds	r3, r4, r3
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	464b      	mov	r3, r9
 8004f78:	eb45 0303 	adc.w	r3, r5, r3
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	028b      	lsls	r3, r1, #10
 8004f8e:	4621      	mov	r1, r4
 8004f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f94:	4621      	mov	r1, r4
 8004f96:	028a      	lsls	r2, r1, #10
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	61fa      	str	r2, [r7, #28]
 8004fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa8:	f7fb f914 	bl	80001d4 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fce:	e002      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd0:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3750      	adds	r7, #80	@ 0x50
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	00f42400 	.word	0x00f42400
 8004fec:	007a1200 	.word	0x007a1200

08004ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d035      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005018:	4b67      	ldr	r3, [pc, #412]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800501e:	f7fd fa77 	bl	8002510 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005026:	f7fd fa73 	bl	8002510 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e0ba      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005038:	4b60      	ldr	r3, [pc, #384]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	019a      	lsls	r2, r3, #6
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	071b      	lsls	r3, r3, #28
 8005050:	495a      	ldr	r1, [pc, #360]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005058:	4b57      	ldr	r3, [pc, #348]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800505e:	f7fd fa57 	bl	8002510 <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005066:	f7fd fa53 	bl	8002510 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e09a      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005078:	4b50      	ldr	r3, [pc, #320]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	4b49      	ldr	r3, [pc, #292]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	4a48      	ldr	r2, [pc, #288]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050a2:	4b46      	ldr	r3, [pc, #280]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ae:	4b44      	ldr	r3, [pc, #272]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a43      	ldr	r2, [pc, #268]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050ba:	f7fd fa29 	bl	8002510 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fd fa25 	bl	8002510 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e06c      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050d4:	4b3a      	ldr	r3, [pc, #232]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050e0:	4b36      	ldr	r3, [pc, #216]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02f      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d028      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050fe:	4b2f      	ldr	r3, [pc, #188]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005106:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005108:	4b2e      	ldr	r3, [pc, #184]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800510e:	4b2d      	ldr	r3, [pc, #180]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005114:	4a29      	ldr	r2, [pc, #164]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800511a:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d114      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005126:	f7fd f9f3 	bl	8002510 <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fd f9ef 	bl	8002510 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e034      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005144:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ee      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800515c:	d10d      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800515e:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800516e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005172:	4912      	ldr	r1, [pc, #72]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	608b      	str	r3, [r1, #8]
 8005178:	e005      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800517a:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	4a0f      	ldr	r2, [pc, #60]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005180:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005188:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005192:	490a      	ldr	r1, [pc, #40]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005194:	4313      	orrs	r3, r2
 8005196:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7c1a      	ldrb	r2, [r3, #16]
 80051a8:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80051aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	42470068 	.word	0x42470068
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40007000 	.word	0x40007000
 80051c4:	42470e40 	.word	0x42470e40
 80051c8:	424711e0 	.word	0x424711e0

080051cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d13f      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005200:	d12f      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005202:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005204:	617b      	str	r3, [r7, #20]
          break;
 8005206:	e02f      	b.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005208:	4b1c      	ldr	r3, [pc, #112]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005214:	d108      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005216:	4b19      	ldr	r3, [pc, #100]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800521e:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e007      	b.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005228:	4b14      	ldr	r3, [pc, #80]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005230:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005238:	4b10      	ldr	r3, [pc, #64]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523e:	099b      	lsrs	r3, r3, #6
 8005240:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800524e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005252:	0f1b      	lsrs	r3, r3, #28
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	617b      	str	r3, [r7, #20]
          break;
 8005260:	e002      	b.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
          break;
 8005266:	bf00      	nop
        }
      }
      break;
 8005268:	e000      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800526a:	bf00      	nop
    }
  }
  return frequency;
 800526c:	697b      	ldr	r3, [r7, #20]
}
 800526e:	4618      	mov	r0, r3
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	00bb8000 	.word	0x00bb8000
 8005284:	007a1200 	.word	0x007a1200
 8005288:	00f42400 	.word	0x00f42400

0800528c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e07b      	b.n	8005396 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052ae:	d009      	beq.n	80052c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	61da      	str	r2, [r3, #28]
 80052b6:	e005      	b.n	80052c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc ff60 	bl	80021a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005348:	ea42 0103 	orr.w	r1, r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005350:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0104 	and.w	r1, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	f003 0210 	and.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005384:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b088      	sub	sp, #32
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ae:	f7fd f8af 	bl	8002510 <HAL_GetTick>
 80053b2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d001      	beq.n	80053c8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
 80053c6:	e12a      	b.n	800561e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x36>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e122      	b.n	800561e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_SPI_Transmit+0x48>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e11b      	b.n	800561e <HAL_SPI_Transmit+0x280>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2203      	movs	r2, #3
 80053f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005434:	d10f      	bne.n	8005456 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005454:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005460:	2b40      	cmp	r3, #64	@ 0x40
 8005462:	d007      	beq.n	8005474 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547c:	d152      	bne.n	8005524 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_SPI_Transmit+0xee>
 8005486:	8b7b      	ldrh	r3, [r7, #26]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d145      	bne.n	8005518 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054b0:	e032      	b.n	8005518 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d112      	bne.n	80054e6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c4:	881a      	ldrh	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	1c9a      	adds	r2, r3, #2
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054e4:	e018      	b.n	8005518 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e6:	f7fd f813 	bl	8002510 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d803      	bhi.n	80054fe <HAL_SPI_Transmit+0x160>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Transmit+0x166>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e082      	b.n	800561e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1c7      	bne.n	80054b2 <HAL_SPI_Transmit+0x114>
 8005522:	e053      	b.n	80055cc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_Transmit+0x194>
 800552c:	8b7b      	ldrh	r3, [r7, #26]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d147      	bne.n	80055c2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005558:	e033      	b.n	80055c2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d113      	bne.n	8005590 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	7812      	ldrb	r2, [r2, #0]
 8005574:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800558e:	e018      	b.n	80055c2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005590:	f7fc ffbe 	bl	8002510 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d803      	bhi.n	80055a8 <HAL_SPI_Transmit+0x20a>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Transmit+0x210>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e02d      	b.n	800561e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1c6      	bne.n	800555a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fbe7 	bl	8005da4 <SPI_EndRxTxTransaction>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800561c:	2300      	movs	r3, #0
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b088      	sub	sp, #32
 800562a:	af02      	add	r7, sp, #8
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
 8005644:	e104      	b.n	8005850 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800564e:	d112      	bne.n	8005676 <HAL_SPI_Receive+0x50>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10e      	bne.n	8005676 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2204      	movs	r2, #4
 800565c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005660:	88fa      	ldrh	r2, [r7, #6]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f8f3 	bl	8005858 <HAL_SPI_TransmitReceive>
 8005672:	4603      	mov	r3, r0
 8005674:	e0ec      	b.n	8005850 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005676:	f7fc ff4b 	bl	8002510 <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Receive+0x62>
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0e1      	b.n	8005850 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_SPI_Receive+0x74>
 8005696:	2302      	movs	r3, #2
 8005698:	e0da      	b.n	8005850 <HAL_SPI_Receive+0x22a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2204      	movs	r2, #4
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e8:	d10f      	bne.n	800570a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005708:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	d007      	beq.n	8005728 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d170      	bne.n	8005812 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005730:	e035      	b.n	800579e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d115      	bne.n	800576c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f103 020c 	add.w	r2, r3, #12
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800576a:	e018      	b.n	800579e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576c:	f7fc fed0 	bl	8002510 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d803      	bhi.n	8005784 <HAL_SPI_Receive+0x15e>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d102      	bne.n	800578a <HAL_SPI_Receive+0x164>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e058      	b.n	8005850 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1c4      	bne.n	8005732 <HAL_SPI_Receive+0x10c>
 80057a8:	e038      	b.n	800581c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d113      	bne.n	80057e0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	b292      	uxth	r2, r2
 80057c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057de:	e018      	b.n	8005812 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e0:	f7fc fe96 	bl	8002510 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d803      	bhi.n	80057f8 <HAL_SPI_Receive+0x1d2>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d102      	bne.n	80057fe <HAL_SPI_Receive+0x1d8>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e01e      	b.n	8005850 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1c6      	bne.n	80057aa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fa59 	bl	8005cd8 <SPI_EndRxTransaction>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800584e:	2300      	movs	r3, #0
  }
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005866:	2301      	movs	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586a:	f7fc fe51 	bl	8002510 <HAL_GetTick>
 800586e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005876:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800587e:	887b      	ldrh	r3, [r7, #2]
 8005880:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005882:	7ffb      	ldrb	r3, [r7, #31]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d00c      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x4a>
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800588e:	d106      	bne.n	800589e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <HAL_SPI_TransmitReceive+0x46>
 8005898:	7ffb      	ldrb	r3, [r7, #31]
 800589a:	2b04      	cmp	r3, #4
 800589c:	d001      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800589e:	2302      	movs	r3, #2
 80058a0:	e17f      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x5c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x5c>
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e174      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x6e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e16d      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d003      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2205      	movs	r2, #5
 80058de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	887a      	ldrh	r2, [r7, #2]
 80058f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	887a      	ldrh	r2, [r7, #2]
 8005904:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	887a      	ldrh	r2, [r7, #2]
 800590a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	d007      	beq.n	8005936 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800593e:	d17e      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_SPI_TransmitReceive+0xf6>
 8005948:	8afb      	ldrh	r3, [r7, #22]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d16c      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	881a      	ldrh	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	1c9a      	adds	r2, r3, #2
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005972:	e059      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d11b      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x162>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <HAL_SPI_TransmitReceive+0x162>
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	2b01      	cmp	r3, #1
 8005990:	d113      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	881a      	ldrh	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	1c9a      	adds	r2, r3, #2
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d119      	bne.n	80059fc <HAL_SPI_TransmitReceive+0x1a4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d014      	beq.n	80059fc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	b292      	uxth	r2, r2
 80059de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e4:	1c9a      	adds	r2, r3, #2
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059f8:	2301      	movs	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059fc:	f7fc fd88 	bl	8002510 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d80d      	bhi.n	8005a28 <HAL_SPI_TransmitReceive+0x1d0>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d009      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e0bc      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1a0      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x11c>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d19b      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x11c>
 8005a3c:	e082      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x1f4>
 8005a46:	8afb      	ldrh	r3, [r7, #22]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d171      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a72:	e05d      	b.n	8005b30 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d11c      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x264>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x264>
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d114      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d119      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x2a6>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d014      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005afa:	2301      	movs	r3, #1
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005afe:	f7fc fd07 	bl	8002510 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d803      	bhi.n	8005b16 <HAL_SPI_TransmitReceive+0x2be>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x2c4>
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e038      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d19c      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x21c>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d197      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f92b 	bl	8005da4 <SPI_EndRxTxTransaction>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01d      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3728      	adds	r7, #40	@ 0x28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bb8:	b2db      	uxtb	r3, r3
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bd8:	f7fc fc9a 	bl	8002510 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005be8:	f7fc fc92 	bl	8002510 <HAL_GetTick>
 8005bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bee:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	015b      	lsls	r3, r3, #5
 8005bf4:	0d1b      	lsrs	r3, r3, #20
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bfe:	e054      	b.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d050      	beq.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c08:	f7fc fc82 	bl	8002510 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d902      	bls.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d13d      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c36:	d111      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c40:	d004      	beq.n	8005c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d107      	bne.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d10f      	bne.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e017      	b.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d19b      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000008 	.word	0x20000008

08005cd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cec:	d111      	bne.n	8005d12 <SPI_EndRxTransaction+0x3a>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf6:	d004      	beq.n	8005d02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d00:	d107      	bne.n	8005d12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d1a:	d12a      	bne.n	8005d72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d24:	d012      	beq.n	8005d4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2180      	movs	r1, #128	@ 0x80
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff ff49 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d02d      	beq.n	8005d98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e026      	b.n	8005d9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	2101      	movs	r1, #1
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff ff36 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01a      	beq.n	8005d98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e013      	b.n	8005d9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ff23 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e000      	b.n	8005d9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2201      	movs	r2, #1
 8005db8:	2102      	movs	r1, #2
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff ff04 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d007      	beq.n	8005dd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e032      	b.n	8005e3c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <SPI_EndRxTxTransaction+0xa0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <SPI_EndRxTxTransaction+0xa4>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	0d5b      	lsrs	r3, r3, #21
 8005de2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005df4:	d112      	bne.n	8005e1c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	@ 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff fee1 	bl	8005bc8 <SPI_WaitFlagStateUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d016      	beq.n	8005e3a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e00f      	b.n	8005e3c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e32:	2b80      	cmp	r3, #128	@ 0x80
 8005e34:	d0f2      	beq.n	8005e1c <SPI_EndRxTxTransaction+0x78>
 8005e36:	e000      	b.n	8005e3a <SPI_EndRxTxTransaction+0x96>
        break;
 8005e38:	bf00      	nop
  }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20000008 	.word	0x20000008
 8005e48:	165e9f81 	.word	0x165e9f81

08005e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e041      	b.n	8005ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc f9de 	bl	8002234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f000 fa62 	bl	8006354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d001      	beq.n	8005f04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e03c      	b.n	8005f7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1e      	ldr	r2, [pc, #120]	@ (8005f8c <HAL_TIM_Base_Start+0xa0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d018      	beq.n	8005f48 <HAL_TIM_Base_Start+0x5c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1e:	d013      	beq.n	8005f48 <HAL_TIM_Base_Start+0x5c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1a      	ldr	r2, [pc, #104]	@ (8005f90 <HAL_TIM_Base_Start+0xa4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_TIM_Base_Start+0x5c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a19      	ldr	r2, [pc, #100]	@ (8005f94 <HAL_TIM_Base_Start+0xa8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d009      	beq.n	8005f48 <HAL_TIM_Base_Start+0x5c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a17      	ldr	r2, [pc, #92]	@ (8005f98 <HAL_TIM_Base_Start+0xac>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIM_Base_Start+0x5c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <HAL_TIM_Base_Start+0xb0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d111      	bne.n	8005f6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b06      	cmp	r3, #6
 8005f58:	d010      	beq.n	8005f7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6a:	e007      	b.n	8005f7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40014000 	.word	0x40014000

08005fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e041      	b.n	8006036 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fc f956 	bl	8002278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f000 f9b8 	bl	8006354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800605a:	2302      	movs	r3, #2
 800605c:	e0ae      	b.n	80061bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b0c      	cmp	r3, #12
 800606a:	f200 809f 	bhi.w	80061ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800606e:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080061ad 	.word	0x080061ad
 800607c:	080061ad 	.word	0x080061ad
 8006080:	080061ad 	.word	0x080061ad
 8006084:	080060e9 	.word	0x080060e9
 8006088:	080061ad 	.word	0x080061ad
 800608c:	080061ad 	.word	0x080061ad
 8006090:	080061ad 	.word	0x080061ad
 8006094:	0800612b 	.word	0x0800612b
 8006098:	080061ad 	.word	0x080061ad
 800609c:	080061ad 	.word	0x080061ad
 80060a0:	080061ad 	.word	0x080061ad
 80060a4:	0800616b 	.word	0x0800616b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f9dc 	bl	800646c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0208 	orr.w	r2, r2, #8
 80060c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6999      	ldr	r1, [r3, #24]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	619a      	str	r2, [r3, #24]
      break;
 80060e6:	e064      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fa22 	bl	8006538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6999      	ldr	r1, [r3, #24]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	619a      	str	r2, [r3, #24]
      break;
 8006128:	e043      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fa6d 	bl	8006610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0208 	orr.w	r2, r2, #8
 8006144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0204 	bic.w	r2, r2, #4
 8006154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69d9      	ldr	r1, [r3, #28]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	61da      	str	r2, [r3, #28]
      break;
 8006168:	e023      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fab7 	bl	80066e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69d9      	ldr	r1, [r3, #28]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	021a      	lsls	r2, r3, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	61da      	str	r2, [r3, #28]
      break;
 80061aa:	e002      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
      break;
 80061b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_TIM_ConfigClockSource+0x1c>
 80061dc:	2302      	movs	r3, #2
 80061de:	e0b4      	b.n	800634a <HAL_TIM_ConfigClockSource+0x186>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006218:	d03e      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0xd4>
 800621a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621e:	f200 8087 	bhi.w	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006226:	f000 8086 	beq.w	8006336 <HAL_TIM_ConfigClockSource+0x172>
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622e:	d87f      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006230:	2b70      	cmp	r3, #112	@ 0x70
 8006232:	d01a      	beq.n	800626a <HAL_TIM_ConfigClockSource+0xa6>
 8006234:	2b70      	cmp	r3, #112	@ 0x70
 8006236:	d87b      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006238:	2b60      	cmp	r3, #96	@ 0x60
 800623a:	d050      	beq.n	80062de <HAL_TIM_ConfigClockSource+0x11a>
 800623c:	2b60      	cmp	r3, #96	@ 0x60
 800623e:	d877      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b50      	cmp	r3, #80	@ 0x50
 8006242:	d03c      	beq.n	80062be <HAL_TIM_ConfigClockSource+0xfa>
 8006244:	2b50      	cmp	r3, #80	@ 0x50
 8006246:	d873      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	d058      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x13a>
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d86f      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b30      	cmp	r3, #48	@ 0x30
 8006252:	d064      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x15a>
 8006254:	2b30      	cmp	r3, #48	@ 0x30
 8006256:	d86b      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006258:	2b20      	cmp	r3, #32
 800625a:	d060      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x15a>
 800625c:	2b20      	cmp	r3, #32
 800625e:	d867      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d05c      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x15a>
 8006264:	2b10      	cmp	r3, #16
 8006266:	d05a      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x15a>
 8006268:	e062      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800627a:	f000 fafd 	bl	8006878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800628c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	609a      	str	r2, [r3, #8]
      break;
 8006296:	e04f      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062a8:	f000 fae6 	bl	8006878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ba:	609a      	str	r2, [r3, #8]
      break;
 80062bc:	e03c      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ca:	461a      	mov	r2, r3
 80062cc:	f000 fa5a 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2150      	movs	r1, #80	@ 0x50
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fab3 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 80062dc:	e02c      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ea:	461a      	mov	r2, r3
 80062ec:	f000 fa79 	bl	80067e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2160      	movs	r1, #96	@ 0x60
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 faa3 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 80062fc:	e01c      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800630a:	461a      	mov	r2, r3
 800630c:	f000 fa3a 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2140      	movs	r1, #64	@ 0x40
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fa93 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 800631c:	e00c      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f000 fa8a 	bl	8006842 <TIM_ITRx_SetConfig>
      break;
 800632e:	e003      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
      break;
 8006334:	e000      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a3a      	ldr	r2, [pc, #232]	@ (8006450 <TIM_Base_SetConfig+0xfc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00f      	beq.n	800638c <TIM_Base_SetConfig+0x38>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006372:	d00b      	beq.n	800638c <TIM_Base_SetConfig+0x38>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a37      	ldr	r2, [pc, #220]	@ (8006454 <TIM_Base_SetConfig+0x100>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_Base_SetConfig+0x38>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a36      	ldr	r2, [pc, #216]	@ (8006458 <TIM_Base_SetConfig+0x104>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_Base_SetConfig+0x38>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a35      	ldr	r2, [pc, #212]	@ (800645c <TIM_Base_SetConfig+0x108>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d108      	bne.n	800639e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006450 <TIM_Base_SetConfig+0xfc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d01b      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ac:	d017      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a28      	ldr	r2, [pc, #160]	@ (8006454 <TIM_Base_SetConfig+0x100>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a27      	ldr	r2, [pc, #156]	@ (8006458 <TIM_Base_SetConfig+0x104>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00f      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a26      	ldr	r2, [pc, #152]	@ (800645c <TIM_Base_SetConfig+0x108>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00b      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a25      	ldr	r2, [pc, #148]	@ (8006460 <TIM_Base_SetConfig+0x10c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d007      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a24      	ldr	r2, [pc, #144]	@ (8006464 <TIM_Base_SetConfig+0x110>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d003      	beq.n	80063de <TIM_Base_SetConfig+0x8a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a23      	ldr	r2, [pc, #140]	@ (8006468 <TIM_Base_SetConfig+0x114>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d108      	bne.n	80063f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a0e      	ldr	r2, [pc, #56]	@ (8006450 <TIM_Base_SetConfig+0xfc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d103      	bne.n	8006424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]
  }
}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40014000 	.word	0x40014000
 8006464:	40014400 	.word	0x40014400
 8006468:	40014800 	.word	0x40014800

0800646c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f023 0201 	bic.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f023 0302 	bic.w	r3, r3, #2
 80064b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <TIM_OC1_SetConfig+0xc8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0308 	bic.w	r3, r3, #8
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0304 	bic.w	r3, r3, #4
 80064e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a13      	ldr	r2, [pc, #76]	@ (8006534 <TIM_OC1_SetConfig+0xc8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d111      	bne.n	800650e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	40010000 	.word	0x40010000

08006538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f023 0210 	bic.w	r2, r3, #16
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800656e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0320 	bic.w	r3, r3, #32
 8006582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a1e      	ldr	r2, [pc, #120]	@ (800660c <TIM_OC2_SetConfig+0xd4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10d      	bne.n	80065b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a15      	ldr	r2, [pc, #84]	@ (800660c <TIM_OC2_SetConfig+0xd4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d113      	bne.n	80065e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40010000 	.word	0x40010000

08006610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1d      	ldr	r2, [pc, #116]	@ (80066e0 <TIM_OC3_SetConfig+0xd0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d10d      	bne.n	800668a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a14      	ldr	r2, [pc, #80]	@ (80066e0 <TIM_OC3_SetConfig+0xd0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d113      	bne.n	80066ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40010000 	.word	0x40010000

080066e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800672e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a10      	ldr	r2, [pc, #64]	@ (8006780 <TIM_OC4_SetConfig+0x9c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d109      	bne.n	8006758 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800674a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	019b      	lsls	r3, r3, #6
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40010000 	.word	0x40010000

08006784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 030a 	bic.w	r3, r3, #10
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b087      	sub	sp, #28
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 0210 	bic.w	r2, r3, #16
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800680c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800681e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	f043 0307 	orr.w	r3, r3, #7
 8006864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	609a      	str	r2, [r3, #8]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	021a      	lsls	r2, r3, #8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	431a      	orrs	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4313      	orrs	r3, r2
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	609a      	str	r2, [r3, #8]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e050      	b.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1c      	ldr	r2, [pc, #112]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800691c:	d013      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a16      	ldr	r2, [pc, #88]	@ (8006988 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a15      	ldr	r2, [pc, #84]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a13      	ldr	r2, [pc, #76]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d10c      	bne.n	8006960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800694c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	4313      	orrs	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40014000 	.word	0x40014000

08006994 <swapfunc>:
 8006994:	2b02      	cmp	r3, #2
 8006996:	b510      	push	{r4, lr}
 8006998:	d00a      	beq.n	80069b0 <swapfunc+0x1c>
 800699a:	0892      	lsrs	r2, r2, #2
 800699c:	3a01      	subs	r2, #1
 800699e:	6803      	ldr	r3, [r0, #0]
 80069a0:	680c      	ldr	r4, [r1, #0]
 80069a2:	f840 4b04 	str.w	r4, [r0], #4
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	f841 3b04 	str.w	r3, [r1], #4
 80069ac:	dcf6      	bgt.n	800699c <swapfunc+0x8>
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	4402      	add	r2, r0
 80069b2:	780c      	ldrb	r4, [r1, #0]
 80069b4:	7803      	ldrb	r3, [r0, #0]
 80069b6:	f800 4b01 	strb.w	r4, [r0], #1
 80069ba:	f801 3b01 	strb.w	r3, [r1], #1
 80069be:	1a13      	subs	r3, r2, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dcf6      	bgt.n	80069b2 <swapfunc+0x1e>
 80069c4:	e7f3      	b.n	80069ae <swapfunc+0x1a>

080069c6 <med3.constprop.0>:
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c8:	460f      	mov	r7, r1
 80069ca:	4616      	mov	r6, r2
 80069cc:	4604      	mov	r4, r0
 80069ce:	461d      	mov	r5, r3
 80069d0:	4798      	blx	r3
 80069d2:	2800      	cmp	r0, #0
 80069d4:	4631      	mov	r1, r6
 80069d6:	4638      	mov	r0, r7
 80069d8:	da0c      	bge.n	80069f4 <med3.constprop.0+0x2e>
 80069da:	47a8      	blx	r5
 80069dc:	2800      	cmp	r0, #0
 80069de:	da02      	bge.n	80069e6 <med3.constprop.0+0x20>
 80069e0:	463c      	mov	r4, r7
 80069e2:	4620      	mov	r0, r4
 80069e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e6:	4631      	mov	r1, r6
 80069e8:	4620      	mov	r0, r4
 80069ea:	47a8      	blx	r5
 80069ec:	2800      	cmp	r0, #0
 80069ee:	daf8      	bge.n	80069e2 <med3.constprop.0+0x1c>
 80069f0:	4634      	mov	r4, r6
 80069f2:	e7f6      	b.n	80069e2 <med3.constprop.0+0x1c>
 80069f4:	47a8      	blx	r5
 80069f6:	2800      	cmp	r0, #0
 80069f8:	dcf2      	bgt.n	80069e0 <med3.constprop.0+0x1a>
 80069fa:	4631      	mov	r1, r6
 80069fc:	4620      	mov	r0, r4
 80069fe:	47a8      	blx	r5
 8006a00:	2800      	cmp	r0, #0
 8006a02:	daf5      	bge.n	80069f0 <med3.constprop.0+0x2a>
 8006a04:	e7ed      	b.n	80069e2 <med3.constprop.0+0x1c>

08006a06 <qsort>:
 8006a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	b095      	sub	sp, #84	@ 0x54
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	ea40 0302 	orr.w	r3, r0, r2
 8006a14:	079b      	lsls	r3, r3, #30
 8006a16:	4615      	mov	r5, r2
 8006a18:	d118      	bne.n	8006a4c <qsort+0x46>
 8006a1a:	f1b2 0804 	subs.w	r8, r2, #4
 8006a1e:	bf18      	it	ne
 8006a20:	f04f 0801 	movne.w	r8, #1
 8006a24:	2300      	movs	r3, #0
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	fb05 f401 	mul.w	r4, r5, r1
 8006a2c:	193b      	adds	r3, r7, r4
 8006a2e:	2906      	cmp	r1, #6
 8006a30:	eb07 0b05 	add.w	fp, r7, r5
 8006a34:	9302      	str	r3, [sp, #8]
 8006a36:	d828      	bhi.n	8006a8a <qsort+0x84>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	459b      	cmp	fp, r3
 8006a3c:	d310      	bcc.n	8006a60 <qsort+0x5a>
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 8117 	bne.w	8006c74 <qsort+0x26e>
 8006a46:	b015      	add	sp, #84	@ 0x54
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	f04f 0802 	mov.w	r8, #2
 8006a50:	e7e8      	b.n	8006a24 <qsort+0x1e>
 8006a52:	4643      	mov	r3, r8
 8006a54:	462a      	mov	r2, r5
 8006a56:	4631      	mov	r1, r6
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7ff ff9b 	bl	8006994 <swapfunc>
 8006a5e:	e00f      	b.n	8006a80 <qsort+0x7a>
 8006a60:	465c      	mov	r4, fp
 8006a62:	e00e      	b.n	8006a82 <qsort+0x7c>
 8006a64:	1b66      	subs	r6, r4, r5
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	4798      	blx	r3
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	dd09      	ble.n	8006a86 <qsort+0x80>
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	d1ec      	bne.n	8006a52 <qsort+0x4c>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	6832      	ldr	r2, [r6, #0]
 8006a7c:	6022      	str	r2, [r4, #0]
 8006a7e:	6033      	str	r3, [r6, #0]
 8006a80:	4634      	mov	r4, r6
 8006a82:	42a7      	cmp	r7, r4
 8006a84:	d3ee      	bcc.n	8006a64 <qsort+0x5e>
 8006a86:	44ab      	add	fp, r5
 8006a88:	e7d6      	b.n	8006a38 <qsort+0x32>
 8006a8a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8006a8e:	1b64      	subs	r4, r4, r5
 8006a90:	2907      	cmp	r1, #7
 8006a92:	fb05 7909 	mla	r9, r5, r9, r7
 8006a96:	443c      	add	r4, r7
 8006a98:	d021      	beq.n	8006ade <qsort+0xd8>
 8006a9a:	2928      	cmp	r1, #40	@ 0x28
 8006a9c:	d944      	bls.n	8006b28 <qsort+0x122>
 8006a9e:	08ce      	lsrs	r6, r1, #3
 8006aa0:	436e      	muls	r6, r5
 8006aa2:	9b00      	ldr	r3, [sp, #0]
 8006aa4:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 8006aa8:	19b9      	adds	r1, r7, r6
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff ff8b 	bl	80069c6 <med3.constprop.0>
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	eb09 0206 	add.w	r2, r9, r6
 8006ab6:	9b00      	ldr	r3, [sp, #0]
 8006ab8:	4682      	mov	sl, r0
 8006aba:	1b88      	subs	r0, r1, r6
 8006abc:	f7ff ff83 	bl	80069c6 <med3.constprop.0>
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	9b00      	ldr	r3, [sp, #0]
 8006ac4:	4681      	mov	r9, r0
 8006ac6:	1ba1      	subs	r1, r4, r6
 8006ac8:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 8006acc:	f7ff ff7b 	bl	80069c6 <med3.constprop.0>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	9b00      	ldr	r3, [sp, #0]
 8006ad6:	4650      	mov	r0, sl
 8006ad8:	f7ff ff75 	bl	80069c6 <med3.constprop.0>
 8006adc:	4681      	mov	r9, r0
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d124      	bne.n	8006b2e <qsort+0x128>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f8d9 2000 	ldr.w	r2, [r9]
 8006aea:	603a      	str	r2, [r7, #0]
 8006aec:	f8c9 3000 	str.w	r3, [r9]
 8006af0:	46d9      	mov	r9, fp
 8006af2:	46a2      	mov	sl, r4
 8006af4:	465e      	mov	r6, fp
 8006af6:	2300      	movs	r3, #0
 8006af8:	45a1      	cmp	r9, r4
 8006afa:	d836      	bhi.n	8006b6a <qsort+0x164>
 8006afc:	9303      	str	r3, [sp, #12]
 8006afe:	4639      	mov	r1, r7
 8006b00:	9b00      	ldr	r3, [sp, #0]
 8006b02:	4648      	mov	r0, r9
 8006b04:	4798      	blx	r3
 8006b06:	2800      	cmp	r0, #0
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	dc2c      	bgt.n	8006b66 <qsort+0x160>
 8006b0c:	d10a      	bne.n	8006b24 <qsort+0x11e>
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	d113      	bne.n	8006b3c <qsort+0x136>
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	f8d9 2000 	ldr.w	r2, [r9]
 8006b1a:	6032      	str	r2, [r6, #0]
 8006b1c:	f8c9 3000 	str.w	r3, [r9]
 8006b20:	442e      	add	r6, r5
 8006b22:	2301      	movs	r3, #1
 8006b24:	44a9      	add	r9, r5
 8006b26:	e7e7      	b.n	8006af8 <qsort+0xf2>
 8006b28:	4622      	mov	r2, r4
 8006b2a:	46ba      	mov	sl, r7
 8006b2c:	e7d1      	b.n	8006ad2 <qsort+0xcc>
 8006b2e:	4643      	mov	r3, r8
 8006b30:	462a      	mov	r2, r5
 8006b32:	4649      	mov	r1, r9
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ff2d 	bl	8006994 <swapfunc>
 8006b3a:	e7d9      	b.n	8006af0 <qsort+0xea>
 8006b3c:	4643      	mov	r3, r8
 8006b3e:	462a      	mov	r2, r5
 8006b40:	4649      	mov	r1, r9
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7ff ff26 	bl	8006994 <swapfunc>
 8006b48:	e7ea      	b.n	8006b20 <qsort+0x11a>
 8006b4a:	d10b      	bne.n	8006b64 <qsort+0x15e>
 8006b4c:	f1b8 0f00 	cmp.w	r8, #0
 8006b50:	d113      	bne.n	8006b7a <qsort+0x174>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	f8da 2000 	ldr.w	r2, [sl]
 8006b58:	6022      	str	r2, [r4, #0]
 8006b5a:	f8ca 3000 	str.w	r3, [sl]
 8006b5e:	ebaa 0a05 	sub.w	sl, sl, r5
 8006b62:	2301      	movs	r3, #1
 8006b64:	1b64      	subs	r4, r4, r5
 8006b66:	45a1      	cmp	r9, r4
 8006b68:	d90e      	bls.n	8006b88 <qsort+0x182>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d140      	bne.n	8006bf0 <qsort+0x1ea>
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	459b      	cmp	fp, r3
 8006b72:	f4bf af64 	bcs.w	8006a3e <qsort+0x38>
 8006b76:	465c      	mov	r4, fp
 8006b78:	e036      	b.n	8006be8 <qsort+0x1e2>
 8006b7a:	4643      	mov	r3, r8
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	4651      	mov	r1, sl
 8006b80:	4620      	mov	r0, r4
 8006b82:	f7ff ff07 	bl	8006994 <swapfunc>
 8006b86:	e7ea      	b.n	8006b5e <qsort+0x158>
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	9b00      	ldr	r3, [sp, #0]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4798      	blx	r3
 8006b92:	2800      	cmp	r0, #0
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	dad8      	bge.n	8006b4a <qsort+0x144>
 8006b98:	f1b8 0f00 	cmp.w	r8, #0
 8006b9c:	d107      	bne.n	8006bae <qsort+0x1a8>
 8006b9e:	f8d9 3000 	ldr.w	r3, [r9]
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	f8c9 2000 	str.w	r2, [r9]
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	1b64      	subs	r4, r4, r5
 8006bac:	e7b9      	b.n	8006b22 <qsort+0x11c>
 8006bae:	4643      	mov	r3, r8
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4648      	mov	r0, r9
 8006bb6:	f7ff feed 	bl	8006994 <swapfunc>
 8006bba:	e7f6      	b.n	8006baa <qsort+0x1a4>
 8006bbc:	4643      	mov	r3, r8
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff fee6 	bl	8006994 <swapfunc>
 8006bc8:	e00d      	b.n	8006be6 <qsort+0x1e0>
 8006bca:	1b66      	subs	r6, r4, r5
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4798      	blx	r3
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	dd09      	ble.n	8006bec <qsort+0x1e6>
 8006bd8:	f1b8 0f00 	cmp.w	r8, #0
 8006bdc:	d1ee      	bne.n	8006bbc <qsort+0x1b6>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	6832      	ldr	r2, [r6, #0]
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	4634      	mov	r4, r6
 8006be8:	42a7      	cmp	r7, r4
 8006bea:	d3ee      	bcc.n	8006bca <qsort+0x1c4>
 8006bec:	44ab      	add	fp, r5
 8006bee:	e7be      	b.n	8006b6e <qsort+0x168>
 8006bf0:	eba9 0b06 	sub.w	fp, r9, r6
 8006bf4:	1bf2      	subs	r2, r6, r7
 8006bf6:	455a      	cmp	r2, fp
 8006bf8:	bfa8      	it	ge
 8006bfa:	465a      	movge	r2, fp
 8006bfc:	b12a      	cbz	r2, 8006c0a <qsort+0x204>
 8006bfe:	4643      	mov	r3, r8
 8006c00:	eba9 0102 	sub.w	r1, r9, r2
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff fec5 	bl	8006994 <swapfunc>
 8006c0a:	9b02      	ldr	r3, [sp, #8]
 8006c0c:	eba3 020a 	sub.w	r2, r3, sl
 8006c10:	ebaa 0404 	sub.w	r4, sl, r4
 8006c14:	1b52      	subs	r2, r2, r5
 8006c16:	42a2      	cmp	r2, r4
 8006c18:	bf28      	it	cs
 8006c1a:	4622      	movcs	r2, r4
 8006c1c:	b12a      	cbz	r2, 8006c2a <qsort+0x224>
 8006c1e:	9902      	ldr	r1, [sp, #8]
 8006c20:	4643      	mov	r3, r8
 8006c22:	1a89      	subs	r1, r1, r2
 8006c24:	4648      	mov	r0, r9
 8006c26:	f7ff feb5 	bl	8006994 <swapfunc>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	455c      	cmp	r4, fp
 8006c2e:	eba3 0604 	sub.w	r6, r3, r4
 8006c32:	d805      	bhi.n	8006c40 <qsort+0x23a>
 8006c34:	4623      	mov	r3, r4
 8006c36:	465c      	mov	r4, fp
 8006c38:	469b      	mov	fp, r3
 8006c3a:	4633      	mov	r3, r6
 8006c3c:	463e      	mov	r6, r7
 8006c3e:	461f      	mov	r7, r3
 8006c40:	45ab      	cmp	fp, r5
 8006c42:	d920      	bls.n	8006c86 <qsort+0x280>
 8006c44:	fbbb f1f5 	udiv	r1, fp, r5
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	2b07      	cmp	r3, #7
 8006c4c:	d80b      	bhi.n	8006c66 <qsort+0x260>
 8006c4e:	fbb4 f4f5 	udiv	r4, r4, r5
 8006c52:	aa14      	add	r2, sp, #80	@ 0x50
 8006c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c58:	f843 6c40 	str.w	r6, [r3, #-64]
 8006c5c:	f843 4c3c 	str.w	r4, [r3, #-60]
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	3301      	adds	r3, #1
 8006c64:	e6df      	b.n	8006a26 <qsort+0x20>
 8006c66:	9b00      	ldr	r3, [sp, #0]
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff fecb 	bl	8006a06 <qsort>
 8006c70:	42ac      	cmp	r4, r5
 8006c72:	d80b      	bhi.n	8006c8c <qsort+0x286>
 8006c74:	9b01      	ldr	r3, [sp, #4]
 8006c76:	aa14      	add	r2, sp, #80	@ 0x50
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c80:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 8006c84:	e6d0      	b.n	8006a28 <qsort+0x22>
 8006c86:	42ac      	cmp	r4, r5
 8006c88:	f67f aed9 	bls.w	8006a3e <qsort+0x38>
 8006c8c:	fbb4 f1f5 	udiv	r1, r4, r5
 8006c90:	4637      	mov	r7, r6
 8006c92:	e6c9      	b.n	8006a28 <qsort+0x22>

08006c94 <memset>:
 8006c94:	4402      	add	r2, r0
 8006c96:	4603      	mov	r3, r0
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <memset+0xa>
 8006c9c:	4770      	bx	lr
 8006c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca2:	e7f9      	b.n	8006c98 <memset+0x4>

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8006cdc <__libc_init_array+0x38>)
 8006ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce0 <__libc_init_array+0x3c>)
 8006caa:	1b64      	subs	r4, r4, r5
 8006cac:	10a4      	asrs	r4, r4, #2
 8006cae:	2600      	movs	r6, #0
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ce4 <__libc_init_array+0x40>)
 8006cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ce8 <__libc_init_array+0x44>)
 8006cb8:	f000 f826 	bl	8006d08 <_init>
 8006cbc:	1b64      	subs	r4, r4, r5
 8006cbe:	10a4      	asrs	r4, r4, #2
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	08075e08 	.word	0x08075e08
 8006ce0:	08075e08 	.word	0x08075e08
 8006ce4:	08075e08 	.word	0x08075e08
 8006ce8:	08075e0c 	.word	0x08075e0c

08006cec <memcpy>:
 8006cec:	440a      	add	r2, r1
 8006cee:	4291      	cmp	r1, r2
 8006cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cf4:	d100      	bne.n	8006cf8 <memcpy+0xc>
 8006cf6:	4770      	bx	lr
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d02:	4291      	cmp	r1, r2
 8006d04:	d1f9      	bne.n	8006cfa <memcpy+0xe>
 8006d06:	bd10      	pop	{r4, pc}

08006d08 <_init>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr

08006d14 <_fini>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr
