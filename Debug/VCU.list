
VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050280  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080562b8  080562b8  00058014  2**0
                  CONTENTS
  4 .ARM          00000008  080562b8  080562b8  000572b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080562c0  080562c0  00058014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080562c0  080562c0  000572c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080562c4  080562c4  000572c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080562c8  00058000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000014  080562dc  00058014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080562dc  000582bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00058014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011caa  00000000  00000000  00058044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c93  00000000  00000000  00069cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0006c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d58  00000000  00000000  0006dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019768  00000000  00000000  0006e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144d5  00000000  00000000  00087f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c7e3  00000000  00000000  0009c445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f0  00000000  00000000  00138c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000036a  00000000  00000000  0013d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013d6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006020 	.word	0x08006020

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08006020 	.word	0x08006020

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CANSPI_Initialize>:
  MCP2515_SetListenOnlyMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 80004ca:	f001 f859 	bl	8001580 <MCP2515_Reset>
  HAL_Delay(10);
 80004ce:	200a      	movs	r0, #10
 80004d0:	f001 fcac 	bl	8001e2c <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004d4:	2300      	movs	r3, #0
 80004d6:	723b      	strb	r3, [r7, #8]
  RXM0reg.RXM0SIDL = 0x00;
 80004d8:	2300      	movs	r3, #0
 80004da:	727b      	strb	r3, [r7, #9]
  RXM0reg.RXM0EID8 = 0x00;
 80004dc:	2300      	movs	r3, #0
 80004de:	72bb      	strb	r3, [r7, #10]
  RXM0reg.RXM0EID0 = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	72fb      	strb	r3, [r7, #11]
  
  RXM1reg.RXM1SIDH = 0x00;
 80004e4:	2300      	movs	r3, #0
 80004e6:	713b      	strb	r3, [r7, #4]
  RXM1reg.RXM1SIDL = 0x00;
 80004e8:	2300      	movs	r3, #0
 80004ea:	717b      	strb	r3, [r7, #5]
  RXM1reg.RXM1EID8 = 0x00;
 80004ec:	2300      	movs	r3, #0
 80004ee:	71bb      	strb	r3, [r7, #6]
  RXM1reg.RXM1EID0 = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	71fb      	strb	r3, [r7, #7]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3020 	strb.w	r3, [r7, #32]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004fa:	2300      	movs	r3, #0
 80004fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  RXF0reg.RXF0EID8 = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  RXF0reg.RXF0EID0 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
  RXF1reg.RXF1SIDH = 0x00;
 800050c:	2300      	movs	r3, #0
 800050e:	773b      	strb	r3, [r7, #28]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000510:	2308      	movs	r3, #8
 8000512:	777b      	strb	r3, [r7, #29]
  RXF1reg.RXF1EID8 = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	77bb      	strb	r3, [r7, #30]
  RXF1reg.RXF1EID0 = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	77fb      	strb	r3, [r7, #31]
  
  RXF2reg.RXF2SIDH = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	763b      	strb	r3, [r7, #24]
  RXF2reg.RXF2SIDL = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	767b      	strb	r3, [r7, #25]
  RXF2reg.RXF2EID8 = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	76bb      	strb	r3, [r7, #26]
  RXF2reg.RXF2EID0 = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	76fb      	strb	r3, [r7, #27]
  
  RXF3reg.RXF3SIDH = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	753b      	strb	r3, [r7, #20]
  RXF3reg.RXF3SIDL = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	757b      	strb	r3, [r7, #21]
  RXF3reg.RXF3EID8 = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	75bb      	strb	r3, [r7, #22]
  RXF3reg.RXF3EID0 = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	75fb      	strb	r3, [r7, #23]
  
  RXF4reg.RXF4SIDH = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	743b      	strb	r3, [r7, #16]
  RXF4reg.RXF4SIDL = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	747b      	strb	r3, [r7, #17]
  RXF4reg.RXF4EID8 = 0x00;
 8000544:	2300      	movs	r3, #0
 8000546:	74bb      	strb	r3, [r7, #18]
  RXF4reg.RXF4EID0 = 0x00;
 8000548:	2300      	movs	r3, #0
 800054a:	74fb      	strb	r3, [r7, #19]
  
  RXF5reg.RXF5SIDH = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	733b      	strb	r3, [r7, #12]
  RXF5reg.RXF5SIDL = 0x08;
 8000550:	2308      	movs	r3, #8
 8000552:	737b      	strb	r3, [r7, #13]
  RXF5reg.RXF5EID8 = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	73bb      	strb	r3, [r7, #14]
  RXF5reg.RXF5EID0 = 0x00;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800055c:	f000 ffa2 	bl	80014a4 <MCP2515_Initialize>
 8000560:	4603      	mov	r3, r0
 8000562:	f083 0301 	eor.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <CANSPI_Initialize+0xac>
  {
    return false;
 800056c:	2300      	movs	r3, #0
 800056e:	e065      	b.n	800063c <CANSPI_Initialize+0x178>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000570:	f000 ffba 	bl	80014e8 <MCP2515_SetConfigMode>
 8000574:	4603      	mov	r3, r0
 8000576:	f083 0301 	eor.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <CANSPI_Initialize+0xc0>
  {
    return false;
 8000580:	2300      	movs	r3, #0
 8000582:	e05b      	b.n	800063c <CANSPI_Initialize+0x178>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	461a      	mov	r2, r3
 800058a:	2123      	movs	r1, #35	@ 0x23
 800058c:	2020      	movs	r0, #32
 800058e:	f001 f87b 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	461a      	mov	r2, r3
 8000596:	2127      	movs	r1, #39	@ 0x27
 8000598:	2024      	movs	r0, #36	@ 0x24
 800059a:	f001 f875 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	461a      	mov	r2, r3
 80005a4:	2103      	movs	r1, #3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 f86e 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	461a      	mov	r2, r3
 80005b2:	2107      	movs	r1, #7
 80005b4:	2004      	movs	r0, #4
 80005b6:	f001 f867 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	461a      	mov	r2, r3
 80005c0:	210b      	movs	r1, #11
 80005c2:	2008      	movs	r0, #8
 80005c4:	f001 f860 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	461a      	mov	r2, r3
 80005ce:	2113      	movs	r1, #19
 80005d0:	2010      	movs	r0, #16
 80005d2:	f001 f859 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	461a      	mov	r2, r3
 80005dc:	2117      	movs	r1, #23
 80005de:	2014      	movs	r0, #20
 80005e0:	f001 f852 	bl	8001688 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	461a      	mov	r2, r3
 80005ea:	211b      	movs	r1, #27
 80005ec:	2018      	movs	r0, #24
 80005ee:	f001 f84b 	bl	8001688 <MCP2515_WriteByteSequence>
  
  uint8_t rxf4sidh = MCP2515_ReadByte(MCP2515_RXF4SIDH);
 80005f2:	2014      	movs	r0, #20
 80005f4:	f000 ffda 	bl	80015ac <MCP2515_ReadByte>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005fe:	2104      	movs	r1, #4
 8000600:	2060      	movs	r0, #96	@ 0x60
 8000602:	f001 f81b 	bl	800163c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000606:	2101      	movs	r1, #1
 8000608:	2070      	movs	r0, #112	@ 0x70
 800060a:	f001 f817 	bl	800163c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800060e:	2100      	movs	r1, #0
 8000610:	202a      	movs	r0, #42	@ 0x2a
 8000612:	f001 f813 	bl	800163c <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000616:	21e5      	movs	r1, #229	@ 0xe5
 8000618:	2029      	movs	r0, #41	@ 0x29
 800061a:	f001 f80f 	bl	800163c <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800061e:	2183      	movs	r1, #131	@ 0x83
 8000620:	2028      	movs	r0, #40	@ 0x28
 8000622:	f001 f80b 	bl	800163c <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000626:	f000 ff8d 	bl	8001544 <MCP2515_SetNormalMode>
 800062a:	4603      	mov	r3, r0
 800062c:	f083 0301 	eor.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <CANSPI_Initialize+0x176>
    return false;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <CANSPI_Initialize+0x178>
  
  return true;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3728      	adds	r7, #40	@ 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000650:	4b44      	ldr	r3, [pc, #272]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000658:	2200      	movs	r2, #0
 800065a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800065c:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <CANSPI_Transmit+0x120>)
 800065e:	2200      	movs	r2, #0
 8000660:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000662:	4b40      	ldr	r3, [pc, #256]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000664:	2200      	movs	r2, #0
 8000666:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000668:	f001 f884 	bl	8001774 <MCP2515_ReadStatus>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <CANSPI_Transmit+0x124>)
 8000672:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlstatus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 8000674:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <CANSPI_Transmit+0x124>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	73bb      	strb	r3, [r7, #14]
  uint8_t canctrl = MCP2515_ReadByte(MCP2515_CANCTRL);
 800067a:	200f      	movs	r0, #15
 800067c:	f000 ff96 	bl	80015ac <MCP2515_ReadByte>
 8000680:	4603      	mov	r3, r0
 8000682:	737b      	strb	r3, [r7, #13]
  uint8_t eflag = MCP2515_ReadByte(MCP2515_EFLG);
 8000684:	202d      	movs	r0, #45	@ 0x2d
 8000686:	f000 ff91 	bl	80015ac <MCP2515_ReadByte>
 800068a:	4603      	mov	r3, r0
 800068c:	733b      	strb	r3, [r7, #12]
  uint8_t txb0ctrl = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 800068e:	2030      	movs	r0, #48	@ 0x30
 8000690:	f000 ff8c 	bl	80015ac <MCP2515_ReadByte>
 8000694:	4603      	mov	r3, r0
 8000696:	72fb      	strb	r3, [r7, #11]
  uint8_t txb1ctrl = MCP2515_ReadByte(MCP2515_TXB1CTRL);
 8000698:	2040      	movs	r0, #64	@ 0x40
 800069a:	f000 ff87 	bl	80015ac <MCP2515_ReadByte>
 800069e:	4603      	mov	r3, r0
 80006a0:	72bb      	strb	r3, [r7, #10]
  uint8_t txb2ctrl = MCP2515_ReadByte(MCP2515_TXB2CTRL);
 80006a2:	2050      	movs	r0, #80	@ 0x50
 80006a4:	f000 ff82 	bl	80015ac <MCP2515_ReadByte>
 80006a8:	4603      	mov	r3, r0
 80006aa:	727b      	strb	r3, [r7, #9]


  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <CANSPI_Transmit+0x124>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d115      	bne.n	80006e6 <CANSPI_Transmit+0xa2>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6858      	ldr	r0, [r3, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <CANSPI_Transmit+0x120>)
 80006c4:	4619      	mov	r1, r3
 80006c6:	f000 f928 	bl	800091a <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a1a      	ldrb	r2, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3309      	adds	r3, #9
 80006d2:	4924      	ldr	r1, [pc, #144]	@ (8000764 <CANSPI_Transmit+0x120>)
 80006d4:	2040      	movs	r0, #64	@ 0x40
 80006d6:	f001 f803 	bl	80016e0 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006da:	2081      	movs	r0, #129	@ 0x81
 80006dc:	f001 f82e 	bl	800173c <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e038      	b.n	8000758 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <CANSPI_Transmit+0x124>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d115      	bne.n	8000720 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6858      	ldr	r0, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4a19      	ldr	r2, [pc, #100]	@ (8000764 <CANSPI_Transmit+0x120>)
 80006fe:	4619      	mov	r1, r3
 8000700:	f000 f90b 	bl	800091a <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7a1a      	ldrb	r2, [r3, #8]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3309      	adds	r3, #9
 800070c:	4915      	ldr	r1, [pc, #84]	@ (8000764 <CANSPI_Transmit+0x120>)
 800070e:	2042      	movs	r0, #66	@ 0x42
 8000710:	f000 ffe6 	bl	80016e0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000714:	2082      	movs	r0, #130	@ 0x82
 8000716:	f001 f811 	bl	800173c <MCP2515_RequestToSend>
    
    returnValue = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e01b      	b.n	8000758 <CANSPI_Transmit+0x114>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <CANSPI_Transmit+0x124>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <CANSPI_Transmit+0x114>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6858      	ldr	r0, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000738:	4619      	mov	r1, r3
 800073a:	f000 f8ee 	bl	800091a <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7a1a      	ldrb	r2, [r3, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3309      	adds	r3, #9
 8000746:	4907      	ldr	r1, [pc, #28]	@ (8000764 <CANSPI_Transmit+0x120>)
 8000748:	2044      	movs	r0, #68	@ 0x44
 800074a:	f000 ffc9 	bl	80016e0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800074e:	2084      	movs	r0, #132	@ 0x84
 8000750:	f000 fff4 	bl	800173c <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000034 	.word	0x20000034
 8000768:	20000030 	.word	0x20000030

0800076c <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000778:	f001 f81a 	bl	80017b0 <MCP2515_GetRxStatus>
 800077c:	4603      	mov	r3, r0
 800077e:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d066      	beq.n	800085a <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800078c:	7b3b      	ldrb	r3, [r7, #12]
 800078e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b40      	cmp	r3, #64	@ 0x40
 8000796:	bf0c      	ite	eq
 8000798:	2301      	moveq	r3, #1
 800079a:	2300      	movne	r3, #0
 800079c:	b2da      	uxtb	r2, r3
 800079e:	7b3b      	ldrb	r3, [r7, #12]
 80007a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d007      	beq.n	80007c8 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	220d      	movs	r2, #13
 80007be:	4619      	mov	r1, r3
 80007c0:	2090      	movs	r0, #144	@ 0x90
 80007c2:	f000 ff17 	bl	80015f4 <MCP2515_ReadRxSequence>
 80007c6:	e00c      	b.n	80007e2 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b80      	cmp	r3, #128	@ 0x80
 80007d2:	d106      	bne.n	80007e2 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	220d      	movs	r2, #13
 80007da:	4619      	mov	r1, r3
 80007dc:	2094      	movs	r0, #148	@ 0x94
 80007de:	f000 ff09 	bl	80015f4 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007e2:	7b3b      	ldrb	r3, [r7, #12]
 80007e4:	f003 0318 	and.w	r3, r3, #24
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	d10c      	bne.n	8000808 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2202      	movs	r2, #2
 80007f2:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007f4:	7cb8      	ldrb	r0, [r7, #18]
 80007f6:	7cf9      	ldrb	r1, [r7, #19]
 80007f8:	7c3a      	ldrb	r2, [r7, #16]
 80007fa:	7c7b      	ldrb	r3, [r7, #17]
 80007fc:	f000 f832 	bl	8000864 <convertReg2ExtendedCANid>
 8000800:	4602      	mov	r2, r0
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	e00b      	b.n	8000820 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800080e:	7c3b      	ldrb	r3, [r7, #16]
 8000810:	7c7a      	ldrb	r2, [r7, #17]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f863 	bl	80008e0 <convertReg2StandardCANid>
 800081a:	4602      	mov	r2, r0
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000820:	7d3a      	ldrb	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000826:	7d7a      	ldrb	r2, [r7, #21]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800082c:	7dba      	ldrb	r2, [r7, #22]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000832:	7dfa      	ldrb	r2, [r7, #23]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000838:	7e3a      	ldrb	r2, [r7, #24]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800083e:	7e7a      	ldrb	r2, [r7, #25]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000844:	7eba      	ldrb	r2, [r7, #26]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800084a:	7efa      	ldrb	r2, [r7, #27]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000850:	7f3a      	ldrb	r2, [r7, #28]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 800085a:	7ffb      	ldrb	r3, [r7, #31]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000864:	b490      	push	{r4, r7}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	717b      	strb	r3, [r7, #5]
 800087e:	4613      	mov	r3, r2
 8000880:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000892:	793b      	ldrb	r3, [r7, #4]
 8000894:	095b      	lsrs	r3, r3, #5
 8000896:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4413      	add	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4413      	add	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4413      	add	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4413      	add	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008d4:	697b      	ldr	r3, [r7, #20]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc90      	pop	{r4, r7}
 80008de:	4770      	bx	lr

080008e0 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	095b      	lsrs	r3, r3, #5
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4413      	add	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800090c:	68fb      	ldr	r3, [r7, #12]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 800091a:	b480      	push	{r7}
 800091c:	b087      	sub	sp, #28
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	460b      	mov	r3, r1
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d12e      	bne.n	8000990 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f023 031f 	bic.w	r3, r3, #31
 8000966:	b2da      	uxtb	r2, r3
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	4413      	add	r3, r2
 800096c:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	3308      	adds	r3, #8
 8000972:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	f023 0314 	bic.w	r3, r3, #20
 800097a:	b2da      	uxtb	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800098e:	e013      	b.n	80009b8 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	015b      	lsls	r3, r3, #5
 80009a0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	701a      	strb	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	2400      	movs	r4, #0
 80009cc:	9405      	str	r4, [sp, #20]
 80009ce:	9406      	str	r4, [sp, #24]
 80009d0:	9407      	str	r4, [sp, #28]
 80009d2:	9408      	str	r4, [sp, #32]
 80009d4:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	9401      	str	r4, [sp, #4]
 80009d8:	4b5c      	ldr	r3, [pc, #368]	@ (8000b4c <MX_GPIO_Init+0x188>)
 80009da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009dc:	f042 0204 	orr.w	r2, r2, #4
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80009e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009e4:	f002 0204 	and.w	r2, r2, #4
 80009e8:	9201      	str	r2, [sp, #4]
 80009ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ec:	9402      	str	r4, [sp, #8]
 80009ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80009f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80009f8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80009fc:	9202      	str	r2, [sp, #8]
 80009fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	9403      	str	r4, [sp, #12]
 8000a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a0c:	f002 0201 	and.w	r2, r2, #1
 8000a10:	9203      	str	r2, [sp, #12]
 8000a12:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	9404      	str	r4, [sp, #16]
 8000a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a18:	f042 0202 	orr.w	r2, r2, #2
 8000a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a28:	4e49      	ldr	r6, [pc, #292]	@ (8000b50 <MX_GPIO_Init+0x18c>)
 8000a2a:	4622      	mov	r2, r4
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4630      	mov	r0, r6
 8000a30:	f002 fd4a 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|CAN1_RESET_Pin|CAN2_RESET_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	210e      	movs	r1, #14
 8000a38:	4630      	mov	r0, r6
 8000a3a:	f002 fd45 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a3e:	4f45      	ldr	r7, [pc, #276]	@ (8000b54 <MX_GPIO_Init+0x190>)
 8000a40:	4622      	mov	r2, r4
 8000a42:	2120      	movs	r1, #32
 8000a44:	4638      	mov	r0, r7
 8000a46:	f002 fd3f 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a50:	4638      	mov	r0, r7
 8000a52:	f002 fd39 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTD_GPIO_Port, RTD_Pin, GPIO_PIN_RESET);
 8000a56:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8000b58 <MX_GPIO_Init+0x194>
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	4648      	mov	r0, r9
 8000a60:	f002 fd32 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a68:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a6e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	a905      	add	r1, sp, #20
 8000a74:	4630      	mov	r0, r6
 8000a76:	f002 fb8b 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	a905      	add	r1, sp, #20
 8000a86:	4630      	mov	r0, r6
 8000a88:	f002 fb82 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000a8c:	f04f 0a02 	mov.w	sl, #2
 8000a90:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	f04f 0803 	mov.w	r8, #3
 8000a9c:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	a905      	add	r1, sp, #20
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	f002 fb74 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_RESET_Pin CAN2_RESET_Pin */
  GPIO_InitStruct.Pin = CAN1_RESET_Pin|CAN2_RESET_Pin;
 8000aa8:	f04f 0b0c 	mov.w	fp, #12
 8000aac:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	a905      	add	r1, sp, #20
 8000ab8:	4630      	mov	r0, r6
 8000aba:	f002 fb69 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000acc:	2307      	movs	r3, #7
 8000ace:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	a905      	add	r1, sp, #20
 8000ad2:	4638      	mov	r0, r7
 8000ad4:	f002 fb5c 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	a905      	add	r1, sp, #20
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f002 fb53 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8000aea:	2324      	movs	r3, #36	@ 0x24
 8000aec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	a905      	add	r1, sp, #20
 8000af4:	4648      	mov	r0, r9
 8000af6:	f002 fb4b 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PRECHARGE_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_Pin;
 8000afa:	2380      	movs	r3, #128	@ 0x80
 8000afc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PRECHARGE_GPIO_Port, &GPIO_InitStruct);
 8000b02:	a905      	add	r1, sp, #20
 8000b04:	4630      	mov	r0, r6
 8000b06:	f002 fb43 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 8000b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000b14:	a905      	add	r1, sp, #20
 8000b16:	4638      	mov	r0, r7
 8000b18:	f002 fb3a 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN2_CS_Pin */
  GPIO_InitStruct.Pin = CAN2_CS_Pin;
 8000b1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(CAN2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	a905      	add	r1, sp, #20
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f002 fb2f 	bl	8003190 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTD_Pin */
  GPIO_InitStruct.Pin = RTD_Pin;
 8000b32:	2310      	movs	r3, #16
 8000b34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(RTD_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	a905      	add	r1, sp, #20
 8000b40:	4648      	mov	r0, r9
 8000b42:	f002 fb25 	bl	8003190 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	b00b      	add	sp, #44	@ 0x2c
 8000b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400

08000b5c <MX_DMA_Init>:
{
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b60:	2400      	movs	r4, #0
 8000b62:	9400      	str	r4, [sp, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_DMA_Init+0x54>)
 8000b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b68:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b70:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000b74:	9200      	str	r2, [sp, #0]
 8000b76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b78:	9401      	str	r4, [sp, #4]
 8000b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b7c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	4621      	mov	r1, r4
 8000b90:	200f      	movs	r0, #15
 8000b92:	f001 ff56 	bl	8002a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f001 ff6f 	bl	8002a7a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b9c:	4622      	mov	r2, r4
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	2038      	movs	r0, #56	@ 0x38
 8000ba2:	f001 ff4e 	bl	8002a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ba6:	2038      	movs	r0, #56	@ 0x38
 8000ba8:	f001 ff67 	bl	8002a7a <HAL_NVIC_EnableIRQ>
}
 8000bac:	b002      	add	sp, #8
 8000bae:	bd10      	pop	{r4, pc}
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <updateRpm>:
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <updateRpm+0x20>)
 8000bb6:	7ad3      	ldrb	r3, [r2, #11]
			| (rxMessage.frame.data3 << 8));
 8000bb8:	7b12      	ldrb	r2, [r2, #12]
 8000bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	inverter_diagnostics.motorRpm = (float) (rxMessage.frame.data2
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bca:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <updateRpm+0x24>)
 8000bcc:	edc3 7a00 	vstr	s15, [r3]
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200000a0 	.word	0x200000a0
 8000bd8:	20000048 	.word	0x20000048

08000bdc <updateBMSDiagnostics>:
	int16_t pack_current_raw = (int16_t)((rxMessage.frame.data1 << 8) | rxMessage.frame.data0);  // Little-endian
 8000bdc:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <updateBMSDiagnostics+0x4c>)
 8000bde:	7a93      	ldrb	r3, [r2, #10]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	7a51      	ldrb	r1, [r2, #9]
 8000be6:	430b      	orrs	r3, r1
 8000be8:	ee07 3a90 	vmov	s15, r3
	float pack_current = pack_current_raw * 0.1f;
 8000bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000c2c <updateBMSDiagnostics+0x50>
 8000bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	uint16_t pack_voltage_raw = (rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 8000bf8:	7b11      	ldrb	r1, [r2, #12]
 8000bfa:	7ad3      	ldrb	r3, [r2, #11]
 8000bfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000c00:	ee07 3a10 	vmov	s14, r3
	float pack_voltage = pack_voltage_raw * 0.1f;
 8000c04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c08:	ee27 7a26 	vmul.f32	s14, s14, s13
	bool is_ready = (rxMessage.frame.data6 >> 6) & 0x01;
 8000c0c:	7bd2      	ldrb	r2, [r2, #15]
 8000c0e:	f3c2 1280 	ubfx	r2, r2, #6, #1
	bms_diagnostics.inverterActive = is_ready ? 1 : 0;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <updateBMSDiagnostics+0x54>)
 8000c14:	601a      	str	r2, [r3, #0]
	bms_diagnostics.packCurrent    = (int)pack_current;
 8000c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c1a:	edc3 7a02 	vstr	s15, [r3, #8]
	bms_diagnostics.packVoltage    = (int)pack_voltage;
 8000c1e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000c22:	ed83 7a01 	vstr	s14, [r3, #4]
}
 8000c26:	4770      	bx	lr
 8000c28:	200000a0 	.word	0x200000a0
 8000c2c:	3dcccccd 	.word	0x3dcccccd
 8000c30:	2000004c 	.word	0x2000004c

08000c34 <readFromCAN>:
void readFromCAN() {
 8000c34:	b508      	push	{r3, lr}
	if (rxMessage.frame.id == RPM_READ_ID) {
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <readFromCAN+0x20>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2ba5      	cmp	r3, #165	@ 0xa5
 8000c3c:	d003      	beq.n	8000c46 <readFromCAN+0x12>
	else if(rxMessage.frame.id == BMS_DIAGNOSTICS_ID){
 8000c3e:	f5b3 6fd6 	cmp.w	r3, #1712	@ 0x6b0
 8000c42:	d003      	beq.n	8000c4c <readFromCAN+0x18>
}
 8000c44:	bd08      	pop	{r3, pc}
		updateRpm();
 8000c46:	f7ff ffb5 	bl	8000bb4 <updateRpm>
 8000c4a:	e7fb      	b.n	8000c44 <readFromCAN+0x10>
		updateBMSDiagnostics();
 8000c4c:	f7ff ffc6 	bl	8000bdc <updateBMSDiagnostics>
}
 8000c50:	e7f8      	b.n	8000c44 <readFromCAN+0x10>
 8000c52:	bf00      	nop
 8000c54:	200000a0 	.word	0x200000a0

08000c58 <HAL_ADC_ConvCpltCallback>:
	apps1Value = ADC_Reads[APPS1_RANK-1];
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <HAL_ADC_ConvCpltCallback+0x20>)
 8000c5e:	6011      	str	r1, [r2, #0]
	apps2Value = ADC_Reads[APPS2_RANK-1];
 8000c60:	6859      	ldr	r1, [r3, #4]
 8000c62:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <HAL_ADC_ConvCpltCallback+0x24>)
 8000c64:	6011      	str	r1, [r2, #0]
	bseValue   = ADC_Reads[BSE_RANK-1];
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x28>)
 8000c6a:	601a      	str	r2, [r3, #0]
	dma_read_complete = 1;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
}
 8000c72:	4770      	bx	lr
 8000c74:	20000074 	.word	0x20000074
 8000c78:	2000009c 	.word	0x2000009c
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	20000094 	.word	0x20000094
 8000c84:	20000002 	.word	0x20000002

08000c88 <calculateTorqueRequest>:
	float apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000c88:	4b57      	ldr	r3, [pc, #348]	@ (8000de8 <calculateTorqueRequest+0x160>)
 8000c8a:	ed93 7a00 	vldr	s14, [r3]
 8000c8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000c92:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000c96:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000c9a:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8000dec <calculateTorqueRequest+0x164>
 8000c9e:	eec7 7a06 	vdiv.f32	s15, s14, s12
	float apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000ca2:	4b53      	ldr	r3, [pc, #332]	@ (8000df0 <calculateTorqueRequest+0x168>)
 8000ca4:	ed93 7a00 	vldr	s14, [r3]
 8000ca8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000cac:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000cb0:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 8000df4 <calculateTorqueRequest+0x16c>
 8000cb4:	eec7 6a06 	vdiv.f32	s13, s14, s12
	float appsValue = (apps1_as_percent + apps2_as_percent) / 2.0f;
 8000cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000cbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (appsValue > 0) {
 8000cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ccc:	dd77      	ble.n	8000dbe <calculateTorqueRequest+0x136>
void calculateTorqueRequest(void) {
 8000cce:	b510      	push	{r4, lr}
		int pedalLowIndx = (int)(appsValue / (pedalStepSize / 100.0f));  // handle properly if needed
 8000cd0:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000df8 <calculateTorqueRequest+0x170>
 8000cd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cd8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000cdc:	ee17 3a10 	vmov	r3, s14
		int pedalHighIndx = pedalLowIndx + 1;
 8000ce0:	1c59      	adds	r1, r3, #1
		if (pedalHighIndx >= numPedalSteps) {
 8000ce2:	2909      	cmp	r1, #9
 8000ce4:	dd00      	ble.n	8000ce8 <calculateTorqueRequest+0x60>
			pedalHighIndx = numPedalSteps - 1;
 8000ce6:	2109      	movs	r1, #9
		int rpmLowIndx = (int)(inverter_diagnostics.motorRpm / rpmStepSize);
 8000ce8:	4a44      	ldr	r2, [pc, #272]	@ (8000dfc <calculateTorqueRequest+0x174>)
 8000cea:	edd2 5a00 	vldr	s11, [r2]
 8000cee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000cf2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8000e00 <calculateTorqueRequest+0x178>
 8000cf6:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8000cfa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000cfe:	ee17 2a10 	vmov	r2, s14
		int rpmHighIndx = rpmLowIndx + 1;
 8000d02:	f102 0e01 	add.w	lr, r2, #1
		if (rpmHighIndx >= numRpmSteps) {
 8000d06:	f1be 0f09 	cmp.w	lr, #9
 8000d0a:	dd01      	ble.n	8000d10 <calculateTorqueRequest+0x88>
			rpmHighIndx = numRpmSteps - 1;
 8000d0c:	f04f 0e09 	mov.w	lr, #9
		float T00 = TORQUE_ARRAY[pedalLowIndx][rpmLowIndx];   // Lower-left
 8000d10:	483c      	ldr	r0, [pc, #240]	@ (8000e04 <calculateTorqueRequest+0x17c>)
 8000d12:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000d16:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000d1a:	4494      	add	ip, r2
 8000d1c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d20:	ed9c 4a00 	vldr	s8, [ip]
		float T10 = TORQUE_ARRAY[pedalHighIndx][rpmLowIndx];  // Upper-left
 8000d24:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8000d28:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000d2c:	4494      	add	ip, r2
 8000d2e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d32:	ed9c 5a00 	vldr	s10, [ip]
		float T01 = TORQUE_ARRAY[pedalLowIndx][rpmHighIndx];  // Lower-right
 8000d36:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8000d3a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000d3e:	44f4      	add	ip, lr
 8000d40:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d44:	ed9c 6a00 	vldr	s12, [ip]
		float T11 = TORQUE_ARRAY[pedalHighIndx][rpmHighIndx]; // Upper-right
 8000d48:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000d4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d50:	44f4      	add	ip, lr
 8000d52:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000d56:	ed90 7a00 	vldr	s14, [r0]
		float pedalLerp = (appsValue * 100.0f - (pedalLowIndx * pedalStepSize)) / pedalStepSize;
 8000d5a:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000e08 <calculateTorqueRequest+0x180>
 8000d5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d62:	ee06 3a90 	vmov	s13, r3
 8000d66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000d6a:	eddf 4a28 	vldr	s9, [pc, #160]	@ 8000e0c <calculateTorqueRequest+0x184>
 8000d6e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8000d72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000d76:	eec7 3aa4 	vdiv.f32	s7, s15, s9
		float rpmLerp   = (float)(inverter_diagnostics.motorRpm - (rpmLowIndx * rpmStepSize)) / rpmStepSize;
 8000d7a:	ee07 2a90 	vmov	s15, r2
 8000d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d82:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000e00 <calculateTorqueRequest+0x178>
 8000d86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d8a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8000d8e:	eec5 4aa6 	vdiv.f32	s9, s11, s13
		float torqueLow  = T00 + (T01 - T00) * rpmLerp;
 8000d92:	ee76 6a44 	vsub.f32	s13, s12, s8
 8000d96:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8000d9a:	ee76 6a84 	vadd.f32	s13, s13, s8
		float torqueHigh = T10 + (T11 - T10) * rpmLerp;
 8000d9e:	ee77 7a45 	vsub.f32	s15, s14, s10
 8000da2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000da6:	ee77 7a85 	vadd.f32	s15, s15, s10
		requestedTorque = torqueLow + (torqueHigh - torqueLow) * pedalLerp;
 8000daa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000dae:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <calculateTorqueRequest+0x188>)
 8000db8:	edc3 7a00 	vstr	s15, [r3]
}
 8000dbc:	bd10      	pop	{r4, pc}
		float bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <calculateTorqueRequest+0x18c>)
 8000dc0:	ed93 7a00 	vldr	s14, [r3]
 8000dc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000dc8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000e18 <calculateTorqueRequest+0x190>
 8000dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
				* bse_as_percent + REGEN_BASELINE_TORQUE;
 8000dd0:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8000dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e1c <calculateTorqueRequest+0x194>
 8000ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
		requestedTorque = (REGEN_MAX_TORQUE - REGEN_BASELINE_TORQUE)
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <calculateTorqueRequest+0x188>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
 8000de6:	4770      	bx	lr
 8000de8:	2000009c 	.word	0x2000009c
 8000dec:	45412000 	.word	0x45412000
 8000df0:	20000098 	.word	0x20000098
 8000df4:	457f5000 	.word	0x457f5000
 8000df8:	3de38e38 	.word	0x3de38e38
 8000dfc:	20000048 	.word	0x20000048
 8000e00:	44a6aaab 	.word	0x44a6aaab
 8000e04:	08056110 	.word	0x08056110
 8000e08:	42c80000 	.word	0x42c80000
 8000e0c:	4131c71c 	.word	0x4131c71c
 8000e10:	20000090 	.word	0x20000090
 8000e14:	20000094 	.word	0x20000094
 8000e18:	457ff000 	.word	0x457ff000
 8000e1c:	00000000 	.word	0x00000000

08000e20 <checkAPPSPlausibility>:
void checkAPPSPlausibility(void) {
 8000e20:	b508      	push	{r3, lr}
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <checkAPPSPlausibility+0x98>)
 8000e24:	ed93 7a00 	vldr	s14, [r3]
 8000e28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000e2c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8000e30:	ee37 7a46 	vsub.f32	s14, s14, s12
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000e34:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000ebc <checkAPPSPlausibility+0x9c>
 8000e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3c:	eddf 5a20 	vldr	s11, [pc, #128]	@ 8000ec0 <checkAPPSPlausibility+0xa0>
 8000e40:	ee67 7aa5 	vmul.f32	s15, s15, s11
	apps1_as_percent = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <checkAPPSPlausibility+0xa4>)
 8000e46:	edc3 7a00 	vstr	s15, [r3]
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <checkAPPSPlausibility+0xa8>)
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000e54:	ee37 7a46 	vsub.f32	s14, s14, s12
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000e58:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 8000ecc <checkAPPSPlausibility+0xac>
 8000e5c:	eec7 6a05 	vdiv.f32	s13, s14, s10
 8000e60:	ee26 7aa5 	vmul.f32	s14, s13, s11
	apps2_as_percent = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <checkAPPSPlausibility+0xb0>)
 8000e66:	ed83 7a00 	vstr	s14, [r3]
	if (fabsf(apps1_as_percent - apps2_as_percent) > APPS_IMPLAUSIBILITY_PERCENT_DIFFERENCE) {
 8000e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e6e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e72:	eef4 7ac6 	vcmpe.f32	s15, s12
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	dc06      	bgt.n	8000e8a <checkAPPSPlausibility+0x6a>
	else if (!apps_plausible
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <checkAPPSPlausibility+0xb4>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	b173      	cbz	r3, 8000ea0 <checkAPPSPlausibility+0x80>
		apps_plausible = 1; // true
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <checkAPPSPlausibility+0xb4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	801a      	strh	r2, [r3, #0]
}
 8000e88:	bd08      	pop	{r3, pc}
		millis_since_apps_implausible = HAL_GetTick();
 8000e8a:	f000 ffc3 	bl	8001e14 <HAL_GetTick>
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <checkAPPSPlausibility+0xb8>)
 8000e90:	6018      	str	r0, [r3, #0]
		apps_plausible = 0; // false
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <checkAPPSPlausibility+0xb4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <checkAPPSPlausibility+0xbc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e7f3      	b.n	8000e88 <checkAPPSPlausibility+0x68>
			&& (HAL_GetTick() - millis_since_apps_implausible < APPS_IMPLAUSIBILITY_TIMEOUT_MILLIS)) {
 8000ea0:	f000 ffb8 	bl	8001e14 <HAL_GetTick>
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <checkAPPSPlausibility+0xb8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	1ac0      	subs	r0, r0, r3
 8000eaa:	2863      	cmp	r0, #99	@ 0x63
 8000eac:	d8e9      	bhi.n	8000e82 <checkAPPSPlausibility+0x62>
		requestedTorque = 0;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <checkAPPSPlausibility+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e7e8      	b.n	8000e88 <checkAPPSPlausibility+0x68>
 8000eb6:	bf00      	nop
 8000eb8:	2000009c 	.word	0x2000009c
 8000ebc:	45412000 	.word	0x45412000
 8000ec0:	42c80000 	.word	0x42c80000
 8000ec4:	20000070 	.word	0x20000070
 8000ec8:	20000098 	.word	0x20000098
 8000ecc:	457f5000 	.word	0x457f5000
 8000ed0:	2000006c 	.word	0x2000006c
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	20000084 	.word	0x20000084
 8000edc:	20000090 	.word	0x20000090

08000ee0 <checkCrossCheck>:
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <checkCrossCheck+0xb0>)
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			/ (BSE_ADC_MAX_VAL - BSE_ADC_MIN_VAL) * 100.0f;
 8000eea:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000f94 <checkCrossCheck+0xb4>
 8000eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef2:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8000f98 <checkCrossCheck+0xb8>
 8000ef6:	ee67 7a86 	vmul.f32	s15, s15, s12
	bse_as_percent = ((float) bseValue - BSE_ADC_MIN_VAL)
 8000efa:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <checkCrossCheck+0xbc>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000f00:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <checkCrossCheck+0xc0>)
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000f0a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f0e:	ee37 7a66 	vsub.f32	s14, s14, s13
			/ (APPS_1_ADC_MAX_VAL - APPS_1_ADC_MIN_VAL) * 100.0f;
 8000f12:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8000fa4 <checkCrossCheck+0xc4>
 8000f16:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float apps1p = ((float) apps1Value - APPS_1_ADC_MIN_VAL)
 8000f1a:	ee67 7a86 	vmul.f32	s15, s15, s12
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000f1e:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <checkCrossCheck+0xc8>)
 8000f20:	ed93 7a00 	vldr	s14, [r3]
 8000f24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000f28:	ee37 7a66 	vsub.f32	s14, s14, s13
			/ (APPS_2_ADC_MAX_VAL - APPS_2_ADC_MIN_VAL) * 100.0f;
 8000f2c:	eddf 5a1f 	vldr	s11, [pc, #124]	@ 8000fac <checkCrossCheck+0xcc>
 8000f30:	eec7 6a25 	vdiv.f32	s13, s14, s11
	float apps2p = ((float) apps2Value - APPS_2_ADC_MIN_VAL)
 8000f34:	ee26 7a86 	vmul.f32	s14, s13, s12
	float apps_as_percent = (apps1p + apps2p) / 2.0f;
 8000f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f40:	ee67 7a87 	vmul.f32	s15, s15, s14
	if (apps_as_percent > CROSS_CHECK_IMPLAUSIBILITY_APPS_PERCENT
 8000f44:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	dd0b      	ble.n	8000f6a <checkCrossCheck+0x8a>
			&& bseValue > BRAKE_ACTIVATED_ADC_VAL) {
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <checkCrossCheck+0xb0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000f5a:	d906      	bls.n	8000f6a <checkCrossCheck+0x8a>
		cross_check_plausible = 0;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <checkCrossCheck+0xd0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	801a      	strh	r2, [r3, #0]
		requestedTorque = 0;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <checkCrossCheck+0xd4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	4770      	bx	lr
	else if (!cross_check_plausible
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <checkCrossCheck+0xd0>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b953      	cbnz	r3, 8000f86 <checkCrossCheck+0xa6>
			&& apps_as_percent > CROSS_CHECK_RESTORATION_APPS_PERCENT) {
 8000f70:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	dd03      	ble.n	8000f86 <checkCrossCheck+0xa6>
		requestedTorque = 0;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <checkCrossCheck+0xd4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4770      	bx	lr
		cross_check_plausible = 1;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <checkCrossCheck+0xd0>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	801a      	strh	r2, [r3, #0]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000094 	.word	0x20000094
 8000f94:	457ff000 	.word	0x457ff000
 8000f98:	42c80000 	.word	0x42c80000
 8000f9c:	20000068 	.word	0x20000068
 8000fa0:	2000009c 	.word	0x2000009c
 8000fa4:	45412000 	.word	0x45412000
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	457f5000 	.word	0x457f5000
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000090 	.word	0x20000090

08000fb8 <sendTorqueCommand>:
void sendTorqueCommand(void) {
 8000fb8:	b508      	push	{r3, lr}
	int torqueValue = (int) (requestedTorque * 10); // Convert to integer, multiply by 10
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <sendTorqueCommand+0x44>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fcc:	ee17 3a90 	vmov	r3, s15
	char msg1 = (torqueValue >> 8) & 0xFF;
 8000fd0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000fd4:	480a      	ldr	r0, [pc, #40]	@ (8001000 <sendTorqueCommand+0x48>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	7001      	strb	r1, [r0, #0]
	txMessage.frame.id = 0x0C0;
 8000fda:	21c0      	movs	r1, #192	@ 0xc0
 8000fdc:	6041      	str	r1, [r0, #4]
	txMessage.frame.dlc = 8;
 8000fde:	2108      	movs	r1, #8
 8000fe0:	7201      	strb	r1, [r0, #8]
	txMessage.frame.data0 = msg0;
 8000fe2:	7243      	strb	r3, [r0, #9]
	txMessage.frame.data1 = msg1;
 8000fe4:	7282      	strb	r2, [r0, #10]
	txMessage.frame.data2 = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	72c3      	strb	r3, [r0, #11]
	txMessage.frame.data3 = 0;
 8000fea:	7303      	strb	r3, [r0, #12]
	txMessage.frame.data4 = 0;
 8000fec:	7343      	strb	r3, [r0, #13]
	txMessage.frame.data5 = 0;
 8000fee:	7383      	strb	r3, [r0, #14]
	txMessage.frame.data6 = 0;
 8000ff0:	73c3      	strb	r3, [r0, #15]
	txMessage.frame.data7 = 0;
 8000ff2:	7403      	strb	r3, [r0, #16]
	CANSPI_Transmit(&txMessage);
 8000ff4:	f7ff fb26 	bl	8000644 <CANSPI_Transmit>
}
 8000ff8:	bd08      	pop	{r3, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000090 	.word	0x20000090
 8001000:	200000b4 	.word	0x200000b4

08001004 <checkShutdown>:
void checkShutdown(){
 8001004:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin);
 8001006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <checkShutdown+0x20>)
 800100c:	f002 fa44 	bl	8003498 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_SET) {
 8001010:	2801      	cmp	r0, #1
 8001012:	d000      	beq.n	8001016 <checkShutdown+0x12>
}
 8001014:	bd08      	pop	{r3, pc}
		requestedTorque = 0;
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <checkShutdown+0x24>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
		sendTorqueCommand();
 800101c:	f7ff ffcc 	bl	8000fb8 <sendTorqueCommand>
		while(true){}
 8001020:	e7fe      	b.n	8001020 <checkShutdown+0x1c>
 8001022:	bf00      	nop
 8001024:	40020000 	.word	0x40020000
 8001028:	20000090 	.word	0x20000090

0800102c <checkReadyToDrive>:
void checkReadyToDrive(void) {
 800102c:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(RTD_GPIO_Port, RTD_Pin);
 800102e:	2110      	movs	r1, #16
 8001030:	4815      	ldr	r0, [pc, #84]	@ (8001088 <checkReadyToDrive+0x5c>)
 8001032:	f002 fa31 	bl	8003498 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && !readyToDrive) {
 8001036:	2801      	cmp	r0, #1
 8001038:	d009      	beq.n	800104e <checkReadyToDrive+0x22>
	else if (pinState == GPIO_PIN_RESET || bseValue < BRAKE_ACTIVATED_ADC_VAL){
 800103a:	b120      	cbz	r0, 8001046 <checkReadyToDrive+0x1a>
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <checkReadyToDrive+0x60>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001044:	d214      	bcs.n	8001070 <checkReadyToDrive+0x44>
		rtdState = false;
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <checkReadyToDrive+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bd08      	pop	{r3, pc}
	if (pinState == GPIO_PIN_SET && bseValue > BRAKE_ACTIVATED_ADC_VAL && !readyToDrive) {
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <checkReadyToDrive+0x60>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001056:	d9f0      	bls.n	800103a <checkReadyToDrive+0xe>
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <checkReadyToDrive+0x68>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ec      	bne.n	800103a <checkReadyToDrive+0xe>
		rtdState = true;
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <checkReadyToDrive+0x64>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
		millis_RTD = HAL_GetTick();
 8001066:	f000 fed5 	bl	8001e14 <HAL_GetTick>
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <checkReadyToDrive+0x6c>)
 800106c:	6018      	str	r0, [r3, #0]
 800106e:	e7ed      	b.n	800104c <checkReadyToDrive+0x20>
	else if(HAL_GetTick()-millis_precharge >= RTD_BUTTON_PRESS_MILLIS){
 8001070:	f000 fed0 	bl	8001e14 <HAL_GetTick>
 8001074:	4b09      	ldr	r3, [pc, #36]	@ (800109c <checkReadyToDrive+0x70>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1ac0      	subs	r0, r0, r3
 800107a:	2863      	cmp	r0, #99	@ 0x63
 800107c:	d9e6      	bls.n	800104c <checkReadyToDrive+0x20>
		readyToDrive = true;
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <checkReadyToDrive+0x68>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	e7e2      	b.n	800104c <checkReadyToDrive+0x20>
 8001086:	bf00      	nop
 8001088:	40020400 	.word	0x40020400
 800108c:	20000094 	.word	0x20000094
 8001090:	20000064 	.word	0x20000064
 8001094:	20000065 	.word	0x20000065
 8001098:	20000060 	.word	0x20000060
 800109c:	20000058 	.word	0x20000058

080010a0 <sendPrechargeRequest>:
void sendPrechargeRequest(void){
 80010a0:	b508      	push	{r3, lr}
	uint8_t pinState = HAL_GPIO_ReadPin(PRECHARGE_GPIO_Port, PRECHARGE_Pin);
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <sendPrechargeRequest+0x38>)
 80010a6:	f002 f9f7 	bl	8003498 <HAL_GPIO_ReadPin>
	if(pinState == GPIO_PIN_SET && !prechargeState){
 80010aa:	2801      	cmp	r0, #1
 80010ac:	d004      	beq.n	80010b8 <sendPrechargeRequest+0x18>
	else if (pinState == GPIO_PIN_RESET){
 80010ae:	b978      	cbnz	r0, 80010d0 <sendPrechargeRequest+0x30>
		prechargeState = false;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <sendPrechargeRequest+0x3c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
}
 80010b6:	bd08      	pop	{r3, pc}
	if(pinState == GPIO_PIN_SET && !prechargeState){
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <sendPrechargeRequest+0x3c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f6      	bne.n	80010ae <sendPrechargeRequest+0xe>
		prechargeState = true;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <sendPrechargeRequest+0x3c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
		millis_precharge = HAL_GetTick();
 80010c6:	f000 fea5 	bl	8001e14 <HAL_GetTick>
 80010ca:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <sendPrechargeRequest+0x40>)
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	e7f2      	b.n	80010b6 <sendPrechargeRequest+0x16>
	else if(HAL_GetTick()-millis_precharge >= PRECHARGE_BUTTON_PRESS_MILLIS){
 80010d0:	f000 fea0 	bl	8001e14 <HAL_GetTick>
}
 80010d4:	e7ef      	b.n	80010b6 <sendPrechargeRequest+0x16>
 80010d6:	bf00      	nop
 80010d8:	40020800 	.word	0x40020800
 80010dc:	2000005c 	.word	0x2000005c
 80010e0:	20000058 	.word	0x20000058

080010e4 <HAL_I2S_TxCpltCallback>:
	if (hi2s->Instance == SPI2 && !waveFinished) {
 80010e4:	6802      	ldr	r2, [r0, #0]
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_I2S_TxCpltCallback+0x50>)
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d000      	beq.n	80010ee <HAL_I2S_TxCpltCallback+0xa>
 80010ec:	4770      	bx	lr
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_I2S_TxCpltCallback+0x54>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1fa      	bne.n	80010ec <HAL_I2S_TxCpltCallback+0x8>
		if (wavPos < halfwordCount) {
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_I2S_TxCpltCallback+0x58>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a11      	ldr	r2, [pc, #68]	@ (8001140 <HAL_I2S_TxCpltCallback+0x5c>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	4293      	cmp	r3, r2
 8001100:	d214      	bcs.n	800112c <HAL_I2S_TxCpltCallback+0x48>
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001102:	b510      	push	{r4, lr}
			uint32_t remain = halfwordCount - wavPos;
 8001104:	1ad2      	subs	r2, r2, r3
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8001106:	f247 5130 	movw	r1, #30000	@ 0x7530
 800110a:	428a      	cmp	r2, r1
 800110c:	d80b      	bhi.n	8001126 <HAL_I2S_TxCpltCallback+0x42>
 800110e:	b292      	uxth	r2, r2
			const uint16_t *chunkPtr = wavePCM + wavPos;
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <HAL_I2S_TxCpltCallback+0x60>)
 8001112:	6809      	ldr	r1, [r1, #0]
			wavPos += thisChunk;
 8001114:	18d4      	adds	r4, r2, r3
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <HAL_I2S_TxCpltCallback+0x58>)
 8001118:	6004      	str	r4, [r0, #0]
			HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 800111a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <HAL_I2S_TxCpltCallback+0x64>)
 8001120:	f002 fb2c 	bl	800377c <HAL_I2S_Transmit_DMA>
}
 8001124:	bd10      	pop	{r4, pc}
			uint16_t thisChunk = (remain > CHUNK_SIZE_HALFWORDS) ? CHUNK_SIZE_HALFWORDS : (uint16_t) remain;
 8001126:	f247 5230 	movw	r2, #30000	@ 0x7530
 800112a:	e7f1      	b.n	8001110 <HAL_I2S_TxCpltCallback+0x2c>
			waveFinished = 1;
 800112c:	4b02      	ldr	r3, [pc, #8]	@ (8001138 <HAL_I2S_TxCpltCallback+0x54>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	4770      	bx	lr
 8001134:	40003800 	.word	0x40003800
 8001138:	20000038 	.word	0x20000038
 800113c:	20000044 	.word	0x20000044
 8001140:	2000003c 	.word	0x2000003c
 8001144:	20000040 	.word	0x20000040
 8001148:	200001c8 	.word	0x200001c8

0800114c <PlayStartupSoundOnce>:
void PlayStartupSoundOnce(void) {
 800114c:	b508      	push	{r3, lr}
	wavePCM = (const uint16_t*) &startup_sound[WAV_HEADER_SIZE];
 800114e:	4909      	ldr	r1, [pc, #36]	@ (8001174 <PlayStartupSoundOnce+0x28>)
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <PlayStartupSoundOnce+0x2c>)
 8001152:	6019      	str	r1, [r3, #0]
	halfwordCount = TOTAL_HALFWORDS;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <PlayStartupSoundOnce+0x30>)
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <PlayStartupSoundOnce+0x34>)
 8001158:	601a      	str	r2, [r3, #0]
	wavPos = 0;
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <PlayStartupSoundOnce+0x38>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
	waveFinished = 0;
 8001160:	4809      	ldr	r0, [pc, #36]	@ (8001188 <PlayStartupSoundOnce+0x3c>)
 8001162:	7002      	strb	r2, [r0, #0]
	wavPos += thisChunk;
 8001164:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001168:	601a      	str	r2, [r3, #0]
	HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*) chunkPtr, thisChunk);
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <PlayStartupSoundOnce+0x40>)
 800116c:	f002 fb06 	bl	800377c <HAL_I2S_Transmit_DMA>
}
 8001170:	bd08      	pop	{r3, pc}
 8001172:	bf00      	nop
 8001174:	08006064 	.word	0x08006064
 8001178:	20000040 	.word	0x20000040
 800117c:	2000003c 	.word	0x2000003c
 8001180:	00028056 	.word	0x00028056
 8001184:	20000044 	.word	0x20000044
 8001188:	20000038 	.word	0x20000038
 800118c:	200001c8 	.word	0x200001c8

08001190 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001192:	e7fe      	b.n	8001192 <Error_Handler+0x2>

08001194 <MX_ADC1_Init>:
{
 8001194:	b500      	push	{lr}
 8001196:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001198:	2300      	movs	r3, #0
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80011a2:	4821      	ldr	r0, [pc, #132]	@ (8001228 <MX_ADC1_Init+0x94>)
 80011a4:	4a21      	ldr	r2, [pc, #132]	@ (800122c <MX_ADC1_Init+0x98>)
 80011a6:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ac:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011b0:	2201      	movs	r2, #1
 80011b2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b4:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011be:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80011c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011c4:	6282      	str	r2, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 80011c8:	2203      	movs	r2, #3
 80011ca:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011cc:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011d0:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d2:	f000 fe4f 	bl	8001e74 <HAL_ADC_Init>
 80011d6:	b9f0      	cbnz	r0, 8001216 <MX_ADC1_Init+0x82>
  sConfig.Channel = ADC_CHANNEL_14;
 80011d8:	230e      	movs	r3, #14
 80011da:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011e0:	2307      	movs	r3, #7
 80011e2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	4669      	mov	r1, sp
 80011e6:	4810      	ldr	r0, [pc, #64]	@ (8001228 <MX_ADC1_Init+0x94>)
 80011e8:	f001 f8a6 	bl	8002338 <HAL_ADC_ConfigChannel>
 80011ec:	b9a8      	cbnz	r0, 800121a <MX_ADC1_Init+0x86>
  sConfig.Channel = ADC_CHANNEL_15;
 80011ee:	230f      	movs	r3, #15
 80011f0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 80011f2:	2303      	movs	r3, #3
 80011f4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	4669      	mov	r1, sp
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_ADC1_Init+0x94>)
 80011fa:	f001 f89d 	bl	8002338 <HAL_ADC_ConfigChannel>
 80011fe:	b970      	cbnz	r0, 800121e <MX_ADC1_Init+0x8a>
  sConfig.Channel = ADC_CHANNEL_1;
 8001200:	2301      	movs	r3, #1
 8001202:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8001204:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	4669      	mov	r1, sp
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <MX_ADC1_Init+0x94>)
 800120a:	f001 f895 	bl	8002338 <HAL_ADC_ConfigChannel>
 800120e:	b940      	cbnz	r0, 8001222 <MX_ADC1_Init+0x8e>
}
 8001210:	b005      	add	sp, #20
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001216:	f7ff ffbb 	bl	8001190 <Error_Handler>
    Error_Handler();
 800121a:	f7ff ffb9 	bl	8001190 <Error_Handler>
    Error_Handler();
 800121e:	f7ff ffb7 	bl	8001190 <Error_Handler>
    Error_Handler();
 8001222:	f7ff ffb5 	bl	8001190 <Error_Handler>
 8001226:	bf00      	nop
 8001228:	20000270 	.word	0x20000270
 800122c:	40012000 	.word	0x40012000

08001230 <MX_TIM3_Init>:
{
 8001230:	b500      	push	{lr}
 8001232:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001234:	2300      	movs	r3, #0
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	9303      	str	r3, [sp, #12]
 800123a:	9304      	str	r3, [sp, #16]
 800123c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001242:	4814      	ldr	r0, [pc, #80]	@ (8001294 <MX_TIM3_Init+0x64>)
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <MX_TIM3_Init+0x68>)
 8001246:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 4;
 8001248:	2204      	movs	r2, #4
 800124a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 10001;
 800124e:	f242 7211 	movw	r2, #10001	@ 0x2711
 8001252:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001258:	f004 fa7a 	bl	8005750 <HAL_TIM_Base_Init>
 800125c:	b998      	cbnz	r0, 8001286 <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001264:	a902      	add	r1, sp, #8
 8001266:	480b      	ldr	r0, [pc, #44]	@ (8001294 <MX_TIM3_Init+0x64>)
 8001268:	f004 fc0c 	bl	8005a84 <HAL_TIM_ConfigClockSource>
 800126c:	b968      	cbnz	r0, 800128a <MX_TIM3_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800126e:	2320      	movs	r3, #32
 8001270:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001276:	4669      	mov	r1, sp
 8001278:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_TIM3_Init+0x64>)
 800127a:	f004 fe23 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	b930      	cbnz	r0, 800128e <MX_TIM3_Init+0x5e>
}
 8001280:	b007      	add	sp, #28
 8001282:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001286:	f7ff ff83 	bl	8001190 <Error_Handler>
    Error_Handler();
 800128a:	f7ff ff81 	bl	8001190 <Error_Handler>
    Error_Handler();
 800128e:	f7ff ff7f 	bl	8001190 <Error_Handler>
 8001292:	bf00      	nop
 8001294:	200000c8 	.word	0x200000c8
 8001298:	40000400 	.word	0x40000400

0800129c <MX_SPI3_Init>:
{
 800129c:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_SPI3_Init+0x38>)
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <MX_SPI3_Init+0x3c>)
 80012a2:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012a4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80012a8:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012aa:	2300      	movs	r3, #0
 80012ac:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ae:	60c3      	str	r3, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b2:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b8:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ba:	2210      	movs	r2, #16
 80012bc:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c0:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012c4:	230a      	movs	r3, #10
 80012c6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012c8:	f003 fc62 	bl	8004b90 <HAL_SPI_Init>
 80012cc:	b900      	cbnz	r0, 80012d0 <MX_SPI3_Init+0x34>
}
 80012ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012d0:	f7ff ff5e 	bl	8001190 <Error_Handler>
 80012d4:	20000110 	.word	0x20000110
 80012d8:	40003c00 	.word	0x40003c00

080012dc <MX_I2S2_Init>:
{
 80012dc:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 80012de:	480b      	ldr	r0, [pc, #44]	@ (800130c <MX_I2S2_Init+0x30>)
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_I2S2_Init+0x34>)
 80012e2:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80012ea:	2300      	movs	r3, #0
 80012ec:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012ee:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80012f0:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80012f2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80012f6:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80012f8:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80012fa:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80012fe:	f002 f8fd 	bl	80034fc <HAL_I2S_Init>
 8001302:	b900      	cbnz	r0, 8001306 <MX_I2S2_Init+0x2a>
}
 8001304:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001306:	f7ff ff43 	bl	8001190 <Error_Handler>
 800130a:	bf00      	nop
 800130c:	200001c8 	.word	0x200001c8
 8001310:	40003800 	.word	0x40003800

08001314 <SystemClock_Config>:
{
 8001314:	b500      	push	{lr}
 8001316:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001318:	2230      	movs	r2, #48	@ 0x30
 800131a:	2100      	movs	r1, #0
 800131c:	a808      	add	r0, sp, #32
 800131e:	f004 fe53 	bl	8005fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001322:	2300      	movs	r3, #0
 8001324:	9303      	str	r3, [sp, #12]
 8001326:	9304      	str	r3, [sp, #16]
 8001328:	9305      	str	r3, [sp, #20]
 800132a:	9306      	str	r3, [sp, #24]
 800132c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	4a1f      	ldr	r2, [pc, #124]	@ (80013b0 <SystemClock_Config+0x9c>)
 8001332:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001334:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001338:	6411      	str	r1, [r2, #64]	@ 0x40
 800133a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800133c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	491b      	ldr	r1, [pc, #108]	@ (80013b4 <SystemClock_Config+0xa0>)
 8001348:	680a      	ldr	r2, [r1, #0]
 800134a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800134e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001352:	600a      	str	r2, [r1, #0]
 8001354:	680a      	ldr	r2, [r1, #0]
 8001356:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800135a:	9202      	str	r2, [sp, #8]
 800135c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135e:	2202      	movs	r2, #2
 8001360:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001362:	2101      	movs	r1, #1
 8001364:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001366:	2110      	movs	r1, #16
 8001368:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800136e:	2308      	movs	r3, #8
 8001370:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001372:	2354      	movs	r3, #84	@ 0x54
 8001374:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001376:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001378:	2307      	movs	r3, #7
 800137a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	a808      	add	r0, sp, #32
 800137e:	f002 fe55 	bl	800402c <HAL_RCC_OscConfig>
 8001382:	b980      	cbnz	r0, 80013a6 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2102      	movs	r1, #2
 800138a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001390:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001394:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001396:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001398:	a803      	add	r0, sp, #12
 800139a:	f003 f8bf 	bl	800451c <HAL_RCC_ClockConfig>
 800139e:	b920      	cbnz	r0, 80013aa <SystemClock_Config+0x96>
}
 80013a0:	b015      	add	sp, #84	@ 0x54
 80013a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013a6:	f7ff fef3 	bl	8001190 <Error_Handler>
    Error_Handler();
 80013aa:	f7ff fef1 	bl	8001190 <Error_Handler>
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <main>:
{
 80013b8:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 80013ba:	f000 fcc5 	bl	8001d48 <HAL_Init>
  SystemClock_Config();
 80013be:	f7ff ffa9 	bl	8001314 <SystemClock_Config>
  MX_GPIO_Init();
 80013c2:	f7ff faff 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c6:	f7ff fbc9 	bl	8000b5c <MX_DMA_Init>
  MX_ADC1_Init();
 80013ca:	f7ff fee3 	bl	8001194 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013ce:	f7ff ff2f 	bl	8001230 <MX_TIM3_Init>
  MX_SPI3_Init();
 80013d2:	f7ff ff63 	bl	800129c <MX_SPI3_Init>
  MX_I2S2_Init();
 80013d6:	f7ff ff81 	bl	80012dc <MX_I2S2_Init>
  HAL_TIM_Base_Start(&htim3);
 80013da:	4826      	ldr	r0, [pc, #152]	@ (8001474 <main+0xbc>)
 80013dc:	f004 fa08 	bl	80057f0 <HAL_TIM_Base_Start>
  if (CANSPI_Initialize() != true) {
 80013e0:	f7ff f870 	bl	80004c4 <CANSPI_Initialize>
 80013e4:	b128      	cbz	r0, 80013f2 <main+0x3a>
  bms_diagnostics.inverterActive = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <main+0xc0>)
 80013ea:	6013      	str	r3, [r2, #0]
  inverter_diagnostics.motorRpm   = 0;
 80013ec:	4a23      	ldr	r2, [pc, #140]	@ (800147c <main+0xc4>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e013      	b.n	800141a <main+0x62>
  	Error_Handler();
 80013f2:	f7ff fecd 	bl	8001190 <Error_Handler>
		  readFromCAN();
 80013f6:	f7ff fc1d 	bl	8000c34 <readFromCAN>
 80013fa:	e013      	b.n	8001424 <main+0x6c>
		HAL_ADC_Start_DMA(&hadc1, ADC_Reads, ADC_BUFFER);
 80013fc:	2203      	movs	r2, #3
 80013fe:	4920      	ldr	r1, [pc, #128]	@ (8001480 <main+0xc8>)
 8001400:	4820      	ldr	r0, [pc, #128]	@ (8001484 <main+0xcc>)
 8001402:	f000 fe8b 	bl	800211c <HAL_ADC_Start_DMA>
		dma_read_complete = 0;
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <main+0xd0>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		millis_since_dma_read = HAL_GetTick();
 800140c:	f000 fd02 	bl	8001e14 <HAL_GetTick>
 8001410:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <main+0xd4>)
 8001412:	6018      	str	r0, [r3, #0]
 8001414:	e011      	b.n	800143a <main+0x82>
		  sendTorqueCommand();
 8001416:	f7ff fdcf 	bl	8000fb8 <sendTorqueCommand>
	  if (CANSPI_Receive(&rxMessage)) {
 800141a:	481d      	ldr	r0, [pc, #116]	@ (8001490 <main+0xd8>)
 800141c:	f7ff f9a6 	bl	800076c <CANSPI_Receive>
 8001420:	2800      	cmp	r0, #0
 8001422:	d1e8      	bne.n	80013f6 <main+0x3e>
	  if(millis_since_dma_read -  HAL_GetTick() > DMA_READ_TIMEOUT && dma_read_complete){
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <main+0xd4>)
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	f000 fcf4 	bl	8001e14 <HAL_GetTick>
 800142c:	1a24      	subs	r4, r4, r0
 800142e:	2c0a      	cmp	r4, #10
 8001430:	d903      	bls.n	800143a <main+0x82>
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <main+0xd0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1e0      	bne.n	80013fc <main+0x44>
	  calculateTorqueRequest();
 800143a:	f7ff fc25 	bl	8000c88 <calculateTorqueRequest>
	  checkAPPSPlausibility();
 800143e:	f7ff fcef 	bl	8000e20 <checkAPPSPlausibility>
	  checkCrossCheck();
 8001442:	f7ff fd4d 	bl	8000ee0 <checkCrossCheck>
	  sendPrechargeRequest();
 8001446:	f7ff fe2b 	bl	80010a0 <sendPrechargeRequest>
	  checkShutdown();  // If pin is high, torque->0, block
 800144a:	f7ff fddb 	bl	8001004 <checkShutdown>
	  finalTorqueRequest   = requestedTorque;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <main+0xdc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <main+0xe0>)
 8001454:	6013      	str	r3, [r2, #0]
	  lastRequestedTorque  = requestedTorque;
 8001456:	4a11      	ldr	r2, [pc, #68]	@ (800149c <main+0xe4>)
 8001458:	6013      	str	r3, [r2, #0]
	  uint8_t prevReadyToDrive = readyToDrive;
 800145a:	4c11      	ldr	r4, [pc, #68]	@ (80014a0 <main+0xe8>)
 800145c:	7825      	ldrb	r5, [r4, #0]
	  checkReadyToDrive();
 800145e:	f7ff fde5 	bl	800102c <checkReadyToDrive>
	  if (readyToDrive) {
 8001462:	7823      	ldrb	r3, [r4, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0d8      	beq.n	800141a <main+0x62>
		  if(!prevReadyToDrive){
 8001468:	2d00      	cmp	r5, #0
 800146a:	d1d4      	bne.n	8001416 <main+0x5e>
			  PlayStartupSoundOnce();
 800146c:	f7ff fe6e 	bl	800114c <PlayStartupSoundOnce>
 8001470:	e7d1      	b.n	8001416 <main+0x5e>
 8001472:	bf00      	nop
 8001474:	200000c8 	.word	0x200000c8
 8001478:	2000004c 	.word	0x2000004c
 800147c:	20000048 	.word	0x20000048
 8001480:	20000074 	.word	0x20000074
 8001484:	20000270 	.word	0x20000270
 8001488:	20000002 	.word	0x20000002
 800148c:	20000080 	.word	0x20000080
 8001490:	200000a0 	.word	0x200000a0
 8001494:	20000090 	.word	0x20000090
 8001498:	20000088 	.word	0x20000088
 800149c:	2000008c 	.word	0x2000008c
 80014a0:	20000065 	.word	0x20000065

080014a4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80014aa:	2201      	movs	r2, #1
 80014ac:	2102      	movs	r1, #2
 80014ae:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <MCP2515_Initialize+0x3c>)
 80014b0:	f002 f80a 	bl	80034c8 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80014b4:	230a      	movs	r3, #10
 80014b6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80014b8:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <MCP2515_Initialize+0x40>)
 80014ba:	f003 fff8 	bl	80054ae <HAL_SPI_GetState>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <MCP2515_Initialize+0x24>
      return true;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e006      	b.n	80014d6 <MCP2515_Initialize+0x32>
    
    loop--;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f1      	bne.n	80014b8 <MCP2515_Initialize+0x14>
      
  return false;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40020800 	.word	0x40020800
 80014e4:	20000110 	.word	0x20000110

080014e8 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	200f      	movs	r0, #15
 80014f2:	f000 f8a3 	bl	800163c <MCP2515_WriteByte>
  HAL_Delay(100);
 80014f6:	2064      	movs	r0, #100	@ 0x64
 80014f8:	f000 fc98 	bl	8001e2c <HAL_Delay>
  uint8_t loop = 10;
 80014fc:	230a      	movs	r3, #10
 80014fe:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f89a 	bl	800163c <MCP2515_WriteByte>

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8001508:	200e      	movs	r0, #14
 800150a:	f000 f84f 	bl	80015ac <MCP2515_ReadByte>
 800150e:	4603      	mov	r3, r0
 8001510:	71bb      	strb	r3, [r7, #6]
	uint8_t SOMETHINGELSE = MCP2515_ReadByte(MCP2515_TXB0CTRL);
 8001512:	2030      	movs	r0, #48	@ 0x30
 8001514:	f000 f84a 	bl	80015ac <MCP2515_ReadByte>
 8001518:	4603      	mov	r3, r0
 800151a:	717b      	strb	r3, [r7, #5]

    if((canstat & 0xE0) == 0x80)
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001522:	2b80      	cmp	r3, #128	@ 0x80
 8001524:	d101      	bne.n	800152a <MCP2515_SetConfigMode+0x42>
      return true;
 8001526:	2301      	movs	r3, #1
 8001528:	e008      	b.n	800153c <MCP2515_SetConfigMode+0x54>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	3b01      	subs	r3, #1
 800152e:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(100);
 8001530:	2064      	movs	r0, #100	@ 0x64
 8001532:	f000 fc7b 	bl	8001e2c <HAL_Delay>

  } while(loop > 0);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	e7e1      	b.n	8001500 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800154a:	2100      	movs	r1, #0
 800154c:	200f      	movs	r0, #15
 800154e:	f000 f875 	bl	800163c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8001552:	230a      	movs	r3, #10
 8001554:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001556:	200e      	movs	r0, #14
 8001558:	f000 f828 	bl	80015ac <MCP2515_ReadByte>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <MCP2515_SetNormalMode+0x26>
      return true;
 8001566:	2301      	movs	r3, #1
 8001568:	e006      	b.n	8001578 <MCP2515_SetNormalMode+0x34>
    
//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
    loop--;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	3b01      	subs	r3, #1
 800156e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ef      	bne.n	8001556 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 8001584:	2200      	movs	r2, #0
 8001586:	2102      	movs	r1, #2
 8001588:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MCP2515_Reset+0x28>)
 800158a:	f001 ff9d 	bl	80034c8 <HAL_GPIO_WritePin>
 800158e:	2001      	movs	r0, #1
 8001590:	f000 fc4c 	bl	8001e2c <HAL_Delay>

  SPI_Tx(MCP2515_RESET);
 8001594:	20c0      	movs	r0, #192	@ 0xc0
 8001596:	f000 f929 	bl	80017ec <SPI_Tx>

  MCP2515_CS_HIGH();
 800159a:	2201      	movs	r2, #1
 800159c:	2102      	movs	r1, #2
 800159e:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <MCP2515_Reset+0x28>)
 80015a0:	f001 ff92 	bl	80034c8 <HAL_GPIO_WritePin>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020800 	.word	0x40020800

080015ac <MCP2515_ReadByte>:



/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <MCP2515_ReadByte+0x44>)
 80015bc:	f001 ff84 	bl	80034c8 <HAL_GPIO_WritePin>
 80015c0:	2001      	movs	r0, #1
 80015c2:	f000 fc33 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 f910 	bl	80017ec <SPI_Tx>
  SPI_Tx(address);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f90c 	bl	80017ec <SPI_Tx>
  retVal = SPI_Rx();
 80015d4:	f000 f930 	bl	8001838 <SPI_Rx>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80015dc:	2201      	movs	r2, #1
 80015de:	2102      	movs	r1, #2
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MCP2515_ReadByte+0x44>)
 80015e2:	f001 ff71 	bl	80034c8 <HAL_GPIO_WritePin>
  
  return retVal;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40020800 	.word	0x40020800

080015f4 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001604:	2200      	movs	r2, #0
 8001606:	2102      	movs	r1, #2
 8001608:	480b      	ldr	r0, [pc, #44]	@ (8001638 <MCP2515_ReadRxSequence+0x44>)
 800160a:	f001 ff5d 	bl	80034c8 <HAL_GPIO_WritePin>
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fc0c 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(instruction);        
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f8e8 	bl	80017ec <SPI_Tx>
  SPI_RxBuffer(data, length);
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	4619      	mov	r1, r3
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f000 f919 	bl	8001858 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001626:	2201      	movs	r2, #1
 8001628:	2102      	movs	r1, #2
 800162a:	4803      	ldr	r0, [pc, #12]	@ (8001638 <MCP2515_ReadRxSequence+0x44>)
 800162c:	f001 ff4c 	bl	80034c8 <HAL_GPIO_WritePin>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020800 	.word	0x40020800

0800163c <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	460a      	mov	r2, r1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 800164c:	2200      	movs	r2, #0
 800164e:	2102      	movs	r1, #2
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <MCP2515_WriteByte+0x48>)
 8001652:	f001 ff39 	bl	80034c8 <HAL_GPIO_WritePin>
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fbe8 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 800165c:	2002      	movs	r0, #2
 800165e:	f000 f8c5 	bl	80017ec <SPI_Tx>
  SPI_Tx(address);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f8c1 	bl	80017ec <SPI_Tx>
  SPI_Tx(data);  
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f8bd 	bl	80017ec <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001672:	2201      	movs	r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	4803      	ldr	r0, [pc, #12]	@ (8001684 <MCP2515_WriteByte+0x48>)
 8001678:	f001 ff26 	bl	80034c8 <HAL_GPIO_WritePin>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020800 	.word	0x40020800

08001688 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	603a      	str	r2, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	460b      	mov	r3, r1
 8001696:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001698:	2200      	movs	r2, #0
 800169a:	2102      	movs	r1, #2
 800169c:	480f      	ldr	r0, [pc, #60]	@ (80016dc <MCP2515_WriteByteSequence+0x54>)
 800169e:	f001 ff13 	bl	80034c8 <HAL_GPIO_WritePin>
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 fbc2 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 80016a8:	2002      	movs	r0, #2
 80016aa:	f000 f89f 	bl	80017ec <SPI_Tx>
  SPI_Tx(startAddress);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f89b 	bl	80017ec <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80016b6:	79ba      	ldrb	r2, [r7, #6]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f000 f8a3 	bl	8001810 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80016ca:	2201      	movs	r2, #1
 80016cc:	2102      	movs	r1, #2
 80016ce:	4803      	ldr	r0, [pc, #12]	@ (80016dc <MCP2515_WriteByteSequence+0x54>)
 80016d0:	f001 fefa 	bl	80034c8 <HAL_GPIO_WritePin>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020800 	.word	0x40020800

080016e0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	4613      	mov	r3, r2
 80016f0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80016f2:	2200      	movs	r2, #0
 80016f4:	2102      	movs	r1, #2
 80016f6:	4810      	ldr	r0, [pc, #64]	@ (8001738 <MCP2515_LoadTxSequence+0x58>)
 80016f8:	f001 fee6 	bl	80034c8 <HAL_GPIO_WritePin>
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 fb95 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(instruction);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f871 	bl	80017ec <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800170a:	2104      	movs	r1, #4
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f000 f87f 	bl	8001810 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f869 	bl	80017ec <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	4619      	mov	r1, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f876 	bl	8001810 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001724:	2201      	movs	r2, #1
 8001726:	2102      	movs	r1, #2
 8001728:	4803      	ldr	r0, [pc, #12]	@ (8001738 <MCP2515_LoadTxSequence+0x58>)
 800172a:	f001 fecd 	bl	80034c8 <HAL_GPIO_WritePin>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40020800 	.word	0x40020800

0800173c <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001746:	2200      	movs	r2, #0
 8001748:	2102      	movs	r1, #2
 800174a:	4809      	ldr	r0, [pc, #36]	@ (8001770 <MCP2515_RequestToSend+0x34>)
 800174c:	f001 febc 	bl	80034c8 <HAL_GPIO_WritePin>
 8001750:	2001      	movs	r0, #1
 8001752:	f000 fb6b 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(instruction);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f847 	bl	80017ec <SPI_Tx>
      
  MCP2515_CS_HIGH();
 800175e:	2201      	movs	r2, #1
 8001760:	2102      	movs	r1, #2
 8001762:	4803      	ldr	r0, [pc, #12]	@ (8001770 <MCP2515_RequestToSend+0x34>)
 8001764:	f001 feb0 	bl	80034c8 <HAL_GPIO_WritePin>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020800 	.word	0x40020800

08001774 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800177a:	2200      	movs	r2, #0
 800177c:	2102      	movs	r1, #2
 800177e:	480b      	ldr	r0, [pc, #44]	@ (80017ac <MCP2515_ReadStatus+0x38>)
 8001780:	f001 fea2 	bl	80034c8 <HAL_GPIO_WritePin>
 8001784:	2001      	movs	r0, #1
 8001786:	f000 fb51 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 800178a:	20a0      	movs	r0, #160	@ 0xa0
 800178c:	f000 f82e 	bl	80017ec <SPI_Tx>
  retVal = SPI_Rx();
 8001790:	f000 f852 	bl	8001838 <SPI_Rx>
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
//  uint8_t dingus = retVal;
        
  MCP2515_CS_HIGH();
 8001798:	2201      	movs	r2, #1
 800179a:	2102      	movs	r1, #2
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <MCP2515_ReadStatus+0x38>)
 800179e:	f001 fe93 	bl	80034c8 <HAL_GPIO_WritePin>
  
  return retVal;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020800 	.word	0x40020800

080017b0 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80017b6:	2200      	movs	r2, #0
 80017b8:	2102      	movs	r1, #2
 80017ba:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <MCP2515_GetRxStatus+0x38>)
 80017bc:	f001 fe84 	bl	80034c8 <HAL_GPIO_WritePin>
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 fb33 	bl	8001e2c <HAL_Delay>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80017c6:	20b0      	movs	r0, #176	@ 0xb0
 80017c8:	f000 f810 	bl	80017ec <SPI_Tx>
  retVal = SPI_Rx();
 80017cc:	f000 f834 	bl	8001838 <SPI_Rx>
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80017d4:	2201      	movs	r2, #1
 80017d6:	2102      	movs	r1, #2
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <MCP2515_GetRxStatus+0x38>)
 80017da:	f001 fe75 	bl	80034c8 <HAL_GPIO_WritePin>
  
  return retVal;
 80017de:	79fb      	ldrb	r3, [r7, #7]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020800 	.word	0x40020800

080017ec <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80017f6:	1df9      	adds	r1, r7, #7
 80017f8:	230a      	movs	r3, #10
 80017fa:	2201      	movs	r2, #1
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <SPI_Tx+0x20>)
 80017fe:	f003 fa50 	bl	8004ca2 <HAL_SPI_Transmit>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000110 	.word	0x20000110

08001810 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	b29a      	uxth	r2, r3
 8001820:	230a      	movs	r3, #10
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4803      	ldr	r0, [pc, #12]	@ (8001834 <SPI_TxBuffer+0x24>)
 8001826:	f003 fa3c 	bl	8004ca2 <HAL_SPI_Transmit>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000110 	.word	0x20000110

08001838 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800183e:	1df9      	adds	r1, r7, #7
 8001840:	230a      	movs	r3, #10
 8001842:	2201      	movs	r2, #1
 8001844:	4803      	ldr	r0, [pc, #12]	@ (8001854 <SPI_Rx+0x1c>)
 8001846:	f003 fb70 	bl	8004f2a <HAL_SPI_Receive>
  return retVal;
 800184a:	79fb      	ldrb	r3, [r7, #7]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000110 	.word	0x20000110

08001858 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	b29a      	uxth	r2, r3
 8001868:	230a      	movs	r3, #10
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <SPI_RxBuffer+0x24>)
 800186e:	f003 fb5c 	bl	8004f2a <HAL_SPI_Receive>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000110 	.word	0x20000110

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a0f      	ldr	r2, [pc, #60]	@ (80018cc <HAL_MspInit+0x4c>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_MspInit+0x4c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_MspInit+0x4c>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018be:	2007      	movs	r0, #7
 80018c0:	f001 f8b4 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a40      	ldr	r2, [pc, #256]	@ (80019f0 <HAL_ADC_MspInit+0x120>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d179      	bne.n	80019e6 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b3f      	ldr	r3, [pc, #252]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	4a3e      	ldr	r2, [pc, #248]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001900:	6453      	str	r3, [r2, #68]	@ 0x44
 8001902:	4b3c      	ldr	r3, [pc, #240]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a37      	ldr	r2, [pc, #220]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <HAL_ADC_MspInit+0x124>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001946:	2302      	movs	r3, #2
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194a:	2303      	movs	r3, #3
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4827      	ldr	r0, [pc, #156]	@ (80019f8 <HAL_ADC_MspInit+0x128>)
 800195a:	f001 fc19 	bl	8003190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800195e:	2330      	movs	r3, #48	@ 0x30
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001962:	2303      	movs	r3, #3
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4822      	ldr	r0, [pc, #136]	@ (80019fc <HAL_ADC_MspInit+0x12c>)
 8001972:	f001 fc0d 	bl	8003190 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 8001978:	4a22      	ldr	r2, [pc, #136]	@ (8001a04 <HAL_ADC_MspInit+0x134>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 800197e:	2200      	movs	r2, #0
 8001980:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 8001990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001994:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 8001998:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800199c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ba:	4811      	ldr	r0, [pc, #68]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019bc:	f001 f878 	bl	8002ab0 <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80019c6:	f7ff fbe3 	bl	8001190 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80019d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_ADC_MspInit+0x130>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2012      	movs	r0, #18
 80019dc:	f001 f831 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019e0:	2012      	movs	r0, #18
 80019e2:	f001 f84a 	bl	8002a7a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	@ 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40012000 	.word	0x40012000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020800 	.word	0x40020800
 8001a00:	20000210 	.word	0x20000210
 8001a04:	40026410 	.word	0x40026410

08001a08 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08e      	sub	sp, #56	@ 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <HAL_I2S_MspInit+0x124>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d174      	bne.n	8001b24 <HAL_I2S_MspInit+0x11c>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a3e:	23c0      	movs	r3, #192	@ 0xc0
 8001a40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 ff52 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001a56:	f7ff fb9b 	bl	8001190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_I2S_MspInit+0x128>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a33      	ldr	r2, [pc, #204]	@ (8001b30 <HAL_I2S_MspInit+0x128>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <HAL_I2S_MspInit+0x128>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_I2S_MspInit+0x128>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b30 <HAL_I2S_MspInit+0x128>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_I2S_MspInit+0x128>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001a92:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	4821      	ldr	r0, [pc, #132]	@ (8001b34 <HAL_I2S_MspInit+0x12c>)
 8001ab0:	f001 fb6e 	bl	8003190 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001ab4:	4b20      	ldr	r3, [pc, #128]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ab6:	4a21      	ldr	r2, [pc, #132]	@ (8001b3c <HAL_I2S_MspInit+0x134>)
 8001ab8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ac2:	2240      	movs	r2, #64	@ 0x40
 8001ac4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ad6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ada:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001af2:	2204      	movs	r2, #4
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b08:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001b0a:	f000 ffd1 	bl	8002ab0 <HAL_DMA_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001b14:	f7ff fb3c 	bl	8001190 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001b1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b1e:	4a06      	ldr	r2, [pc, #24]	@ (8001b38 <HAL_I2S_MspInit+0x130>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001b24:	bf00      	nop
 8001b26:	3738      	adds	r7, #56	@ 0x38
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40003800 	.word	0x40003800
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	20000168 	.word	0x20000168
 8001b3c:	40026070 	.word	0x40026070

08001b40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_SPI_MspInit+0x84>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12c      	bne.n	8001bbc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_SPI_MspInit+0x88>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <HAL_SPI_MspInit+0x88>)
 8001b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_SPI_MspInit+0x88>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_SPI_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <HAL_SPI_MspInit+0x88>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_SPI_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b9a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bac:	2306      	movs	r3, #6
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_SPI_MspInit+0x8c>)
 8001bb8:	f001 faea 	bl	8003190 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	@ 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40003c00 	.word	0x40003c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020800 	.word	0x40020800

08001bd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_TIM_Base_MspInit+0x48>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d115      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_TIM_Base_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a0c      	ldr	r2, [pc, #48]	@ (8001c1c <HAL_TIM_Base_MspInit+0x4c>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_TIM_Base_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	201d      	movs	r0, #29
 8001c04:	f000 ff1d 	bl	8002a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c08:	201d      	movs	r0, #29
 8001c0a:	f000 ff36 	bl	8002a7a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40023800 	.word	0x40023800

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <NMI_Handler+0x4>

08001c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <MemManage_Handler+0x4>

08001c38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c76:	f000 f8b9 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <DMA1_Stream4_IRQHandler+0x10>)
 8001c86:	f001 f819 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000168 	.word	0x20000168

08001c94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <ADC_IRQHandler+0x10>)
 8001c9a:	f000 f92e 	bl	8001efa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000270 	.word	0x20000270

08001ca8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <TIM3_IRQHandler+0x10>)
 8001cae:	f003 fdf9 	bl	80058a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000c8 	.word	0x200000c8

08001cbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <DMA2_Stream0_IRQHandler+0x10>)
 8001cc2:	f000 fffb 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000210 	.word	0x20000210

08001cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f004 f959 	bl	8005fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff fb47 	bl	80013b8 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d38:	080562c8 	.word	0x080562c8
  ldr r2, =_sbss
 8001d3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d40:	200002bc 	.word	0x200002bc

08001d44 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <DMA1_Stream0_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 fe5b 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fd80 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fe73 	bl	8002a96 <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dc8:	f000 fe3b 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000010 	.word	0x20000010
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	200002b8 	.word	0x200002b8

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200002b8 	.word	0x200002b8

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000010 	.word	0x20000010

08001e74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e033      	b.n	8001ef2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fd1c 	bl	80018d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eba:	f023 0302 	bic.w	r3, r3, #2
 8001ebe:	f043 0202 	orr.w	r2, r3, #2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fb58 	bl	800257c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ee2:	e001      	b.n	8001ee8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d049      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0xca>
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d046      	beq.n	8001fc4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d12b      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d127      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d119      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0220 	bic.w	r2, r2, #32
 8001f8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7fe fe4f 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0212 	mvn.w	r2, #18
 8001fc2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d057      	beq.n	800208a <HAL_ADC_IRQHandler+0x190>
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d054      	beq.n	800208a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d139      	bne.n	800207a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800201e:	2b00      	cmp	r3, #0
 8002020:	d12b      	bne.n	800207a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	d124      	bne.n	800207a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11d      	bne.n	800207a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d119      	bne.n	800207a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002054:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fbfc 	bl	8002878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 020c 	mvn.w	r2, #12
 8002088:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002098:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x1d6>
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d014      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10d      	bne.n	80020d0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f925 	bl	8002310 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f06f 0201 	mvn.w	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020de:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <HAL_ADC_IRQHandler+0x218>
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	f043 0202 	orr.w	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0220 	mvn.w	r2, #32
 8002100:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f90e 	bl	8002324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0220 	mvn.w	r2, #32
 8002110:	601a      	str	r2, [r3, #0]
  }
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Start_DMA+0x1e>
 8002136:	2302      	movs	r3, #2
 8002138:	e0ce      	b.n	80022d8 <HAL_ADC_Start_DMA+0x1bc>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d018      	beq.n	8002182 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002160:	4b5f      	ldr	r3, [pc, #380]	@ (80022e0 <HAL_ADC_Start_DMA+0x1c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5f      	ldr	r2, [pc, #380]	@ (80022e4 <HAL_ADC_Start_DMA+0x1c8>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9a      	lsrs	r2, r3, #18
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002174:	e002      	b.n	800217c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	3b01      	subs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002190:	d107      	bne.n	80021a2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	f040 8086 	bne.w	80022be <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f023 0206 	bic.w	r2, r3, #6
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80021fe:	e002      	b.n	8002206 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800220e:	4b36      	ldr	r3, [pc, #216]	@ (80022e8 <HAL_ADC_Start_DMA+0x1cc>)
 8002210:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002216:	4a35      	ldr	r2, [pc, #212]	@ (80022ec <HAL_ADC_Start_DMA+0x1d0>)
 8002218:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221e:	4a34      	ldr	r2, [pc, #208]	@ (80022f0 <HAL_ADC_Start_DMA+0x1d4>)
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002226:	4a33      	ldr	r2, [pc, #204]	@ (80022f4 <HAL_ADC_Start_DMA+0x1d8>)
 8002228:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002232:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002242:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002252:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	334c      	adds	r3, #76	@ 0x4c
 800225e:	4619      	mov	r1, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f000 fcd2 	bl	8002c0c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10f      	bne.n	8002294 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d129      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	e020      	b.n	80022d6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_ADC_Start_DMA+0x1dc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11b      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x1ba>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d114      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	e00b      	b.n	80022d6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f043 0210 	orr.w	r2, r3, #16
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000008 	.word	0x20000008
 80022e4:	431bde83 	.word	0x431bde83
 80022e8:	40012300 	.word	0x40012300
 80022ec:	08002775 	.word	0x08002775
 80022f0:	0800282f 	.word	0x0800282f
 80022f4:	0800284b 	.word	0x0800284b
 80022f8:	40012000 	.word	0x40012000

080022fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1c>
 8002350:	2302      	movs	r3, #2
 8002352:	e105      	b.n	8002560 <HAL_ADC_ConfigChannel+0x228>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d925      	bls.n	80023b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68d9      	ldr	r1, [r3, #12]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	2207      	movs	r2, #7
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68d9      	ldr	r1, [r3, #12]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	4618      	mov	r0, r3
 800239c:	4603      	mov	r3, r0
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4403      	add	r3, r0
 80023a2:	3b1e      	subs	r3, #30
 80023a4:	409a      	lsls	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	e022      	b.n	80023f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	2207      	movs	r2, #7
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4403      	add	r3, r0
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d824      	bhi.n	8002448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b05      	subs	r3, #5
 8002410:	221f      	movs	r2, #31
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b05      	subs	r3, #5
 800243a:	fa00 f203 	lsl.w	r2, r0, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	635a      	str	r2, [r3, #52]	@ 0x34
 8002446:	e04c      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d824      	bhi.n	800249a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3b23      	subs	r3, #35	@ 0x23
 8002462:	221f      	movs	r2, #31
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43da      	mvns	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	400a      	ands	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	3b23      	subs	r3, #35	@ 0x23
 800248c:	fa00 f203 	lsl.w	r2, r0, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
 8002498:	e023      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b41      	subs	r3, #65	@ 0x41
 80024ac:	221f      	movs	r2, #31
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	400a      	ands	r2, r1
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3b41      	subs	r3, #65	@ 0x41
 80024d6:	fa00 f203 	lsl.w	r2, r0, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <HAL_ADC_ConfigChannel+0x234>)
 80024e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <HAL_ADC_ConfigChannel+0x238>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d109      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1cc>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <HAL_ADC_ConfigChannel+0x238>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d123      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x21e>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b10      	cmp	r3, #16
 8002514:	d003      	beq.n	800251e <HAL_ADC_ConfigChannel+0x1e6>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b11      	cmp	r3, #17
 800251c:	d11b      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b10      	cmp	r3, #16
 8002530:	d111      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <HAL_ADC_ConfigChannel+0x23c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a10      	ldr	r2, [pc, #64]	@ (8002578 <HAL_ADC_ConfigChannel+0x240>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	0c9a      	lsrs	r2, r3, #18
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3b01      	subs	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40012300 	.word	0x40012300
 8002570:	40012000 	.word	0x40012000
 8002574:	20000008 	.word	0x20000008
 8002578:	431bde83 	.word	0x431bde83

0800257c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002584:	4b79      	ldr	r3, [pc, #484]	@ (800276c <ADC_Init+0x1f0>)
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	4a58      	ldr	r2, [pc, #352]	@ (8002770 <ADC_Init+0x1f4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6899      	ldr	r1, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e00f      	b.n	800267a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002678:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0202 	bic.w	r2, r2, #2
 8002688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7e1b      	ldrb	r3, [r3, #24]
 8002694:	005a      	lsls	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	3b01      	subs	r3, #1
 80026d4:	035a      	lsls	r2, r3, #13
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	e007      	b.n	80026f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	3b01      	subs	r3, #1
 800270c:	051a      	lsls	r2, r3, #20
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6899      	ldr	r1, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002732:	025a      	lsls	r2, r3, #9
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	029a      	lsls	r2, r3, #10
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40012300 	.word	0x40012300
 8002770:	0f000001 	.word	0x0f000001

08002774 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13c      	bne.n	8002808 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d12b      	bne.n	8002800 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d127      	bne.n	8002800 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d119      	bne.n	8002800 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0220 	bic.w	r2, r2, #32
 80027da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7fe fa29 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002806:	e00e      	b.n	8002826 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff fd85 	bl	8002324 <HAL_ADC_ErrorCallback>
}
 800281a:	e004      	b.n	8002826 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff fd5d 	bl	80022fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002856:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	@ 0x40
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fd5a 	bl	8002324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	60d3      	str	r3, [r2, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	@ (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	@ (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a0c:	f7ff ff8e 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff29 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff3e 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff8e 	bl	8002980 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff31 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffa2 	bl	80029e8 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff f9aa 	bl	8001e14 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e099      	b.n	8002c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aec:	e00f      	b.n	8002b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aee:	f7ff f991 	bl	8001e14 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d908      	bls.n	8002b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2203      	movs	r2, #3
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e078      	b.n	8002c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e8      	bne.n	8002aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4b38      	ldr	r3, [pc, #224]	@ (8002c08 <HAL_DMA_Init+0x158>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4313      	orrs	r3, r2
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0307 	bic.w	r3, r3, #7
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d117      	bne.n	8002bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa6f 	bl	8003098 <DMA_CheckFifoParam>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2240      	movs	r2, #64	@ 0x40
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e016      	b.n	8002c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa26 	bl	800302c <DMA_CalcBaseAndBitshift>
 8002be0:	4603      	mov	r3, r0
 8002be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be8:	223f      	movs	r2, #63	@ 0x3f
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	f010803f 	.word	0xf010803f

08002c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_DMA_Start_IT+0x26>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e040      	b.n	8002cb4 <HAL_DMA_Start_IT+0xa8>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d12f      	bne.n	8002ca6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f9b8 	bl	8002fd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	223f      	movs	r2, #63	@ 0x3f
 8002c66:	409a      	lsls	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0216 	orr.w	r2, r2, #22
 8002c7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e005      	b.n	8002cb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f04 <HAL_DMA_IRQHandler+0x248>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f08 <HAL_DMA_IRQHandler+0x24c>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	2208      	movs	r2, #8
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d012      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	2204      	movs	r2, #4
 8002d64:	409a      	lsls	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	2204      	movs	r2, #4
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	2210      	movs	r2, #16
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d043      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	2210      	movs	r2, #16
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
 8002dea:	e01f      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0208 	bic.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	2220      	movs	r2, #32
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 808f 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8087 	beq.w	8002f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e52:	2220      	movs	r2, #32
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d136      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x1da>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eaa:	223f      	movs	r2, #63	@ 0x3f
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d07e      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4798      	blx	r3
        }
        return;
 8002ed2:	e079      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e02c      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
 8002f02:	bf00      	nop
 8002f04:	20000008 	.word	0x20000008
 8002f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e01e      	b.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0210 	bic.w	r2, r2, #16
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d032      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2205      	movs	r2, #5
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d307      	bcc.n	8002fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f2      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x2cc>
 8002fa2:	e000      	b.n	8002fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc8:	bf00      	nop
    }
  }
}
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b40      	cmp	r3, #64	@ 0x40
 8002ffc:	d108      	bne.n	8003010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800300e:	e007      	b.n	8003020 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3b10      	subs	r3, #16
 800303c:	4a14      	ldr	r2, [pc, #80]	@ (8003090 <DMA_CalcBaseAndBitshift+0x64>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003046:	4a13      	ldr	r2, [pc, #76]	@ (8003094 <DMA_CalcBaseAndBitshift+0x68>)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d909      	bls.n	800306e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	659a      	str	r2, [r3, #88]	@ 0x58
 800306c:	e007      	b.n	800307e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	aaaaaaab 	.word	0xaaaaaaab
 8003094:	080562b0 	.word	0x080562b0

08003098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11f      	bne.n	80030f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d856      	bhi.n	8003166 <DMA_CheckFifoParam+0xce>
 80030b8:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <DMA_CheckFifoParam+0x28>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030e3 	.word	0x080030e3
 80030c8:	080030d1 	.word	0x080030d1
 80030cc:	08003167 	.word	0x08003167
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d046      	beq.n	800316a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e043      	b.n	800316a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ea:	d140      	bne.n	800316e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f0:	e03d      	b.n	800316e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030fa:	d121      	bne.n	8003140 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d837      	bhi.n	8003172 <DMA_CheckFifoParam+0xda>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <DMA_CheckFifoParam+0x70>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	0800311f 	.word	0x0800311f
 8003110:	08003119 	.word	0x08003119
 8003114:	08003131 	.word	0x08003131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e030      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d025      	beq.n	8003176 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312e:	e022      	b.n	8003176 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003138:	d11f      	bne.n	800317a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800313e:	e01c      	b.n	800317a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d903      	bls.n	800314e <DMA_CheckFifoParam+0xb6>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d003      	beq.n	8003154 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800314c:	e018      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      break;
 8003152:	e015      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00e      	beq.n	800317e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
      break;
 8003164:	e00b      	b.n	800317e <DMA_CheckFifoParam+0xe6>
      break;
 8003166:	bf00      	nop
 8003168:	e00a      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
 800316c:	e008      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
 8003170:	e006      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      break;
 8003172:	bf00      	nop
 8003174:	e004      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      break;   
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
    }
  } 
  
  return status; 
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e159      	b.n	8003460 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	f040 8148 	bne.w	800345a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d005      	beq.n	80031e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d130      	bne.n	8003244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 0201 	and.w	r2, r3, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b03      	cmp	r3, #3
 800324e:	d017      	beq.n	8003280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d123      	bne.n	80032d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	08da      	lsrs	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3208      	adds	r2, #8
 8003294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	69b9      	ldr	r1, [r7, #24]
 80032d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0203 	and.w	r2, r3, #3
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a2 	beq.w	800345a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	4b57      	ldr	r3, [pc, #348]	@ (8003478 <HAL_GPIO_Init+0x2e8>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331e:	4a56      	ldr	r2, [pc, #344]	@ (8003478 <HAL_GPIO_Init+0x2e8>)
 8003320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003324:	6453      	str	r3, [r2, #68]	@ 0x44
 8003326:	4b54      	ldr	r3, [pc, #336]	@ (8003478 <HAL_GPIO_Init+0x2e8>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003332:	4a52      	ldr	r2, [pc, #328]	@ (800347c <HAL_GPIO_Init+0x2ec>)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a49      	ldr	r2, [pc, #292]	@ (8003480 <HAL_GPIO_Init+0x2f0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x202>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a48      	ldr	r2, [pc, #288]	@ (8003484 <HAL_GPIO_Init+0x2f4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x1fe>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a47      	ldr	r2, [pc, #284]	@ (8003488 <HAL_GPIO_Init+0x2f8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x1fa>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a46      	ldr	r2, [pc, #280]	@ (800348c <HAL_GPIO_Init+0x2fc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x1f6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a45      	ldr	r2, [pc, #276]	@ (8003490 <HAL_GPIO_Init+0x300>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x1f2>
 800337e:	2304      	movs	r3, #4
 8003380:	e008      	b.n	8003394 <HAL_GPIO_Init+0x204>
 8003382:	2307      	movs	r3, #7
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x204>
 8003386:	2303      	movs	r3, #3
 8003388:	e004      	b.n	8003394 <HAL_GPIO_Init+0x204>
 800338a:	2302      	movs	r3, #2
 800338c:	e002      	b.n	8003394 <HAL_GPIO_Init+0x204>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_GPIO_Init+0x204>
 8003392:	2300      	movs	r3, #0
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f002 0203 	and.w	r2, r2, #3
 800339a:	0092      	lsls	r2, r2, #2
 800339c:	4093      	lsls	r3, r2
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a4:	4935      	ldr	r1, [pc, #212]	@ (800347c <HAL_GPIO_Init+0x2ec>)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b2:	4b38      	ldr	r3, [pc, #224]	@ (8003494 <HAL_GPIO_Init+0x304>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003494 <HAL_GPIO_Init+0x304>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003494 <HAL_GPIO_Init+0x304>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003400:	4a24      	ldr	r2, [pc, #144]	@ (8003494 <HAL_GPIO_Init+0x304>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003406:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <HAL_GPIO_Init+0x304>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342a:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_GPIO_Init+0x304>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003430:	4b18      	ldr	r3, [pc, #96]	@ (8003494 <HAL_GPIO_Init+0x304>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003454:	4a0f      	ldr	r2, [pc, #60]	@ (8003494 <HAL_GPIO_Init+0x304>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3301      	adds	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	f67f aea2 	bls.w	80031ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	@ 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40013800 	.word	0x40013800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e001      	b.n	80034ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034e4:	e003      	b.n	80034ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034e6:	887b      	ldrh	r3, [r7, #2]
 80034e8:	041a      	lsls	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e128      	b.n	8003760 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a90      	ldr	r2, [pc, #576]	@ (8003768 <HAL_I2S_Init+0x26c>)
 8003526:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fe fa6d 	bl	8001a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003544:	f023 030f 	bic.w	r3, r3, #15
 8003548:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d060      	beq.n	800361c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003562:	2310      	movs	r3, #16
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b20      	cmp	r3, #32
 8003572:	d802      	bhi.n	800357a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800357a:	2001      	movs	r0, #1
 800357c:	f001 faa8 	bl	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003580:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358a:	d125      	bne.n	80035d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	fbb2 f2f3 	udiv	r2, r2, r3
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	3305      	adds	r3, #5
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e01f      	b.n	80035f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	3305      	adds	r3, #5
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e00e      	b.n	80035f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	3305      	adds	r3, #5
 80035f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a5c      	ldr	r2, [pc, #368]	@ (800376c <HAL_I2S_Init+0x270>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e003      	b.n	8003624 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800361c:	2302      	movs	r3, #2
 800361e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d902      	bls.n	8003630 <HAL_I2S_Init+0x134>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2bff      	cmp	r3, #255	@ 0xff
 800362e:	d907      	bls.n	8003640 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	f043 0210 	orr.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e08f      	b.n	8003760 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	ea42 0103 	orr.w	r1, r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	430a      	orrs	r2, r1
 8003652:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800365e:	f023 030f 	bic.w	r3, r3, #15
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6851      	ldr	r1, [r2, #4]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6892      	ldr	r2, [r2, #8]
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6992      	ldr	r2, [r2, #24]
 8003676:	430a      	orrs	r2, r1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003682:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d161      	bne.n	8003750 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a38      	ldr	r2, [pc, #224]	@ (8003770 <HAL_I2S_Init+0x274>)
 8003690:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a37      	ldr	r2, [pc, #220]	@ (8003774 <HAL_I2S_Init+0x278>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_I2S_Init+0x1a4>
 800369c:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_I2S_Init+0x27c>)
 800369e:	e001      	b.n	80036a4 <HAL_I2S_Init+0x1a8>
 80036a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4932      	ldr	r1, [pc, #200]	@ (8003774 <HAL_I2S_Init+0x278>)
 80036ac:	428a      	cmp	r2, r1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2S_Init+0x1b8>
 80036b0:	4a31      	ldr	r2, [pc, #196]	@ (8003778 <HAL_I2S_Init+0x27c>)
 80036b2:	e001      	b.n	80036b8 <HAL_I2S_Init+0x1bc>
 80036b4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80036bc:	f023 030f 	bic.w	r3, r3, #15
 80036c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003774 <HAL_I2S_Init+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_I2S_Init+0x1d4>
 80036cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_I2S_Init+0x27c>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2S_Init+0x1d8>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036d4:	2202      	movs	r2, #2
 80036d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a25      	ldr	r2, [pc, #148]	@ (8003774 <HAL_I2S_Init+0x278>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_I2S_Init+0x1ea>
 80036e2:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <HAL_I2S_Init+0x27c>)
 80036e4:	e001      	b.n	80036ea <HAL_I2S_Init+0x1ee>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f6:	d003      	beq.n	8003700 <HAL_I2S_Init+0x204>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e001      	b.n	800370c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003716:	4313      	orrs	r3, r2
 8003718:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003720:	4313      	orrs	r3, r2
 8003722:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800372a:	4313      	orrs	r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	4313      	orrs	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003738:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <HAL_I2S_Init+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_I2S_Init+0x24c>
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <HAL_I2S_Init+0x27c>)
 8003746:	e001      	b.n	800374c <HAL_I2S_Init+0x250>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800374c:	897a      	ldrh	r2, [r7, #10]
 800374e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08003a65 	.word	0x08003a65
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	08003b79 	.word	0x08003b79
 8003774:	40003800 	.word	0x40003800
 8003778:	40003400 	.word	0x40003400

0800377c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_I2S_Transmit_DMA+0x1a>
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e08a      	b.n	80038b0 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d001      	beq.n	80037aa <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
 80037a8:	e082      	b.n	80038b0 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_I2S_Transmit_DMA+0x3e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e07a      	b.n	80038b0 <HAL_I2S_Transmit_DMA+0x134>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2203      	movs	r2, #3
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d002      	beq.n	80037ee <HAL_I2S_Transmit_DMA+0x72>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d10a      	bne.n	8003804 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003802:	e005      	b.n	8003810 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	4a28      	ldr	r2, [pc, #160]	@ (80038b8 <HAL_I2S_Transmit_DMA+0x13c>)
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_I2S_Transmit_DMA+0x140>)
 800381e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	4a26      	ldr	r2, [pc, #152]	@ (80038c0 <HAL_I2S_Transmit_DMA+0x144>)
 8003826:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003830:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003838:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003840:	f7ff f9e4 	bl	8002c0c <HAL_DMA_Start_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00f      	beq.n	800386a <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	f043 0208 	orr.w	r2, r3, #8
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e022      	b.n	80038b0 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0202 	orr.w	r2, r2, #2
 800388e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389a:	2b00      	cmp	r3, #0
 800389c:	d107      	bne.n	80038ae <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ac:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	08003943 	.word	0x08003943
 80038bc:	08003901 	.word	0x08003901
 80038c0:	0800395f 	.word	0x0800395f

080038c4 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0202 	bic.w	r2, r2, #2
 8003924:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7fd fbd5 	bl	80010e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff ffb7 	bl	80038c4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0203 	bic.w	r2, r2, #3
 800397a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003994:	f043 0208 	orr.w	r2, r3, #8
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ffa5 	bl	80038ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	1c9a      	adds	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10e      	bne.n	80039fe <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fb73 	bl	80010e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10e      	bne.n	8003a5c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff3e 	bl	80038d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d13a      	bne.n	8003af6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d109      	bne.n	8003a9e <I2S_IRQHandler+0x3a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b40      	cmp	r3, #64	@ 0x40
 8003a96:	d102      	bne.n	8003a9e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffb4 	bl	8003a06 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d126      	bne.n	8003af6 <I2S_IRQHandler+0x92>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d11f      	bne.n	8003af6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ac4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	f043 0202 	orr.w	r2, r3, #2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fefb 	bl	80038ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d136      	bne.n	8003b70 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d109      	bne.n	8003b20 <I2S_IRQHandler+0xbc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d102      	bne.n	8003b20 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ff45 	bl	80039aa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d122      	bne.n	8003b70 <I2S_IRQHandler+0x10c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d11b      	bne.n	8003b70 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b46:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff febe 	bl	80038ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a92      	ldr	r2, [pc, #584]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b92:	4b92      	ldr	r3, [pc, #584]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b94:	e001      	b.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a8b      	ldr	r2, [pc, #556]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d004      	beq.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 8099 	bne.w	8003d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f925 	bl	8003e34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9c8 	bl	8003f94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b40      	cmp	r3, #64	@ 0x40
 8003c0c:	d13a      	bne.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d035      	beq.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c22:	4b6e      	ldr	r3, [pc, #440]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c24:	e001      	b.n	8003c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4969      	ldr	r1, [pc, #420]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c32:	428b      	cmp	r3, r1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c36:	4b69      	ldr	r3, [pc, #420]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c38:	e001      	b.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe34 	bl	80038ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	f040 80c3 	bne.w	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80bd 	beq.w	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003caa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a49      	ldr	r2, [pc, #292]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb8:	e001      	b.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4944      	ldr	r1, [pc, #272]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d101      	bne.n	8003cce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ccc:	e001      	b.n	8003cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff fdf6 	bl	80038ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d00:	e089      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d107      	bne.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8be 	bl	8003e98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8fd 	bl	8003f30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3c:	2b40      	cmp	r3, #64	@ 0x40
 8003d3e:	d12f      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02a      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d64:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d66:	e001      	b.n	8003d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4919      	ldr	r1, [pc, #100]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d78:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d7a:	e001      	b.n	8003d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fda6 	bl	80038ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d136      	bne.n	8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d031      	beq.n	8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a07      	ldr	r2, [pc, #28]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dc0:	e001      	b.n	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4902      	ldr	r1, [pc, #8]	@ (8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dce:	428b      	cmp	r3, r1
 8003dd0:	d106      	bne.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003dd2:	4b02      	ldr	r3, [pc, #8]	@ (8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd4:	e006      	b.n	8003de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003dd6:	bf00      	nop
 8003dd8:	40003800 	.word	0x40003800
 8003ddc:	40003400 	.word	0x40003400
 8003de0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003de4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003de8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003df8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fd6c 	bl	80038ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	e000      	b.n	8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e16:	bf00      	nop
}
 8003e18:	bf00      	nop
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	1c99      	adds	r1, r3, #2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6251      	str	r1, [r2, #36]	@ 0x24
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d113      	bne.n	8003e8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffc9 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	1c99      	adds	r1, r3, #2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6251      	str	r1, [r2, #36]	@ 0x24
 8003eaa:	8819      	ldrh	r1, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <I2SEx_TxISR_I2SExt+0x90>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <I2SEx_TxISR_I2SExt+0x22>
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <I2SEx_TxISR_I2SExt+0x94>)
 8003eb8:	e001      	b.n	8003ebe <I2SEx_TxISR_I2SExt+0x26>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ebe:	460a      	mov	r2, r1
 8003ec0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d121      	bne.n	8003f1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <I2SEx_TxISR_I2SExt+0x90>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <I2SEx_TxISR_I2SExt+0x50>
 8003ee4:	4b11      	ldr	r3, [pc, #68]	@ (8003f2c <I2SEx_TxISR_I2SExt+0x94>)
 8003ee6:	e001      	b.n	8003eec <I2SEx_TxISR_I2SExt+0x54>
 8003ee8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	490d      	ldr	r1, [pc, #52]	@ (8003f28 <I2SEx_TxISR_I2SExt+0x90>)
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	d101      	bne.n	8003efc <I2SEx_TxISR_I2SExt+0x64>
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <I2SEx_TxISR_I2SExt+0x94>)
 8003efa:	e001      	b.n	8003f00 <I2SEx_TxISR_I2SExt+0x68>
 8003efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff81 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40003800 	.word	0x40003800
 8003f2c:	40003400 	.word	0x40003400

08003f30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68d8      	ldr	r0, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	1c99      	adds	r1, r3, #2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003f48:	b282      	uxth	r2, r0
 8003f4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d113      	bne.n	8003f8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ff4a 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	@ (8004024 <I2SEx_RxISR_I2SExt+0x90>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d101      	bne.n	8003faa <I2SEx_RxISR_I2SExt+0x16>
 8003fa6:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <I2SEx_RxISR_I2SExt+0x94>)
 8003fa8:	e001      	b.n	8003fae <I2SEx_RxISR_I2SExt+0x1a>
 8003faa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fae:	68d8      	ldr	r0, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	1c99      	adds	r1, r3, #2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003fba:	b282      	uxth	r2, r0
 8003fbc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <I2SEx_RxISR_I2SExt+0x90>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <I2SEx_RxISR_I2SExt+0x50>
 8003fe0:	4b11      	ldr	r3, [pc, #68]	@ (8004028 <I2SEx_RxISR_I2SExt+0x94>)
 8003fe2:	e001      	b.n	8003fe8 <I2SEx_RxISR_I2SExt+0x54>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	490d      	ldr	r1, [pc, #52]	@ (8004024 <I2SEx_RxISR_I2SExt+0x90>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d101      	bne.n	8003ff8 <I2SEx_RxISR_I2SExt+0x64>
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8004028 <I2SEx_RxISR_I2SExt+0x94>)
 8003ff6:	e001      	b.n	8003ffc <I2SEx_RxISR_I2SExt+0x68>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004000:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ff03 	bl	8003e20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40003800 	.word	0x40003800
 8004028:	40003400 	.word	0x40003400

0800402c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e267      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d075      	beq.n	8004136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800404a:	4b88      	ldr	r3, [pc, #544]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00c      	beq.n	8004070 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b85      	ldr	r3, [pc, #532]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800405e:	2b08      	cmp	r3, #8
 8004060:	d112      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b82      	ldr	r3, [pc, #520]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b7e      	ldr	r3, [pc, #504]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e242      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x74>
 8004092:	4b76      	ldr	r3, [pc, #472]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a75      	ldr	r2, [pc, #468]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x98>
 80040aa:	4b70      	ldr	r3, [pc, #448]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6f      	ldr	r2, [pc, #444]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b6d      	ldr	r3, [pc, #436]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6c      	ldr	r2, [pc, #432]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040c4:	4b69      	ldr	r3, [pc, #420]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a68      	ldr	r2, [pc, #416]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b66      	ldr	r3, [pc, #408]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a65      	ldr	r2, [pc, #404]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd fe96 	bl	8001e14 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fe92 	bl	8001e14 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	@ 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e207      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b5b      	ldr	r3, [pc, #364]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xc0>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fd fe82 	bl	8001e14 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7fd fe7e 	bl	8001e14 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	@ 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1f3      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b51      	ldr	r3, [pc, #324]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004142:	4b4a      	ldr	r3, [pc, #296]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b47      	ldr	r3, [pc, #284]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b44      	ldr	r3, [pc, #272]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b41      	ldr	r3, [pc, #260]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1c7      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b3b      	ldr	r3, [pc, #236]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4937      	ldr	r1, [pc, #220]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e03a      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCC_OscConfig+0x244>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd fe37 	bl	8001e14 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd fe33 	bl	8001e14 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1a8      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	4b2b      	ldr	r3, [pc, #172]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b28      	ldr	r3, [pc, #160]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4925      	ldr	r1, [pc, #148]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <HAL_RCC_OscConfig+0x244>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fe16 	bl	8001e14 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fd fe12 	bl	8001e14 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e187      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d036      	beq.n	8004284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <HAL_RCC_OscConfig+0x248>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd fdf6 	bl	8001e14 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422c:	f7fd fdf2 	bl	8001e14 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e167      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <HAL_RCC_OscConfig+0x240>)
 8004240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x200>
 800424a:	e01b      	b.n	8004284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424c:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <HAL_RCC_OscConfig+0x248>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fd fddf 	bl	8001e14 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	e00e      	b.n	8004278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd fddb 	bl	8001e14 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d907      	bls.n	8004278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e150      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
 800426c:	40023800 	.word	0x40023800
 8004270:	42470000 	.word	0x42470000
 8004274:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	4b88      	ldr	r3, [pc, #544]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800427a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ea      	bne.n	800425a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8097 	beq.w	80043c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b81      	ldr	r3, [pc, #516]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b7d      	ldr	r3, [pc, #500]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	4a7c      	ldr	r2, [pc, #496]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042b2:	4b7a      	ldr	r3, [pc, #488]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c2:	4b77      	ldr	r3, [pc, #476]	@ (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d118      	bne.n	8004300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ce:	4b74      	ldr	r3, [pc, #464]	@ (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a73      	ldr	r2, [pc, #460]	@ (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042da:	f7fd fd9b 	bl	8001e14 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7fd fd97 	bl	8001e14 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e10c      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b6a      	ldr	r3, [pc, #424]	@ (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x2ea>
 8004308:	4b64      	ldr	r3, [pc, #400]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	4a63      	ldr	r2, [pc, #396]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70
 8004314:	e01c      	b.n	8004350 <HAL_RCC_OscConfig+0x324>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b05      	cmp	r3, #5
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x30c>
 800431e:	4b5f      	ldr	r3, [pc, #380]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004322:	4a5e      	ldr	r2, [pc, #376]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	6713      	str	r3, [r2, #112]	@ 0x70
 800432a:	4b5c      	ldr	r3, [pc, #368]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	4a5b      	ldr	r2, [pc, #364]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
 8004336:	e00b      	b.n	8004350 <HAL_RCC_OscConfig+0x324>
 8004338:	4b58      	ldr	r3, [pc, #352]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433c:	4a57      	ldr	r2, [pc, #348]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	@ 0x70
 8004344:	4b55      	ldr	r3, [pc, #340]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	4a54      	ldr	r2, [pc, #336]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 0304 	bic.w	r3, r3, #4
 800434e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd fd5c 	bl	8001e14 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fd fd58 	bl	8001e14 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0cb      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	4b49      	ldr	r3, [pc, #292]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ee      	beq.n	8004360 <HAL_RCC_OscConfig+0x334>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004384:	f7fd fd46 	bl	8001e14 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fd fd42 	bl	8001e14 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0b5      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	4b3e      	ldr	r3, [pc, #248]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1ee      	bne.n	800438c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	4b39      	ldr	r3, [pc, #228]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	4a38      	ldr	r2, [pc, #224]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80043ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80a1 	beq.w	800450c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ca:	4b34      	ldr	r3, [pc, #208]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d05c      	beq.n	8004490 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d141      	bne.n	8004462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_OscConfig+0x478>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fd16 	bl	8001e14 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd fd12 	bl	8001e14 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e087      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	4b27      	ldr	r3, [pc, #156]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	491b      	ldr	r1, [pc, #108]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b1b      	ldr	r3, [pc, #108]	@ (80044a4 <HAL_RCC_OscConfig+0x478>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fd fceb 	bl	8001e14 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fd fce7 	bl	8001e14 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e05c      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	4b11      	ldr	r3, [pc, #68]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x416>
 8004460:	e054      	b.n	800450c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <HAL_RCC_OscConfig+0x478>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd fcd4 	bl	8001e14 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004470:	f7fd fcd0 	bl	8001e14 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e045      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x470>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x444>
 800448e:	e03d      	b.n	800450c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e038      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
 80044a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_RCC_OscConfig+0x4ec>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d028      	beq.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d121      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d11a      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d111      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	3b01      	subs	r3, #1
 80044f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0cc      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b68      	ldr	r3, [pc, #416]	@ (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d90c      	bls.n	8004558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b65      	ldr	r3, [pc, #404]	@ (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b63      	ldr	r3, [pc, #396]	@ (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0b8      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004570:	4b59      	ldr	r3, [pc, #356]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a58      	ldr	r2, [pc, #352]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800457a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004588:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a52      	ldr	r2, [pc, #328]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004594:	4b50      	ldr	r3, [pc, #320]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	494d      	ldr	r1, [pc, #308]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d044      	beq.n	800463c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b47      	ldr	r3, [pc, #284]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d119      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d003      	beq.n	80045da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b3f      	ldr	r3, [pc, #252]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3b      	ldr	r3, [pc, #236]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e067      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b37      	ldr	r3, [pc, #220]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4934      	ldr	r1, [pc, #208]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460c:	f7fd fc02 	bl	8001e14 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fd fbfe 	bl	8001e14 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d20c      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b22      	ldr	r3, [pc, #136]	@ (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e032      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4916      	ldr	r1, [pc, #88]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468e:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	490e      	ldr	r1, [pc, #56]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046a2:	f000 f821 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	490a      	ldr	r1, [pc, #40]	@ (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046be:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd fb62 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023c00 	.word	0x40023c00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	080562a0 	.word	0x080562a0
 80046e0:	20000008 	.word	0x20000008
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ec:	b094      	sub	sp, #80	@ 0x50
 80046ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004700:	4b79      	ldr	r3, [pc, #484]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d00d      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x40>
 800470c:	2b08      	cmp	r3, #8
 800470e:	f200 80e1 	bhi.w	80048d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x34>
 8004716:	2b04      	cmp	r3, #4
 8004718:	d003      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0x3a>
 800471a:	e0db      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800471c:	4b73      	ldr	r3, [pc, #460]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x204>)
 800471e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004720:	e0db      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004722:	4b73      	ldr	r3, [pc, #460]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004724:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004726:	e0d8      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004728:	4b6f      	ldr	r3, [pc, #444]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004732:	4b6d      	ldr	r3, [pc, #436]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d063      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473e:	4b6a      	ldr	r3, [pc, #424]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	2200      	movs	r2, #0
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004748:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004750:	633b      	str	r3, [r7, #48]	@ 0x30
 8004752:	2300      	movs	r3, #0
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
 8004756:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	0159      	lsls	r1, r3, #5
 8004768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476c:	0150      	lsls	r0, r2, #5
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4621      	mov	r1, r4
 8004774:	1a51      	subs	r1, r2, r1
 8004776:	6139      	str	r1, [r7, #16]
 8004778:	4629      	mov	r1, r5
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	018b      	lsls	r3, r1, #6
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004796:	4651      	mov	r1, sl
 8004798:	018a      	lsls	r2, r1, #6
 800479a:	4651      	mov	r1, sl
 800479c:	ebb2 0801 	subs.w	r8, r2, r1
 80047a0:	4659      	mov	r1, fp
 80047a2:	eb63 0901 	sbc.w	r9, r3, r1
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ba:	4690      	mov	r8, r2
 80047bc:	4699      	mov	r9, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	eb18 0303 	adds.w	r3, r8, r3
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	462b      	mov	r3, r5
 80047c8:	eb49 0303 	adc.w	r3, r9, r3
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047da:	4629      	mov	r1, r5
 80047dc:	024b      	lsls	r3, r1, #9
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e4:	4621      	mov	r1, r4
 80047e6:	024a      	lsls	r2, r1, #9
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ee:	2200      	movs	r2, #0
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047f8:	f7fb fcec 	bl	80001d4 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004804:	e058      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b38      	ldr	r3, [pc, #224]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	2200      	movs	r2, #0
 800480e:	4618      	mov	r0, r3
 8004810:	4611      	mov	r1, r2
 8004812:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
 800481c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	0159      	lsls	r1, r3, #5
 800482e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004832:	0150      	lsls	r0, r2, #5
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4641      	mov	r1, r8
 800483a:	ebb2 0a01 	subs.w	sl, r2, r1
 800483e:	4649      	mov	r1, r9
 8004840:	eb63 0b01 	sbc.w	fp, r3, r1
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004850:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004854:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004858:	ebb2 040a 	subs.w	r4, r2, sl
 800485c:	eb63 050b 	sbc.w	r5, r3, fp
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	00eb      	lsls	r3, r5, #3
 800486a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486e:	00e2      	lsls	r2, r4, #3
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4643      	mov	r3, r8
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	464b      	mov	r3, r9
 800487c:	eb45 0303 	adc.w	r3, r5, r3
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800488e:	4629      	mov	r1, r5
 8004890:	028b      	lsls	r3, r1, #10
 8004892:	4621      	mov	r1, r4
 8004894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004898:	4621      	mov	r1, r4
 800489a:	028a      	lsls	r2, r1, #10
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a2:	2200      	movs	r2, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	61fa      	str	r2, [r7, #28]
 80048a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ac:	f7fb fc92 	bl	80001d4 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4613      	mov	r3, r2
 80048b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048b8:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80048c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x204>)
 80048d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3750      	adds	r7, #80	@ 0x50
 80048e0:	46bd      	mov	sp, r7
 80048e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	007a1200 	.word	0x007a1200

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004918:	2b00      	cmp	r3, #0
 800491a:	d035      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800491c:	4b67      	ldr	r3, [pc, #412]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fd fa77 	bl	8001e14 <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800492a:	f7fd fa73 	bl	8001e14 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0ba      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493c:	4b60      	ldr	r3, [pc, #384]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	019a      	lsls	r2, r3, #6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	071b      	lsls	r3, r3, #28
 8004954:	495a      	ldr	r1, [pc, #360]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800495c:	4b57      	ldr	r3, [pc, #348]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004962:	f7fd fa57 	bl	8001e14 <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800496a:	f7fd fa53 	bl	8001e14 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e09a      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800497c:	4b50      	ldr	r3, [pc, #320]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8083 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b49      	ldr	r3, [pc, #292]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	4a48      	ldr	r2, [pc, #288]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a6:	4b46      	ldr	r3, [pc, #280]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049b2:	4b44      	ldr	r3, [pc, #272]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a43      	ldr	r2, [pc, #268]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049be:	f7fd fa29 	bl	8001e14 <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c6:	f7fd fa25 	bl	8001e14 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e06c      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80049d8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049e4:	4b36      	ldr	r3, [pc, #216]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d028      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a12:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a18:	4a29      	ldr	r2, [pc, #164]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a1e:	4b28      	ldr	r3, [pc, #160]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d114      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd f9f3 	bl	8001e14 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fd f9ef 	bl	8001e14 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e034      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a60:	d10d      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a62:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a76:	4912      	ldr	r1, [pc, #72]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]
 8004a7c:	e005      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a84:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a88:	6093      	str	r3, [r2, #8]
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a96:	490a      	ldr	r1, [pc, #40]	@ (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7c1a      	ldrb	r2, [r3, #16]
 8004aac:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004aae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	42470068 	.word	0x42470068
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	42470e40 	.word	0x42470e40
 8004acc:	424711e0 	.word	0x424711e0

08004ad0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d13f      	bne.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004aee:	4b24      	ldr	r3, [pc, #144]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b04:	d12f      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b08:	617b      	str	r3, [r7, #20]
          break;
 8004b0a:	e02f      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b18:	d108      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b1a:	4b19      	ldr	r3, [pc, #100]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b22:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	e007      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b2c:	4b14      	ldr	r3, [pc, #80]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b34:	4a15      	ldr	r2, [pc, #84]	@ (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b56:	0f1b      	lsrs	r3, r3, #28
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
          break;
 8004b64:	e002      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
          break;
 8004b6a:	bf00      	nop
        }
      }
      break;
 8004b6c:	e000      	b.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004b6e:	bf00      	nop
    }
  }
  return frequency;
 8004b70:	697b      	ldr	r3, [r7, #20]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00bb8000 	.word	0x00bb8000
 8004b88:	007a1200 	.word	0x007a1200
 8004b8c:	00f42400 	.word	0x00f42400

08004b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e07b      	b.n	8004c9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bb2:	d009      	beq.n	8004bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	61da      	str	r2, [r3, #28]
 8004bba:	e005      	b.n	8004bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc ffac 	bl	8001b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	ea42 0103 	orr.w	r1, r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0104 	and.w	r1, r3, #4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	f003 0210 	and.w	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fd f8af 	bl	8001e14 <HAL_GetTick>
 8004cb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e12a      	b.n	8004f22 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x36>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e122      	b.n	8004f22 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_SPI_Transmit+0x48>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e11b      	b.n	8004f22 <HAL_SPI_Transmit+0x280>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d38:	d10f      	bne.n	8004d5a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b40      	cmp	r3, #64	@ 0x40
 8004d66:	d007      	beq.n	8004d78 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d80:	d152      	bne.n	8004e28 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_Transmit+0xee>
 8004d8a:	8b7b      	ldrh	r3, [r7, #26]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d145      	bne.n	8004e1c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	881a      	ldrh	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004db4:	e032      	b.n	8004e1c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d112      	bne.n	8004dea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004de8:	e018      	b.n	8004e1c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dea:	f7fd f813 	bl	8001e14 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d803      	bhi.n	8004e02 <HAL_SPI_Transmit+0x160>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e00:	d102      	bne.n	8004e08 <HAL_SPI_Transmit+0x166>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e082      	b.n	8004f22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1c7      	bne.n	8004db6 <HAL_SPI_Transmit+0x114>
 8004e26:	e053      	b.n	8004ed0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_Transmit+0x194>
 8004e30:	8b7b      	ldrh	r3, [r7, #26]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d147      	bne.n	8004ec6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e5c:	e033      	b.n	8004ec6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d113      	bne.n	8004e94 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	7812      	ldrb	r2, [r2, #0]
 8004e78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e92:	e018      	b.n	8004ec6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e94:	f7fc ffbe 	bl	8001e14 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d803      	bhi.n	8004eac <HAL_SPI_Transmit+0x20a>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eaa:	d102      	bne.n	8004eb2 <HAL_SPI_Transmit+0x210>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e02d      	b.n	8004f22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1c6      	bne.n	8004e5e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fbe7 	bl	80056a8 <SPI_EndRxTxTransaction>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
  }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b088      	sub	sp, #32
 8004f2e:	af02      	add	r7, sp, #8
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
 8004f48:	e104      	b.n	8005154 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f52:	d112      	bne.n	8004f7a <HAL_SPI_Receive+0x50>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10e      	bne.n	8004f7a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f8f3 	bl	800515c <HAL_SPI_TransmitReceive>
 8004f76:	4603      	mov	r3, r0
 8004f78:	e0ec      	b.n	8005154 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f7a:	f7fc ff4b 	bl	8001e14 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_SPI_Receive+0x62>
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0e1      	b.n	8005154 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_SPI_Receive+0x74>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e0da      	b.n	8005154 <HAL_SPI_Receive+0x22a>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2204      	movs	r2, #4
 8004faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	88fa      	ldrh	r2, [r7, #6]
 8004fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fec:	d10f      	bne.n	800500e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800500c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b40      	cmp	r3, #64	@ 0x40
 800501a:	d007      	beq.n	800502c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800502a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d170      	bne.n	8005116 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005034:	e035      	b.n	80050a2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d115      	bne.n	8005070 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f103 020c 	add.w	r2, r3, #12
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	7812      	ldrb	r2, [r2, #0]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800506e:	e018      	b.n	80050a2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005070:	f7fc fed0 	bl	8001e14 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d803      	bhi.n	8005088 <HAL_SPI_Receive+0x15e>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005086:	d102      	bne.n	800508e <HAL_SPI_Receive+0x164>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e058      	b.n	8005154 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1c4      	bne.n	8005036 <HAL_SPI_Receive+0x10c>
 80050ac:	e038      	b.n	8005120 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d113      	bne.n	80050e4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	b292      	uxth	r2, r2
 80050c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	1c9a      	adds	r2, r3, #2
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050e2:	e018      	b.n	8005116 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e4:	f7fc fe96 	bl	8001e14 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d803      	bhi.n	80050fc <HAL_SPI_Receive+0x1d2>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050fa:	d102      	bne.n	8005102 <HAL_SPI_Receive+0x1d8>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e01e      	b.n	8005154 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1c6      	bne.n	80050ae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fa59 	bl	80055dc <SPI_EndRxTransaction>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005152:	2300      	movs	r3, #0
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	@ 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800516a:	2301      	movs	r3, #1
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800516e:	f7fc fe51 	bl	8001e14 <HAL_GetTick>
 8005172:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800517a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d00c      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x4a>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005192:	d106      	bne.n	80051a2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_TransmitReceive+0x46>
 800519c:	7ffb      	ldrb	r3, [r7, #31]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d001      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	e17f      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x5c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_TransmitReceive+0x5c>
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e174      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x6e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e16d      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d003      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2205      	movs	r2, #5
 80051e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	887a      	ldrh	r2, [r7, #2]
 80051f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005226:	2b40      	cmp	r3, #64	@ 0x40
 8005228:	d007      	beq.n	800523a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005242:	d17e      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_SPI_TransmitReceive+0xf6>
 800524c:	8afb      	ldrh	r3, [r7, #22]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d16c      	bne.n	800532c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	881a      	ldrh	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005276:	e059      	b.n	800532c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d11b      	bne.n	80052be <HAL_SPI_TransmitReceive+0x162>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d016      	beq.n	80052be <HAL_SPI_TransmitReceive+0x162>
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	2b01      	cmp	r3, #1
 8005294:	d113      	bne.n	80052be <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d119      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x1a4>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d014      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	b292      	uxth	r2, r2
 80052e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e8:	1c9a      	adds	r2, r3, #2
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052fc:	2301      	movs	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005300:	f7fc fd88 	bl	8001e14 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800530c:	429a      	cmp	r2, r3
 800530e:	d80d      	bhi.n	800532c <HAL_SPI_TransmitReceive+0x1d0>
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005316:	d009      	beq.n	800532c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e0bc      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1a0      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x11c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d19b      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x11c>
 8005340:	e082      	b.n	8005448 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_SPI_TransmitReceive+0x1f4>
 800534a:	8afb      	ldrh	r3, [r7, #22]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d171      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	7812      	ldrb	r2, [r2, #0]
 800535c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005376:	e05d      	b.n	8005434 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d11c      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x264>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d017      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x264>
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	2b01      	cmp	r3, #1
 8005394:	d114      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d119      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x2a6>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d014      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053fe:	2301      	movs	r3, #1
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005402:	f7fc fd07 	bl	8001e14 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540e:	429a      	cmp	r2, r3
 8005410:	d803      	bhi.n	800541a <HAL_SPI_TransmitReceive+0x2be>
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005418:	d102      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x2c4>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e038      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d19c      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x21c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d197      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f92b 	bl	80056a8 <SPI_EndRxTxTransaction>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e01d      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80054a4:	2300      	movs	r3, #0
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3728      	adds	r7, #40	@ 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054bc:	b2db      	uxtb	r3, r3
}
 80054be:	4618      	mov	r0, r3
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
	...

080054cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054dc:	f7fc fc9a 	bl	8001e14 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054ec:	f7fc fc92 	bl	8001e14 <HAL_GetTick>
 80054f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054f2:	4b39      	ldr	r3, [pc, #228]	@ (80055d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	015b      	lsls	r3, r3, #5
 80054f8:	0d1b      	lsrs	r3, r3, #20
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005502:	e054      	b.n	80055ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800550a:	d050      	beq.n	80055ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800550c:	f7fc fc82 	bl	8001e14 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	429a      	cmp	r2, r3
 800551a:	d902      	bls.n	8005522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d13d      	bne.n	800559e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800553a:	d111      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005544:	d004      	beq.n	8005550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800554e:	d107      	bne.n	8005560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800555e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005568:	d10f      	bne.n	800558a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e017      	b.n	80055ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d19b      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000008 	.word	0x20000008

080055dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f0:	d111      	bne.n	8005616 <SPI_EndRxTransaction+0x3a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fa:	d004      	beq.n	8005606 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005604:	d107      	bne.n	8005616 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800561e:	d12a      	bne.n	8005676 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005628:	d012      	beq.n	8005650 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	@ 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff ff49 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02d      	beq.n	800569c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e026      	b.n	800569e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	2101      	movs	r1, #1
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff ff36 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01a      	beq.n	800569c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e013      	b.n	800569e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	2101      	movs	r1, #1
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff ff23 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e000      	b.n	800569e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2201      	movs	r2, #1
 80056bc:	2102      	movs	r1, #2
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff ff04 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e032      	b.n	8005740 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056da:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <SPI_EndRxTxTransaction+0xa0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <SPI_EndRxTxTransaction+0xa4>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	0d5b      	lsrs	r3, r3, #21
 80056e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056f8:	d112      	bne.n	8005720 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	2180      	movs	r1, #128	@ 0x80
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff fee1 	bl	80054cc <SPI_WaitFlagStateUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d016      	beq.n	800573e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e00f      	b.n	8005740 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	3b01      	subs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	2b80      	cmp	r3, #128	@ 0x80
 8005738:	d0f2      	beq.n	8005720 <SPI_EndRxTxTransaction+0x78>
 800573a:	e000      	b.n	800573e <SPI_EndRxTxTransaction+0x96>
        break;
 800573c:	bf00      	nop
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000008 	.word	0x20000008
 800574c:	165e9f81 	.word	0x165e9f81

08005750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e041      	b.n	80057e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc fa2a 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fa72 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e03c      	b.n	8005882 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1e      	ldr	r2, [pc, #120]	@ (8005890 <HAL_TIM_Base_Start+0xa0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_TIM_Base_Start+0x5c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005822:	d013      	beq.n	800584c <HAL_TIM_Base_Start+0x5c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <HAL_TIM_Base_Start+0xa4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_TIM_Base_Start+0x5c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a19      	ldr	r2, [pc, #100]	@ (8005898 <HAL_TIM_Base_Start+0xa8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIM_Base_Start+0x5c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	@ (800589c <HAL_TIM_Base_Start+0xac>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_Base_Start+0x5c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <HAL_TIM_Base_Start+0xb0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d010      	beq.n	8005880 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	e007      	b.n	8005880 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40014000 	.word	0x40014000

080058a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d020      	beq.n	8005908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0202 	mvn.w	r2, #2
 80058d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9a3 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 80058f4:	e005      	b.n	8005902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f995 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f9a6 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d020      	beq.n	8005954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0204 	mvn.w	r2, #4
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f97d 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f96f 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f980 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d020      	beq.n	80059a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0208 	mvn.w	r2, #8
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f957 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f949 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f95a 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01b      	beq.n	80059ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0210 	mvn.w	r2, #16
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2208      	movs	r2, #8
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f931 	bl	8005c3a <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f923 	bl	8005c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f934 	bl	8005c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0201 	mvn.w	r2, #1
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f901 	bl	8005c12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fac0 	bl	8005fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f905 	bl	8005c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0220 	mvn.w	r2, #32
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa92 	bl	8005fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0b4      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x186>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad8:	d03e      	beq.n	8005b58 <HAL_TIM_ConfigClockSource+0xd4>
 8005ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ade:	f200 8087 	bhi.w	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae6:	f000 8086 	beq.w	8005bf6 <HAL_TIM_ConfigClockSource+0x172>
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aee:	d87f      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b70      	cmp	r3, #112	@ 0x70
 8005af2:	d01a      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0xa6>
 8005af4:	2b70      	cmp	r3, #112	@ 0x70
 8005af6:	d87b      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b60      	cmp	r3, #96	@ 0x60
 8005afa:	d050      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x11a>
 8005afc:	2b60      	cmp	r3, #96	@ 0x60
 8005afe:	d877      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b50      	cmp	r3, #80	@ 0x50
 8005b02:	d03c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0xfa>
 8005b04:	2b50      	cmp	r3, #80	@ 0x50
 8005b06:	d873      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d058      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x13a>
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d86f      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b30      	cmp	r3, #48	@ 0x30
 8005b12:	d064      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b14:	2b30      	cmp	r3, #48	@ 0x30
 8005b16:	d86b      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d060      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d867      	bhi.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d05c      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d05a      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x15a>
 8005b28:	e062      	b.n	8005bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b3a:	f000 f9a3 	bl	8005e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	609a      	str	r2, [r3, #8]
      break;
 8005b56:	e04f      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b68:	f000 f98c 	bl	8005e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b7a:	609a      	str	r2, [r3, #8]
      break;
 8005b7c:	e03c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 f900 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2150      	movs	r1, #80	@ 0x50
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f959 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e02c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 f91f 	bl	8005dee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2160      	movs	r1, #96	@ 0x60
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f949 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e01c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 f8e0 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2140      	movs	r1, #64	@ 0x40
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f939 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e00c      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f000 f930 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005bee:	e003      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf4:	e000      	b.n	8005bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d74 <TIM_Base_SetConfig+0xfc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00f      	beq.n	8005cb0 <TIM_Base_SetConfig+0x38>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c96:	d00b      	beq.n	8005cb0 <TIM_Base_SetConfig+0x38>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a37      	ldr	r2, [pc, #220]	@ (8005d78 <TIM_Base_SetConfig+0x100>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d007      	beq.n	8005cb0 <TIM_Base_SetConfig+0x38>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a36      	ldr	r2, [pc, #216]	@ (8005d7c <TIM_Base_SetConfig+0x104>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0x38>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a35      	ldr	r2, [pc, #212]	@ (8005d80 <TIM_Base_SetConfig+0x108>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d108      	bne.n	8005cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d74 <TIM_Base_SetConfig+0xfc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01b      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd0:	d017      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	@ (8005d78 <TIM_Base_SetConfig+0x100>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	@ (8005d7c <TIM_Base_SetConfig+0x104>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00f      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	@ (8005d80 <TIM_Base_SetConfig+0x108>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a25      	ldr	r2, [pc, #148]	@ (8005d84 <TIM_Base_SetConfig+0x10c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	@ (8005d88 <TIM_Base_SetConfig+0x110>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	@ (8005d8c <TIM_Base_SetConfig+0x114>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d108      	bne.n	8005d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8005d74 <TIM_Base_SetConfig+0xfc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d103      	bne.n	8005d48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d105      	bne.n	8005d66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f023 0201 	bic.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]
  }
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0210 	bic.w	r2, r3, #16
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f043 0307 	orr.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e050      	b.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f28:	d013      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	@ (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a16      	ldr	r2, [pc, #88]	@ (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a15      	ldr	r2, [pc, #84]	@ (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d10c      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40014000 	.word	0x40014000

08005fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <memset>:
 8005fc8:	4402      	add	r2, r0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d100      	bne.n	8005fd2 <memset+0xa>
 8005fd0:	4770      	bx	lr
 8005fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd6:	e7f9      	b.n	8005fcc <memset+0x4>

08005fd8 <__libc_init_array>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4d0d      	ldr	r5, [pc, #52]	@ (8006010 <__libc_init_array+0x38>)
 8005fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8006014 <__libc_init_array+0x3c>)
 8005fde:	1b64      	subs	r4, r4, r5
 8005fe0:	10a4      	asrs	r4, r4, #2
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	42a6      	cmp	r6, r4
 8005fe6:	d109      	bne.n	8005ffc <__libc_init_array+0x24>
 8005fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8006018 <__libc_init_array+0x40>)
 8005fea:	4c0c      	ldr	r4, [pc, #48]	@ (800601c <__libc_init_array+0x44>)
 8005fec:	f000 f818 	bl	8006020 <_init>
 8005ff0:	1b64      	subs	r4, r4, r5
 8005ff2:	10a4      	asrs	r4, r4, #2
 8005ff4:	2600      	movs	r6, #0
 8005ff6:	42a6      	cmp	r6, r4
 8005ff8:	d105      	bne.n	8006006 <__libc_init_array+0x2e>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006000:	4798      	blx	r3
 8006002:	3601      	adds	r6, #1
 8006004:	e7ee      	b.n	8005fe4 <__libc_init_array+0xc>
 8006006:	f855 3b04 	ldr.w	r3, [r5], #4
 800600a:	4798      	blx	r3
 800600c:	3601      	adds	r6, #1
 800600e:	e7f2      	b.n	8005ff6 <__libc_init_array+0x1e>
 8006010:	080562c0 	.word	0x080562c0
 8006014:	080562c0 	.word	0x080562c0
 8006018:	080562c0 	.word	0x080562c0
 800601c:	080562c4 	.word	0x080562c4

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
