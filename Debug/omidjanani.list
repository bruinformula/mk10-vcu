
omidjanani.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004b00  08004b00  00005b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf8  08004cf8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d00  08004d00  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d00  08004d00  00005d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  08004d14  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004d14  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098a0  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c89  00000000  00000000  0000f8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00011568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  00011ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c49  00000000  00000000  000125fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e027  00000000  00000000  00028245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f9a  00000000  00000000  0003626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c4  00000000  00000000  000bd24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000bfc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004ae8 	.word	0x08004ae8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004ae8 	.word	0x08004ae8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96a 	b.w	8000dc0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d14e      	bne.n	8000bae <__udivmoddi4+0xaa>
 8000b10:	4694      	mov	ip, r2
 8000b12:	458c      	cmp	ip, r1
 8000b14:	4686      	mov	lr, r0
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	d962      	bls.n	8000be2 <__udivmoddi4+0xde>
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0320 	rsb	r3, r2, #32
 8000b22:	4091      	lsls	r1, r2
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b36:	fa1f f68c 	uxth.w	r6, ip
 8000b3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b42:	fb07 1114 	mls	r1, r7, r4, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb04 f106 	mul.w	r1, r4, r6
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x64>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b5a:	f080 8112 	bcs.w	8000d82 <__udivmoddi4+0x27e>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 810f 	bls.w	8000d82 <__udivmoddi4+0x27e>
 8000b64:	3c02      	subs	r4, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b72:	fb07 1110 	mls	r1, r7, r0, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f606 	mul.w	r6, r0, r6
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x94>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8a:	f080 80fc 	bcs.w	8000d86 <__udivmoddi4+0x282>
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	f240 80f9 	bls.w	8000d86 <__udivmoddi4+0x282>
 8000b94:	4463      	add	r3, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	1b9b      	subs	r3, r3, r6
 8000b9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	b11d      	cbz	r5, 8000baa <__udivmoddi4+0xa6>
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e9c5 3200 	strd	r3, r2, [r5]
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d905      	bls.n	8000bbe <__udivmoddi4+0xba>
 8000bb2:	b10d      	cbz	r5, 8000bb8 <__udivmoddi4+0xb4>
 8000bb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e7f5      	b.n	8000baa <__udivmoddi4+0xa6>
 8000bbe:	fab3 f183 	clz	r1, r3
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d146      	bne.n	8000c54 <__udivmoddi4+0x150>
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xcc>
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f0c0 80f0 	bcc.w	8000db0 <__udivmoddi4+0x2ac>
 8000bd0:	1a86      	subs	r6, r0, r2
 8000bd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d0e6      	beq.n	8000baa <__udivmoddi4+0xa6>
 8000bdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000be0:	e7e3      	b.n	8000baa <__udivmoddi4+0xa6>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	f040 8090 	bne.w	8000d08 <__udivmoddi4+0x204>
 8000be8:	eba1 040c 	sub.w	r4, r1, ip
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb08 4416 	mls	r4, r8, r6, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb07 f006 	mul.w	r0, r7, r6
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x11c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x11a>
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000c1e:	4626      	mov	r6, r4
 8000c20:	1a1c      	subs	r4, r3, r0
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb00 f707 	mul.w	r7, r0, r7
 8000c36:	429f      	cmp	r7, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x148>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x146>
 8000c44:	429f      	cmp	r7, r3
 8000c46:	f200 80b0 	bhi.w	8000daa <__udivmoddi4+0x2a6>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	e7a5      	b.n	8000ba0 <__udivmoddi4+0x9c>
 8000c54:	f1c1 0620 	rsb	r6, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c64:	fa04 f301 	lsl.w	r3, r4, r1
 8000c68:	ea43 030c 	orr.w	r3, r3, ip
 8000c6c:	40f4      	lsrs	r4, r6
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	0c38      	lsrs	r0, r7, #16
 8000c74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c78:	fbb4 fef0 	udiv	lr, r4, r0
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fb00 441e 	mls	r4, r0, lr, r4
 8000c84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c88:	fb0e f90c 	mul.w	r9, lr, ip
 8000c8c:	45a1      	cmp	r9, r4
 8000c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x1a6>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c9a:	f080 8084 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8081 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000ca4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	eba4 0409 	sub.w	r4, r4, r9
 8000cae:	fa1f f983 	uxth.w	r9, r3
 8000cb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x1d2>
 8000cc6:	193c      	adds	r4, r7, r4
 8000cc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ccc:	d267      	bcs.n	8000d9e <__udivmoddi4+0x29a>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0x29a>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cda:	fba0 9302 	umull	r9, r3, r0, r2
 8000cde:	eba4 040c 	sub.w	r4, r4, ip
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	d351      	bcc.n	8000d8e <__udivmoddi4+0x28a>
 8000cea:	d04e      	beq.n	8000d8a <__udivmoddi4+0x286>
 8000cec:	b155      	cbz	r5, 8000d04 <__udivmoddi4+0x200>
 8000cee:	ebb8 030e 	subs.w	r3, r8, lr
 8000cf2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cfa:	40cb      	lsrs	r3, r1
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	40cc      	lsrs	r4, r1
 8000d00:	e9c5 6400 	strd	r6, r4, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	e750      	b.n	8000baa <__udivmoddi4+0xa6>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa24 f303 	lsr.w	r3, r4, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d30:	0c23      	lsrs	r3, r4, #16
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb00 f107 	mul.w	r1, r0, r7
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x24c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d46:	d22c      	bcs.n	8000da2 <__udivmoddi4+0x29e>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d92a      	bls.n	8000da2 <__udivmoddi4+0x29e>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d58:	fb08 3311 	mls	r3, r8, r1, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb01 f307 	mul.w	r3, r1, r7
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x276>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d70:	d213      	bcs.n	8000d9a <__udivmoddi4+0x296>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d911      	bls.n	8000d9a <__udivmoddi4+0x296>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	1ae4      	subs	r4, r4, r3
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	e739      	b.n	8000bf6 <__udivmoddi4+0xf2>
 8000d82:	4604      	mov	r4, r0
 8000d84:	e6f0      	b.n	8000b68 <__udivmoddi4+0x64>
 8000d86:	4608      	mov	r0, r1
 8000d88:	e706      	b.n	8000b98 <__udivmoddi4+0x94>
 8000d8a:	45c8      	cmp	r8, r9
 8000d8c:	d2ae      	bcs.n	8000cec <__udivmoddi4+0x1e8>
 8000d8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d96:	3801      	subs	r0, #1
 8000d98:	e7a8      	b.n	8000cec <__udivmoddi4+0x1e8>
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e7ed      	b.n	8000d7a <__udivmoddi4+0x276>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e799      	b.n	8000cd6 <__udivmoddi4+0x1d2>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e7d4      	b.n	8000d50 <__udivmoddi4+0x24c>
 8000da6:	46d6      	mov	lr, sl
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1a6>
 8000daa:	4463      	add	r3, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e74d      	b.n	8000c4c <__udivmoddi4+0x148>
 8000db0:	4606      	mov	r6, r0
 8000db2:	4623      	mov	r3, r4
 8000db4:	4608      	mov	r0, r1
 8000db6:	e70f      	b.n	8000bd8 <__udivmoddi4+0xd4>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	e730      	b.n	8000c20 <__udivmoddi4+0x11c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	0000      	movs	r0, r0
	...

08000dc8 <GenerateSineWave>:


int16_t audio_buffer[BUFFER_SIZE];

void GenerateSineWave()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
    for (int i = 0; i < BUFFER_SIZE / 2; i++)  // Adjust buffer size accordingly
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e042      	b.n	8000e5a <GenerateSineWave+0x92>
    {
        int16_t sample = (int16_t)(32767 * sin(2 * PI * i * TONE_FREQ / SAMPLE_RATE));
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fb51 	bl	800047c <__aeabi_i2d>
 8000dda:	a32b      	add	r3, pc, #172	@ (adr r3, 8000e88 <GenerateSineWave+0xc0>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f7ff fbb6 	bl	8000550 <__aeabi_dmul>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <GenerateSineWave+0xb8>)
 8000df2:	f7ff fbad 	bl	8000550 <__aeabi_dmul>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	a31c      	add	r3, pc, #112	@ (adr r3, 8000e70 <GenerateSineWave+0xa8>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	f7ff fcce 	bl	80007a4 <__aeabi_ddiv>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	ec43 2b17 	vmov	d7, r2, r3
 8000e10:	eeb0 0a47 	vmov.f32	s0, s14
 8000e14:	eef0 0a67 	vmov.f32	s1, s15
 8000e18:	f002 fe36 	bl	8003a88 <sin>
 8000e1c:	ec51 0b10 	vmov	r0, r1, d0
 8000e20:	a315      	add	r3, pc, #84	@ (adr r3, 8000e78 <GenerateSineWave+0xb0>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fb93 	bl	8000550 <__aeabi_dmul>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff fe27 	bl	8000a84 <__aeabi_d2iz>
 8000e36:	4603      	mov	r3, r0
 8000e38:	807b      	strh	r3, [r7, #2]
        audio_buffer[2 * i] = sample;      // Left channel
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4911      	ldr	r1, [pc, #68]	@ (8000e84 <GenerateSineWave+0xbc>)
 8000e40:	887a      	ldrh	r2, [r7, #2]
 8000e42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        audio_buffer[2 * i + 1] = sample;  // Right channel (duplicate)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <GenerateSineWave+0xbc>)
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < BUFFER_SIZE / 2; i++)  // Adjust buffer size accordingly
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b63      	cmp	r3, #99	@ 0x63
 8000e5e:	ddb9      	ble.n	8000dd4 <GenerateSineWave+0xc>
    }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	00000000 	.word	0x00000000
 8000e74:	40e58880 	.word	0x40e58880
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	40dfffc0 	.word	0x40dfffc0
 8000e80:	407b8000 	.word	0x407b8000
 8000e84:	20000124 	.word	0x20000124
 8000e88:	53c8d4f1 	.word	0x53c8d4f1
 8000e8c:	401921fb 	.word	0x401921fb

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e94:	f000 fadc 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e98:	f000 f816 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f000 f900 	bl	80010a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea0:	f000 f8de 	bl	8001060 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ea4:	f000 f880 	bl	8000fa8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000ea8:	f000 f8ac 	bl	8001004 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  GenerateSineWave();
 8000eac:	f7ff ff8c 	bl	8000dc8 <GenerateSineWave>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)audio_buffer, BUFFER_SIZE);
 8000eb0:	22c8      	movs	r2, #200	@ 0xc8
 8000eb2:	4903      	ldr	r1, [pc, #12]	@ (8000ec0 <main+0x30>)
 8000eb4:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <main+0x34>)
 8000eb6:	f001 fbc7 	bl	8002648 <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <main+0x2a>
 8000ebe:	bf00      	nop
 8000ec0:	20000124 	.word	0x20000124
 8000ec4:	2000007c 	.word	0x2000007c

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	@ 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fdaa 	bl	8003a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000eec:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000efc:	4b28      	ldr	r3, [pc, #160]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000f02:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000f06:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <SystemClock_Config+0xd8>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <SystemClock_Config+0xdc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f30:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <SystemClock_Config+0xdc>)
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <SystemClock_Config+0xdc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 ffd5 	bl	8002f0c <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f68:	f000 f8e8 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fa38 	bl	80033fc <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f92:	f000 f8d3 	bl	800113c <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	@ 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <MX_I2C1_Init+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <MX_I2C1_Init+0x58>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe6:	f001 f8ab 	bl	8002140 <HAL_I2C_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f8a4 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	40005400 	.word	0x40005400
 8001000:	000186a0 	.word	0x000186a0

08001004 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_I2S2_Init+0x54>)
 800100a:	4a14      	ldr	r2, [pc, #80]	@ (800105c <MX_I2S2_Init+0x58>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_I2S2_Init+0x54>)
 8001010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001014:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_I2S2_Init+0x54>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_I2S2_Init+0x54>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <MX_I2S2_Init+0x54>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_I2S2_Init+0x54>)
 800102a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800102e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_I2S2_Init+0x54>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_I2S2_Init+0x54>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_I2S2_Init+0x54>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_I2S2_Init+0x54>)
 8001044:	f001 f9c0 	bl	80023c8 <HAL_I2S_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800104e:	f000 f875 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000007c 	.word	0x2000007c
 800105c:	40003800 	.word	0x40003800

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <MX_DMA_Init+0x3c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <MX_DMA_Init+0x3c>)
 8001070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <MX_DMA_Init+0x3c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	200f      	movs	r0, #15
 8001088:	f000 fb2f 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800108c:	200f      	movs	r0, #15
 800108e:	f000 fb48 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a1d      	ldr	r2, [pc, #116]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <MX_GPIO_Init+0x94>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <MX_GPIO_Init+0x94>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800110a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800111c:	2306      	movs	r3, #6
 800111e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_GPIO_Init+0x98>)
 8001128:	f000 fe86 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	@ (800121c <HAL_I2C_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	@ (8001224 <HAL_I2C_MspInit+0x8c>)
 80011f4:	f000 fe20 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	@ 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	@ 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a3e      	ldr	r2, [pc, #248]	@ (8001350 <HAL_I2S_MspInit+0x128>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d175      	bne.n	8001346 <HAL_I2S_MspInit+0x11e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800125a:	2301      	movs	r3, #1
 800125c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800125e:	23c0      	movs	r3, #192	@ 0xc0
 8001260:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fa92 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001276:	f7ff ff61 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <HAL_I2S_MspInit+0x12c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a34      	ldr	r2, [pc, #208]	@ (8001354 <HAL_I2S_MspInit+0x12c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b32      	ldr	r3, [pc, #200]	@ (8001354 <HAL_I2S_MspInit+0x12c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <HAL_I2S_MspInit+0x12c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a2d      	ldr	r2, [pc, #180]	@ (8001354 <HAL_I2S_MspInit+0x12c>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_I2S_MspInit+0x12c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80012b2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c4:	2305      	movs	r3, #5
 80012c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	@ (8001358 <HAL_I2S_MspInit+0x130>)
 80012d0:	f000 fdb2 	bl	8001e38 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_I2S_MspInit+0x138>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012e2:	2240      	movs	r2, #64	@ 0x40
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012fa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_I2S_MspInit+0x134>)
 80012fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001302:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_I2S_MspInit+0x134>)
 8001306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800130a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_I2S_MspInit+0x134>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_I2S_MspInit+0x134>)
 8001314:	2204      	movs	r2, #4
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001318:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_I2S_MspInit+0x134>)
 800131a:	2201      	movs	r2, #1
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_I2S_MspInit+0x134>)
 8001320:	2200      	movs	r2, #0
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_I2S_MspInit+0x134>)
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <HAL_I2S_MspInit+0x134>)
 800132c:	f000 fa14 	bl	8001758 <HAL_DMA_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2S_MspInit+0x112>
    {
      Error_Handler();
 8001336:	f7ff ff01 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_I2S_MspInit+0x134>)
 800133e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001340:	4a06      	ldr	r2, [pc, #24]	@ (800135c <HAL_I2S_MspInit+0x134>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001346:	bf00      	nop
 8001348:	3738      	adds	r7, #56	@ 0x38
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40003800 	.word	0x40003800
 8001354:	40023800 	.word	0x40023800
 8001358:	40020400 	.word	0x40020400
 800135c:	200000c4 	.word	0x200000c4
 8001360:	40026070 	.word	0x40026070

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <NMI_Handler+0x4>

0800136c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <MemManage_Handler+0x4>

0800137c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <UsageFault_Handler+0x4>

0800138c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f89b 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <DMA1_Stream4_IRQHandler+0x10>)
 80013ca:	f000 facb 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000c4 	.word	0x200000c4

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001400:	f7ff ffea 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	@ (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 fb09 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff fd2f 	bl	8000e90 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001434:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001440:	08004d08 	.word	0x08004d08
  ldr r2, =_sbss
 8001444:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001448:	200002b8 	.word	0x200002b8

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800145e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f92b 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fe60 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f943 	bl	800173e <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f90b 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	200002b4 	.word	0x200002b4

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200002b4 	.word	0x200002b4

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	@ (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	@ (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff feda 	bl	800151c <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e099      	b.n	80018a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001794:	e00f      	b.n	80017b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001796:	f7ff fec1 	bl	800151c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d908      	bls.n	80017b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e078      	b.n	80018a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e8      	bne.n	8001796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <HAL_DMA_Init+0x158>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	2b04      	cmp	r3, #4
 800180e:	d107      	bne.n	8001820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	4313      	orrs	r3, r2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f023 0307 	bic.w	r3, r3, #7
 8001836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	2b04      	cmp	r3, #4
 8001848:	d117      	bne.n	800187a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00e      	beq.n	800187a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fa6f 	bl	8001d40 <DMA_CheckFifoParam>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2240      	movs	r2, #64	@ 0x40
 800186c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001876:	2301      	movs	r3, #1
 8001878:	e016      	b.n	80018a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa26 	bl	8001cd4 <DMA_CalcBaseAndBitshift>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001890:	223f      	movs	r2, #63	@ 0x3f
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	f010803f 	.word	0xf010803f

080018b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Start_IT+0x26>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e040      	b.n	800195c <HAL_DMA_Start_IT+0xa8>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12f      	bne.n	800194e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f9b8 	bl	8001c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	223f      	movs	r2, #63	@ 0x3f
 800190e:	409a      	lsls	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0216 	orr.w	r2, r2, #22
 8001922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0208 	orr.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e005      	b.n	800195a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001970:	4b8e      	ldr	r3, [pc, #568]	@ (8001bac <HAL_DMA_IRQHandler+0x248>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a8e      	ldr	r2, [pc, #568]	@ (8001bb0 <HAL_DMA_IRQHandler+0x24c>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	2208      	movs	r2, #8
 8001990:	409a      	lsls	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	2208      	movs	r2, #8
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	2201      	movs	r2, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f2:	2201      	movs	r2, #1
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fe:	f043 0202 	orr.w	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	2204      	movs	r2, #4
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	2210      	movs	r2, #16
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03c      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	2210      	movs	r2, #16
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	e01f      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0208 	bic.w	r2, r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	2220      	movs	r2, #32
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 808f 	beq.w	8001c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8087 	beq.w	8001c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	2220      	movs	r2, #32
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d136      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0216 	bic.w	r2, r2, #22
 8001b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d103      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x1da>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0208 	bic.w	r2, r2, #8
 8001b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	223f      	movs	r2, #63	@ 0x3f
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d07e      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
        }
        return;
 8001b7a:	e079      	b.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01d      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d031      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	e02c      	b.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d023      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e01e      	b.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0210 	bic.w	r2, r2, #16
 8001be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d032      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d307      	bcc.n	8001c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x2cc>
 8001c4a:	e000      	b.n	8001c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
 8001c6e:	e000      	b.n	8001c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c70:	bf00      	nop
    }
  }
}
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b40      	cmp	r3, #64	@ 0x40
 8001ca4:	d108      	bne.n	8001cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cb6:	e007      	b.n	8001cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3b10      	subs	r3, #16
 8001ce4:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <DMA_CalcBaseAndBitshift+0x68>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d909      	bls.n	8001d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d14:	e007      	b.n	8001d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	aaaaaaab 	.word	0xaaaaaaab
 8001d3c:	08004b18 	.word	0x08004b18

08001d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d856      	bhi.n	8001e0e <DMA_CheckFifoParam+0xce>
 8001d60:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <DMA_CheckFifoParam+0x28>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d8b 	.word	0x08001d8b
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001e0f 	.word	0x08001e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d046      	beq.n	8001e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d88:	e043      	b.n	8001e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d92:	d140      	bne.n	8001e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e03d      	b.n	8001e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001da2:	d121      	bne.n	8001de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d837      	bhi.n	8001e1a <DMA_CheckFifoParam+0xda>
 8001daa:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <DMA_CheckFifoParam+0x70>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dc7 	.word	0x08001dc7
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001dd9 	.word	0x08001dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e030      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d025      	beq.n	8001e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd6:	e022      	b.n	8001e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001de0:	d11f      	bne.n	8001e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001de6:	e01c      	b.n	8001e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d903      	bls.n	8001df6 <DMA_CheckFifoParam+0xb6>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d003      	beq.n	8001dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001df4:	e018      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dfa:	e015      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00e      	beq.n	8001e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0c:	e00b      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e00a      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e008      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
 8001e18:	e006      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e004      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e002      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
    }
  } 
  
  return status; 
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e159      	b.n	8002108 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8148 	bne.w	8002102 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a2 	beq.w	8002102 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b57      	ldr	r3, [pc, #348]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a56      	ldr	r2, [pc, #344]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x202>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a48      	ldr	r2, [pc, #288]	@ (800212c <HAL_GPIO_Init+0x2f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x1fe>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <HAL_GPIO_Init+0x2f8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x1fa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a46      	ldr	r2, [pc, #280]	@ (8002134 <HAL_GPIO_Init+0x2fc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x1f6>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a45      	ldr	r2, [pc, #276]	@ (8002138 <HAL_GPIO_Init+0x300>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x1f2>
 8002026:	2304      	movs	r3, #4
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x204>
 800202a:	2307      	movs	r3, #7
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x204>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x204>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x204>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x204>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_GPIO_Init+0x304>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f aea2 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e12b      	b.n	80023aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff f816 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a4:	f001 fae2 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80021a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a81      	ldr	r2, [pc, #516]	@ (80023b4 <HAL_I2C_Init+0x274>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d807      	bhi.n	80021c4 <HAL_I2C_Init+0x84>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a80      	ldr	r2, [pc, #512]	@ (80023b8 <HAL_I2C_Init+0x278>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e006      	b.n	80021d2 <HAL_I2C_Init+0x92>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a7d      	ldr	r2, [pc, #500]	@ (80023bc <HAL_I2C_Init+0x27c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e7      	b.n	80023aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a78      	ldr	r2, [pc, #480]	@ (80023c0 <HAL_I2C_Init+0x280>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a6a      	ldr	r2, [pc, #424]	@ (80023b4 <HAL_I2C_Init+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d802      	bhi.n	8002214 <HAL_I2C_Init+0xd4>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	e009      	b.n	8002228 <HAL_I2C_Init+0xe8>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a69      	ldr	r2, [pc, #420]	@ (80023c4 <HAL_I2C_Init+0x284>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800223a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	495c      	ldr	r1, [pc, #368]	@ (80023b4 <HAL_I2C_Init+0x274>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d819      	bhi.n	800227c <HAL_I2C_Init+0x13c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e59      	subs	r1, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fbb1 f3f3 	udiv	r3, r1, r3
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_I2C_Init+0x138>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e59      	subs	r1, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	e051      	b.n	800231c <HAL_I2C_Init+0x1dc>
 8002278:	2304      	movs	r3, #4
 800227a:	e04f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_I2C_Init+0x168>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e012      	b.n	80022ce <HAL_I2C_Init+0x18e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x196>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e022      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10e      	bne.n	80022fc <HAL_I2C_Init+0x1bc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e58      	subs	r0, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	440b      	add	r3, r1
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	6809      	ldr	r1, [r1, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800234a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6911      	ldr	r1, [r2, #16]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	000186a0 	.word	0x000186a0
 80023b8:	001e847f 	.word	0x001e847f
 80023bc:	003d08ff 	.word	0x003d08ff
 80023c0:	431bde83 	.word	0x431bde83
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e128      	b.n	800262c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a90      	ldr	r2, [pc, #576]	@ (8002634 <HAL_I2S_Init+0x26c>)
 80023f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe ff17 	bl	8001228 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002410:	f023 030f 	bic.w	r3, r3, #15
 8002414:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2202      	movs	r2, #2
 800241c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d060      	beq.n	80024e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800242e:	2310      	movs	r3, #16
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e001      	b.n	8002438 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b20      	cmp	r3, #32
 800243e:	d802      	bhi.n	8002446 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002446:	2001      	movs	r0, #1
 8002448:	f001 fa92 	bl	8003970 <HAL_RCCEx_GetPeriphCLKFreq>
 800244c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002456:	d125      	bne.n	80024a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d010      	beq.n	8002482 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	fbb2 f2f3 	udiv	r2, r2, r3
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	3305      	adds	r3, #5
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e01f      	b.n	80024c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	fbb2 f2f3 	udiv	r2, r2, r3
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	3305      	adds	r3, #5
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e00e      	b.n	80024c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	3305      	adds	r3, #5
 80024c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002638 <HAL_I2S_Init+0x270>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e003      	b.n	80024f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d902      	bls.n	80024fc <HAL_I2S_Init+0x134>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2bff      	cmp	r3, #255	@ 0xff
 80024fa:	d907      	bls.n	800250c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002500:	f043 0210 	orr.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e08f      	b.n	800262c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	430a      	orrs	r2, r1
 800251e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800252a:	f023 030f 	bic.w	r3, r3, #15
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6851      	ldr	r1, [r2, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68d2      	ldr	r2, [r2, #12]
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6992      	ldr	r2, [r2, #24]
 8002542:	430a      	orrs	r2, r1
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800254e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d161      	bne.n	800261c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a38      	ldr	r2, [pc, #224]	@ (800263c <HAL_I2S_Init+0x274>)
 800255c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a37      	ldr	r2, [pc, #220]	@ (8002640 <HAL_I2S_Init+0x278>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_I2S_Init+0x1a4>
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <HAL_I2S_Init+0x27c>)
 800256a:	e001      	b.n	8002570 <HAL_I2S_Init+0x1a8>
 800256c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4932      	ldr	r1, [pc, #200]	@ (8002640 <HAL_I2S_Init+0x278>)
 8002578:	428a      	cmp	r2, r1
 800257a:	d101      	bne.n	8002580 <HAL_I2S_Init+0x1b8>
 800257c:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <HAL_I2S_Init+0x27c>)
 800257e:	e001      	b.n	8002584 <HAL_I2S_Init+0x1bc>
 8002580:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002584:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002588:	f023 030f 	bic.w	r3, r3, #15
 800258c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2b      	ldr	r2, [pc, #172]	@ (8002640 <HAL_I2S_Init+0x278>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_I2S_Init+0x1d4>
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_I2S_Init+0x27c>)
 800259a:	e001      	b.n	80025a0 <HAL_I2S_Init+0x1d8>
 800259c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025a0:	2202      	movs	r2, #2
 80025a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a25      	ldr	r2, [pc, #148]	@ (8002640 <HAL_I2S_Init+0x278>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_I2S_Init+0x1ea>
 80025ae:	4b25      	ldr	r3, [pc, #148]	@ (8002644 <HAL_I2S_Init+0x27c>)
 80025b0:	e001      	b.n	80025b6 <HAL_I2S_Init+0x1ee>
 80025b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c2:	d003      	beq.n	80025cc <HAL_I2S_Init+0x204>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80025cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e001      	b.n	80025d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002604:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <HAL_I2S_Init+0x278>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_I2S_Init+0x24c>
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_I2S_Init+0x27c>)
 8002612:	e001      	b.n	8002618 <HAL_I2S_Init+0x250>
 8002614:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002618:	897a      	ldrh	r2, [r7, #10]
 800261a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	08002945 	.word	0x08002945
 8002638:	cccccccd 	.word	0xcccccccd
 800263c:	08002a59 	.word	0x08002a59
 8002640:	40003800 	.word	0x40003800
 8002644:	40003400 	.word	0x40003400

08002648 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_I2S_Transmit_DMA+0x1a>
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e08a      	b.n	800277c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	e082      	b.n	800277c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_I2S_Transmit_DMA+0x3e>
 8002682:	2302      	movs	r3, #2
 8002684:	e07a      	b.n	800277c <HAL_I2S_Transmit_DMA+0x134>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2203      	movs	r2, #3
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d002      	beq.n	80026ba <HAL_I2S_Transmit_DMA+0x72>
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d10a      	bne.n	80026d0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ce:	e005      	b.n	80026dc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e0:	4a28      	ldr	r2, [pc, #160]	@ (8002784 <HAL_I2S_Transmit_DMA+0x13c>)
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	4a27      	ldr	r2, [pc, #156]	@ (8002788 <HAL_I2S_Transmit_DMA+0x140>)
 80026ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f0:	4a26      	ldr	r2, [pc, #152]	@ (800278c <HAL_I2S_Transmit_DMA+0x144>)
 80026f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80026fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002704:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800270c:	f7ff f8d2 	bl	80018b4 <HAL_DMA_Start_IT>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00f      	beq.n	8002736 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f043 0208 	orr.w	r2, r3, #8
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e022      	b.n	800277c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0202 	orr.w	r2, r2, #2
 800275a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d107      	bne.n	800277a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002778:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	08002823 	.word	0x08002823
 8002788:	080027e1 	.word	0x080027e1
 800278c:	0800283f 	.word	0x0800283f

08002790 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10e      	bne.n	8002814 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0202 	bic.w	r2, r2, #2
 8002804:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff ffc5 	bl	80027a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff ffad 	bl	8002790 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0203 	bic.w	r2, r2, #3
 800285a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	f043 0208 	orr.w	r2, r3, #8
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff ffa5 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10e      	bne.n	80028de <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff63 	bl	80027a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f8:	b292      	uxth	r2, r2
 80028fa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	1c9a      	adds	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10e      	bne.n	800293c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800292c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff3e 	bl	80027b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b04      	cmp	r3, #4
 800295e:	d13a      	bne.n	80029d6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d109      	bne.n	800297e <I2S_IRQHandler+0x3a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002974:	2b40      	cmp	r3, #64	@ 0x40
 8002976:	d102      	bne.n	800297e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ffb4 	bl	80028e6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d126      	bne.n	80029d6 <I2S_IRQHandler+0x92>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b20      	cmp	r3, #32
 8002994:	d11f      	bne.n	80029d6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029a4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fefb 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d136      	bne.n	8002a50 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d109      	bne.n	8002a00 <I2S_IRQHandler+0xbc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	2b80      	cmp	r3, #128	@ 0x80
 80029f8:	d102      	bne.n	8002a00 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ff45 	bl	800288a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d122      	bne.n	8002a50 <I2S_IRQHandler+0x10c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d11b      	bne.n	8002a50 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a26:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff febe 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a92      	ldr	r2, [pc, #584]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002a72:	4b92      	ldr	r3, [pc, #584]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a74:	e001      	b.n	8002a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002a76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a8b      	ldr	r2, [pc, #556]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002a90:	4b8a      	ldr	r3, [pc, #552]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a92:	e001      	b.n	8002a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002a94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa4:	d004      	beq.n	8002ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8099 	bne.w	8002be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f925 	bl	8002d14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9c8 	bl	8002e74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aea:	2b40      	cmp	r3, #64	@ 0x40
 8002aec:	d13a      	bne.n	8002b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d035      	beq.n	8002b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002b02:	4b6e      	ldr	r3, [pc, #440]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b04:	e001      	b.n	8002b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002b06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4969      	ldr	r1, [pc, #420]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b12:	428b      	cmp	r3, r1
 8002b14:	d101      	bne.n	8002b1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002b16:	4b69      	ldr	r3, [pc, #420]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b18:	e001      	b.n	8002b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002b1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fe34 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	f040 80c3 	bne.w	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80bd 	beq.w	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a49      	ldr	r2, [pc, #292]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002b96:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b98:	e001      	b.n	8002b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002b9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4944      	ldr	r1, [pc, #272]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ba6:	428b      	cmp	r3, r1
 8002ba8:	d101      	bne.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002baa:	4b44      	ldr	r3, [pc, #272]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bac:	e001      	b.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002bae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fdf6 	bl	80027cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002be0:	e089      	b.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d107      	bne.n	8002bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8be 	bl	8002d78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8fd 	bl	8002e10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	2b40      	cmp	r3, #64	@ 0x40
 8002c1e:	d12f      	bne.n	8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02a      	beq.n	8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c46:	e001      	b.n	8002c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4919      	ldr	r1, [pc, #100]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c54:	428b      	cmp	r3, r1
 8002c56:	d101      	bne.n	8002c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c5a:	e001      	b.n	8002c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002c5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f043 0202 	orr.w	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fda6 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d136      	bne.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d031      	beq.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ca2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4902      	ldr	r1, [pc, #8]	@ (8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cae:	428b      	cmp	r3, r1
 8002cb0:	d106      	bne.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002cb2:	4b02      	ldr	r3, [pc, #8]	@ (8002cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cb4:	e006      	b.n	8002cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002cb6:	bf00      	nop
 8002cb8:	40003800 	.word	0x40003800
 8002cbc:	40003400 	.word	0x40003400
 8002cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f043 0204 	orr.w	r2, r3, #4
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fd6c 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cf4:	e000      	b.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf6:	bf00      	nop
}
 8002cf8:	bf00      	nop
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	1c99      	adds	r1, r3, #2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6251      	str	r1, [r2, #36]	@ 0x24
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d113      	bne.n	8002d6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffc9 	bl	8002d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	1c99      	adds	r1, r3, #2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6251      	str	r1, [r2, #36]	@ 0x24
 8002d8a:	8819      	ldrh	r1, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <I2SEx_TxISR_I2SExt+0x90>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <I2SEx_TxISR_I2SExt+0x22>
 8002d96:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <I2SEx_TxISR_I2SExt+0x94>)
 8002d98:	e001      	b.n	8002d9e <I2SEx_TxISR_I2SExt+0x26>
 8002d9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d9e:	460a      	mov	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d121      	bne.n	8002dfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <I2SEx_TxISR_I2SExt+0x90>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <I2SEx_TxISR_I2SExt+0x50>
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <I2SEx_TxISR_I2SExt+0x94>)
 8002dc6:	e001      	b.n	8002dcc <I2SEx_TxISR_I2SExt+0x54>
 8002dc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	490d      	ldr	r1, [pc, #52]	@ (8002e08 <I2SEx_TxISR_I2SExt+0x90>)
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	d101      	bne.n	8002ddc <I2SEx_TxISR_I2SExt+0x64>
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <I2SEx_TxISR_I2SExt+0x94>)
 8002dda:	e001      	b.n	8002de0 <I2SEx_TxISR_I2SExt+0x68>
 8002ddc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002de0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002de4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d106      	bne.n	8002dfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff81 	bl	8002d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40003800 	.word	0x40003800
 8002e0c:	40003400 	.word	0x40003400

08002e10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68d8      	ldr	r0, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	1c99      	adds	r1, r3, #2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002e28:	b282      	uxth	r2, r0
 8002e2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d113      	bne.n	8002e6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ff4a 	bl	8002d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <I2SEx_RxISR_I2SExt+0x90>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <I2SEx_RxISR_I2SExt+0x16>
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <I2SEx_RxISR_I2SExt+0x94>)
 8002e88:	e001      	b.n	8002e8e <I2SEx_RxISR_I2SExt+0x1a>
 8002e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e8e:	68d8      	ldr	r0, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	1c99      	adds	r1, r3, #2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002e9a:	b282      	uxth	r2, r0
 8002e9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d121      	bne.n	8002efa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <I2SEx_RxISR_I2SExt+0x90>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <I2SEx_RxISR_I2SExt+0x50>
 8002ec0:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <I2SEx_RxISR_I2SExt+0x94>)
 8002ec2:	e001      	b.n	8002ec8 <I2SEx_RxISR_I2SExt+0x54>
 8002ec4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <I2SEx_RxISR_I2SExt+0x90>)
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	d101      	bne.n	8002ed8 <I2SEx_RxISR_I2SExt+0x64>
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <I2SEx_RxISR_I2SExt+0x94>)
 8002ed6:	e001      	b.n	8002edc <I2SEx_RxISR_I2SExt+0x68>
 8002ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002edc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ee0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff03 	bl	8002d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40003800 	.word	0x40003800
 8002f08:	40003400 	.word	0x40003400

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e267      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d075      	beq.n	8003016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f2a:	4b88      	ldr	r3, [pc, #544]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d00c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f36:	4b85      	ldr	r3, [pc, #532]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d112      	bne.n	8002f68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f42:	4b82      	ldr	r3, [pc, #520]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f4e:	d10b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	4b7e      	ldr	r3, [pc, #504]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d05b      	beq.n	8003014 <HAL_RCC_OscConfig+0x108>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d157      	bne.n	8003014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e242      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_OscConfig+0x74>
 8002f72:	4b76      	ldr	r3, [pc, #472]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a75      	ldr	r2, [pc, #468]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e01d      	b.n	8002fbc <HAL_RCC_OscConfig+0xb0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x98>
 8002f8a:	4b70      	ldr	r3, [pc, #448]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6f      	ldr	r2, [pc, #444]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b6d      	ldr	r3, [pc, #436]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6c      	ldr	r2, [pc, #432]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCC_OscConfig+0xb0>
 8002fa4:	4b69      	ldr	r3, [pc, #420]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a68      	ldr	r2, [pc, #416]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b66      	ldr	r3, [pc, #408]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a65      	ldr	r2, [pc, #404]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe faaa 	bl	800151c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe faa6 	bl	800151c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e207      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b5b      	ldr	r3, [pc, #364]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0xc0>
 8002fea:	e014      	b.n	8003016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fa96 	bl	800151c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fa92 	bl	800151c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	@ 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e1f3      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	4b51      	ldr	r3, [pc, #324]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0xe8>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d063      	beq.n	80030ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003022:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003036:	2b08      	cmp	r3, #8
 8003038:	d11c      	bne.n	8003074 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b44      	ldr	r3, [pc, #272]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d116      	bne.n	8003074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x152>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1c7      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4937      	ldr	r1, [pc, #220]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	e03a      	b.n	80030ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307c:	4b34      	ldr	r3, [pc, #208]	@ (8003150 <HAL_RCC_OscConfig+0x244>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fa4b 	bl	800151c <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fa47 	bl	800151c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1a8      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	4b2b      	ldr	r3, [pc, #172]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b28      	ldr	r3, [pc, #160]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4925      	ldr	r1, [pc, #148]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x244>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fa2a 	bl	800151c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030cc:	f7fe fa26 	bl	800151c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e187      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d036      	beq.n	8003164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d016      	beq.n	800312c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_RCC_OscConfig+0x248>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe fa0a 	bl	800151c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe fa06 	bl	800151c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e167      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCC_OscConfig+0x240>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x200>
 800312a:	e01b      	b.n	8003164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_RCC_OscConfig+0x248>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7fe f9f3 	bl	800151c <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	e00e      	b.n	8003158 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313a:	f7fe f9ef 	bl	800151c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d907      	bls.n	8003158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e150      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
 800314c:	40023800 	.word	0x40023800
 8003150:	42470000 	.word	0x42470000
 8003154:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b88      	ldr	r3, [pc, #544]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ea      	bne.n	800313a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8097 	beq.w	80032a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b81      	ldr	r3, [pc, #516]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	4b7d      	ldr	r3, [pc, #500]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	4a7c      	ldr	r2, [pc, #496]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	@ 0x40
 8003192:	4b7a      	ldr	r3, [pc, #488]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b77      	ldr	r3, [pc, #476]	@ (8003380 <HAL_RCC_OscConfig+0x474>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b74      	ldr	r3, [pc, #464]	@ (8003380 <HAL_RCC_OscConfig+0x474>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a73      	ldr	r2, [pc, #460]	@ (8003380 <HAL_RCC_OscConfig+0x474>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe f9af 	bl	800151c <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fe f9ab 	bl	800151c <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e10c      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003380 <HAL_RCC_OscConfig+0x474>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2ea>
 80031e8:	4b64      	ldr	r3, [pc, #400]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	4a63      	ldr	r2, [pc, #396]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f4:	e01c      	b.n	8003230 <HAL_RCC_OscConfig+0x324>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x30c>
 80031fe:	4b5f      	ldr	r3, [pc, #380]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	4a5e      	ldr	r2, [pc, #376]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	@ 0x70
 800320a:	4b5c      	ldr	r3, [pc, #368]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a5b      	ldr	r2, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0x324>
 8003218:	4b58      	ldr	r3, [pc, #352]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321c:	4a57      	ldr	r2, [pc, #348]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	@ 0x70
 8003224:	4b55      	ldr	r3, [pc, #340]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a54      	ldr	r2, [pc, #336]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe f970 	bl	800151c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe f96c 	bl	800151c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0cb      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	4b49      	ldr	r3, [pc, #292]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ee      	beq.n	8003240 <HAL_RCC_OscConfig+0x334>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe f95a 	bl	800151c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe f956 	bl	800151c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0b5      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003282:	4b3e      	ldr	r3, [pc, #248]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ee      	bne.n	800326c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b39      	ldr	r3, [pc, #228]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	4a38      	ldr	r2, [pc, #224]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a1 	beq.w	80033ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032aa:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d05c      	beq.n	8003370 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d141      	bne.n	8003342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <HAL_RCC_OscConfig+0x478>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe f92a 	bl	800151c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f926 	bl	800151c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e087      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b27      	ldr	r3, [pc, #156]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	491b      	ldr	r1, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003314:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x478>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fe f8ff 	bl	800151c <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe f8fb 	bl	800151c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e05c      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x416>
 8003340:	e054      	b.n	80033ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <HAL_RCC_OscConfig+0x478>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe f8e8 	bl	800151c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe f8e4 	bl	800151c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e045      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_RCC_OscConfig+0x470>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x444>
 800336e:	e03d      	b.n	80033ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e038      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	40007000 	.word	0x40007000
 8003384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003388:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_RCC_OscConfig+0x4ec>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d028      	beq.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d121      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d11a      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0cc      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b68      	ldr	r3, [pc, #416]	@ (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d90c      	bls.n	8003438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b65      	ldr	r3, [pc, #404]	@ (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b63      	ldr	r3, [pc, #396]	@ (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b8      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4b59      	ldr	r3, [pc, #356]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a58      	ldr	r2, [pc, #352]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800345a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003468:	4b53      	ldr	r3, [pc, #332]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a52      	ldr	r2, [pc, #328]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b50      	ldr	r3, [pc, #320]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	494d      	ldr	r1, [pc, #308]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d044      	beq.n	800351c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b47      	ldr	r3, [pc, #284]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d119      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e067      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4934      	ldr	r1, [pc, #208]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fe f816 	bl	800151c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fe f812 	bl	800151c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b2b      	ldr	r3, [pc, #172]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d20c      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b22      	ldr	r3, [pc, #136]	@ (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b20      	ldr	r3, [pc, #128]	@ (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e032      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b19      	ldr	r3, [pc, #100]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4916      	ldr	r1, [pc, #88]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	490e      	ldr	r1, [pc, #56]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003582:	f000 f821 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490a      	ldr	r1, [pc, #40]	@ (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a09      	ldr	r2, [pc, #36]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd ff76 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023c00 	.word	0x40023c00
 80035b8:	40023800 	.word	0x40023800
 80035bc:	08004b00 	.word	0x08004b00
 80035c0:	20000000 	.word	0x20000000
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035cc:	b090      	sub	sp, #64	@ 0x40
 80035ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d00d      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x40>
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	f200 80a1 	bhi.w	8003734 <HAL_RCC_GetSysClockFreq+0x16c>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x34>
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x3a>
 80035fa:	e09b      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b53      	ldr	r3, [pc, #332]	@ (800374c <HAL_RCC_GetSysClockFreq+0x184>)
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003600:	e09b      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003602:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003604:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003606:	e098      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003608:	4b4f      	ldr	r3, [pc, #316]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003612:	4b4d      	ldr	r3, [pc, #308]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	4b4a      	ldr	r3, [pc, #296]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	099b      	lsrs	r3, r3, #6
 8003624:	2200      	movs	r2, #0
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	627a      	str	r2, [r7, #36]	@ 0x24
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003630:	2100      	movs	r1, #0
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003634:	fb03 f201 	mul.w	r2, r3, r1
 8003638:	2300      	movs	r3, #0
 800363a:	fb00 f303 	mul.w	r3, r0, r3
 800363e:	4413      	add	r3, r2
 8003640:	4a43      	ldr	r2, [pc, #268]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x188>)
 8003642:	fba0 1202 	umull	r1, r2, r0, r2
 8003646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003648:	460a      	mov	r2, r1
 800364a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800364c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364e:	4413      	add	r3, r2
 8003650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003654:	2200      	movs	r2, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	61fa      	str	r2, [r7, #28]
 800365a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003662:	f7fd fa37 	bl	8000ad4 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366e:	e053      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	2200      	movs	r2, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	617a      	str	r2, [r7, #20]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003682:	f04f 0b00 	mov.w	fp, #0
 8003686:	4652      	mov	r2, sl
 8003688:	465b      	mov	r3, fp
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	0159      	lsls	r1, r3, #5
 8003694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003698:	0150      	lsls	r0, r2, #5
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	ebb2 080a 	subs.w	r8, r2, sl
 80036a2:	eb63 090b 	sbc.w	r9, r3, fp
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036ba:	ebb2 0408 	subs.w	r4, r2, r8
 80036be:	eb63 0509 	sbc.w	r5, r3, r9
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	00eb      	lsls	r3, r5, #3
 80036cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d0:	00e2      	lsls	r2, r4, #3
 80036d2:	4614      	mov	r4, r2
 80036d4:	461d      	mov	r5, r3
 80036d6:	eb14 030a 	adds.w	r3, r4, sl
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	eb45 030b 	adc.w	r3, r5, fp
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ee:	4629      	mov	r1, r5
 80036f0:	028b      	lsls	r3, r1, #10
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f8:	4621      	mov	r1, r4
 80036fa:	028a      	lsls	r2, r1, #10
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003702:	2200      	movs	r2, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800370c:	f7fd f9e2 	bl	8000ad4 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x180>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	3301      	adds	r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003728:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003732:	e002      	b.n	800373a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_RCC_GetSysClockFreq+0x184>)
 8003736:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800373c:	4618      	mov	r0, r3
 800373e:	3740      	adds	r7, #64	@ 0x40
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	00f42400 	.word	0x00f42400
 8003750:	017d7840 	.word	0x017d7840

08003754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b03      	ldr	r3, [pc, #12]	@ (8003768 <HAL_RCC_GetHCLKFreq+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000000 	.word	0x20000000

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003770:	f7ff fff0 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0a9b      	lsrs	r3, r3, #10
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	08004b10 	.word	0x08004b10

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d035      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037bc:	4b67      	ldr	r3, [pc, #412]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037c2:	f7fd feab 	bl	800151c <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ca:	f7fd fea7 	bl	800151c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0ba      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037dc:	4b60      	ldr	r3, [pc, #384]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	019a      	lsls	r2, r3, #6
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	071b      	lsls	r3, r3, #28
 80037f4:	495a      	ldr	r1, [pc, #360]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037fc:	4b57      	ldr	r3, [pc, #348]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003802:	f7fd fe8b 	bl	800151c <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800380a:	f7fd fe87 	bl	800151c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e09a      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800381c:	4b50      	ldr	r3, [pc, #320]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8083 	beq.w	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b49      	ldr	r3, [pc, #292]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	4a48      	ldr	r2, [pc, #288]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003844:	6413      	str	r3, [r2, #64]	@ 0x40
 8003846:	4b46      	ldr	r3, [pc, #280]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003852:	4b44      	ldr	r3, [pc, #272]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a43      	ldr	r2, [pc, #268]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800385e:	f7fd fe5d 	bl	800151c <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fd fe59 	bl	800151c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e06c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003878:	4b3a      	ldr	r3, [pc, #232]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003884:	4b36      	ldr	r3, [pc, #216]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800388c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02f      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d028      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80038b8:	4a29      	ldr	r2, [pc, #164]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038be:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d114      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fd fe27 	bl	800151c <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fd fe23 	bl	800151c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e034      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003900:	d10d      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003902:	4b17      	ldr	r3, [pc, #92]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003916:	4912      	ldr	r1, [pc, #72]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]
 800391c:	e005      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4a0f      	ldr	r2, [pc, #60]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003924:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003928:	6093      	str	r3, [r2, #8]
 800392a:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800392c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003936:	490a      	ldr	r1, [pc, #40]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7c1a      	ldrb	r2, [r3, #16]
 800394c:	4b07      	ldr	r3, [pc, #28]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800394e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	42470068 	.word	0x42470068
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470e40 	.word	0x42470e40
 800396c:	424711e0 	.word	0x424711e0

08003970 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d13f      	bne.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a4:	d12f      	bne.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80039a8:	617b      	str	r3, [r7, #20]
          break;
 80039aa:	e02f      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b8:	d108      	bne.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039ba:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c2:	4a19      	ldr	r2, [pc, #100]	@ (8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e007      	b.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039d4:	4a15      	ldr	r2, [pc, #84]	@ (8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80039dc:	4b10      	ldr	r3, [pc, #64]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f6:	0f1b      	lsrs	r3, r3, #28
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a02:	617b      	str	r3, [r7, #20]
          break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
          break;
 8003a0a:	bf00      	nop
        }
      }
      break;
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003a0e:	bf00      	nop
    }
  }
  return frequency;
 8003a10:	697b      	ldr	r3, [r7, #20]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	00bb8000 	.word	0x00bb8000
 8003a28:	017d7840 	.word	0x017d7840
 8003a2c:	00f42400 	.word	0x00f42400

08003a30 <memset>:
 8003a30:	4402      	add	r2, r0
 8003a32:	4603      	mov	r3, r0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d100      	bne.n	8003a3a <memset+0xa>
 8003a38:	4770      	bx	lr
 8003a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3e:	e7f9      	b.n	8003a34 <memset+0x4>

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	4d0d      	ldr	r5, [pc, #52]	@ (8003a78 <__libc_init_array+0x38>)
 8003a44:	4c0d      	ldr	r4, [pc, #52]	@ (8003a7c <__libc_init_array+0x3c>)
 8003a46:	1b64      	subs	r4, r4, r5
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	4d0b      	ldr	r5, [pc, #44]	@ (8003a80 <__libc_init_array+0x40>)
 8003a52:	4c0c      	ldr	r4, [pc, #48]	@ (8003a84 <__libc_init_array+0x44>)
 8003a54:	f001 f848 	bl	8004ae8 <_init>
 8003a58:	1b64      	subs	r4, r4, r5
 8003a5a:	10a4      	asrs	r4, r4, #2
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	08004d00 	.word	0x08004d00
 8003a7c:	08004d00 	.word	0x08004d00
 8003a80:	08004d00 	.word	0x08004d00
 8003a84:	08004d04 	.word	0x08004d04

08003a88 <sin>:
 8003a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a8a:	ec53 2b10 	vmov	r2, r3, d0
 8003a8e:	4826      	ldr	r0, [pc, #152]	@ (8003b28 <sin+0xa0>)
 8003a90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a94:	4281      	cmp	r1, r0
 8003a96:	d807      	bhi.n	8003aa8 <sin+0x20>
 8003a98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003b20 <sin+0x98>
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	b005      	add	sp, #20
 8003aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa4:	f000 b90c 	b.w	8003cc0 <__kernel_sin>
 8003aa8:	4820      	ldr	r0, [pc, #128]	@ (8003b2c <sin+0xa4>)
 8003aaa:	4281      	cmp	r1, r0
 8003aac:	d908      	bls.n	8003ac0 <sin+0x38>
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f7fc fb95 	bl	80001e0 <__aeabi_dsub>
 8003ab6:	ec41 0b10 	vmov	d0, r0, r1
 8003aba:	b005      	add	sp, #20
 8003abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ac0:	4668      	mov	r0, sp
 8003ac2:	f000 f9b9 	bl	8003e38 <__ieee754_rem_pio2>
 8003ac6:	f000 0003 	and.w	r0, r0, #3
 8003aca:	2801      	cmp	r0, #1
 8003acc:	d00c      	beq.n	8003ae8 <sin+0x60>
 8003ace:	2802      	cmp	r0, #2
 8003ad0:	d011      	beq.n	8003af6 <sin+0x6e>
 8003ad2:	b9e8      	cbnz	r0, 8003b10 <sin+0x88>
 8003ad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ad8:	ed9d 0b00 	vldr	d0, [sp]
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 f8ef 	bl	8003cc0 <__kernel_sin>
 8003ae2:	ec51 0b10 	vmov	r0, r1, d0
 8003ae6:	e7e6      	b.n	8003ab6 <sin+0x2e>
 8003ae8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003aec:	ed9d 0b00 	vldr	d0, [sp]
 8003af0:	f000 f81e 	bl	8003b30 <__kernel_cos>
 8003af4:	e7f5      	b.n	8003ae2 <sin+0x5a>
 8003af6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003afa:	ed9d 0b00 	vldr	d0, [sp]
 8003afe:	2001      	movs	r0, #1
 8003b00:	f000 f8de 	bl	8003cc0 <__kernel_sin>
 8003b04:	ec53 2b10 	vmov	r2, r3, d0
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003b0e:	e7d2      	b.n	8003ab6 <sin+0x2e>
 8003b10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b14:	ed9d 0b00 	vldr	d0, [sp]
 8003b18:	f000 f80a 	bl	8003b30 <__kernel_cos>
 8003b1c:	e7f2      	b.n	8003b04 <sin+0x7c>
 8003b1e:	bf00      	nop
	...
 8003b28:	3fe921fb 	.word	0x3fe921fb
 8003b2c:	7fefffff 	.word	0x7fefffff

08003b30 <__kernel_cos>:
 8003b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	ec57 6b10 	vmov	r6, r7, d0
 8003b38:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003b3c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003b40:	ed8d 1b00 	vstr	d1, [sp]
 8003b44:	d206      	bcs.n	8003b54 <__kernel_cos+0x24>
 8003b46:	4630      	mov	r0, r6
 8003b48:	4639      	mov	r1, r7
 8003b4a:	f7fc ff9b 	bl	8000a84 <__aeabi_d2iz>
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	f000 8088 	beq.w	8003c64 <__kernel_cos+0x134>
 8003b54:	4632      	mov	r2, r6
 8003b56:	463b      	mov	r3, r7
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	f7fc fcf8 	bl	8000550 <__aeabi_dmul>
 8003b60:	4b51      	ldr	r3, [pc, #324]	@ (8003ca8 <__kernel_cos+0x178>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	4604      	mov	r4, r0
 8003b66:	460d      	mov	r5, r1
 8003b68:	f7fc fcf2 	bl	8000550 <__aeabi_dmul>
 8003b6c:	a340      	add	r3, pc, #256	@ (adr r3, 8003c70 <__kernel_cos+0x140>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	4682      	mov	sl, r0
 8003b74:	468b      	mov	fp, r1
 8003b76:	4620      	mov	r0, r4
 8003b78:	4629      	mov	r1, r5
 8003b7a:	f7fc fce9 	bl	8000550 <__aeabi_dmul>
 8003b7e:	a33e      	add	r3, pc, #248	@ (adr r3, 8003c78 <__kernel_cos+0x148>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f7fc fb2e 	bl	80001e4 <__adddf3>
 8003b88:	4622      	mov	r2, r4
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	f7fc fce0 	bl	8000550 <__aeabi_dmul>
 8003b90:	a33b      	add	r3, pc, #236	@ (adr r3, 8003c80 <__kernel_cos+0x150>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fb23 	bl	80001e0 <__aeabi_dsub>
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f7fc fcd7 	bl	8000550 <__aeabi_dmul>
 8003ba2:	a339      	add	r3, pc, #228	@ (adr r3, 8003c88 <__kernel_cos+0x158>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7fc fb1c 	bl	80001e4 <__adddf3>
 8003bac:	4622      	mov	r2, r4
 8003bae:	462b      	mov	r3, r5
 8003bb0:	f7fc fcce 	bl	8000550 <__aeabi_dmul>
 8003bb4:	a336      	add	r3, pc, #216	@ (adr r3, 8003c90 <__kernel_cos+0x160>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fb11 	bl	80001e0 <__aeabi_dsub>
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	f7fc fcc5 	bl	8000550 <__aeabi_dmul>
 8003bc6:	a334      	add	r3, pc, #208	@ (adr r3, 8003c98 <__kernel_cos+0x168>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc fb0a 	bl	80001e4 <__adddf3>
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	f7fc fcbc 	bl	8000550 <__aeabi_dmul>
 8003bd8:	4622      	mov	r2, r4
 8003bda:	462b      	mov	r3, r5
 8003bdc:	f7fc fcb8 	bl	8000550 <__aeabi_dmul>
 8003be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	4630      	mov	r0, r6
 8003bea:	4639      	mov	r1, r7
 8003bec:	f7fc fcb0 	bl	8000550 <__aeabi_dmul>
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7fc faf2 	bl	80001e0 <__aeabi_dsub>
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <__kernel_cos+0x17c>)
 8003bfe:	4598      	cmp	r8, r3
 8003c00:	4606      	mov	r6, r0
 8003c02:	460f      	mov	r7, r1
 8003c04:	d810      	bhi.n	8003c28 <__kernel_cos+0xf8>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	f7fc fae7 	bl	80001e0 <__aeabi_dsub>
 8003c12:	460b      	mov	r3, r1
 8003c14:	4926      	ldr	r1, [pc, #152]	@ (8003cb0 <__kernel_cos+0x180>)
 8003c16:	4602      	mov	r2, r0
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7fc fae1 	bl	80001e0 <__aeabi_dsub>
 8003c1e:	ec41 0b10 	vmov	d0, r0, r1
 8003c22:	b003      	add	sp, #12
 8003c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c28:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <__kernel_cos+0x184>)
 8003c2a:	4921      	ldr	r1, [pc, #132]	@ (8003cb0 <__kernel_cos+0x180>)
 8003c2c:	4598      	cmp	r8, r3
 8003c2e:	bf8c      	ite	hi
 8003c30:	4d21      	ldrhi	r5, [pc, #132]	@ (8003cb8 <__kernel_cos+0x188>)
 8003c32:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003c36:	2400      	movs	r4, #0
 8003c38:	4622      	mov	r2, r4
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f7fc facf 	bl	80001e0 <__aeabi_dsub>
 8003c42:	4622      	mov	r2, r4
 8003c44:	4680      	mov	r8, r0
 8003c46:	4689      	mov	r9, r1
 8003c48:	462b      	mov	r3, r5
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	f7fc fac7 	bl	80001e0 <__aeabi_dsub>
 8003c52:	4632      	mov	r2, r6
 8003c54:	463b      	mov	r3, r7
 8003c56:	f7fc fac3 	bl	80001e0 <__aeabi_dsub>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4640      	mov	r0, r8
 8003c60:	4649      	mov	r1, r9
 8003c62:	e7da      	b.n	8003c1a <__kernel_cos+0xea>
 8003c64:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003ca0 <__kernel_cos+0x170>
 8003c68:	e7db      	b.n	8003c22 <__kernel_cos+0xf2>
 8003c6a:	bf00      	nop
 8003c6c:	f3af 8000 	nop.w
 8003c70:	be8838d4 	.word	0xbe8838d4
 8003c74:	bda8fae9 	.word	0xbda8fae9
 8003c78:	bdb4b1c4 	.word	0xbdb4b1c4
 8003c7c:	3e21ee9e 	.word	0x3e21ee9e
 8003c80:	809c52ad 	.word	0x809c52ad
 8003c84:	3e927e4f 	.word	0x3e927e4f
 8003c88:	19cb1590 	.word	0x19cb1590
 8003c8c:	3efa01a0 	.word	0x3efa01a0
 8003c90:	16c15177 	.word	0x16c15177
 8003c94:	3f56c16c 	.word	0x3f56c16c
 8003c98:	5555554c 	.word	0x5555554c
 8003c9c:	3fa55555 	.word	0x3fa55555
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	3ff00000 	.word	0x3ff00000
 8003ca8:	3fe00000 	.word	0x3fe00000
 8003cac:	3fd33332 	.word	0x3fd33332
 8003cb0:	3ff00000 	.word	0x3ff00000
 8003cb4:	3fe90000 	.word	0x3fe90000
 8003cb8:	3fd20000 	.word	0x3fd20000
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <__kernel_sin>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	ec55 4b10 	vmov	r4, r5, d0
 8003cc8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003ccc:	b085      	sub	sp, #20
 8003cce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003cd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003cd6:	4680      	mov	r8, r0
 8003cd8:	d205      	bcs.n	8003ce6 <__kernel_sin+0x26>
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f7fc fed1 	bl	8000a84 <__aeabi_d2iz>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d052      	beq.n	8003d8c <__kernel_sin+0xcc>
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc fc2f 	bl	8000550 <__aeabi_dmul>
 8003cf2:	4682      	mov	sl, r0
 8003cf4:	468b      	mov	fp, r1
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7fc fc27 	bl	8000550 <__aeabi_dmul>
 8003d02:	a342      	add	r3, pc, #264	@ (adr r3, 8003e0c <__kernel_sin+0x14c>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	e9cd 0100 	strd	r0, r1, [sp]
 8003d0c:	4650      	mov	r0, sl
 8003d0e:	4659      	mov	r1, fp
 8003d10:	f7fc fc1e 	bl	8000550 <__aeabi_dmul>
 8003d14:	a33f      	add	r3, pc, #252	@ (adr r3, 8003e14 <__kernel_sin+0x154>)
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f7fc fa61 	bl	80001e0 <__aeabi_dsub>
 8003d1e:	4652      	mov	r2, sl
 8003d20:	465b      	mov	r3, fp
 8003d22:	f7fc fc15 	bl	8000550 <__aeabi_dmul>
 8003d26:	a33d      	add	r3, pc, #244	@ (adr r3, 8003e1c <__kernel_sin+0x15c>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f7fc fa5a 	bl	80001e4 <__adddf3>
 8003d30:	4652      	mov	r2, sl
 8003d32:	465b      	mov	r3, fp
 8003d34:	f7fc fc0c 	bl	8000550 <__aeabi_dmul>
 8003d38:	a33a      	add	r3, pc, #232	@ (adr r3, 8003e24 <__kernel_sin+0x164>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f7fc fa4f 	bl	80001e0 <__aeabi_dsub>
 8003d42:	4652      	mov	r2, sl
 8003d44:	465b      	mov	r3, fp
 8003d46:	f7fc fc03 	bl	8000550 <__aeabi_dmul>
 8003d4a:	a338      	add	r3, pc, #224	@ (adr r3, 8003e2c <__kernel_sin+0x16c>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fa48 	bl	80001e4 <__adddf3>
 8003d54:	4606      	mov	r6, r0
 8003d56:	460f      	mov	r7, r1
 8003d58:	f1b8 0f00 	cmp.w	r8, #0
 8003d5c:	d11b      	bne.n	8003d96 <__kernel_sin+0xd6>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4650      	mov	r0, sl
 8003d64:	4659      	mov	r1, fp
 8003d66:	f7fc fbf3 	bl	8000550 <__aeabi_dmul>
 8003d6a:	a325      	add	r3, pc, #148	@ (adr r3, 8003e00 <__kernel_sin+0x140>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa36 	bl	80001e0 <__aeabi_dsub>
 8003d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d78:	f7fc fbea 	bl	8000550 <__aeabi_dmul>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4620      	mov	r0, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	f7fc fa2e 	bl	80001e4 <__adddf3>
 8003d88:	4604      	mov	r4, r0
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	ec45 4b10 	vmov	d0, r4, r5
 8003d90:	b005      	add	sp, #20
 8003d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <__kernel_sin+0x148>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f7fc fbd7 	bl	8000550 <__aeabi_dmul>
 8003da2:	4632      	mov	r2, r6
 8003da4:	4680      	mov	r8, r0
 8003da6:	4689      	mov	r9, r1
 8003da8:	463b      	mov	r3, r7
 8003daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dae:	f7fc fbcf 	bl	8000550 <__aeabi_dmul>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4640      	mov	r0, r8
 8003db8:	4649      	mov	r1, r9
 8003dba:	f7fc fa11 	bl	80001e0 <__aeabi_dsub>
 8003dbe:	4652      	mov	r2, sl
 8003dc0:	465b      	mov	r3, fp
 8003dc2:	f7fc fbc5 	bl	8000550 <__aeabi_dmul>
 8003dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dca:	f7fc fa09 	bl	80001e0 <__aeabi_dsub>
 8003dce:	a30c      	add	r3, pc, #48	@ (adr r3, 8003e00 <__kernel_sin+0x140>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	460f      	mov	r7, r1
 8003dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ddc:	f7fc fbb8 	bl	8000550 <__aeabi_dmul>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4630      	mov	r0, r6
 8003de6:	4639      	mov	r1, r7
 8003de8:	f7fc f9fc 	bl	80001e4 <__adddf3>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4620      	mov	r0, r4
 8003df2:	4629      	mov	r1, r5
 8003df4:	f7fc f9f4 	bl	80001e0 <__aeabi_dsub>
 8003df8:	e7c6      	b.n	8003d88 <__kernel_sin+0xc8>
 8003dfa:	bf00      	nop
 8003dfc:	f3af 8000 	nop.w
 8003e00:	55555549 	.word	0x55555549
 8003e04:	3fc55555 	.word	0x3fc55555
 8003e08:	3fe00000 	.word	0x3fe00000
 8003e0c:	5acfd57c 	.word	0x5acfd57c
 8003e10:	3de5d93a 	.word	0x3de5d93a
 8003e14:	8a2b9ceb 	.word	0x8a2b9ceb
 8003e18:	3e5ae5e6 	.word	0x3e5ae5e6
 8003e1c:	57b1fe7d 	.word	0x57b1fe7d
 8003e20:	3ec71de3 	.word	0x3ec71de3
 8003e24:	19c161d5 	.word	0x19c161d5
 8003e28:	3f2a01a0 	.word	0x3f2a01a0
 8003e2c:	1110f8a6 	.word	0x1110f8a6
 8003e30:	3f811111 	.word	0x3f811111
 8003e34:	00000000 	.word	0x00000000

08003e38 <__ieee754_rem_pio2>:
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	ec57 6b10 	vmov	r6, r7, d0
 8003e40:	4bc5      	ldr	r3, [pc, #788]	@ (8004158 <__ieee754_rem_pio2+0x320>)
 8003e42:	b08d      	sub	sp, #52	@ 0x34
 8003e44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003e48:	4598      	cmp	r8, r3
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	9704      	str	r7, [sp, #16]
 8003e4e:	d807      	bhi.n	8003e60 <__ieee754_rem_pio2+0x28>
 8003e50:	2200      	movs	r2, #0
 8003e52:	2300      	movs	r3, #0
 8003e54:	ed80 0b00 	vstr	d0, [r0]
 8003e58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	e028      	b.n	8003eb2 <__ieee754_rem_pio2+0x7a>
 8003e60:	4bbe      	ldr	r3, [pc, #760]	@ (800415c <__ieee754_rem_pio2+0x324>)
 8003e62:	4598      	cmp	r8, r3
 8003e64:	d878      	bhi.n	8003f58 <__ieee754_rem_pio2+0x120>
 8003e66:	9b04      	ldr	r3, [sp, #16]
 8003e68:	4dbd      	ldr	r5, [pc, #756]	@ (8004160 <__ieee754_rem_pio2+0x328>)
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004120 <__ieee754_rem_pio2+0x2e8>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	4639      	mov	r1, r7
 8003e76:	dd38      	ble.n	8003eea <__ieee754_rem_pio2+0xb2>
 8003e78:	f7fc f9b2 	bl	80001e0 <__aeabi_dsub>
 8003e7c:	45a8      	cmp	r8, r5
 8003e7e:	4606      	mov	r6, r0
 8003e80:	460f      	mov	r7, r1
 8003e82:	d01a      	beq.n	8003eba <__ieee754_rem_pio2+0x82>
 8003e84:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f7fc f9a9 	bl	80001e0 <__aeabi_dsub>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4680      	mov	r8, r0
 8003e94:	4689      	mov	r9, r1
 8003e96:	4630      	mov	r0, r6
 8003e98:	4639      	mov	r1, r7
 8003e9a:	f7fc f9a1 	bl	80001e0 <__aeabi_dsub>
 8003e9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc f99c 	bl	80001e0 <__aeabi_dsub>
 8003ea8:	e9c4 8900 	strd	r8, r9, [r4]
 8003eac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003eb0:	2501      	movs	r5, #1
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	b00d      	add	sp, #52	@ 0x34
 8003eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eba:	a39d      	add	r3, pc, #628	@ (adr r3, 8004130 <__ieee754_rem_pio2+0x2f8>)
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f7fc f98e 	bl	80001e0 <__aeabi_dsub>
 8003ec4:	a39c      	add	r3, pc, #624	@ (adr r3, 8004138 <__ieee754_rem_pio2+0x300>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	4606      	mov	r6, r0
 8003ecc:	460f      	mov	r7, r1
 8003ece:	f7fc f987 	bl	80001e0 <__aeabi_dsub>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	4689      	mov	r9, r1
 8003eda:	4630      	mov	r0, r6
 8003edc:	4639      	mov	r1, r7
 8003ede:	f7fc f97f 	bl	80001e0 <__aeabi_dsub>
 8003ee2:	a395      	add	r3, pc, #596	@ (adr r3, 8004138 <__ieee754_rem_pio2+0x300>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	e7dc      	b.n	8003ea4 <__ieee754_rem_pio2+0x6c>
 8003eea:	f7fc f97b 	bl	80001e4 <__adddf3>
 8003eee:	45a8      	cmp	r8, r5
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	460f      	mov	r7, r1
 8003ef4:	d018      	beq.n	8003f28 <__ieee754_rem_pio2+0xf0>
 8003ef6:	a38c      	add	r3, pc, #560	@ (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f7fc f972 	bl	80001e4 <__adddf3>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4680      	mov	r8, r0
 8003f06:	4689      	mov	r9, r1
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	f7fc f968 	bl	80001e0 <__aeabi_dsub>
 8003f10:	a385      	add	r3, pc, #532	@ (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc f965 	bl	80001e4 <__adddf3>
 8003f1a:	f04f 35ff 	mov.w	r5, #4294967295
 8003f1e:	e9c4 8900 	strd	r8, r9, [r4]
 8003f22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f26:	e7c4      	b.n	8003eb2 <__ieee754_rem_pio2+0x7a>
 8003f28:	a381      	add	r3, pc, #516	@ (adr r3, 8004130 <__ieee754_rem_pio2+0x2f8>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc f959 	bl	80001e4 <__adddf3>
 8003f32:	a381      	add	r3, pc, #516	@ (adr r3, 8004138 <__ieee754_rem_pio2+0x300>)
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	4606      	mov	r6, r0
 8003f3a:	460f      	mov	r7, r1
 8003f3c:	f7fc f952 	bl	80001e4 <__adddf3>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4680      	mov	r8, r0
 8003f46:	4689      	mov	r9, r1
 8003f48:	4630      	mov	r0, r6
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	f7fc f948 	bl	80001e0 <__aeabi_dsub>
 8003f50:	a379      	add	r3, pc, #484	@ (adr r3, 8004138 <__ieee754_rem_pio2+0x300>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	e7de      	b.n	8003f16 <__ieee754_rem_pio2+0xde>
 8003f58:	4b82      	ldr	r3, [pc, #520]	@ (8004164 <__ieee754_rem_pio2+0x32c>)
 8003f5a:	4598      	cmp	r8, r3
 8003f5c:	f200 80d1 	bhi.w	8004102 <__ieee754_rem_pio2+0x2ca>
 8003f60:	f000 f966 	bl	8004230 <fabs>
 8003f64:	ec57 6b10 	vmov	r6, r7, d0
 8003f68:	a375      	add	r3, pc, #468	@ (adr r3, 8004140 <__ieee754_rem_pio2+0x308>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	4630      	mov	r0, r6
 8003f70:	4639      	mov	r1, r7
 8003f72:	f7fc faed 	bl	8000550 <__aeabi_dmul>
 8003f76:	4b7c      	ldr	r3, [pc, #496]	@ (8004168 <__ieee754_rem_pio2+0x330>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f7fc f933 	bl	80001e4 <__adddf3>
 8003f7e:	f7fc fd81 	bl	8000a84 <__aeabi_d2iz>
 8003f82:	4605      	mov	r5, r0
 8003f84:	f7fc fa7a 	bl	800047c <__aeabi_i2d>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f90:	a363      	add	r3, pc, #396	@ (adr r3, 8004120 <__ieee754_rem_pio2+0x2e8>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fadb 	bl	8000550 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	f7fc f91d 	bl	80001e0 <__aeabi_dsub>
 8003fa6:	a360      	add	r3, pc, #384	@ (adr r3, 8004128 <__ieee754_rem_pio2+0x2f0>)
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	4682      	mov	sl, r0
 8003fae:	468b      	mov	fp, r1
 8003fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fb4:	f7fc facc 	bl	8000550 <__aeabi_dmul>
 8003fb8:	2d1f      	cmp	r5, #31
 8003fba:	4606      	mov	r6, r0
 8003fbc:	460f      	mov	r7, r1
 8003fbe:	dc0c      	bgt.n	8003fda <__ieee754_rem_pio2+0x1a2>
 8003fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800416c <__ieee754_rem_pio2+0x334>)
 8003fc2:	1e6a      	subs	r2, r5, #1
 8003fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc8:	4543      	cmp	r3, r8
 8003fca:	d006      	beq.n	8003fda <__ieee754_rem_pio2+0x1a2>
 8003fcc:	4632      	mov	r2, r6
 8003fce:	463b      	mov	r3, r7
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	f7fc f904 	bl	80001e0 <__aeabi_dsub>
 8003fd8:	e00e      	b.n	8003ff8 <__ieee754_rem_pio2+0x1c0>
 8003fda:	463b      	mov	r3, r7
 8003fdc:	4632      	mov	r2, r6
 8003fde:	4650      	mov	r0, sl
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	f7fc f8fd 	bl	80001e0 <__aeabi_dsub>
 8003fe6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ff0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	dc02      	bgt.n	8003ffe <__ieee754_rem_pio2+0x1c6>
 8003ff8:	e9c4 0100 	strd	r0, r1, [r4]
 8003ffc:	e039      	b.n	8004072 <__ieee754_rem_pio2+0x23a>
 8003ffe:	a34c      	add	r3, pc, #304	@ (adr r3, 8004130 <__ieee754_rem_pio2+0x2f8>)
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004008:	f7fc faa2 	bl	8000550 <__aeabi_dmul>
 800400c:	4606      	mov	r6, r0
 800400e:	460f      	mov	r7, r1
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4650      	mov	r0, sl
 8004016:	4659      	mov	r1, fp
 8004018:	f7fc f8e2 	bl	80001e0 <__aeabi_dsub>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4680      	mov	r8, r0
 8004022:	4689      	mov	r9, r1
 8004024:	4650      	mov	r0, sl
 8004026:	4659      	mov	r1, fp
 8004028:	f7fc f8da 	bl	80001e0 <__aeabi_dsub>
 800402c:	4632      	mov	r2, r6
 800402e:	463b      	mov	r3, r7
 8004030:	f7fc f8d6 	bl	80001e0 <__aeabi_dsub>
 8004034:	a340      	add	r3, pc, #256	@ (adr r3, 8004138 <__ieee754_rem_pio2+0x300>)
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	4606      	mov	r6, r0
 800403c:	460f      	mov	r7, r1
 800403e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004042:	f7fc fa85 	bl	8000550 <__aeabi_dmul>
 8004046:	4632      	mov	r2, r6
 8004048:	463b      	mov	r3, r7
 800404a:	f7fc f8c9 	bl	80001e0 <__aeabi_dsub>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4606      	mov	r6, r0
 8004054:	460f      	mov	r7, r1
 8004056:	4640      	mov	r0, r8
 8004058:	4649      	mov	r1, r9
 800405a:	f7fc f8c1 	bl	80001e0 <__aeabi_dsub>
 800405e:	9a05      	ldr	r2, [sp, #20]
 8004060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b31      	cmp	r3, #49	@ 0x31
 8004068:	dc20      	bgt.n	80040ac <__ieee754_rem_pio2+0x274>
 800406a:	e9c4 0100 	strd	r0, r1, [r4]
 800406e:	46c2      	mov	sl, r8
 8004070:	46cb      	mov	fp, r9
 8004072:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004076:	4650      	mov	r0, sl
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	4659      	mov	r1, fp
 800407e:	f7fc f8af 	bl	80001e0 <__aeabi_dsub>
 8004082:	463b      	mov	r3, r7
 8004084:	4632      	mov	r2, r6
 8004086:	f7fc f8ab 	bl	80001e0 <__aeabi_dsub>
 800408a:	9b04      	ldr	r3, [sp, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004092:	f6bf af0e 	bge.w	8003eb2 <__ieee754_rem_pio2+0x7a>
 8004096:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800409a:	6063      	str	r3, [r4, #4]
 800409c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040a0:	f8c4 8000 	str.w	r8, [r4]
 80040a4:	60a0      	str	r0, [r4, #8]
 80040a6:	60e3      	str	r3, [r4, #12]
 80040a8:	426d      	negs	r5, r5
 80040aa:	e702      	b.n	8003eb2 <__ieee754_rem_pio2+0x7a>
 80040ac:	a326      	add	r3, pc, #152	@ (adr r3, 8004148 <__ieee754_rem_pio2+0x310>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040b6:	f7fc fa4b 	bl	8000550 <__aeabi_dmul>
 80040ba:	4606      	mov	r6, r0
 80040bc:	460f      	mov	r7, r1
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	f7fc f88b 	bl	80001e0 <__aeabi_dsub>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4682      	mov	sl, r0
 80040d0:	468b      	mov	fp, r1
 80040d2:	4640      	mov	r0, r8
 80040d4:	4649      	mov	r1, r9
 80040d6:	f7fc f883 	bl	80001e0 <__aeabi_dsub>
 80040da:	4632      	mov	r2, r6
 80040dc:	463b      	mov	r3, r7
 80040de:	f7fc f87f 	bl	80001e0 <__aeabi_dsub>
 80040e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004150 <__ieee754_rem_pio2+0x318>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	4606      	mov	r6, r0
 80040ea:	460f      	mov	r7, r1
 80040ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f0:	f7fc fa2e 	bl	8000550 <__aeabi_dmul>
 80040f4:	4632      	mov	r2, r6
 80040f6:	463b      	mov	r3, r7
 80040f8:	f7fc f872 	bl	80001e0 <__aeabi_dsub>
 80040fc:	4606      	mov	r6, r0
 80040fe:	460f      	mov	r7, r1
 8004100:	e764      	b.n	8003fcc <__ieee754_rem_pio2+0x194>
 8004102:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <__ieee754_rem_pio2+0x338>)
 8004104:	4598      	cmp	r8, r3
 8004106:	d935      	bls.n	8004174 <__ieee754_rem_pio2+0x33c>
 8004108:	4632      	mov	r2, r6
 800410a:	463b      	mov	r3, r7
 800410c:	4630      	mov	r0, r6
 800410e:	4639      	mov	r1, r7
 8004110:	f7fc f866 	bl	80001e0 <__aeabi_dsub>
 8004114:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004118:	e9c4 0100 	strd	r0, r1, [r4]
 800411c:	e69e      	b.n	8003e5c <__ieee754_rem_pio2+0x24>
 800411e:	bf00      	nop
 8004120:	54400000 	.word	0x54400000
 8004124:	3ff921fb 	.word	0x3ff921fb
 8004128:	1a626331 	.word	0x1a626331
 800412c:	3dd0b461 	.word	0x3dd0b461
 8004130:	1a600000 	.word	0x1a600000
 8004134:	3dd0b461 	.word	0x3dd0b461
 8004138:	2e037073 	.word	0x2e037073
 800413c:	3ba3198a 	.word	0x3ba3198a
 8004140:	6dc9c883 	.word	0x6dc9c883
 8004144:	3fe45f30 	.word	0x3fe45f30
 8004148:	2e000000 	.word	0x2e000000
 800414c:	3ba3198a 	.word	0x3ba3198a
 8004150:	252049c1 	.word	0x252049c1
 8004154:	397b839a 	.word	0x397b839a
 8004158:	3fe921fb 	.word	0x3fe921fb
 800415c:	4002d97b 	.word	0x4002d97b
 8004160:	3ff921fb 	.word	0x3ff921fb
 8004164:	413921fb 	.word	0x413921fb
 8004168:	3fe00000 	.word	0x3fe00000
 800416c:	08004b20 	.word	0x08004b20
 8004170:	7fefffff 	.word	0x7fefffff
 8004174:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004178:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800417c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004180:	4630      	mov	r0, r6
 8004182:	460f      	mov	r7, r1
 8004184:	f7fc fc7e 	bl	8000a84 <__aeabi_d2iz>
 8004188:	f7fc f978 	bl	800047c <__aeabi_i2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4630      	mov	r0, r6
 8004192:	4639      	mov	r1, r7
 8004194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004198:	f7fc f822 	bl	80001e0 <__aeabi_dsub>
 800419c:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <__ieee754_rem_pio2+0x3f0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	f7fc f9d6 	bl	8000550 <__aeabi_dmul>
 80041a4:	460f      	mov	r7, r1
 80041a6:	4606      	mov	r6, r0
 80041a8:	f7fc fc6c 	bl	8000a84 <__aeabi_d2iz>
 80041ac:	f7fc f966 	bl	800047c <__aeabi_i2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4630      	mov	r0, r6
 80041b6:	4639      	mov	r1, r7
 80041b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041bc:	f7fc f810 	bl	80001e0 <__aeabi_dsub>
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <__ieee754_rem_pio2+0x3f0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	f7fc f9c4 	bl	8000550 <__aeabi_dmul>
 80041c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80041cc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80041d0:	f04f 0803 	mov.w	r8, #3
 80041d4:	2600      	movs	r6, #0
 80041d6:	2700      	movs	r7, #0
 80041d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80041dc:	4632      	mov	r2, r6
 80041de:	463b      	mov	r3, r7
 80041e0:	46c2      	mov	sl, r8
 80041e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80041e6:	f7fc fc1b 	bl	8000a20 <__aeabi_dcmpeq>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d1f4      	bne.n	80041d8 <__ieee754_rem_pio2+0x3a0>
 80041ee:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <__ieee754_rem_pio2+0x3f4>)
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	2302      	movs	r3, #2
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	462a      	mov	r2, r5
 80041f8:	4653      	mov	r3, sl
 80041fa:	4621      	mov	r1, r4
 80041fc:	a806      	add	r0, sp, #24
 80041fe:	f000 f81f 	bl	8004240 <__kernel_rem_pio2>
 8004202:	9b04      	ldr	r3, [sp, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	4605      	mov	r5, r0
 8004208:	f6bf ae53 	bge.w	8003eb2 <__ieee754_rem_pio2+0x7a>
 800420c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004210:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004214:	e9c4 2300 	strd	r2, r3, [r4]
 8004218:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800421c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004220:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004224:	e740      	b.n	80040a8 <__ieee754_rem_pio2+0x270>
 8004226:	bf00      	nop
 8004228:	41700000 	.word	0x41700000
 800422c:	08004ba0 	.word	0x08004ba0

08004230 <fabs>:
 8004230:	ec51 0b10 	vmov	r0, r1, d0
 8004234:	4602      	mov	r2, r0
 8004236:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800423a:	ec43 2b10 	vmov	d0, r2, r3
 800423e:	4770      	bx	lr

08004240 <__kernel_rem_pio2>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	ed2d 8b02 	vpush	{d8}
 8004248:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800424c:	f112 0f14 	cmn.w	r2, #20
 8004250:	9306      	str	r3, [sp, #24]
 8004252:	9104      	str	r1, [sp, #16]
 8004254:	4bbe      	ldr	r3, [pc, #760]	@ (8004550 <__kernel_rem_pio2+0x310>)
 8004256:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004258:	9008      	str	r0, [sp, #32]
 800425a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	9b06      	ldr	r3, [sp, #24]
 8004262:	f103 33ff 	add.w	r3, r3, #4294967295
 8004266:	bfa8      	it	ge
 8004268:	1ed4      	subge	r4, r2, #3
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	bfb2      	itee	lt
 800426e:	2400      	movlt	r4, #0
 8004270:	2318      	movge	r3, #24
 8004272:	fb94 f4f3 	sdivge	r4, r4, r3
 8004276:	f06f 0317 	mvn.w	r3, #23
 800427a:	fb04 3303 	mla	r3, r4, r3, r3
 800427e:	eb03 0b02 	add.w	fp, r3, r2
 8004282:	9b00      	ldr	r3, [sp, #0]
 8004284:	9a05      	ldr	r2, [sp, #20]
 8004286:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004540 <__kernel_rem_pio2+0x300>
 800428a:	eb03 0802 	add.w	r8, r3, r2
 800428e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004290:	1aa7      	subs	r7, r4, r2
 8004292:	ae20      	add	r6, sp, #128	@ 0x80
 8004294:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004298:	2500      	movs	r5, #0
 800429a:	4545      	cmp	r5, r8
 800429c:	dd13      	ble.n	80042c6 <__kernel_rem_pio2+0x86>
 800429e:	9b06      	ldr	r3, [sp, #24]
 80042a0:	aa20      	add	r2, sp, #128	@ 0x80
 80042a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80042a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80042aa:	f04f 0800 	mov.w	r8, #0
 80042ae:	9b00      	ldr	r3, [sp, #0]
 80042b0:	4598      	cmp	r8, r3
 80042b2:	dc31      	bgt.n	8004318 <__kernel_rem_pio2+0xd8>
 80042b4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004540 <__kernel_rem_pio2+0x300>
 80042b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80042c0:	462f      	mov	r7, r5
 80042c2:	2600      	movs	r6, #0
 80042c4:	e01b      	b.n	80042fe <__kernel_rem_pio2+0xbe>
 80042c6:	42ef      	cmn	r7, r5
 80042c8:	d407      	bmi.n	80042da <__kernel_rem_pio2+0x9a>
 80042ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80042ce:	f7fc f8d5 	bl	800047c <__aeabi_i2d>
 80042d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80042d6:	3501      	adds	r5, #1
 80042d8:	e7df      	b.n	800429a <__kernel_rem_pio2+0x5a>
 80042da:	ec51 0b18 	vmov	r0, r1, d8
 80042de:	e7f8      	b.n	80042d2 <__kernel_rem_pio2+0x92>
 80042e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80042e8:	f7fc f932 	bl	8000550 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042f4:	f7fb ff76 	bl	80001e4 <__adddf3>
 80042f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042fc:	3601      	adds	r6, #1
 80042fe:	9b05      	ldr	r3, [sp, #20]
 8004300:	429e      	cmp	r6, r3
 8004302:	f1a7 0708 	sub.w	r7, r7, #8
 8004306:	ddeb      	ble.n	80042e0 <__kernel_rem_pio2+0xa0>
 8004308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800430c:	f108 0801 	add.w	r8, r8, #1
 8004310:	ecaa 7b02 	vstmia	sl!, {d7}
 8004314:	3508      	adds	r5, #8
 8004316:	e7ca      	b.n	80042ae <__kernel_rem_pio2+0x6e>
 8004318:	9b00      	ldr	r3, [sp, #0]
 800431a:	f8dd 8000 	ldr.w	r8, [sp]
 800431e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004324:	930a      	str	r3, [sp, #40]	@ 0x28
 8004326:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004328:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800432c:	9309      	str	r3, [sp, #36]	@ 0x24
 800432e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004334:	ab98      	add	r3, sp, #608	@ 0x260
 8004336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800433a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800433e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004342:	ac0c      	add	r4, sp, #48	@ 0x30
 8004344:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004346:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800434a:	46a1      	mov	r9, r4
 800434c:	46c2      	mov	sl, r8
 800434e:	f1ba 0f00 	cmp.w	sl, #0
 8004352:	f1a5 0508 	sub.w	r5, r5, #8
 8004356:	dc77      	bgt.n	8004448 <__kernel_rem_pio2+0x208>
 8004358:	4658      	mov	r0, fp
 800435a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800435e:	f000 fac7 	bl	80048f0 <scalbn>
 8004362:	ec57 6b10 	vmov	r6, r7, d0
 8004366:	2200      	movs	r2, #0
 8004368:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800436c:	4630      	mov	r0, r6
 800436e:	4639      	mov	r1, r7
 8004370:	f7fc f8ee 	bl	8000550 <__aeabi_dmul>
 8004374:	ec41 0b10 	vmov	d0, r0, r1
 8004378:	f000 fb3a 	bl	80049f0 <floor>
 800437c:	4b75      	ldr	r3, [pc, #468]	@ (8004554 <__kernel_rem_pio2+0x314>)
 800437e:	ec51 0b10 	vmov	r0, r1, d0
 8004382:	2200      	movs	r2, #0
 8004384:	f7fc f8e4 	bl	8000550 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4630      	mov	r0, r6
 800438e:	4639      	mov	r1, r7
 8004390:	f7fb ff26 	bl	80001e0 <__aeabi_dsub>
 8004394:	460f      	mov	r7, r1
 8004396:	4606      	mov	r6, r0
 8004398:	f7fc fb74 	bl	8000a84 <__aeabi_d2iz>
 800439c:	9002      	str	r0, [sp, #8]
 800439e:	f7fc f86d 	bl	800047c <__aeabi_i2d>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4630      	mov	r0, r6
 80043a8:	4639      	mov	r1, r7
 80043aa:	f7fb ff19 	bl	80001e0 <__aeabi_dsub>
 80043ae:	f1bb 0f00 	cmp.w	fp, #0
 80043b2:	4606      	mov	r6, r0
 80043b4:	460f      	mov	r7, r1
 80043b6:	dd6c      	ble.n	8004492 <__kernel_rem_pio2+0x252>
 80043b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80043bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80043be:	9d02      	ldr	r5, [sp, #8]
 80043c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043c4:	f1cb 0018 	rsb	r0, fp, #24
 80043c8:	fa43 f200 	asr.w	r2, r3, r0
 80043cc:	4415      	add	r5, r2
 80043ce:	4082      	lsls	r2, r0
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80043d4:	9502      	str	r5, [sp, #8]
 80043d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80043da:	f1cb 0217 	rsb	r2, fp, #23
 80043de:	fa43 f902 	asr.w	r9, r3, r2
 80043e2:	f1b9 0f00 	cmp.w	r9, #0
 80043e6:	dd64      	ble.n	80044b2 <__kernel_rem_pio2+0x272>
 80043e8:	9b02      	ldr	r3, [sp, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	3301      	adds	r3, #1
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	4615      	mov	r5, r2
 80043f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80043f6:	4590      	cmp	r8, r2
 80043f8:	f300 80b8 	bgt.w	800456c <__kernel_rem_pio2+0x32c>
 80043fc:	f1bb 0f00 	cmp.w	fp, #0
 8004400:	dd07      	ble.n	8004412 <__kernel_rem_pio2+0x1d2>
 8004402:	f1bb 0f01 	cmp.w	fp, #1
 8004406:	f000 80bf 	beq.w	8004588 <__kernel_rem_pio2+0x348>
 800440a:	f1bb 0f02 	cmp.w	fp, #2
 800440e:	f000 80c6 	beq.w	800459e <__kernel_rem_pio2+0x35e>
 8004412:	f1b9 0f02 	cmp.w	r9, #2
 8004416:	d14c      	bne.n	80044b2 <__kernel_rem_pio2+0x272>
 8004418:	4632      	mov	r2, r6
 800441a:	463b      	mov	r3, r7
 800441c:	494e      	ldr	r1, [pc, #312]	@ (8004558 <__kernel_rem_pio2+0x318>)
 800441e:	2000      	movs	r0, #0
 8004420:	f7fb fede 	bl	80001e0 <__aeabi_dsub>
 8004424:	4606      	mov	r6, r0
 8004426:	460f      	mov	r7, r1
 8004428:	2d00      	cmp	r5, #0
 800442a:	d042      	beq.n	80044b2 <__kernel_rem_pio2+0x272>
 800442c:	4658      	mov	r0, fp
 800442e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004548 <__kernel_rem_pio2+0x308>
 8004432:	f000 fa5d 	bl	80048f0 <scalbn>
 8004436:	4630      	mov	r0, r6
 8004438:	4639      	mov	r1, r7
 800443a:	ec53 2b10 	vmov	r2, r3, d0
 800443e:	f7fb fecf 	bl	80001e0 <__aeabi_dsub>
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	e034      	b.n	80044b2 <__kernel_rem_pio2+0x272>
 8004448:	4b44      	ldr	r3, [pc, #272]	@ (800455c <__kernel_rem_pio2+0x31c>)
 800444a:	2200      	movs	r2, #0
 800444c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004450:	f7fc f87e 	bl	8000550 <__aeabi_dmul>
 8004454:	f7fc fb16 	bl	8000a84 <__aeabi_d2iz>
 8004458:	f7fc f810 	bl	800047c <__aeabi_i2d>
 800445c:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <__kernel_rem_pio2+0x320>)
 800445e:	2200      	movs	r2, #0
 8004460:	4606      	mov	r6, r0
 8004462:	460f      	mov	r7, r1
 8004464:	f7fc f874 	bl	8000550 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004470:	f7fb feb6 	bl	80001e0 <__aeabi_dsub>
 8004474:	f7fc fb06 	bl	8000a84 <__aeabi_d2iz>
 8004478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800447c:	f849 0b04 	str.w	r0, [r9], #4
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	f7fb feae 	bl	80001e4 <__adddf3>
 8004488:	f10a 3aff 	add.w	sl, sl, #4294967295
 800448c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004490:	e75d      	b.n	800434e <__kernel_rem_pio2+0x10e>
 8004492:	d107      	bne.n	80044a4 <__kernel_rem_pio2+0x264>
 8004494:	f108 33ff 	add.w	r3, r8, #4294967295
 8004498:	aa0c      	add	r2, sp, #48	@ 0x30
 800449a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80044a2:	e79e      	b.n	80043e2 <__kernel_rem_pio2+0x1a2>
 80044a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004564 <__kernel_rem_pio2+0x324>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f7fc fad8 	bl	8000a5c <__aeabi_dcmpge>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d143      	bne.n	8004538 <__kernel_rem_pio2+0x2f8>
 80044b0:	4681      	mov	r9, r0
 80044b2:	2200      	movs	r2, #0
 80044b4:	2300      	movs	r3, #0
 80044b6:	4630      	mov	r0, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fc fab1 	bl	8000a20 <__aeabi_dcmpeq>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f000 80bf 	beq.w	8004642 <__kernel_rem_pio2+0x402>
 80044c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80044c8:	2200      	movs	r2, #0
 80044ca:	9900      	ldr	r1, [sp, #0]
 80044cc:	428b      	cmp	r3, r1
 80044ce:	da6e      	bge.n	80045ae <__kernel_rem_pio2+0x36e>
 80044d0:	2a00      	cmp	r2, #0
 80044d2:	f000 8089 	beq.w	80045e8 <__kernel_rem_pio2+0x3a8>
 80044d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80044da:	ab0c      	add	r3, sp, #48	@ 0x30
 80044dc:	f1ab 0b18 	sub.w	fp, fp, #24
 80044e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f6      	beq.n	80044d6 <__kernel_rem_pio2+0x296>
 80044e8:	4658      	mov	r0, fp
 80044ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004548 <__kernel_rem_pio2+0x308>
 80044ee:	f000 f9ff 	bl	80048f0 <scalbn>
 80044f2:	f108 0301 	add.w	r3, r8, #1
 80044f6:	00da      	lsls	r2, r3, #3
 80044f8:	9205      	str	r2, [sp, #20]
 80044fa:	ec55 4b10 	vmov	r4, r5, d0
 80044fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004500:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800455c <__kernel_rem_pio2+0x31c>
 8004504:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004508:	4646      	mov	r6, r8
 800450a:	f04f 0a00 	mov.w	sl, #0
 800450e:	2e00      	cmp	r6, #0
 8004510:	f280 80cf 	bge.w	80046b2 <__kernel_rem_pio2+0x472>
 8004514:	4644      	mov	r4, r8
 8004516:	2c00      	cmp	r4, #0
 8004518:	f2c0 80fd 	blt.w	8004716 <__kernel_rem_pio2+0x4d6>
 800451c:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <__kernel_rem_pio2+0x328>)
 800451e:	461f      	mov	r7, r3
 8004520:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004526:	9306      	str	r3, [sp, #24]
 8004528:	f04f 0a00 	mov.w	sl, #0
 800452c:	f04f 0b00 	mov.w	fp, #0
 8004530:	2600      	movs	r6, #0
 8004532:	eba8 0504 	sub.w	r5, r8, r4
 8004536:	e0e2      	b.n	80046fe <__kernel_rem_pio2+0x4be>
 8004538:	f04f 0902 	mov.w	r9, #2
 800453c:	e754      	b.n	80043e8 <__kernel_rem_pio2+0x1a8>
 800453e:	bf00      	nop
	...
 800454c:	3ff00000 	.word	0x3ff00000
 8004550:	08004ce8 	.word	0x08004ce8
 8004554:	40200000 	.word	0x40200000
 8004558:	3ff00000 	.word	0x3ff00000
 800455c:	3e700000 	.word	0x3e700000
 8004560:	41700000 	.word	0x41700000
 8004564:	3fe00000 	.word	0x3fe00000
 8004568:	08004ca8 	.word	0x08004ca8
 800456c:	f854 3b04 	ldr.w	r3, [r4], #4
 8004570:	b945      	cbnz	r5, 8004584 <__kernel_rem_pio2+0x344>
 8004572:	b123      	cbz	r3, 800457e <__kernel_rem_pio2+0x33e>
 8004574:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004578:	f844 3c04 	str.w	r3, [r4, #-4]
 800457c:	2301      	movs	r3, #1
 800457e:	3201      	adds	r2, #1
 8004580:	461d      	mov	r5, r3
 8004582:	e738      	b.n	80043f6 <__kernel_rem_pio2+0x1b6>
 8004584:	1acb      	subs	r3, r1, r3
 8004586:	e7f7      	b.n	8004578 <__kernel_rem_pio2+0x338>
 8004588:	f108 32ff 	add.w	r2, r8, #4294967295
 800458c:	ab0c      	add	r3, sp, #48	@ 0x30
 800458e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004592:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004596:	a90c      	add	r1, sp, #48	@ 0x30
 8004598:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800459c:	e739      	b.n	8004412 <__kernel_rem_pio2+0x1d2>
 800459e:	f108 32ff 	add.w	r2, r8, #4294967295
 80045a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80045a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80045ac:	e7f3      	b.n	8004596 <__kernel_rem_pio2+0x356>
 80045ae:	a90c      	add	r1, sp, #48	@ 0x30
 80045b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	430a      	orrs	r2, r1
 80045b8:	e787      	b.n	80044ca <__kernel_rem_pio2+0x28a>
 80045ba:	3401      	adds	r4, #1
 80045bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	d0fa      	beq.n	80045ba <__kernel_rem_pio2+0x37a>
 80045c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80045ca:	eb0d 0503 	add.w	r5, sp, r3
 80045ce:	9b06      	ldr	r3, [sp, #24]
 80045d0:	aa20      	add	r2, sp, #128	@ 0x80
 80045d2:	4443      	add	r3, r8
 80045d4:	f108 0701 	add.w	r7, r8, #1
 80045d8:	3d98      	subs	r5, #152	@ 0x98
 80045da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80045de:	4444      	add	r4, r8
 80045e0:	42bc      	cmp	r4, r7
 80045e2:	da04      	bge.n	80045ee <__kernel_rem_pio2+0x3ae>
 80045e4:	46a0      	mov	r8, r4
 80045e6:	e6a2      	b.n	800432e <__kernel_rem_pio2+0xee>
 80045e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045ea:	2401      	movs	r4, #1
 80045ec:	e7e6      	b.n	80045bc <__kernel_rem_pio2+0x37c>
 80045ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80045f4:	f7fb ff42 	bl	800047c <__aeabi_i2d>
 80045f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80048c0 <__kernel_rem_pio2+0x680>
 80045fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004608:	46b2      	mov	sl, r6
 800460a:	f04f 0800 	mov.w	r8, #0
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	4598      	cmp	r8, r3
 8004612:	dd05      	ble.n	8004620 <__kernel_rem_pio2+0x3e0>
 8004614:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004618:	3701      	adds	r7, #1
 800461a:	eca5 7b02 	vstmia	r5!, {d7}
 800461e:	e7df      	b.n	80045e0 <__kernel_rem_pio2+0x3a0>
 8004620:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004624:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004628:	f7fb ff92 	bl	8000550 <__aeabi_dmul>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004634:	f7fb fdd6 	bl	80001e4 <__adddf3>
 8004638:	f108 0801 	add.w	r8, r8, #1
 800463c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004640:	e7e5      	b.n	800460e <__kernel_rem_pio2+0x3ce>
 8004642:	f1cb 0000 	rsb	r0, fp, #0
 8004646:	ec47 6b10 	vmov	d0, r6, r7
 800464a:	f000 f951 	bl	80048f0 <scalbn>
 800464e:	ec55 4b10 	vmov	r4, r5, d0
 8004652:	4b9d      	ldr	r3, [pc, #628]	@ (80048c8 <__kernel_rem_pio2+0x688>)
 8004654:	2200      	movs	r2, #0
 8004656:	4620      	mov	r0, r4
 8004658:	4629      	mov	r1, r5
 800465a:	f7fc f9ff 	bl	8000a5c <__aeabi_dcmpge>
 800465e:	b300      	cbz	r0, 80046a2 <__kernel_rem_pio2+0x462>
 8004660:	4b9a      	ldr	r3, [pc, #616]	@ (80048cc <__kernel_rem_pio2+0x68c>)
 8004662:	2200      	movs	r2, #0
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	f7fb ff72 	bl	8000550 <__aeabi_dmul>
 800466c:	f7fc fa0a 	bl	8000a84 <__aeabi_d2iz>
 8004670:	4606      	mov	r6, r0
 8004672:	f7fb ff03 	bl	800047c <__aeabi_i2d>
 8004676:	4b94      	ldr	r3, [pc, #592]	@ (80048c8 <__kernel_rem_pio2+0x688>)
 8004678:	2200      	movs	r2, #0
 800467a:	f7fb ff69 	bl	8000550 <__aeabi_dmul>
 800467e:	460b      	mov	r3, r1
 8004680:	4602      	mov	r2, r0
 8004682:	4629      	mov	r1, r5
 8004684:	4620      	mov	r0, r4
 8004686:	f7fb fdab 	bl	80001e0 <__aeabi_dsub>
 800468a:	f7fc f9fb 	bl	8000a84 <__aeabi_d2iz>
 800468e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004690:	f10b 0b18 	add.w	fp, fp, #24
 8004694:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004698:	f108 0801 	add.w	r8, r8, #1
 800469c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80046a0:	e722      	b.n	80044e8 <__kernel_rem_pio2+0x2a8>
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fc f9ed 	bl	8000a84 <__aeabi_d2iz>
 80046aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80046ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80046b0:	e71a      	b.n	80044e8 <__kernel_rem_pio2+0x2a8>
 80046b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80046b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80046b8:	f7fb fee0 	bl	800047c <__aeabi_i2d>
 80046bc:	4622      	mov	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	f7fb ff46 	bl	8000550 <__aeabi_dmul>
 80046c4:	4652      	mov	r2, sl
 80046c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80046ca:	465b      	mov	r3, fp
 80046cc:	4620      	mov	r0, r4
 80046ce:	4629      	mov	r1, r5
 80046d0:	f7fb ff3e 	bl	8000550 <__aeabi_dmul>
 80046d4:	3e01      	subs	r6, #1
 80046d6:	4604      	mov	r4, r0
 80046d8:	460d      	mov	r5, r1
 80046da:	e718      	b.n	800450e <__kernel_rem_pio2+0x2ce>
 80046dc:	9906      	ldr	r1, [sp, #24]
 80046de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80046e2:	9106      	str	r1, [sp, #24]
 80046e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80046e8:	f7fb ff32 	bl	8000550 <__aeabi_dmul>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4650      	mov	r0, sl
 80046f2:	4659      	mov	r1, fp
 80046f4:	f7fb fd76 	bl	80001e4 <__adddf3>
 80046f8:	3601      	adds	r6, #1
 80046fa:	4682      	mov	sl, r0
 80046fc:	468b      	mov	fp, r1
 80046fe:	9b00      	ldr	r3, [sp, #0]
 8004700:	429e      	cmp	r6, r3
 8004702:	dc01      	bgt.n	8004708 <__kernel_rem_pio2+0x4c8>
 8004704:	42b5      	cmp	r5, r6
 8004706:	dae9      	bge.n	80046dc <__kernel_rem_pio2+0x49c>
 8004708:	ab48      	add	r3, sp, #288	@ 0x120
 800470a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800470e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004712:	3c01      	subs	r4, #1
 8004714:	e6ff      	b.n	8004516 <__kernel_rem_pio2+0x2d6>
 8004716:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004718:	2b02      	cmp	r3, #2
 800471a:	dc0b      	bgt.n	8004734 <__kernel_rem_pio2+0x4f4>
 800471c:	2b00      	cmp	r3, #0
 800471e:	dc39      	bgt.n	8004794 <__kernel_rem_pio2+0x554>
 8004720:	d05d      	beq.n	80047de <__kernel_rem_pio2+0x59e>
 8004722:	9b02      	ldr	r3, [sp, #8]
 8004724:	f003 0007 	and.w	r0, r3, #7
 8004728:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800472c:	ecbd 8b02 	vpop	{d8}
 8004730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004734:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004736:	2b03      	cmp	r3, #3
 8004738:	d1f3      	bne.n	8004722 <__kernel_rem_pio2+0x4e2>
 800473a:	9b05      	ldr	r3, [sp, #20]
 800473c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004740:	eb0d 0403 	add.w	r4, sp, r3
 8004744:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004748:	4625      	mov	r5, r4
 800474a:	46c2      	mov	sl, r8
 800474c:	f1ba 0f00 	cmp.w	sl, #0
 8004750:	f1a5 0508 	sub.w	r5, r5, #8
 8004754:	dc6b      	bgt.n	800482e <__kernel_rem_pio2+0x5ee>
 8004756:	4645      	mov	r5, r8
 8004758:	2d01      	cmp	r5, #1
 800475a:	f1a4 0408 	sub.w	r4, r4, #8
 800475e:	f300 8087 	bgt.w	8004870 <__kernel_rem_pio2+0x630>
 8004762:	9c05      	ldr	r4, [sp, #20]
 8004764:	ab48      	add	r3, sp, #288	@ 0x120
 8004766:	441c      	add	r4, r3
 8004768:	2000      	movs	r0, #0
 800476a:	2100      	movs	r1, #0
 800476c:	f1b8 0f01 	cmp.w	r8, #1
 8004770:	f300 809c 	bgt.w	80048ac <__kernel_rem_pio2+0x66c>
 8004774:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004778:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800477c:	f1b9 0f00 	cmp.w	r9, #0
 8004780:	f040 80a6 	bne.w	80048d0 <__kernel_rem_pio2+0x690>
 8004784:	9b04      	ldr	r3, [sp, #16]
 8004786:	e9c3 7800 	strd	r7, r8, [r3]
 800478a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800478e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004792:	e7c6      	b.n	8004722 <__kernel_rem_pio2+0x4e2>
 8004794:	9d05      	ldr	r5, [sp, #20]
 8004796:	ab48      	add	r3, sp, #288	@ 0x120
 8004798:	441d      	add	r5, r3
 800479a:	4644      	mov	r4, r8
 800479c:	2000      	movs	r0, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	2c00      	cmp	r4, #0
 80047a2:	da35      	bge.n	8004810 <__kernel_rem_pio2+0x5d0>
 80047a4:	f1b9 0f00 	cmp.w	r9, #0
 80047a8:	d038      	beq.n	800481c <__kernel_rem_pio2+0x5dc>
 80047aa:	4602      	mov	r2, r0
 80047ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047b0:	9c04      	ldr	r4, [sp, #16]
 80047b2:	e9c4 2300 	strd	r2, r3, [r4]
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80047be:	f7fb fd0f 	bl	80001e0 <__aeabi_dsub>
 80047c2:	ad4a      	add	r5, sp, #296	@ 0x128
 80047c4:	2401      	movs	r4, #1
 80047c6:	45a0      	cmp	r8, r4
 80047c8:	da2b      	bge.n	8004822 <__kernel_rem_pio2+0x5e2>
 80047ca:	f1b9 0f00 	cmp.w	r9, #0
 80047ce:	d002      	beq.n	80047d6 <__kernel_rem_pio2+0x596>
 80047d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047d4:	4619      	mov	r1, r3
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80047dc:	e7a1      	b.n	8004722 <__kernel_rem_pio2+0x4e2>
 80047de:	9c05      	ldr	r4, [sp, #20]
 80047e0:	ab48      	add	r3, sp, #288	@ 0x120
 80047e2:	441c      	add	r4, r3
 80047e4:	2000      	movs	r0, #0
 80047e6:	2100      	movs	r1, #0
 80047e8:	f1b8 0f00 	cmp.w	r8, #0
 80047ec:	da09      	bge.n	8004802 <__kernel_rem_pio2+0x5c2>
 80047ee:	f1b9 0f00 	cmp.w	r9, #0
 80047f2:	d002      	beq.n	80047fa <__kernel_rem_pio2+0x5ba>
 80047f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047f8:	4619      	mov	r1, r3
 80047fa:	9b04      	ldr	r3, [sp, #16]
 80047fc:	e9c3 0100 	strd	r0, r1, [r3]
 8004800:	e78f      	b.n	8004722 <__kernel_rem_pio2+0x4e2>
 8004802:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004806:	f7fb fced 	bl	80001e4 <__adddf3>
 800480a:	f108 38ff 	add.w	r8, r8, #4294967295
 800480e:	e7eb      	b.n	80047e8 <__kernel_rem_pio2+0x5a8>
 8004810:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004814:	f7fb fce6 	bl	80001e4 <__adddf3>
 8004818:	3c01      	subs	r4, #1
 800481a:	e7c1      	b.n	80047a0 <__kernel_rem_pio2+0x560>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	e7c6      	b.n	80047b0 <__kernel_rem_pio2+0x570>
 8004822:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004826:	f7fb fcdd 	bl	80001e4 <__adddf3>
 800482a:	3401      	adds	r4, #1
 800482c:	e7cb      	b.n	80047c6 <__kernel_rem_pio2+0x586>
 800482e:	ed95 7b00 	vldr	d7, [r5]
 8004832:	ed8d 7b00 	vstr	d7, [sp]
 8004836:	ed95 7b02 	vldr	d7, [r5, #8]
 800483a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800483e:	ec53 2b17 	vmov	r2, r3, d7
 8004842:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004846:	f7fb fccd 	bl	80001e4 <__adddf3>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4606      	mov	r6, r0
 8004850:	460f      	mov	r7, r1
 8004852:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004856:	f7fb fcc3 	bl	80001e0 <__aeabi_dsub>
 800485a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800485e:	f7fb fcc1 	bl	80001e4 <__adddf3>
 8004862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004866:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800486a:	e9c5 6700 	strd	r6, r7, [r5]
 800486e:	e76d      	b.n	800474c <__kernel_rem_pio2+0x50c>
 8004870:	ed94 7b00 	vldr	d7, [r4]
 8004874:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004878:	ec51 0b17 	vmov	r0, r1, d7
 800487c:	4652      	mov	r2, sl
 800487e:	465b      	mov	r3, fp
 8004880:	ed8d 7b00 	vstr	d7, [sp]
 8004884:	f7fb fcae 	bl	80001e4 <__adddf3>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4606      	mov	r6, r0
 800488e:	460f      	mov	r7, r1
 8004890:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004894:	f7fb fca4 	bl	80001e0 <__aeabi_dsub>
 8004898:	4652      	mov	r2, sl
 800489a:	465b      	mov	r3, fp
 800489c:	f7fb fca2 	bl	80001e4 <__adddf3>
 80048a0:	3d01      	subs	r5, #1
 80048a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048a6:	e9c4 6700 	strd	r6, r7, [r4]
 80048aa:	e755      	b.n	8004758 <__kernel_rem_pio2+0x518>
 80048ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80048b0:	f7fb fc98 	bl	80001e4 <__adddf3>
 80048b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80048b8:	e758      	b.n	800476c <__kernel_rem_pio2+0x52c>
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w
	...
 80048c8:	41700000 	.word	0x41700000
 80048cc:	3e700000 	.word	0x3e700000
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	9a04      	ldr	r2, [sp, #16]
 80048d4:	601f      	str	r7, [r3, #0]
 80048d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80048da:	605c      	str	r4, [r3, #4]
 80048dc:	609d      	str	r5, [r3, #8]
 80048de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048e2:	60d3      	str	r3, [r2, #12]
 80048e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048e8:	6110      	str	r0, [r2, #16]
 80048ea:	6153      	str	r3, [r2, #20]
 80048ec:	e719      	b.n	8004722 <__kernel_rem_pio2+0x4e2>
 80048ee:	bf00      	nop

080048f0 <scalbn>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	ec55 4b10 	vmov	r4, r5, d0
 80048f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80048fa:	4606      	mov	r6, r0
 80048fc:	462b      	mov	r3, r5
 80048fe:	b991      	cbnz	r1, 8004926 <scalbn+0x36>
 8004900:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004904:	4323      	orrs	r3, r4
 8004906:	d03d      	beq.n	8004984 <scalbn+0x94>
 8004908:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <scalbn+0xf0>)
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	2200      	movs	r2, #0
 8004910:	f7fb fe1e 	bl	8000550 <__aeabi_dmul>
 8004914:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <scalbn+0xf4>)
 8004916:	429e      	cmp	r6, r3
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	da0f      	bge.n	800493e <scalbn+0x4e>
 800491e:	a328      	add	r3, pc, #160	@ (adr r3, 80049c0 <scalbn+0xd0>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	e01e      	b.n	8004964 <scalbn+0x74>
 8004926:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800492a:	4291      	cmp	r1, r2
 800492c:	d10b      	bne.n	8004946 <scalbn+0x56>
 800492e:	4622      	mov	r2, r4
 8004930:	4620      	mov	r0, r4
 8004932:	4629      	mov	r1, r5
 8004934:	f7fb fc56 	bl	80001e4 <__adddf3>
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	e022      	b.n	8004984 <scalbn+0x94>
 800493e:	460b      	mov	r3, r1
 8004940:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004944:	3936      	subs	r1, #54	@ 0x36
 8004946:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800494a:	4296      	cmp	r6, r2
 800494c:	dd0d      	ble.n	800496a <scalbn+0x7a>
 800494e:	2d00      	cmp	r5, #0
 8004950:	a11d      	add	r1, pc, #116	@ (adr r1, 80049c8 <scalbn+0xd8>)
 8004952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004956:	da02      	bge.n	800495e <scalbn+0x6e>
 8004958:	a11d      	add	r1, pc, #116	@ (adr r1, 80049d0 <scalbn+0xe0>)
 800495a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800495e:	a31a      	add	r3, pc, #104	@ (adr r3, 80049c8 <scalbn+0xd8>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fdf4 	bl	8000550 <__aeabi_dmul>
 8004968:	e7e6      	b.n	8004938 <scalbn+0x48>
 800496a:	1872      	adds	r2, r6, r1
 800496c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004970:	428a      	cmp	r2, r1
 8004972:	dcec      	bgt.n	800494e <scalbn+0x5e>
 8004974:	2a00      	cmp	r2, #0
 8004976:	dd08      	ble.n	800498a <scalbn+0x9a>
 8004978:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800497c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004980:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004984:	ec45 4b10 	vmov	d0, r4, r5
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800498e:	da08      	bge.n	80049a2 <scalbn+0xb2>
 8004990:	2d00      	cmp	r5, #0
 8004992:	a10b      	add	r1, pc, #44	@ (adr r1, 80049c0 <scalbn+0xd0>)
 8004994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004998:	dac1      	bge.n	800491e <scalbn+0x2e>
 800499a:	a10f      	add	r1, pc, #60	@ (adr r1, 80049d8 <scalbn+0xe8>)
 800499c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049a0:	e7bd      	b.n	800491e <scalbn+0x2e>
 80049a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80049a6:	3236      	adds	r2, #54	@ 0x36
 80049a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80049ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049b0:	4620      	mov	r0, r4
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <scalbn+0xf8>)
 80049b4:	4629      	mov	r1, r5
 80049b6:	2200      	movs	r2, #0
 80049b8:	e7d4      	b.n	8004964 <scalbn+0x74>
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	c2f8f359 	.word	0xc2f8f359
 80049c4:	01a56e1f 	.word	0x01a56e1f
 80049c8:	8800759c 	.word	0x8800759c
 80049cc:	7e37e43c 	.word	0x7e37e43c
 80049d0:	8800759c 	.word	0x8800759c
 80049d4:	fe37e43c 	.word	0xfe37e43c
 80049d8:	c2f8f359 	.word	0xc2f8f359
 80049dc:	81a56e1f 	.word	0x81a56e1f
 80049e0:	43500000 	.word	0x43500000
 80049e4:	ffff3cb0 	.word	0xffff3cb0
 80049e8:	3c900000 	.word	0x3c900000
 80049ec:	00000000 	.word	0x00000000

080049f0 <floor>:
 80049f0:	ec51 0b10 	vmov	r0, r1, d0
 80049f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004a00:	2e13      	cmp	r6, #19
 8004a02:	460c      	mov	r4, r1
 8004a04:	4605      	mov	r5, r0
 8004a06:	4680      	mov	r8, r0
 8004a08:	dc34      	bgt.n	8004a74 <floor+0x84>
 8004a0a:	2e00      	cmp	r6, #0
 8004a0c:	da17      	bge.n	8004a3e <floor+0x4e>
 8004a0e:	a332      	add	r3, pc, #200	@ (adr r3, 8004ad8 <floor+0xe8>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fbe6 	bl	80001e4 <__adddf3>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f7fc f828 	bl	8000a70 <__aeabi_dcmpgt>
 8004a20:	b150      	cbz	r0, 8004a38 <floor+0x48>
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	da55      	bge.n	8004ad2 <floor+0xe2>
 8004a26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004a2a:	432c      	orrs	r4, r5
 8004a2c:	2500      	movs	r5, #0
 8004a2e:	42ac      	cmp	r4, r5
 8004a30:	4c2b      	ldr	r4, [pc, #172]	@ (8004ae0 <floor+0xf0>)
 8004a32:	bf08      	it	eq
 8004a34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	e023      	b.n	8004a86 <floor+0x96>
 8004a3e:	4f29      	ldr	r7, [pc, #164]	@ (8004ae4 <floor+0xf4>)
 8004a40:	4137      	asrs	r7, r6
 8004a42:	ea01 0307 	and.w	r3, r1, r7
 8004a46:	4303      	orrs	r3, r0
 8004a48:	d01d      	beq.n	8004a86 <floor+0x96>
 8004a4a:	a323      	add	r3, pc, #140	@ (adr r3, 8004ad8 <floor+0xe8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fbc8 	bl	80001e4 <__adddf3>
 8004a54:	2200      	movs	r2, #0
 8004a56:	2300      	movs	r3, #0
 8004a58:	f7fc f80a 	bl	8000a70 <__aeabi_dcmpgt>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d0eb      	beq.n	8004a38 <floor+0x48>
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	bfbe      	ittt	lt
 8004a64:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004a68:	4133      	asrlt	r3, r6
 8004a6a:	18e4      	addlt	r4, r4, r3
 8004a6c:	ea24 0407 	bic.w	r4, r4, r7
 8004a70:	2500      	movs	r5, #0
 8004a72:	e7e1      	b.n	8004a38 <floor+0x48>
 8004a74:	2e33      	cmp	r6, #51	@ 0x33
 8004a76:	dd0a      	ble.n	8004a8e <floor+0x9e>
 8004a78:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004a7c:	d103      	bne.n	8004a86 <floor+0x96>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	f7fb fbaf 	bl	80001e4 <__adddf3>
 8004a86:	ec41 0b10 	vmov	d0, r0, r1
 8004a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004a92:	f04f 37ff 	mov.w	r7, #4294967295
 8004a96:	40df      	lsrs	r7, r3
 8004a98:	4207      	tst	r7, r0
 8004a9a:	d0f4      	beq.n	8004a86 <floor+0x96>
 8004a9c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004ad8 <floor+0xe8>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fb9f 	bl	80001e4 <__adddf3>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f7fb ffe1 	bl	8000a70 <__aeabi_dcmpgt>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d0c2      	beq.n	8004a38 <floor+0x48>
 8004ab2:	2c00      	cmp	r4, #0
 8004ab4:	da0a      	bge.n	8004acc <floor+0xdc>
 8004ab6:	2e14      	cmp	r6, #20
 8004ab8:	d101      	bne.n	8004abe <floor+0xce>
 8004aba:	3401      	adds	r4, #1
 8004abc:	e006      	b.n	8004acc <floor+0xdc>
 8004abe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	40b3      	lsls	r3, r6
 8004ac6:	441d      	add	r5, r3
 8004ac8:	4545      	cmp	r5, r8
 8004aca:	d3f6      	bcc.n	8004aba <floor+0xca>
 8004acc:	ea25 0507 	bic.w	r5, r5, r7
 8004ad0:	e7b2      	b.n	8004a38 <floor+0x48>
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	462c      	mov	r4, r5
 8004ad6:	e7af      	b.n	8004a38 <floor+0x48>
 8004ad8:	8800759c 	.word	0x8800759c
 8004adc:	7e37e43c 	.word	0x7e37e43c
 8004ae0:	bff00000 	.word	0xbff00000
 8004ae4:	000fffff 	.word	0x000fffff

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
