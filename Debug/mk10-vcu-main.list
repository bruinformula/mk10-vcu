
mk10-vcu-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ac  080046ac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b4  080046b4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b4  080046b4  000056b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046b8  080046b8  000056b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  080046c8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080046c8  000061ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ee1  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b7  00000000  00000000  00016f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  000194d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccd  00000000  00000000  0001a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183f4  00000000  00000000  0001b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012869  00000000  00000000  000335f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf41  00000000  00000000  00045e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004568  00000000  00000000  000e1de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e6348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004674 	.word	0x08004674

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004674 	.word	0x08004674

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  MCP2515_Reset();
 80004ca:	f000 f9f5 	bl	80008b8 <MCP2515_Reset>
  HAL_Delay(10);
 80004ce:	200a      	movs	r0, #10
 80004d0:	f001 f842 	bl	8001558 <HAL_Delay>
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004d4:	2300      	movs	r3, #0
 80004d6:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004d8:	2300      	movs	r3, #0
 80004da:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004dc:	2300      	movs	r3, #0
 80004de:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80004e4:	2300      	movs	r3, #0
 80004e6:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004e8:	2300      	movs	r3, #0
 80004ea:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004ec:	2300      	movs	r3, #0
 80004ee:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80004f4:	2300      	movs	r3, #0
 80004f6:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004f8:	2300      	movs	r3, #0
 80004fa:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80004fc:	2300      	movs	r3, #0
 80004fe:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000504:	2300      	movs	r3, #0
 8000506:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000508:	2308      	movs	r3, #8
 800050a:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800050c:	2300      	movs	r3, #0
 800050e:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000510:	2300      	movs	r3, #0
 8000512:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000518:	2300      	movs	r3, #0
 800051a:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000520:	2300      	movs	r3, #0
 8000522:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000524:	2300      	movs	r3, #0
 8000526:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000544:	2300      	movs	r3, #0
 8000546:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000548:	2308      	movs	r3, #8
 800054a:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000554:	f000 f946 	bl	80007e4 <MCP2515_Initialize>
 8000558:	4603      	mov	r3, r0
 800055a:	f083 0301 	eor.w	r3, r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <CANSPI_Initialize+0xa4>
  {
    return false;
 8000564:	2300      	movs	r3, #0
 8000566:	e05e      	b.n	8000626 <CANSPI_Initialize+0x162>
  }
    


  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000568:	f000 f95e 	bl	8000828 <MCP2515_SetConfigMode>
 800056c:	4603      	mov	r3, r0
 800056e:	f083 0301 	eor.w	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <CANSPI_Initialize+0xb8>
  {
    return false;
 8000578:	2300      	movs	r3, #0
 800057a:	e054      	b.n	8000626 <CANSPI_Initialize+0x162>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	461a      	mov	r2, r3
 8000580:	2123      	movs	r1, #35	@ 0x23
 8000582:	2020      	movs	r0, #32
 8000584:	f000 f9f8 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000588:	463b      	mov	r3, r7
 800058a:	461a      	mov	r2, r3
 800058c:	2127      	movs	r1, #39	@ 0x27
 800058e:	2024      	movs	r0, #36	@ 0x24
 8000590:	f000 f9f2 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	461a      	mov	r2, r3
 800059a:	2103      	movs	r1, #3
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f9eb 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	461a      	mov	r2, r3
 80005a8:	2107      	movs	r1, #7
 80005aa:	2004      	movs	r0, #4
 80005ac:	f000 f9e4 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	461a      	mov	r2, r3
 80005b6:	210b      	movs	r1, #11
 80005b8:	2008      	movs	r0, #8
 80005ba:	f000 f9dd 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	461a      	mov	r2, r3
 80005c4:	2113      	movs	r1, #19
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 f9d6 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	461a      	mov	r2, r3
 80005d2:	2117      	movs	r1, #23
 80005d4:	2014      	movs	r0, #20
 80005d6:	f000 f9cf 	bl	8000978 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	461a      	mov	r2, r3
 80005e0:	211b      	movs	r1, #27
 80005e2:	2018      	movs	r0, #24
 80005e4:	f000 f9c8 	bl	8000978 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005e8:	2104      	movs	r1, #4
 80005ea:	2060      	movs	r0, #96	@ 0x60
 80005ec:	f000 f99e 	bl	800092c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005f0:	2101      	movs	r1, #1
 80005f2:	2070      	movs	r0, #112	@ 0x70
 80005f4:	f000 f99a 	bl	800092c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80005f8:	2100      	movs	r1, #0
 80005fa:	202a      	movs	r0, #42	@ 0x2a
 80005fc:	f000 f996 	bl	800092c <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */   //used to be 0xE5
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000600:	21e5      	movs	r1, #229	@ 0xe5
 8000602:	2029      	movs	r0, #41	@ 0x29
 8000604:	f000 f992 	bl	800092c <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000608:	2183      	movs	r1, #131	@ 0x83
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f000 f98e 	bl	800092c <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000610:	f000 f92f 	bl	8000872 <MCP2515_SetNormalMode>
 8000614:	4603      	mov	r3, r0
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <CANSPI_Initialize+0x160>
    return false;
 8000620:	2300      	movs	r3, #0
 8000622:	e000      	b.n	8000626 <CANSPI_Initialize+0x162>
  
  return true;
 8000624:	2301      	movs	r3, #1
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 800063c:	4b3c      	ldr	r3, [pc, #240]	@ (8000730 <CANSPI_Transmit+0x100>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000642:	4b3b      	ldr	r3, [pc, #236]	@ (8000730 <CANSPI_Transmit+0x100>)
 8000644:	2200      	movs	r2, #0
 8000646:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000648:	4b39      	ldr	r3, [pc, #228]	@ (8000730 <CANSPI_Transmit+0x100>)
 800064a:	2200      	movs	r2, #0
 800064c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800064e:	4b38      	ldr	r3, [pc, #224]	@ (8000730 <CANSPI_Transmit+0x100>)
 8000650:	2200      	movs	r2, #0
 8000652:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000654:	f000 fa06 	bl	8000a64 <MCP2515_ReadStatus>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <CANSPI_Transmit+0x104>)
 800065e:	701a      	strb	r2, [r3, #0]
  uint8_t dingus = ctrlStatus.ctrl_status; //for use w stm32 debugger lol
 8000660:	4b34      	ldr	r3, [pc, #208]	@ (8000734 <CANSPI_Transmit+0x104>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	73bb      	strb	r3, [r7, #14]
  uint8_t dingus2 = MCP2515_ReadByte(MCP2515_CANCTRL);
 8000666:	200f      	movs	r0, #15
 8000668:	f000 f93c 	bl	80008e4 <MCP2515_ReadByte>
 800066c:	4603      	mov	r3, r0
 800066e:	737b      	strb	r3, [r7, #13]
  uint8_t efl = MCP2515_ReadByte(MCP2515_EFLG);
 8000670:	202d      	movs	r0, #45	@ 0x2d
 8000672:	f000 f937 	bl	80008e4 <MCP2515_ReadByte>
 8000676:	4603      	mov	r3, r0
 8000678:	733b      	strb	r3, [r7, #12]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 800067a:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <CANSPI_Transmit+0x104>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d115      	bne.n	80006b4 <CANSPI_Transmit+0x84>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6858      	ldr	r0, [r3, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4a27      	ldr	r2, [pc, #156]	@ (8000730 <CANSPI_Transmit+0x100>)
 8000692:	4619      	mov	r1, r3
 8000694:	f000 f850 	bl	8000738 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7a1a      	ldrb	r2, [r3, #8]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3309      	adds	r3, #9
 80006a0:	4923      	ldr	r1, [pc, #140]	@ (8000730 <CANSPI_Transmit+0x100>)
 80006a2:	2040      	movs	r0, #64	@ 0x40
 80006a4:	f000 f994 	bl	80009d0 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006a8:	2081      	movs	r0, #129	@ 0x81
 80006aa:	f000 f9bf 	bl	8000a2c <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e038      	b.n	8000726 <CANSPI_Transmit+0xf6>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <CANSPI_Transmit+0x104>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d115      	bne.n	80006ee <CANSPI_Transmit+0xbe>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6858      	ldr	r0, [r3, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4a19      	ldr	r2, [pc, #100]	@ (8000730 <CANSPI_Transmit+0x100>)
 80006cc:	4619      	mov	r1, r3
 80006ce:	f000 f833 	bl	8000738 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a1a      	ldrb	r2, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3309      	adds	r3, #9
 80006da:	4915      	ldr	r1, [pc, #84]	@ (8000730 <CANSPI_Transmit+0x100>)
 80006dc:	2042      	movs	r0, #66	@ 0x42
 80006de:	f000 f977 	bl	80009d0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006e2:	2082      	movs	r0, #130	@ 0x82
 80006e4:	f000 f9a2 	bl	8000a2c <MCP2515_RequestToSend>
    
    returnValue = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e01b      	b.n	8000726 <CANSPI_Transmit+0xf6>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <CANSPI_Transmit+0x104>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d114      	bne.n	8000726 <CANSPI_Transmit+0xf6>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6858      	ldr	r0, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <CANSPI_Transmit+0x100>)
 8000706:	4619      	mov	r1, r3
 8000708:	f000 f816 	bl	8000738 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7a1a      	ldrb	r2, [r3, #8]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3309      	adds	r3, #9
 8000714:	4906      	ldr	r1, [pc, #24]	@ (8000730 <CANSPI_Transmit+0x100>)
 8000716:	2044      	movs	r0, #68	@ 0x44
 8000718:	f000 f95a 	bl	80009d0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800071c:	2084      	movs	r0, #132	@ 0x84
 800071e:	f000 f985 	bl	8000a2c <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000002c 	.word	0x2000002c
 8000734:	20000028 	.word	0x20000028

08000738 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	460b      	mov	r3, r1
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d12e      	bne.n	80007ae <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f023 031f 	bic.w	r3, r3, #31
 8000784:	b2da      	uxtb	r2, r3
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	4413      	add	r3, r2
 800078a:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	3308      	adds	r3, #8
 8000790:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	f023 0314 	bic.w	r3, r3, #20
 8000798:	b2da      	uxtb	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80007ac:	e013      	b.n	80007d6 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	015b      	lsls	r3, r3, #5
 80007be:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	0a1b      	lsrs	r3, r3, #8
 80007cc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80007ea:	2201      	movs	r2, #1
 80007ec:	2102      	movs	r1, #2
 80007ee:	480c      	ldr	r0, [pc, #48]	@ (8000820 <MCP2515_Initialize+0x3c>)
 80007f0:	f001 feb8 	bl	8002564 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80007f4:	230a      	movs	r3, #10
 80007f6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80007f8:	480a      	ldr	r0, [pc, #40]	@ (8000824 <MCP2515_Initialize+0x40>)
 80007fa:	f002 fff4 	bl	80037e6 <HAL_SPI_GetState>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d101      	bne.n	8000808 <MCP2515_Initialize+0x24>
      return true;
 8000804:	2301      	movs	r3, #1
 8000806:	e006      	b.n	8000816 <MCP2515_Initialize+0x32>
    
    loop--;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	3b01      	subs	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f1      	bne.n	80007f8 <MCP2515_Initialize+0x14>
      
  return false;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40020800 	.word	0x40020800
 8000824:	200000d8 	.word	0x200000d8

08000828 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	200f      	movs	r0, #15
 8000832:	f000 f87b 	bl	800092c <MCP2515_WriteByte>
  HAL_Delay(100);
 8000836:	2064      	movs	r0, #100	@ 0x64
 8000838:	f000 fe8e 	bl	8001558 <HAL_Delay>
  uint8_t loop = 10;
 800083c:	230a      	movs	r3, #10
 800083e:	71fb      	strb	r3, [r7, #7]
  do {
  do {    
    /* confirm mode configuration */

	uint8_t canstat = MCP2515_ReadByte(MCP2515_CANSTAT);
 8000840:	200e      	movs	r0, #14
 8000842:	f000 f84f 	bl	80008e4 <MCP2515_ReadByte>
 8000846:	4603      	mov	r3, r0
 8000848:	71bb      	strb	r3, [r7, #6]
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800084a:	200e      	movs	r0, #14
 800084c:	f000 f84a 	bl	80008e4 <MCP2515_ReadByte>
 8000850:	4603      	mov	r3, r0
 8000852:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000856:	2b80      	cmp	r3, #128	@ 0x80
 8000858:	d101      	bne.n	800085e <MCP2515_SetConfigMode+0x36>
      return true;
 800085a:	2301      	movs	r3, #1
 800085c:	e005      	b.n	800086a <MCP2515_SetConfigMode+0x42>

//    MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
    loop--;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	3b01      	subs	r3, #1
 8000862:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	e7ea      	b.n	8000840 <MCP2515_SetConfigMode+0x18>
  } while(1);
  
  return false;
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000878:	2100      	movs	r1, #0
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f856 	bl	800092c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000880:	230a      	movs	r3, #10
 8000882:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000884:	200e      	movs	r0, #14
 8000886:	f000 f82d 	bl	80008e4 <MCP2515_ReadByte>
 800088a:	4603      	mov	r3, r0
 800088c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <MCP2515_SetNormalMode+0x26>
      return true;
 8000894:	2301      	movs	r3, #1
 8000896:	e00a      	b.n	80008ae <MCP2515_SetNormalMode+0x3c>
    
    MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000898:	2100      	movs	r1, #0
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f846 	bl	800092c <MCP2515_WriteByte>
    loop--;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1eb      	bne.n	8000884 <MCP2515_SetNormalMode+0x12>
  
  return false;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{    
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 80008bc:	2200      	movs	r2, #0
 80008be:	2102      	movs	r1, #2
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <MCP2515_Reset+0x28>)
 80008c2:	f001 fe4f 	bl	8002564 <HAL_GPIO_WritePin>
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fe46 	bl	8001558 <HAL_Delay>
      
  SPI_Tx(MCP2515_RESET);
 80008cc:	20c0      	movs	r0, #192	@ 0xc0
 80008ce:	f000 f8e9 	bl	8000aa4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80008d2:	2201      	movs	r2, #1
 80008d4:	2102      	movs	r1, #2
 80008d6:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <MCP2515_Reset+0x28>)
 80008d8:	f001 fe44 	bl	8002564 <HAL_GPIO_WritePin>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40020800 	.word	0x40020800

080008e4 <MCP2515_ReadByte>:

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MCP2515_ReadByte+0x44>)
 80008f4:	f001 fe36 	bl	8002564 <HAL_GPIO_WritePin>
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fe2d 	bl	8001558 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ);
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 f8d0 	bl	8000aa4 <SPI_Tx>
  SPI_Tx(address);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f8cc 	bl	8000aa4 <SPI_Tx>
  retVal = SPI_Rx();
 800090c:	f000 f8f0 	bl	8000af0 <SPI_Rx>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8000914:	2201      	movs	r2, #1
 8000916:	2102      	movs	r1, #2
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MCP2515_ReadByte+0x44>)
 800091a:	f001 fe23 	bl	8002564 <HAL_GPIO_WritePin>
  
  return retVal;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40020800 	.word	0x40020800

0800092c <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <MCP2515_WriteByte+0x48>)
 8000942:	f001 fe0f 	bl	8002564 <HAL_GPIO_WritePin>
 8000946:	2001      	movs	r0, #1
 8000948:	f000 fe06 	bl	8001558 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 800094c:	2002      	movs	r0, #2
 800094e:	f000 f8a9 	bl	8000aa4 <SPI_Tx>
  SPI_Tx(address);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f8a5 	bl	8000aa4 <SPI_Tx>
  SPI_Tx(data);  
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f8a1 	bl	8000aa4 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	4803      	ldr	r0, [pc, #12]	@ (8000974 <MCP2515_WriteByte+0x48>)
 8000968:	f001 fdfc 	bl	8002564 <HAL_GPIO_WritePin>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40020800 	.word	0x40020800

08000978 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	603a      	str	r2, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	460b      	mov	r3, r1
 8000986:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	480f      	ldr	r0, [pc, #60]	@ (80009cc <MCP2515_WriteByteSequence+0x54>)
 800098e:	f001 fde9 	bl	8002564 <HAL_GPIO_WritePin>
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fde0 	bl	8001558 <HAL_Delay>
  
  SPI_Tx(MCP2515_WRITE);
 8000998:	2002      	movs	r0, #2
 800099a:	f000 f883 	bl	8000aa4 <SPI_Tx>
  SPI_Tx(startAddress);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f87f 	bl	8000aa4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f000 f887 	bl	8000ac8 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80009ba:	2201      	movs	r2, #1
 80009bc:	2102      	movs	r1, #2
 80009be:	4803      	ldr	r0, [pc, #12]	@ (80009cc <MCP2515_WriteByteSequence+0x54>)
 80009c0:	f001 fdd0 	bl	8002564 <HAL_GPIO_WritePin>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40020800 	.word	0x40020800

080009d0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	4613      	mov	r3, r2
 80009e0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80009e2:	2200      	movs	r2, #0
 80009e4:	2102      	movs	r1, #2
 80009e6:	4810      	ldr	r0, [pc, #64]	@ (8000a28 <MCP2515_LoadTxSequence+0x58>)
 80009e8:	f001 fdbc 	bl	8002564 <HAL_GPIO_WritePin>
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 fdb3 	bl	8001558 <HAL_Delay>
  
  SPI_Tx(instruction);
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f855 	bl	8000aa4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80009fa:	2104      	movs	r1, #4
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f000 f863 	bl	8000ac8 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f84d 	bl	8000aa4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f85a 	bl	8000ac8 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8000a14:	2201      	movs	r2, #1
 8000a16:	2102      	movs	r1, #2
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <MCP2515_LoadTxSequence+0x58>)
 8000a1a:	f001 fda3 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40020800 	.word	0x40020800

08000a2c <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <MCP2515_RequestToSend+0x34>)
 8000a3c:	f001 fd92 	bl	8002564 <HAL_GPIO_WritePin>
 8000a40:	2001      	movs	r0, #1
 8000a42:	f000 fd89 	bl	8001558 <HAL_Delay>
  
  SPI_Tx(instruction);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f82b 	bl	8000aa4 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <MCP2515_RequestToSend+0x34>)
 8000a54:	f001 fd86 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020800 	.word	0x40020800

08000a64 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <MCP2515_ReadStatus+0x3c>)
 8000a70:	f001 fd78 	bl	8002564 <HAL_GPIO_WritePin>
 8000a74:	2001      	movs	r0, #1
 8000a76:	f000 fd6f 	bl	8001558 <HAL_Delay>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000a7a:	20a0      	movs	r0, #160	@ 0xa0
 8000a7c:	f000 f812 	bl	8000aa4 <SPI_Tx>
  retVal = SPI_Rx();
 8000a80:	f000 f836 	bl	8000af0 <SPI_Rx>
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  uint8_t dingus = retVal;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	71bb      	strb	r3, [r7, #6]
        
  MCP2515_CS_HIGH();
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <MCP2515_ReadStatus+0x3c>)
 8000a92:	f001 fd67 	bl	8002564 <HAL_GPIO_WritePin>
  
  return retVal;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000aae:	1df9      	adds	r1, r7, #7
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <SPI_Tx+0x20>)
 8000ab6:	f002 fa90 	bl	8002fda <HAL_SPI_Transmit>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000d8 	.word	0x200000d8

08000ac8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	230a      	movs	r3, #10
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <SPI_TxBuffer+0x24>)
 8000ade:	f002 fa7c 	bl	8002fda <HAL_SPI_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000d8 	.word	0x200000d8

08000af0 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000af6:	1df9      	adds	r1, r7, #7
 8000af8:	230a      	movs	r3, #10
 8000afa:	2201      	movs	r2, #1
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <SPI_Rx+0x1c>)
 8000afe:	f002 fbb0 	bl	8003262 <HAL_SPI_Receive>
  return retVal;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000d8 	.word	0x200000d8

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b14:	f000 fcae 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b18:	f000 f86c 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1c:	f000 fa12 	bl	8000f44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b20:	f000 f9f0 	bl	8000f04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b24:	f000 f9c4 	bl	8000eb0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b28:	f000 f8ce 	bl	8000cc8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b2c:	f000 f972 	bl	8000e14 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000b30:	f000 f93a 	bl	8000da8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8000b34:	482c      	ldr	r0, [pc, #176]	@ (8000be8 <main+0xd8>)
 8000b36:	f002 fff7 	bl	8003b28 <HAL_TIM_Base_Start>

  /* initalized to be 500kbps, see canspi.c line 131-133 for details */
  if (CANSPI_Initialize() != true)
 8000b3a:	f7ff fcc3 	bl	80004c4 <CANSPI_Initialize>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <main+0x3e>
  {
	  Error_Handler();
 8000b4a:	f000 faab 	bl	80010a4 <Error_Handler>
  }


  diagnostics.inverterActive = 0;
 8000b4e:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <main+0xdc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000b54:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <main+0xe0>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
	  txMessage.frame.id = 0x0A;
 8000b5a:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <main+0xe0>)
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	605a      	str	r2, [r3, #4]
	  txMessage.frame.dlc = 8;
 8000b60:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <main+0xe0>)
 8000b62:	2208      	movs	r2, #8
 8000b64:	721a      	strb	r2, [r3, #8]
	  txMessage.frame.data0 = 0;
 8000b66:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <main+0xe0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	725a      	strb	r2, [r3, #9]
	  txMessage.frame.data1 = 1;
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <main+0xe0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	729a      	strb	r2, [r3, #10]
	  txMessage.frame.data2 = 2;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <main+0xe0>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	72da      	strb	r2, [r3, #11]
	  txMessage.frame.data3 = 3;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <main+0xe0>)
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	731a      	strb	r2, [r3, #12]
	  txMessage.frame.data4 = 4;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <main+0xe0>)
 8000b80:	2204      	movs	r2, #4
 8000b82:	735a      	strb	r2, [r3, #13]
	  txMessage.frame.data5 = 5;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <main+0xe0>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	739a      	strb	r2, [r3, #14]
	  txMessage.frame.data6 = 6;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <main+0xe0>)
 8000b8c:	2206      	movs	r2, #6
 8000b8e:	73da      	strb	r2, [r3, #15]
	  txMessage.frame.data7 = 7;
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <main+0xe0>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	741a      	strb	r2, [r3, #16]
	  CANSPI_Transmit(&txMessage);
 8000b96:	4816      	ldr	r0, [pc, #88]	@ (8000bf0 <main+0xe0>)
 8000b98:	f7ff fd4a 	bl	8000630 <CANSPI_Transmit>
    /* USER CODE BEGIN 3 */

  while (1)
  {
	  /* USER CODE BEGIN WHILE */
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <main+0xe0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
	  txMessage.frame.id = 0x0A;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <main+0xe0>)
 8000ba4:	220a      	movs	r2, #10
 8000ba6:	605a      	str	r2, [r3, #4]
	  txMessage.frame.dlc = 8;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <main+0xe0>)
 8000baa:	2208      	movs	r2, #8
 8000bac:	721a      	strb	r2, [r3, #8]
	  txMessage.frame.data0 = 0;
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <main+0xe0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	725a      	strb	r2, [r3, #9]
	  txMessage.frame.data1 = 1;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <main+0xe0>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	729a      	strb	r2, [r3, #10]
	  txMessage.frame.data2 = 2;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <main+0xe0>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	72da      	strb	r2, [r3, #11]
	  txMessage.frame.data3 = 3;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <main+0xe0>)
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	731a      	strb	r2, [r3, #12]
	  txMessage.frame.data4 = 4;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <main+0xe0>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	735a      	strb	r2, [r3, #13]
	  txMessage.frame.data5 = 5;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <main+0xe0>)
 8000bce:	2205      	movs	r2, #5
 8000bd0:	739a      	strb	r2, [r3, #14]
	  txMessage.frame.data6 = 6;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <main+0xe0>)
 8000bd4:	2206      	movs	r2, #6
 8000bd6:	73da      	strb	r2, [r3, #15]
	  txMessage.frame.data7 = 7;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <main+0xe0>)
 8000bda:	2207      	movs	r2, #7
 8000bdc:	741a      	strb	r2, [r3, #16]
	  CANSPI_Transmit(&txMessage);
 8000bde:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <main+0xe0>)
 8000be0:	f7ff fd26 	bl	8000630 <CANSPI_Transmit>
	  txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000be4:	bf00      	nop
 8000be6:	e7d9      	b.n	8000b9c <main+0x8c>
 8000be8:	20000130 	.word	0x20000130
 8000bec:	200001d4 	.word	0x200001d4
 8000bf0:	200001c0 	.word	0x200001c0

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	@ 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	2230      	movs	r2, #48	@ 0x30
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fd0a 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <SystemClock_Config+0xcc>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <SystemClock_Config+0xcc>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <SystemClock_Config+0xcc>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <SystemClock_Config+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <SystemClock_Config+0xd0>)
 8000c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <SystemClock_Config+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c64:	2300      	movs	r3, #0
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c6c:	2354      	movs	r3, #84	@ 0x54
 8000c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c74:	2307      	movs	r3, #7
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fc8b 	bl	8002598 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c88:	f000 fa0c 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 feed 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cb4:	f000 f9f6 	bl	80010a4 <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3750      	adds	r7, #80	@ 0x50
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cda:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000cdc:	4a31      	ldr	r2, [pc, #196]	@ (8000da4 <MX_ADC1_Init+0xdc>)
 8000cde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000ce2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ce6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d02:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2c:	481c      	ldr	r0, [pc, #112]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d2e:	f000 fc37 	bl	80015a0 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d38:	f000 f9b4 	bl	80010a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000d44:	2304      	movs	r3, #4
 8000d46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4814      	ldr	r0, [pc, #80]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d4e:	f000 fc6b 	bl	8001628 <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d58:	f000 f9a4 	bl	80010a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d60:	2303      	movs	r3, #3
 8000d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d6a:	f000 fc5d 	bl	8001628 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d74:	f000 f996 	bl	80010a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_ADC1_Init+0xd8>)
 8000d8a:	f000 fc4d 	bl	8001628 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000d94:	f000 f986 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000030 	.word	0x20000030
 8000da4:	40012000 	.word	0x40012000

08000da8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dae:	4a18      	ldr	r2, [pc, #96]	@ (8000e10 <MX_SPI3_Init+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000db4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000ddc:	2210      	movs	r2, #16
 8000dde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dec:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000df4:	220a      	movs	r2, #10
 8000df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_SPI3_Init+0x64>)
 8000dfa:	f002 f865 	bl	8002ec8 <HAL_SPI_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e04:	f000 f94e 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000d8 	.word	0x200000d8
 8000e10:	40003c00 	.word	0x40003c00

08000e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e32:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <MX_TIM3_Init+0x98>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e56:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e58:	f002 fe16 	bl	8003a88 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e62:	f000 f91f 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e74:	f002 feb2 	bl	8003bdc <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 f911 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e82:	2320      	movs	r3, #32
 8000e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000e86:	2380      	movs	r3, #128	@ 0x80
 8000e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_TIM3_Init+0x94>)
 8000e90:	f003 f892 	bl	8003fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e9a:	f000 f903 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000130 	.word	0x20000130
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <MX_USART2_UART_Init+0x50>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f003 f8d4 	bl	8004094 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef2:	f000 f8d7 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000178 	.word	0x20000178
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <MX_DMA_Init+0x3c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <MX_DMA_Init+0x3c>)
 8000f14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_DMA_Init+0x3c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2038      	movs	r0, #56	@ 0x38
 8000f2c:	f000 fe75 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f30:	2038      	movs	r0, #56	@ 0x38
 8000f32:	f000 fe8e 	bl	8001c52 <HAL_NVIC_EnableIRQ>

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a4c      	ldr	r2, [pc, #304]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b46      	ldr	r3, [pc, #280]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a45      	ldr	r2, [pc, #276]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b43      	ldr	r3, [pc, #268]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b3f      	ldr	r3, [pc, #252]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b38      	ldr	r3, [pc, #224]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a37      	ldr	r2, [pc, #220]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b35      	ldr	r3, [pc, #212]	@ (8001094 <MX_GPIO_Init+0x150>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CAN_CS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2106      	movs	r1, #6
 8000fce:	4832      	ldr	r0, [pc, #200]	@ (8001098 <MX_GPIO_Init+0x154>)
 8000fd0:	f001 fac8 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4830      	ldr	r0, [pc, #192]	@ (800109c <MX_GPIO_Init+0x158>)
 8000fda:	f001 fac3 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	482f      	ldr	r0, [pc, #188]	@ (80010a0 <MX_GPIO_Init+0x15c>)
 8000fe4:	f001 fabe 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4826      	ldr	r0, [pc, #152]	@ (8001098 <MX_GPIO_Init+0x154>)
 8001000:	f001 f92c 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	481f      	ldr	r0, [pc, #124]	@ (8001098 <MX_GPIO_Init+0x154>)
 800101c:	f001 f91e 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001020:	2304      	movs	r3, #4
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4818      	ldr	r0, [pc, #96]	@ (8001098 <MX_GPIO_Init+0x154>)
 8001038:	f001 f910 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800103c:	2320      	movs	r3, #32
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4812      	ldr	r0, [pc, #72]	@ (800109c <MX_GPIO_Init+0x158>)
 8001054:	f001 f902 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001058:	2310      	movs	r3, #16
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <MX_GPIO_Init+0x15c>)
 8001070:	f001 f8f4 	bl	800225c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001074:	2320      	movs	r3, #32
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	@ (80010a0 <MX_GPIO_Init+0x15c>)
 8001088:	f001 f8e8 	bl	800225c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	@ 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020800 	.word	0x40020800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ee:	2007      	movs	r0, #7
 80010f0:	f000 fd88 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a3b      	ldr	r2, [pc, #236]	@ (800120c <HAL_ADC_MspInit+0x10c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d170      	bne.n	8001204 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a39      	ldr	r2, [pc, #228]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a32      	ldr	r2, [pc, #200]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <HAL_ADC_MspInit+0x110>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001176:	2312      	movs	r3, #18
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4822      	ldr	r0, [pc, #136]	@ (8001214 <HAL_ADC_MspInit+0x114>)
 800118a:	f001 f867 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118e:	2301      	movs	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	481d      	ldr	r0, [pc, #116]	@ (8001218 <HAL_ADC_MspInit+0x118>)
 80011a2:	f001 f85b 	bl	800225c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_ADC_MspInit+0x120>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011ea:	f000 fd4d 	bl	8001c88 <HAL_DMA_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80011f4:	f7ff ff56 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 80011fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80011fe:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_ADC_MspInit+0x11c>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40012000 	.word	0x40012000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	20000078 	.word	0x20000078
 8001220:	40026410 	.word	0x40026410

08001224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_SPI_MspInit+0x84>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12c      	bne.n	80012a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001254:	6413      	str	r3, [r2, #64]	@ 0x40
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_SPI_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800127e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001290:	2306      	movs	r3, #6
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_SPI_MspInit+0x8c>)
 800129c:	f000 ffde 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40003c00 	.word	0x40003c00
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020800 	.word	0x40020800

080012b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_TIM_Base_MspInit+0x3c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10d      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_TIM_Base_MspInit+0x40>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_TIM_Base_MspInit+0x40>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <HAL_TIM_Base_MspInit+0x40>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40000400 	.word	0x40000400
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	@ (800137c <HAL_UART_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12b      	bne.n	8001372 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_UART_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_UART_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_UART_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001352:	230c      	movs	r3, #12
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001362:	2307      	movs	r3, #7
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <HAL_UART_MspInit+0x8c>)
 800136e:	f000 ff75 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40004400 	.word	0x40004400
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <NMI_Handler+0x4>

08001390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <MemManage_Handler+0x4>

080013a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <UsageFault_Handler+0x4>

080013b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013de:	f000 f89b 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <DMA2_Stream0_IRQHandler+0x10>)
 80013ee:	f000 fcf9 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000078 	.word	0x20000078

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001458 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001424:	f7ff ffea 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	@ (800146c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800144e:	f003 f8ed 	bl	800462c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fb5d 	bl	8000b10 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001464:	080046bc 	.word	0x080046bc
  ldr r2, =_sbss
 8001468:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800146c:	200001ec 	.word	0x200001ec

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 fbb1 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fe02 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fbc9 	bl	8001c6e <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 fb91 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	200001e8 	.word	0x200001e8

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200001e8 	.word	0x200001e8

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e033      	b.n	800161e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fd9e 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015e6:	f023 0302 	bic.w	r3, r3, #2
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f93a 	bl	800186c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
 800160e:	e001      	b.n	8001614 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1c>
 8001640:	2302      	movs	r3, #2
 8001642:	e105      	b.n	8001850 <HAL_ADC_ConfigChannel+0x228>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b09      	cmp	r3, #9
 8001652:	d925      	bls.n	80016a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68d9      	ldr	r1, [r3, #12]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	3b1e      	subs	r3, #30
 800166a:	2207      	movs	r2, #7
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43da      	mvns	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	400a      	ands	r2, r1
 8001678:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68d9      	ldr	r1, [r3, #12]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	4603      	mov	r3, r0
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4403      	add	r3, r0
 8001692:	3b1e      	subs	r3, #30
 8001694:	409a      	lsls	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	e022      	b.n	80016e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	2207      	movs	r2, #7
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	400a      	ands	r2, r1
 80016c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6919      	ldr	r1, [r3, #16]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4403      	add	r3, r0
 80016dc:	409a      	lsls	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d824      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b05      	subs	r3, #5
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b05      	subs	r3, #5
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	635a      	str	r2, [r3, #52]	@ 0x34
 8001736:	e04c      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d824      	bhi.n	800178a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b23      	subs	r3, #35	@ 0x23
 8001752:	221f      	movs	r2, #31
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43da      	mvns	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	400a      	ands	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b23      	subs	r3, #35	@ 0x23
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	631a      	str	r2, [r3, #48]	@ 0x30
 8001788:	e023      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b41      	subs	r3, #65	@ 0x41
 800179c:	221f      	movs	r2, #31
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b41      	subs	r3, #65	@ 0x41
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_ADC_ConfigChannel+0x234>)
 80017d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <HAL_ADC_ConfigChannel+0x238>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1cc>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b12      	cmp	r3, #18
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <HAL_ADC_ConfigChannel+0x238>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d123      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x21e>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d003      	beq.n	800180e <HAL_ADC_ConfigChannel+0x1e6>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b11      	cmp	r3, #17
 800180c:	d11b      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d111      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_ADC_ConfigChannel+0x23c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <HAL_ADC_ConfigChannel+0x240>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9a      	lsrs	r2, r3, #18
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001838:	e002      	b.n	8001840 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3b01      	subs	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40012300 	.word	0x40012300
 8001860:	40012000 	.word	0x40012000
 8001864:	20000000 	.word	0x20000000
 8001868:	431bde83 	.word	0x431bde83

0800186c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001874:	4b79      	ldr	r3, [pc, #484]	@ (8001a5c <ADC_Init+0x1f0>)
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	431a      	orrs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	021a      	lsls	r2, r3, #8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fe:	4a58      	ldr	r2, [pc, #352]	@ (8001a60 <ADC_Init+0x1f4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d022      	beq.n	800194a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6899      	ldr	r1, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	e00f      	b.n	800196a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001968:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0202 	bic.w	r2, r2, #2
 8001978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e1b      	ldrb	r3, [r3, #24]
 8001984:	005a      	lsls	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01b      	beq.n	80019d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	3b01      	subs	r3, #1
 80019c4:	035a      	lsls	r2, r3, #13
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e007      	b.n	80019e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	051a      	lsls	r2, r3, #20
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a22:	025a      	lsls	r2, r3, #9
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6899      	ldr	r1, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	029a      	lsls	r2, r3, #10
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40012300 	.word	0x40012300
 8001a60:	0f000001 	.word	0x0f000001

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	@ (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	@ (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff29 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff3e 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff31 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fc54 	bl	8001540 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e099      	b.n	8001dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc4:	e00f      	b.n	8001ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc6:	f7ff fc3b 	bl	8001540 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d908      	bls.n	8001ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e078      	b.n	8001dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e8      	bne.n	8001cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4b38      	ldr	r3, [pc, #224]	@ (8001de0 <HAL_DMA_Init+0x158>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d107      	bne.n	8001d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f023 0307 	bic.w	r3, r3, #7
 8001d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d117      	bne.n	8001daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f9e9 	bl	8002164 <DMA_CheckFifoParam>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2240      	movs	r2, #64	@ 0x40
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001da6:	2301      	movs	r3, #1
 8001da8:	e016      	b.n	8001dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9a0 	bl	80020f8 <DMA_CalcBaseAndBitshift>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc0:	223f      	movs	r2, #63	@ 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	f010803f 	.word	0xf010803f

08001de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df0:	4b8e      	ldr	r3, [pc, #568]	@ (800202c <HAL_DMA_IRQHandler+0x248>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a8e      	ldr	r2, [pc, #568]	@ (8002030 <HAL_DMA_IRQHandler+0x24c>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0e:	2208      	movs	r2, #8
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0204 	bic.w	r2, r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d012      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7e:	f043 0202 	orr.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb4:	f043 0204 	orr.w	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d043      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03c      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ede:	2210      	movs	r2, #16
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d018      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d024      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
 8001f12:	e01f      	b.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e016      	b.n	8001f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0208 	bic.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	2220      	movs	r2, #32
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 808f 	beq.w	8002084 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8087 	beq.w	8002084 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d136      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x1da>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	223f      	movs	r2, #63	@ 0x3f
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d07e      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
        }
        return;
 8001ffa:	e079      	b.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01d      	beq.n	8002046 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	2b00      	cmp	r3, #0
 800201e:	d031      	beq.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e02c      	b.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000
 8002030:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d023      	beq.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
 8002044:	e01e      	b.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10f      	bne.n	8002074 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0210 	bic.w	r2, r2, #16
 8002062:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	2b00      	cmp	r3, #0
 800208a:	d032      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d022      	beq.n	80020de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2205      	movs	r2, #5
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d307      	bcc.n	80020cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f2      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x2cc>
 80020ca:	e000      	b.n	80020ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020f0:	bf00      	nop
    }
  }
}
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3b10      	subs	r3, #16
 8002108:	4a14      	ldr	r2, [pc, #80]	@ (800215c <DMA_CalcBaseAndBitshift+0x64>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002112:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <DMA_CalcBaseAndBitshift+0x68>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d909      	bls.n	800213a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	1d1a      	adds	r2, r3, #4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	659a      	str	r2, [r3, #88]	@ 0x58
 8002138:	e007      	b.n	800214a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	aaaaaaab 	.word	0xaaaaaaab
 8002160:	080046a4 	.word	0x080046a4

08002164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11f      	bne.n	80021be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d856      	bhi.n	8002232 <DMA_CheckFifoParam+0xce>
 8002184:	a201      	add	r2, pc, #4	@ (adr r2, 800218c <DMA_CheckFifoParam+0x28>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021af 	.word	0x080021af
 8002194:	0800219d 	.word	0x0800219d
 8002198:	08002233 	.word	0x08002233
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d046      	beq.n	8002236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ac:	e043      	b.n	8002236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021b6:	d140      	bne.n	800223a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021bc:	e03d      	b.n	800223a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c6:	d121      	bne.n	800220c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d837      	bhi.n	800223e <DMA_CheckFifoParam+0xda>
 80021ce:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <DMA_CheckFifoParam+0x70>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021eb 	.word	0x080021eb
 80021dc:	080021e5 	.word	0x080021e5
 80021e0:	080021fd 	.word	0x080021fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      break;
 80021e8:	e030      	b.n	800224c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d025      	beq.n	8002242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fa:	e022      	b.n	8002242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002204:	d11f      	bne.n	8002246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800220a:	e01c      	b.n	8002246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d903      	bls.n	800221a <DMA_CheckFifoParam+0xb6>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d003      	beq.n	8002220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002218:	e018      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      break;
 800221e:	e015      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      break;
 8002230:	e00b      	b.n	800224a <DMA_CheckFifoParam+0xe6>
      break;
 8002232:	bf00      	nop
 8002234:	e00a      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e008      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e006      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e004      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e002      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;   
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
    }
  } 
  
  return status; 
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e159      	b.n	800252c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 8148 	bne.w	8002526 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d005      	beq.n	80022ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d130      	bne.n	8002310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 0201 	and.w	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d017      	beq.n	800234c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d123      	bne.n	80023a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	69b9      	ldr	r1, [r7, #24]
 800239c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a2 	beq.w	8002526 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b57      	ldr	r3, [pc, #348]	@ (8002544 <HAL_GPIO_Init+0x2e8>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	4a56      	ldr	r2, [pc, #344]	@ (8002544 <HAL_GPIO_Init+0x2e8>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f2:	4b54      	ldr	r3, [pc, #336]	@ (8002544 <HAL_GPIO_Init+0x2e8>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a52      	ldr	r2, [pc, #328]	@ (8002548 <HAL_GPIO_Init+0x2ec>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a49      	ldr	r2, [pc, #292]	@ (800254c <HAL_GPIO_Init+0x2f0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d019      	beq.n	800245e <HAL_GPIO_Init+0x202>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a48      	ldr	r2, [pc, #288]	@ (8002550 <HAL_GPIO_Init+0x2f4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0x1fe>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a47      	ldr	r2, [pc, #284]	@ (8002554 <HAL_GPIO_Init+0x2f8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00d      	beq.n	8002456 <HAL_GPIO_Init+0x1fa>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <HAL_GPIO_Init+0x2fc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0x1f6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a45      	ldr	r2, [pc, #276]	@ (800255c <HAL_GPIO_Init+0x300>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_GPIO_Init+0x1f2>
 800244a:	2304      	movs	r3, #4
 800244c:	e008      	b.n	8002460 <HAL_GPIO_Init+0x204>
 800244e:	2307      	movs	r3, #7
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x204>
 8002452:	2303      	movs	r3, #3
 8002454:	e004      	b.n	8002460 <HAL_GPIO_Init+0x204>
 8002456:	2302      	movs	r3, #2
 8002458:	e002      	b.n	8002460 <HAL_GPIO_Init+0x204>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_GPIO_Init+0x204>
 800245e:	2300      	movs	r3, #0
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f002 0203 	and.w	r2, r2, #3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4093      	lsls	r3, r2
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002470:	4935      	ldr	r1, [pc, #212]	@ (8002548 <HAL_GPIO_Init+0x2ec>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247e:	4b38      	ldr	r3, [pc, #224]	@ (8002560 <HAL_GPIO_Init+0x304>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <HAL_GPIO_Init+0x304>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002560 <HAL_GPIO_Init+0x304>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024cc:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <HAL_GPIO_Init+0x304>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024d2:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <HAL_GPIO_Init+0x304>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <HAL_GPIO_Init+0x304>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_GPIO_Init+0x304>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002520:	4a0f      	ldr	r2, [pc, #60]	@ (8002560 <HAL_GPIO_Init+0x304>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3301      	adds	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	f67f aea2 	bls.w	8002278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3724      	adds	r7, #36	@ 0x24
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	40013800 	.word	0x40013800
 800254c:	40020000 	.word	0x40020000
 8002550:	40020400 	.word	0x40020400
 8002554:	40020800 	.word	0x40020800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40021000 	.word	0x40021000
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e267      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d075      	beq.n	80026a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025b6:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d00c      	beq.n	80025dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b85      	ldr	r3, [pc, #532]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b82      	ldr	r3, [pc, #520]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4b7e      	ldr	r3, [pc, #504]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05b      	beq.n	80026a0 <HAL_RCC_OscConfig+0x108>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d157      	bne.n	80026a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e242      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x74>
 80025fe:	4b76      	ldr	r3, [pc, #472]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a75      	ldr	r2, [pc, #468]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e01d      	b.n	8002648 <HAL_RCC_OscConfig+0xb0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x98>
 8002616:	4b70      	ldr	r3, [pc, #448]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6f      	ldr	r2, [pc, #444]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b6d      	ldr	r3, [pc, #436]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6c      	ldr	r2, [pc, #432]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0xb0>
 8002630:	4b69      	ldr	r3, [pc, #420]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a68      	ldr	r2, [pc, #416]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b66      	ldr	r3, [pc, #408]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a65      	ldr	r2, [pc, #404]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe ff76 	bl	8001540 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe ff72 	bl	8001540 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e207      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b5b      	ldr	r3, [pc, #364]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0xc0>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe ff62 	bl	8001540 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe ff5e 	bl	8001540 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1f3      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b51      	ldr	r3, [pc, #324]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0xe8>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ae:	4b4a      	ldr	r3, [pc, #296]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b47      	ldr	r3, [pc, #284]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d11c      	bne.n	8002700 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b44      	ldr	r3, [pc, #272]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d116      	bne.n	8002700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	4b41      	ldr	r3, [pc, #260]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_RCC_OscConfig+0x152>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1c7      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b3b      	ldr	r3, [pc, #236]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4937      	ldr	r1, [pc, #220]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	e03a      	b.n	8002776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002708:	4b34      	ldr	r3, [pc, #208]	@ (80027dc <HAL_RCC_OscConfig+0x244>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe ff17 	bl	8001540 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe ff13 	bl	8001540 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1a8      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	4b2b      	ldr	r3, [pc, #172]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b28      	ldr	r3, [pc, #160]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4925      	ldr	r1, [pc, #148]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b24      	ldr	r3, [pc, #144]	@ (80027dc <HAL_RCC_OscConfig+0x244>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe fef6 	bl	8001540 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002758:	f7fe fef2 	bl	8001540 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e187      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d036      	beq.n	80027f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_RCC_OscConfig+0x248>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fed6 	bl	8001540 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe fed2 	bl	8001540 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e167      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCC_OscConfig+0x240>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x200>
 80027b6:	e01b      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b8:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <HAL_RCC_OscConfig+0x248>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe febf 	bl	8001540 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	e00e      	b.n	80027e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe febb 	bl	8001540 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d907      	bls.n	80027e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e150      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	42470000 	.word	0x42470000
 80027e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ea      	bne.n	80027c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8097 	beq.w	800292c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b81      	ldr	r3, [pc, #516]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	4a7c      	ldr	r2, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	@ 0x40
 800281e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b77      	ldr	r3, [pc, #476]	@ (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b74      	ldr	r3, [pc, #464]	@ (8002a0c <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a73      	ldr	r2, [pc, #460]	@ (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe fe7b 	bl	8001540 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7fe fe77 	bl	8001540 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e10c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	4b6a      	ldr	r3, [pc, #424]	@ (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x2ea>
 8002874:	4b64      	ldr	r3, [pc, #400]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a63      	ldr	r2, [pc, #396]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x30c>
 800288a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6713      	str	r3, [r2, #112]	@ 0x70
 8002896:	4b5c      	ldr	r3, [pc, #368]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
 80028a4:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a57      	ldr	r2, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	4b55      	ldr	r3, [pc, #340]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a54      	ldr	r2, [pc, #336]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fe3c 	bl	8001540 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe fe38 	bl	8001540 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0cb      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	4b49      	ldr	r3, [pc, #292]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ee      	beq.n	80028cc <HAL_RCC_OscConfig+0x334>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fe26 	bl	8001540 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fe22 	bl	8001540 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0b5      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4a38      	ldr	r2, [pc, #224]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a1 	beq.w	8002a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002936:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d05c      	beq.n	80029fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d141      	bne.n	80029ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <HAL_RCC_OscConfig+0x478>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fdf6 	bl	8001540 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fdf2 	bl	8001540 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e087      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	491b      	ldr	r1, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x478>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fdcb 	bl	8001540 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fdc7 	bl	8001540 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e05c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x416>
 80029cc:	e054      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fdb4 	bl	8001540 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fdb0 	bl	8001540 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e045      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x444>
 80029fa:	e03d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e038      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <HAL_RCC_OscConfig+0x4ec>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d028      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d121      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d11a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0cc      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b68      	ldr	r3, [pc, #416]	@ (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d90c      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b65      	ldr	r3, [pc, #404]	@ (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b8      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002adc:	4b59      	ldr	r3, [pc, #356]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a58      	ldr	r2, [pc, #352]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af4:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a52      	ldr	r2, [pc, #328]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b50      	ldr	r3, [pc, #320]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	494d      	ldr	r1, [pc, #308]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d044      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d119      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b3f      	ldr	r3, [pc, #252]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b3b      	ldr	r3, [pc, #236]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e067      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4934      	ldr	r1, [pc, #208]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fe fce2 	bl	8001540 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fcde 	bl	8001540 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e04f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d20c      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e032      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4916      	ldr	r1, [pc, #88]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	490e      	ldr	r1, [pc, #56]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c0e:	f000 f821 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490a      	ldr	r1, [pc, #40]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fc42 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00
 8002c44:	40023800 	.word	0x40023800
 8002c48:	0800468c 	.word	0x0800468c
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b094      	sub	sp, #80	@ 0x50
 8002c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6c:	4b79      	ldr	r3, [pc, #484]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d00d      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x40>
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	f200 80e1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x34>
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c86:	e0db      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b73      	ldr	r3, [pc, #460]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c8c:	e0db      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8e:	4b73      	ldr	r3, [pc, #460]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c92:	e0d8      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c94:	4b6f      	ldr	r3, [pc, #444]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b6a      	ldr	r3, [pc, #424]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	462b      	mov	r3, r5
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	0159      	lsls	r1, r3, #5
 8002cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd8:	0150      	lsls	r0, r2, #5
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4621      	mov	r1, r4
 8002ce0:	1a51      	subs	r1, r2, r1
 8002ce2:	6139      	str	r1, [r7, #16]
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	018b      	lsls	r3, r1, #6
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d02:	4651      	mov	r1, sl
 8002d04:	018a      	lsls	r2, r1, #6
 8002d06:	4651      	mov	r1, sl
 8002d08:	ebb2 0801 	subs.w	r8, r2, r1
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d26:	4690      	mov	r8, r2
 8002d28:	4699      	mov	r9, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	eb18 0303 	adds.w	r3, r8, r3
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	462b      	mov	r3, r5
 8002d34:	eb49 0303 	adc.w	r3, r9, r3
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d46:	4629      	mov	r1, r5
 8002d48:	024b      	lsls	r3, r1, #9
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d50:	4621      	mov	r1, r4
 8002d52:	024a      	lsls	r2, r1, #9
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d64:	f7fd fa36 	bl	80001d4 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d70:	e058      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0159      	lsls	r1, r3, #5
 8002d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9e:	0150      	lsls	r0, r2, #5
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4641      	mov	r1, r8
 8002da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002daa:	4649      	mov	r1, r9
 8002dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	00eb      	lsls	r3, r5, #3
 8002dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dda:	00e2      	lsls	r2, r4, #3
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	18e3      	adds	r3, r4, r3
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	464b      	mov	r3, r9
 8002de8:	eb45 0303 	adc.w	r3, r5, r3
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	61fa      	str	r2, [r7, #28]
 8002e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e18:	f7fd f9dc 	bl	80001d4 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3750      	adds	r7, #80	@ 0x50
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	007a1200 	.word	0x007a1200

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	0800469c 	.word	0x0800469c

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffdc 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0b5b      	lsrs	r3, r3, #13
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	0800469c 	.word	0x0800469c

08002ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e07b      	b.n	8002fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eea:	d009      	beq.n	8002f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
 8002ef2:	e005      	b.n	8002f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe f982 	bl	8001224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f84:	ea42 0103 	orr.w	r1, r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	f003 0104 	and.w	r1, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	f003 0210 	and.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b088      	sub	sp, #32
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fea:	f7fe faa9 	bl	8001540 <HAL_GetTick>
 8002fee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
 8003002:	e12a      	b.n	800325a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_Transmit+0x36>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e122      	b.n	800325a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_SPI_Transmit+0x48>
 800301e:	2302      	movs	r3, #2
 8003020:	e11b      	b.n	800325a <HAL_SPI_Transmit+0x280>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2203      	movs	r2, #3
 800302e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003070:	d10f      	bne.n	8003092 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003080:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309c:	2b40      	cmp	r3, #64	@ 0x40
 800309e:	d007      	beq.n	80030b0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030b8:	d152      	bne.n	8003160 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_Transmit+0xee>
 80030c2:	8b7b      	ldrh	r3, [r7, #26]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d145      	bne.n	8003154 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ec:	e032      	b.n	8003154 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d112      	bne.n	8003122 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003120:	e018      	b.n	8003154 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003122:	f7fe fa0d 	bl	8001540 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d803      	bhi.n	800313a <HAL_SPI_Transmit+0x160>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d102      	bne.n	8003140 <HAL_SPI_Transmit+0x166>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e082      	b.n	800325a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1c7      	bne.n	80030ee <HAL_SPI_Transmit+0x114>
 800315e:	e053      	b.n	8003208 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_SPI_Transmit+0x194>
 8003168:	8b7b      	ldrh	r3, [r7, #26]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d147      	bne.n	80031fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003194:	e033      	b.n	80031fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d113      	bne.n	80031cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031ca:	e018      	b.n	80031fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031cc:	f7fe f9b8 	bl	8001540 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d803      	bhi.n	80031e4 <HAL_SPI_Transmit+0x20a>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_Transmit+0x210>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e02d      	b.n	800325a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1c6      	bne.n	8003196 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	6839      	ldr	r1, [r7, #0]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fbe7 	bl	80039e0 <SPI_EndRxTxTransaction>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003258:	2300      	movs	r3, #0
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b088      	sub	sp, #32
 8003266:	af02      	add	r7, sp, #8
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	e104      	b.n	800348c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328a:	d112      	bne.n	80032b2 <HAL_SPI_Receive+0x50>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10e      	bne.n	80032b2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2204      	movs	r2, #4
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f8f3 	bl	8003494 <HAL_SPI_TransmitReceive>
 80032ae:	4603      	mov	r3, r0
 80032b0:	e0ec      	b.n	800348c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032b2:	f7fe f945 	bl	8001540 <HAL_GetTick>
 80032b6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Receive+0x62>
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0e1      	b.n	800348c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_SPI_Receive+0x74>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0da      	b.n	800348c <HAL_SPI_Receive+0x22a>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2204      	movs	r2, #4
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003324:	d10f      	bne.n	8003346 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003350:	2b40      	cmp	r3, #64	@ 0x40
 8003352:	d007      	beq.n	8003364 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d170      	bne.n	800344e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800336c:	e035      	b.n	80033da <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d115      	bne.n	80033a8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f103 020c 	add.w	r2, r3, #12
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033a6:	e018      	b.n	80033da <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a8:	f7fe f8ca 	bl	8001540 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d803      	bhi.n	80033c0 <HAL_SPI_Receive+0x15e>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d102      	bne.n	80033c6 <HAL_SPI_Receive+0x164>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e058      	b.n	800348c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1c4      	bne.n	800336e <HAL_SPI_Receive+0x10c>
 80033e4:	e038      	b.n	8003458 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d113      	bne.n	800341c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	b292      	uxth	r2, r2
 8003400:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	1c9a      	adds	r2, r3, #2
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800341a:	e018      	b.n	800344e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800341c:	f7fe f890 	bl	8001540 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d803      	bhi.n	8003434 <HAL_SPI_Receive+0x1d2>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d102      	bne.n	800343a <HAL_SPI_Receive+0x1d8>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e01e      	b.n	800348c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1c6      	bne.n	80033e6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fa59 	bl	8003914 <SPI_EndRxTransaction>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800348a:	2300      	movs	r3, #0
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	@ 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034a2:	2301      	movs	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a6:	f7fe f84b 	bl	8001540 <HAL_GetTick>
 80034aa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d00c      	beq.n	80034de <HAL_SPI_TransmitReceive+0x4a>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d106      	bne.n	80034da <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_SPI_TransmitReceive+0x46>
 80034d4:	7ffb      	ldrb	r3, [r7, #31]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d001      	beq.n	80034de <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	e17f      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x5c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x5c>
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e174      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x6e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e16d      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b04      	cmp	r3, #4
 8003514:	d003      	beq.n	800351e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2205      	movs	r2, #5
 800351a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	887a      	ldrh	r2, [r7, #2]
 800352e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355e:	2b40      	cmp	r3, #64	@ 0x40
 8003560:	d007      	beq.n	8003572 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800357a:	d17e      	bne.n	800367a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_SPI_TransmitReceive+0xf6>
 8003584:	8afb      	ldrh	r3, [r7, #22]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d16c      	bne.n	8003664 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ae:	e059      	b.n	8003664 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d11b      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x162>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d016      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0x162>
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d113      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d119      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x1a4>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d014      	beq.n	8003638 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	b292      	uxth	r2, r2
 800361a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003634:	2301      	movs	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003638:	f7fd ff82 	bl	8001540 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003644:	429a      	cmp	r2, r3
 8003646:	d80d      	bhi.n	8003664 <HAL_SPI_TransmitReceive+0x1d0>
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d009      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0bc      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1a0      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x11c>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d19b      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x11c>
 8003678:	e082      	b.n	8003780 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x1f4>
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d171      	bne.n	800376c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ae:	e05d      	b.n	800376c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d11c      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x264>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x264>
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d114      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d119      	bne.n	800373a <HAL_SPI_TransmitReceive+0x2a6>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d014      	beq.n	800373a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800373a:	f7fd ff01 	bl	8001540 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_TransmitReceive+0x2be>
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d102      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x2c4>
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e038      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d19c      	bne.n	80036b0 <HAL_SPI_TransmitReceive+0x21c>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d197      	bne.n	80036b0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f92b 	bl	80039e0 <SPI_EndRxTxTransaction>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e01d      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	@ 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037f4:	b2db      	uxtb	r3, r3
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003814:	f7fd fe94 	bl	8001540 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	4413      	add	r3, r2
 8003822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003824:	f7fd fe8c 	bl	8001540 <HAL_GetTick>
 8003828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382a:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	0d1b      	lsrs	r3, r3, #20
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383a:	e054      	b.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d050      	beq.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003844:	f7fd fe7c 	bl	8001540 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	429a      	cmp	r2, r3
 8003852:	d902      	bls.n	800385a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13d      	bne.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003872:	d111      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800387c:	d004      	beq.n	8003888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d107      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a0:	d10f      	bne.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e017      	b.n	8003906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	bf0c      	ite	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	2300      	movne	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	429a      	cmp	r2, r3
 8003902:	d19b      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000000 	.word	0x20000000

08003914 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003928:	d111      	bne.n	800394e <SPI_EndRxTransaction+0x3a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003932:	d004      	beq.n	800393e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393c:	d107      	bne.n	800394e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003956:	d12a      	bne.n	80039ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003960:	d012      	beq.n	8003988 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	@ 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff ff49 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02d      	beq.n	80039d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e026      	b.n	80039d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2200      	movs	r2, #0
 8003990:	2101      	movs	r1, #1
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff ff36 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01a      	beq.n	80039d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e013      	b.n	80039d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2200      	movs	r2, #0
 80039b6:	2101      	movs	r1, #1
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff ff23 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e000      	b.n	80039d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2201      	movs	r2, #1
 80039f4:	2102      	movs	r1, #2
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff ff04 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e032      	b.n	8003a78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a12:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <SPI_EndRxTxTransaction+0xa0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1b      	ldr	r2, [pc, #108]	@ (8003a84 <SPI_EndRxTxTransaction+0xa4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	0d5b      	lsrs	r3, r3, #21
 8003a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a30:	d112      	bne.n	8003a58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2180      	movs	r1, #128	@ 0x80
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fee1 	bl	8003804 <SPI_WaitFlagStateUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d016      	beq.n	8003a76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e00f      	b.n	8003a78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6e:	2b80      	cmp	r3, #128	@ 0x80
 8003a70:	d0f2      	beq.n	8003a58 <SPI_EndRxTxTransaction+0x78>
 8003a72:	e000      	b.n	8003a76 <SPI_EndRxTxTransaction+0x96>
        break;
 8003a74:	bf00      	nop
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000000 	.word	0x20000000
 8003a84:	165e9f81 	.word	0x165e9f81

08003a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e041      	b.n	8003b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fc00 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f000 f950 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d001      	beq.n	8003b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e03c      	b.n	8003bba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc8 <HAL_TIM_Base_Start+0xa0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d018      	beq.n	8003b84 <HAL_TIM_Base_Start+0x5c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d013      	beq.n	8003b84 <HAL_TIM_Base_Start+0x5c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1a      	ldr	r2, [pc, #104]	@ (8003bcc <HAL_TIM_Base_Start+0xa4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIM_Base_Start+0x5c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a19      	ldr	r2, [pc, #100]	@ (8003bd0 <HAL_TIM_Base_Start+0xa8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIM_Base_Start+0x5c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <HAL_TIM_Base_Start+0xac>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIM_Base_Start+0x5c>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <HAL_TIM_Base_Start+0xb0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d111      	bne.n	8003ba8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d010      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	e007      	b.n	8003bb8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40014000 	.word	0x40014000

08003bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0b4      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x186>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c30:	d03e      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c36:	f200 8087 	bhi.w	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_TIM_ConfigClockSource+0x172>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c46:	d87f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b70      	cmp	r3, #112	@ 0x70
 8003c4a:	d01a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xa6>
 8003c4c:	2b70      	cmp	r3, #112	@ 0x70
 8003c4e:	d87b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b60      	cmp	r3, #96	@ 0x60
 8003c52:	d050      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c54:	2b60      	cmp	r3, #96	@ 0x60
 8003c56:	d877      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b50      	cmp	r3, #80	@ 0x50
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c5c:	2b50      	cmp	r3, #80	@ 0x50
 8003c5e:	d873      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d058      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x13a>
 8003c64:	2b40      	cmp	r3, #64	@ 0x40
 8003c66:	d86f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b30      	cmp	r3, #48	@ 0x30
 8003c6a:	d064      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b30      	cmp	r3, #48	@ 0x30
 8003c6e:	d86b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d060      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d867      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d05a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15a>
 8003c80:	e062      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c92:	f000 f971 	bl	8003f78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
      break;
 8003cae:	e04f      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc0:	f000 f95a 	bl	8003f78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cd2:	609a      	str	r2, [r3, #8]
      break;
 8003cd4:	e03c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 f8ce 	bl	8003e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2150      	movs	r1, #80	@ 0x50
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f927 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e02c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 f8ed 	bl	8003ee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2160      	movs	r1, #96	@ 0x60
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f917 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003d14:	e01c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 f8ae 	bl	8003e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2140      	movs	r1, #64	@ 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f907 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f000 f8fe 	bl	8003f42 <TIM_ITRx_SetConfig>
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e68 <TIM_Base_SetConfig+0xfc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00f      	beq.n	8003da4 <TIM_Base_SetConfig+0x38>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8a:	d00b      	beq.n	8003da4 <TIM_Base_SetConfig+0x38>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a37      	ldr	r2, [pc, #220]	@ (8003e6c <TIM_Base_SetConfig+0x100>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <TIM_Base_SetConfig+0x38>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a36      	ldr	r2, [pc, #216]	@ (8003e70 <TIM_Base_SetConfig+0x104>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_Base_SetConfig+0x38>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a35      	ldr	r2, [pc, #212]	@ (8003e74 <TIM_Base_SetConfig+0x108>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d108      	bne.n	8003db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e68 <TIM_Base_SetConfig+0xfc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01b      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc4:	d017      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <TIM_Base_SetConfig+0x100>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <TIM_Base_SetConfig+0x104>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <TIM_Base_SetConfig+0x108>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a25      	ldr	r2, [pc, #148]	@ (8003e78 <TIM_Base_SetConfig+0x10c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a24      	ldr	r2, [pc, #144]	@ (8003e7c <TIM_Base_SetConfig+0x110>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a23      	ldr	r2, [pc, #140]	@ (8003e80 <TIM_Base_SetConfig+0x114>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d108      	bne.n	8003e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e68 <TIM_Base_SetConfig+0xfc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d103      	bne.n	8003e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 030a 	bic.w	r3, r3, #10
 8003ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b087      	sub	sp, #28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 0210 	bic.w	r2, r3, #16
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	031b      	lsls	r3, r3, #12
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f043 0307 	orr.w	r3, r3, #7
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	021a      	lsls	r2, r3, #8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e050      	b.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1c      	ldr	r2, [pc, #112]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401c:	d013      	beq.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a18      	ldr	r2, [pc, #96]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a16      	ldr	r2, [pc, #88]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a15      	ldr	r2, [pc, #84]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10c      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800404c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	4313      	orrs	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40000c00 	.word	0x40000c00
 8004090:	40014000 	.word	0x40014000

08004094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd f91c 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	@ 0x24
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f82b 	bl	8004134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800410c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004138:	b0c0      	sub	sp, #256	@ 0x100
 800413a:	af00      	add	r7, sp, #0
 800413c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	68d9      	ldr	r1, [r3, #12]
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	ea40 0301 	orr.w	r3, r0, r1
 800415c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	431a      	orrs	r2, r3
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	431a      	orrs	r2, r3
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800418c:	f021 010c 	bic.w	r1, r1, #12
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800419a:	430b      	orrs	r3, r1
 800419c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	6999      	ldr	r1, [r3, #24]
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	ea40 0301 	orr.w	r3, r0, r1
 80041ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004400 <UART_SetConfig+0x2cc>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d005      	beq.n	80041d4 <UART_SetConfig+0xa0>
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004404 <UART_SetConfig+0x2d0>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d104      	bne.n	80041de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d4:	f7fe fe64 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 80041d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041dc:	e003      	b.n	80041e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041de:	f7fe fe4b 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 80041e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f0:	f040 810c 	bne.w	800440c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f8:	2200      	movs	r2, #0
 80041fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	1891      	adds	r1, r2, r2
 800420c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800420e:	415b      	adcs	r3, r3
 8004210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004216:	4621      	mov	r1, r4
 8004218:	eb12 0801 	adds.w	r8, r2, r1
 800421c:	4629      	mov	r1, r5
 800421e:	eb43 0901 	adc.w	r9, r3, r1
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004236:	4690      	mov	r8, r2
 8004238:	4699      	mov	r9, r3
 800423a:	4623      	mov	r3, r4
 800423c:	eb18 0303 	adds.w	r3, r8, r3
 8004240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004244:	462b      	mov	r3, r5
 8004246:	eb49 0303 	adc.w	r3, r9, r3
 800424a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800425a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800425e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004262:	460b      	mov	r3, r1
 8004264:	18db      	adds	r3, r3, r3
 8004266:	653b      	str	r3, [r7, #80]	@ 0x50
 8004268:	4613      	mov	r3, r2
 800426a:	eb42 0303 	adc.w	r3, r2, r3
 800426e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004278:	f7fb ffac 	bl	80001d4 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4b61      	ldr	r3, [pc, #388]	@ (8004408 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	011c      	lsls	r4, r3, #4
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004294:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042a4:	415b      	adcs	r3, r3
 80042a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042ac:	4641      	mov	r1, r8
 80042ae:	eb12 0a01 	adds.w	sl, r2, r1
 80042b2:	4649      	mov	r1, r9
 80042b4:	eb43 0b01 	adc.w	fp, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042cc:	4692      	mov	sl, r2
 80042ce:	469b      	mov	fp, r3
 80042d0:	4643      	mov	r3, r8
 80042d2:	eb1a 0303 	adds.w	r3, sl, r3
 80042d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042da:	464b      	mov	r3, r9
 80042dc:	eb4b 0303 	adc.w	r3, fp, r3
 80042e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042f8:	460b      	mov	r3, r1
 80042fa:	18db      	adds	r3, r3, r3
 80042fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042fe:	4613      	mov	r3, r2
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	647b      	str	r3, [r7, #68]	@ 0x44
 8004306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800430a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800430e:	f7fb ff61 	bl	80001d4 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4611      	mov	r1, r2
 8004318:	4b3b      	ldr	r3, [pc, #236]	@ (8004408 <UART_SetConfig+0x2d4>)
 800431a:	fba3 2301 	umull	r2, r3, r3, r1
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2264      	movs	r2, #100	@ 0x64
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	1acb      	subs	r3, r1, r3
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800432e:	4b36      	ldr	r3, [pc, #216]	@ (8004408 <UART_SetConfig+0x2d4>)
 8004330:	fba3 2302 	umull	r2, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800433c:	441c      	add	r4, r3
 800433e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004348:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800434c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	1891      	adds	r1, r2, r2
 8004356:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004358:	415b      	adcs	r3, r3
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800435c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004360:	4641      	mov	r1, r8
 8004362:	1851      	adds	r1, r2, r1
 8004364:	6339      	str	r1, [r7, #48]	@ 0x30
 8004366:	4649      	mov	r1, r9
 8004368:	414b      	adcs	r3, r1
 800436a:	637b      	str	r3, [r7, #52]	@ 0x34
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004378:	4659      	mov	r1, fp
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4651      	mov	r1, sl
 800437e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004382:	4651      	mov	r1, sl
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4642      	mov	r2, r8
 800438e:	189b      	adds	r3, r3, r2
 8004390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004394:	464b      	mov	r3, r9
 8004396:	460a      	mov	r2, r1
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043b4:	460b      	mov	r3, r1
 80043b6:	18db      	adds	r3, r3, r3
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ba:	4613      	mov	r3, r2
 80043bc:	eb42 0303 	adc.w	r3, r2, r3
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043ca:	f7fb ff03 	bl	80001d4 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <UART_SetConfig+0x2d4>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	@ 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	3332      	adds	r3, #50	@ 0x32
 80043e6:	4a08      	ldr	r2, [pc, #32]	@ (8004408 <UART_SetConfig+0x2d4>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 0207 	and.w	r2, r3, #7
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4422      	add	r2, r4
 80043fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043fc:	e106      	b.n	800460c <UART_SetConfig+0x4d8>
 80043fe:	bf00      	nop
 8004400:	40011000 	.word	0x40011000
 8004404:	40011400 	.word	0x40011400
 8004408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004416:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800441a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800441e:	4642      	mov	r2, r8
 8004420:	464b      	mov	r3, r9
 8004422:	1891      	adds	r1, r2, r2
 8004424:	6239      	str	r1, [r7, #32]
 8004426:	415b      	adcs	r3, r3
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
 800442a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800442e:	4641      	mov	r1, r8
 8004430:	1854      	adds	r4, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0501 	adc.w	r5, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	00eb      	lsls	r3, r5, #3
 8004442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004446:	00e2      	lsls	r2, r4, #3
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	4643      	mov	r3, r8
 800444e:	18e3      	adds	r3, r4, r3
 8004450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004454:	464b      	mov	r3, r9
 8004456:	eb45 0303 	adc.w	r3, r5, r3
 800445a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800446a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800447a:	4629      	mov	r1, r5
 800447c:	008b      	lsls	r3, r1, #2
 800447e:	4621      	mov	r1, r4
 8004480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004484:	4621      	mov	r1, r4
 8004486:	008a      	lsls	r2, r1, #2
 8004488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800448c:	f7fb fea2 	bl	80001d4 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4b60      	ldr	r3, [pc, #384]	@ (8004618 <UART_SetConfig+0x4e4>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011c      	lsls	r4, r3, #4
 800449e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	61b9      	str	r1, [r7, #24]
 80044b8:	415b      	adcs	r3, r3
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c0:	4641      	mov	r1, r8
 80044c2:	1851      	adds	r1, r2, r1
 80044c4:	6139      	str	r1, [r7, #16]
 80044c6:	4649      	mov	r1, r9
 80044c8:	414b      	adcs	r3, r1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d8:	4659      	mov	r1, fp
 80044da:	00cb      	lsls	r3, r1, #3
 80044dc:	4651      	mov	r1, sl
 80044de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e2:	4651      	mov	r1, sl
 80044e4:	00ca      	lsls	r2, r1, #3
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	4642      	mov	r2, r8
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044f4:	464b      	mov	r3, r9
 80044f6:	460a      	mov	r2, r1
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800450a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004518:	4649      	mov	r1, r9
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	4641      	mov	r1, r8
 800451e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004522:	4641      	mov	r1, r8
 8004524:	008a      	lsls	r2, r1, #2
 8004526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800452a:	f7fb fe53 	bl	80001d4 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4611      	mov	r1, r2
 8004534:	4b38      	ldr	r3, [pc, #224]	@ (8004618 <UART_SetConfig+0x4e4>)
 8004536:	fba3 2301 	umull	r2, r3, r3, r1
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2264      	movs	r2, #100	@ 0x64
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	1acb      	subs	r3, r1, r3
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	3332      	adds	r3, #50	@ 0x32
 8004548:	4a33      	ldr	r2, [pc, #204]	@ (8004618 <UART_SetConfig+0x4e4>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004554:	441c      	add	r4, r3
 8004556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455a:	2200      	movs	r2, #0
 800455c:	673b      	str	r3, [r7, #112]	@ 0x70
 800455e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004560:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	1891      	adds	r1, r2, r2
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	415b      	adcs	r3, r3
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004574:	4641      	mov	r1, r8
 8004576:	1851      	adds	r1, r2, r1
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	4649      	mov	r1, r9
 800457c:	414b      	adcs	r3, r1
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800458c:	4659      	mov	r1, fp
 800458e:	00cb      	lsls	r3, r1, #3
 8004590:	4651      	mov	r1, sl
 8004592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004596:	4651      	mov	r1, sl
 8004598:	00ca      	lsls	r2, r1, #3
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	4642      	mov	r2, r8
 80045a2:	189b      	adds	r3, r3, r2
 80045a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045a6:	464b      	mov	r3, r9
 80045a8:	460a      	mov	r2, r1
 80045aa:	eb42 0303 	adc.w	r3, r2, r3
 80045ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045c8:	4649      	mov	r1, r9
 80045ca:	008b      	lsls	r3, r1, #2
 80045cc:	4641      	mov	r1, r8
 80045ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d2:	4641      	mov	r1, r8
 80045d4:	008a      	lsls	r2, r1, #2
 80045d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045da:	f7fb fdfb 	bl	80001d4 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004618 <UART_SetConfig+0x4e4>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2164      	movs	r1, #100	@ 0x64
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	3332      	adds	r3, #50	@ 0x32
 80045f6:	4a08      	ldr	r2, [pc, #32]	@ (8004618 <UART_SetConfig+0x4e4>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4422      	add	r2, r4
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004612:	46bd      	mov	sp, r7
 8004614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004618:	51eb851f 	.word	0x51eb851f

0800461c <memset>:
 800461c:	4402      	add	r2, r0
 800461e:	4603      	mov	r3, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <__libc_init_array>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4d0d      	ldr	r5, [pc, #52]	@ (8004664 <__libc_init_array+0x38>)
 8004630:	4c0d      	ldr	r4, [pc, #52]	@ (8004668 <__libc_init_array+0x3c>)
 8004632:	1b64      	subs	r4, r4, r5
 8004634:	10a4      	asrs	r4, r4, #2
 8004636:	2600      	movs	r6, #0
 8004638:	42a6      	cmp	r6, r4
 800463a:	d109      	bne.n	8004650 <__libc_init_array+0x24>
 800463c:	4d0b      	ldr	r5, [pc, #44]	@ (800466c <__libc_init_array+0x40>)
 800463e:	4c0c      	ldr	r4, [pc, #48]	@ (8004670 <__libc_init_array+0x44>)
 8004640:	f000 f818 	bl	8004674 <_init>
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	2600      	movs	r6, #0
 800464a:	42a6      	cmp	r6, r4
 800464c:	d105      	bne.n	800465a <__libc_init_array+0x2e>
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	f855 3b04 	ldr.w	r3, [r5], #4
 8004654:	4798      	blx	r3
 8004656:	3601      	adds	r6, #1
 8004658:	e7ee      	b.n	8004638 <__libc_init_array+0xc>
 800465a:	f855 3b04 	ldr.w	r3, [r5], #4
 800465e:	4798      	blx	r3
 8004660:	3601      	adds	r6, #1
 8004662:	e7f2      	b.n	800464a <__libc_init_array+0x1e>
 8004664:	080046b4 	.word	0x080046b4
 8004668:	080046b4 	.word	0x080046b4
 800466c:	080046b4 	.word	0x080046b4
 8004670:	080046b8 	.word	0x080046b8

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
